// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: callbacks_writer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_callbacks_5fwriter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_callbacks_5fwriter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_callbacks_5fwriter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_callbacks_5fwriter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace stan {
class WriterMessage;
class WriterMessageDefaultTypeInternal;
extern WriterMessageDefaultTypeInternal _WriterMessage_default_instance_;
class WriterMessage_DoubleList;
class WriterMessage_DoubleListDefaultTypeInternal;
extern WriterMessage_DoubleListDefaultTypeInternal _WriterMessage_DoubleList_default_instance_;
class WriterMessage_Feature;
class WriterMessage_FeatureDefaultTypeInternal;
extern WriterMessage_FeatureDefaultTypeInternal _WriterMessage_Feature_default_instance_;
class WriterMessage_IntList;
class WriterMessage_IntListDefaultTypeInternal;
extern WriterMessage_IntListDefaultTypeInternal _WriterMessage_IntList_default_instance_;
class WriterMessage_StringList;
class WriterMessage_StringListDefaultTypeInternal;
extern WriterMessage_StringListDefaultTypeInternal _WriterMessage_StringList_default_instance_;
}  // namespace stan
PROTOBUF_NAMESPACE_OPEN
template<> ::stan::WriterMessage* Arena::CreateMaybeMessage<::stan::WriterMessage>(Arena*);
template<> ::stan::WriterMessage_DoubleList* Arena::CreateMaybeMessage<::stan::WriterMessage_DoubleList>(Arena*);
template<> ::stan::WriterMessage_Feature* Arena::CreateMaybeMessage<::stan::WriterMessage_Feature>(Arena*);
template<> ::stan::WriterMessage_IntList* Arena::CreateMaybeMessage<::stan::WriterMessage_IntList>(Arena*);
template<> ::stan::WriterMessage_StringList* Arena::CreateMaybeMessage<::stan::WriterMessage_StringList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace stan {

enum WriterMessage_Topic : int {
  WriterMessage_Topic_UNKNOWN = 0,
  WriterMessage_Topic_LOGGER = 1,
  WriterMessage_Topic_INITIALIZATION = 2,
  WriterMessage_Topic_SAMPLE = 3,
  WriterMessage_Topic_DIAGNOSTIC = 4,
  WriterMessage_Topic_WriterMessage_Topic_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WriterMessage_Topic_WriterMessage_Topic_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WriterMessage_Topic_IsValid(int value);
constexpr WriterMessage_Topic WriterMessage_Topic_Topic_MIN = WriterMessage_Topic_UNKNOWN;
constexpr WriterMessage_Topic WriterMessage_Topic_Topic_MAX = WriterMessage_Topic_DIAGNOSTIC;
constexpr int WriterMessage_Topic_Topic_ARRAYSIZE = WriterMessage_Topic_Topic_MAX + 1;

const std::string& WriterMessage_Topic_Name(WriterMessage_Topic value);
template<typename T>
inline const std::string& WriterMessage_Topic_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WriterMessage_Topic>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WriterMessage_Topic_Name.");
  return WriterMessage_Topic_Name(static_cast<WriterMessage_Topic>(enum_t_value));
}
bool WriterMessage_Topic_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WriterMessage_Topic* value);
// ===================================================================

class WriterMessage_StringList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:stan.WriterMessage.StringList) */ {
 public:
  inline WriterMessage_StringList() : WriterMessage_StringList(nullptr) {}
  virtual ~WriterMessage_StringList();

  WriterMessage_StringList(const WriterMessage_StringList& from);
  WriterMessage_StringList(WriterMessage_StringList&& from) noexcept
    : WriterMessage_StringList() {
    *this = ::std::move(from);
  }

  inline WriterMessage_StringList& operator=(const WriterMessage_StringList& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriterMessage_StringList& operator=(WriterMessage_StringList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const WriterMessage_StringList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriterMessage_StringList* internal_default_instance() {
    return reinterpret_cast<const WriterMessage_StringList*>(
               &_WriterMessage_StringList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WriterMessage_StringList& a, WriterMessage_StringList& b) {
    a.Swap(&b);
  }
  inline void Swap(WriterMessage_StringList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriterMessage_StringList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriterMessage_StringList* New() const final {
    return CreateMaybeMessage<WriterMessage_StringList>(nullptr);
  }

  WriterMessage_StringList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriterMessage_StringList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WriterMessage_StringList& from);
  void MergeFrom(const WriterMessage_StringList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriterMessage_StringList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stan.WriterMessage.StringList";
  }
  protected:
  explicit WriterMessage_StringList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated string value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value();
  private:
  const std::string& _internal_value(int index) const;
  std::string* _internal_add_value();
  public:

  // @@protoc_insertion_point(class_scope:stan.WriterMessage.StringList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_callbacks_5fwriter_2eproto;
};
// -------------------------------------------------------------------

class WriterMessage_DoubleList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:stan.WriterMessage.DoubleList) */ {
 public:
  inline WriterMessage_DoubleList() : WriterMessage_DoubleList(nullptr) {}
  virtual ~WriterMessage_DoubleList();

  WriterMessage_DoubleList(const WriterMessage_DoubleList& from);
  WriterMessage_DoubleList(WriterMessage_DoubleList&& from) noexcept
    : WriterMessage_DoubleList() {
    *this = ::std::move(from);
  }

  inline WriterMessage_DoubleList& operator=(const WriterMessage_DoubleList& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriterMessage_DoubleList& operator=(WriterMessage_DoubleList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const WriterMessage_DoubleList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriterMessage_DoubleList* internal_default_instance() {
    return reinterpret_cast<const WriterMessage_DoubleList*>(
               &_WriterMessage_DoubleList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WriterMessage_DoubleList& a, WriterMessage_DoubleList& b) {
    a.Swap(&b);
  }
  inline void Swap(WriterMessage_DoubleList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriterMessage_DoubleList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriterMessage_DoubleList* New() const final {
    return CreateMaybeMessage<WriterMessage_DoubleList>(nullptr);
  }

  WriterMessage_DoubleList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriterMessage_DoubleList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WriterMessage_DoubleList& from);
  void MergeFrom(const WriterMessage_DoubleList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriterMessage_DoubleList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stan.WriterMessage.DoubleList";
  }
  protected:
  explicit WriterMessage_DoubleList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated double value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  double _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_value() const;
  void _internal_add_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_value();
  public:
  double value(int index) const;
  void set_value(int index, double value);
  void add_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:stan.WriterMessage.DoubleList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_callbacks_5fwriter_2eproto;
};
// -------------------------------------------------------------------

class WriterMessage_IntList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:stan.WriterMessage.IntList) */ {
 public:
  inline WriterMessage_IntList() : WriterMessage_IntList(nullptr) {}
  virtual ~WriterMessage_IntList();

  WriterMessage_IntList(const WriterMessage_IntList& from);
  WriterMessage_IntList(WriterMessage_IntList&& from) noexcept
    : WriterMessage_IntList() {
    *this = ::std::move(from);
  }

  inline WriterMessage_IntList& operator=(const WriterMessage_IntList& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriterMessage_IntList& operator=(WriterMessage_IntList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const WriterMessage_IntList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriterMessage_IntList* internal_default_instance() {
    return reinterpret_cast<const WriterMessage_IntList*>(
               &_WriterMessage_IntList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WriterMessage_IntList& a, WriterMessage_IntList& b) {
    a.Swap(&b);
  }
  inline void Swap(WriterMessage_IntList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriterMessage_IntList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriterMessage_IntList* New() const final {
    return CreateMaybeMessage<WriterMessage_IntList>(nullptr);
  }

  WriterMessage_IntList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriterMessage_IntList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WriterMessage_IntList& from);
  void MergeFrom(const WriterMessage_IntList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriterMessage_IntList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stan.WriterMessage.IntList";
  }
  protected:
  explicit WriterMessage_IntList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated int64 value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_value() const;
  void _internal_add_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_value();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 value(int index) const;
  void set_value(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:stan.WriterMessage.IntList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_callbacks_5fwriter_2eproto;
};
// -------------------------------------------------------------------

class WriterMessage_Feature PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:stan.WriterMessage.Feature) */ {
 public:
  inline WriterMessage_Feature() : WriterMessage_Feature(nullptr) {}
  virtual ~WriterMessage_Feature();

  WriterMessage_Feature(const WriterMessage_Feature& from);
  WriterMessage_Feature(WriterMessage_Feature&& from) noexcept
    : WriterMessage_Feature() {
    *this = ::std::move(from);
  }

  inline WriterMessage_Feature& operator=(const WriterMessage_Feature& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriterMessage_Feature& operator=(WriterMessage_Feature&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const WriterMessage_Feature& default_instance();

  enum KindCase {
    kStringList = 2,
    kDoubleList = 3,
    kIntList = 4,
    KIND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriterMessage_Feature* internal_default_instance() {
    return reinterpret_cast<const WriterMessage_Feature*>(
               &_WriterMessage_Feature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WriterMessage_Feature& a, WriterMessage_Feature& b) {
    a.Swap(&b);
  }
  inline void Swap(WriterMessage_Feature* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriterMessage_Feature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriterMessage_Feature* New() const final {
    return CreateMaybeMessage<WriterMessage_Feature>(nullptr);
  }

  WriterMessage_Feature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriterMessage_Feature>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WriterMessage_Feature& from);
  void MergeFrom(const WriterMessage_Feature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriterMessage_Feature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stan.WriterMessage.Feature";
  }
  protected:
  explicit WriterMessage_Feature(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStringListFieldNumber = 2,
    kDoubleListFieldNumber = 3,
    kIntListFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .stan.WriterMessage.StringList string_list = 2;
  bool has_string_list() const;
  private:
  bool _internal_has_string_list() const;
  public:
  void clear_string_list();
  const ::stan::WriterMessage_StringList& string_list() const;
  ::stan::WriterMessage_StringList* release_string_list();
  ::stan::WriterMessage_StringList* mutable_string_list();
  void set_allocated_string_list(::stan::WriterMessage_StringList* string_list);
  private:
  const ::stan::WriterMessage_StringList& _internal_string_list() const;
  ::stan::WriterMessage_StringList* _internal_mutable_string_list();
  public:
  void unsafe_arena_set_allocated_string_list(
      ::stan::WriterMessage_StringList* string_list);
  ::stan::WriterMessage_StringList* unsafe_arena_release_string_list();

  // .stan.WriterMessage.DoubleList double_list = 3;
  bool has_double_list() const;
  private:
  bool _internal_has_double_list() const;
  public:
  void clear_double_list();
  const ::stan::WriterMessage_DoubleList& double_list() const;
  ::stan::WriterMessage_DoubleList* release_double_list();
  ::stan::WriterMessage_DoubleList* mutable_double_list();
  void set_allocated_double_list(::stan::WriterMessage_DoubleList* double_list);
  private:
  const ::stan::WriterMessage_DoubleList& _internal_double_list() const;
  ::stan::WriterMessage_DoubleList* _internal_mutable_double_list();
  public:
  void unsafe_arena_set_allocated_double_list(
      ::stan::WriterMessage_DoubleList* double_list);
  ::stan::WriterMessage_DoubleList* unsafe_arena_release_double_list();

  // .stan.WriterMessage.IntList int_list = 4;
  bool has_int_list() const;
  private:
  bool _internal_has_int_list() const;
  public:
  void clear_int_list();
  const ::stan::WriterMessage_IntList& int_list() const;
  ::stan::WriterMessage_IntList* release_int_list();
  ::stan::WriterMessage_IntList* mutable_int_list();
  void set_allocated_int_list(::stan::WriterMessage_IntList* int_list);
  private:
  const ::stan::WriterMessage_IntList& _internal_int_list() const;
  ::stan::WriterMessage_IntList* _internal_mutable_int_list();
  public:
  void unsafe_arena_set_allocated_int_list(
      ::stan::WriterMessage_IntList* int_list);
  ::stan::WriterMessage_IntList* unsafe_arena_release_int_list();

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:stan.WriterMessage.Feature)
 private:
  class _Internal;
  void set_has_string_list();
  void set_has_double_list();
  void set_has_int_list();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  union KindUnion {
    KindUnion() {}
    ::stan::WriterMessage_StringList* string_list_;
    ::stan::WriterMessage_DoubleList* double_list_;
    ::stan::WriterMessage_IntList* int_list_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_callbacks_5fwriter_2eproto;
};
// -------------------------------------------------------------------

class WriterMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:stan.WriterMessage) */ {
 public:
  inline WriterMessage() : WriterMessage(nullptr) {}
  virtual ~WriterMessage();

  WriterMessage(const WriterMessage& from);
  WriterMessage(WriterMessage&& from) noexcept
    : WriterMessage() {
    *this = ::std::move(from);
  }

  inline WriterMessage& operator=(const WriterMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriterMessage& operator=(WriterMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const WriterMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriterMessage* internal_default_instance() {
    return reinterpret_cast<const WriterMessage*>(
               &_WriterMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WriterMessage& a, WriterMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(WriterMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriterMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriterMessage* New() const final {
    return CreateMaybeMessage<WriterMessage>(nullptr);
  }

  WriterMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriterMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WriterMessage& from);
  void MergeFrom(const WriterMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriterMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stan.WriterMessage";
  }
  protected:
  explicit WriterMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef WriterMessage_StringList StringList;
  typedef WriterMessage_DoubleList DoubleList;
  typedef WriterMessage_IntList IntList;
  typedef WriterMessage_Feature Feature;

  typedef WriterMessage_Topic Topic;
  static constexpr Topic UNKNOWN =
    WriterMessage_Topic_UNKNOWN;
  static constexpr Topic LOGGER =
    WriterMessage_Topic_LOGGER;
  static constexpr Topic INITIALIZATION =
    WriterMessage_Topic_INITIALIZATION;
  static constexpr Topic SAMPLE =
    WriterMessage_Topic_SAMPLE;
  static constexpr Topic DIAGNOSTIC =
    WriterMessage_Topic_DIAGNOSTIC;
  static inline bool Topic_IsValid(int value) {
    return WriterMessage_Topic_IsValid(value);
  }
  static constexpr Topic Topic_MIN =
    WriterMessage_Topic_Topic_MIN;
  static constexpr Topic Topic_MAX =
    WriterMessage_Topic_Topic_MAX;
  static constexpr int Topic_ARRAYSIZE =
    WriterMessage_Topic_Topic_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Topic_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Topic>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Topic_Name.");
    return WriterMessage_Topic_Name(enum_t_value);
  }
  static inline bool Topic_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Topic* value) {
    return WriterMessage_Topic_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureFieldNumber = 2,
    kTopicFieldNumber = 1,
  };
  // repeated .stan.WriterMessage.Feature feature = 2;
  int feature_size() const;
  private:
  int _internal_feature_size() const;
  public:
  void clear_feature();
  ::stan::WriterMessage_Feature* mutable_feature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stan::WriterMessage_Feature >*
      mutable_feature();
  private:
  const ::stan::WriterMessage_Feature& _internal_feature(int index) const;
  ::stan::WriterMessage_Feature* _internal_add_feature();
  public:
  const ::stan::WriterMessage_Feature& feature(int index) const;
  ::stan::WriterMessage_Feature* add_feature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stan::WriterMessage_Feature >&
      feature() const;

  // .stan.WriterMessage.Topic topic = 1;
  void clear_topic();
  ::stan::WriterMessage_Topic topic() const;
  void set_topic(::stan::WriterMessage_Topic value);
  private:
  ::stan::WriterMessage_Topic _internal_topic() const;
  void _internal_set_topic(::stan::WriterMessage_Topic value);
  public:

  // @@protoc_insertion_point(class_scope:stan.WriterMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stan::WriterMessage_Feature > feature_;
  int topic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_callbacks_5fwriter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WriterMessage_StringList

// repeated string value = 1;
inline int WriterMessage_StringList::_internal_value_size() const {
  return value_.size();
}
inline int WriterMessage_StringList::value_size() const {
  return _internal_value_size();
}
inline void WriterMessage_StringList::clear_value() {
  value_.Clear();
}
inline std::string* WriterMessage_StringList::add_value() {
  // @@protoc_insertion_point(field_add_mutable:stan.WriterMessage.StringList.value)
  return _internal_add_value();
}
inline const std::string& WriterMessage_StringList::_internal_value(int index) const {
  return value_.Get(index);
}
inline const std::string& WriterMessage_StringList::value(int index) const {
  // @@protoc_insertion_point(field_get:stan.WriterMessage.StringList.value)
  return _internal_value(index);
}
inline std::string* WriterMessage_StringList::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:stan.WriterMessage.StringList.value)
  return value_.Mutable(index);
}
inline void WriterMessage_StringList::set_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:stan.WriterMessage.StringList.value)
  value_.Mutable(index)->assign(value);
}
inline void WriterMessage_StringList::set_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:stan.WriterMessage.StringList.value)
  value_.Mutable(index)->assign(std::move(value));
}
inline void WriterMessage_StringList::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:stan.WriterMessage.StringList.value)
}
inline void WriterMessage_StringList::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stan.WriterMessage.StringList.value)
}
inline std::string* WriterMessage_StringList::_internal_add_value() {
  return value_.Add();
}
inline void WriterMessage_StringList::add_value(const std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:stan.WriterMessage.StringList.value)
}
inline void WriterMessage_StringList::add_value(std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:stan.WriterMessage.StringList.value)
}
inline void WriterMessage_StringList::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:stan.WriterMessage.StringList.value)
}
inline void WriterMessage_StringList::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:stan.WriterMessage.StringList.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WriterMessage_StringList::value() const {
  // @@protoc_insertion_point(field_list:stan.WriterMessage.StringList.value)
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WriterMessage_StringList::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:stan.WriterMessage.StringList.value)
  return &value_;
}

// -------------------------------------------------------------------

// WriterMessage_DoubleList

// repeated double value = 1;
inline int WriterMessage_DoubleList::_internal_value_size() const {
  return value_.size();
}
inline int WriterMessage_DoubleList::value_size() const {
  return _internal_value_size();
}
inline void WriterMessage_DoubleList::clear_value() {
  value_.Clear();
}
inline double WriterMessage_DoubleList::_internal_value(int index) const {
  return value_.Get(index);
}
inline double WriterMessage_DoubleList::value(int index) const {
  // @@protoc_insertion_point(field_get:stan.WriterMessage.DoubleList.value)
  return _internal_value(index);
}
inline void WriterMessage_DoubleList::set_value(int index, double value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:stan.WriterMessage.DoubleList.value)
}
inline void WriterMessage_DoubleList::_internal_add_value(double value) {
  value_.Add(value);
}
inline void WriterMessage_DoubleList::add_value(double value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:stan.WriterMessage.DoubleList.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
WriterMessage_DoubleList::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
WriterMessage_DoubleList::value() const {
  // @@protoc_insertion_point(field_list:stan.WriterMessage.DoubleList.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
WriterMessage_DoubleList::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
WriterMessage_DoubleList::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:stan.WriterMessage.DoubleList.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// WriterMessage_IntList

// repeated int64 value = 1;
inline int WriterMessage_IntList::_internal_value_size() const {
  return value_.size();
}
inline int WriterMessage_IntList::value_size() const {
  return _internal_value_size();
}
inline void WriterMessage_IntList::clear_value() {
  value_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriterMessage_IntList::_internal_value(int index) const {
  return value_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriterMessage_IntList::value(int index) const {
  // @@protoc_insertion_point(field_get:stan.WriterMessage.IntList.value)
  return _internal_value(index);
}
inline void WriterMessage_IntList::set_value(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:stan.WriterMessage.IntList.value)
}
inline void WriterMessage_IntList::_internal_add_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  value_.Add(value);
}
inline void WriterMessage_IntList::add_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:stan.WriterMessage.IntList.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
WriterMessage_IntList::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
WriterMessage_IntList::value() const {
  // @@protoc_insertion_point(field_list:stan.WriterMessage.IntList.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
WriterMessage_IntList::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
WriterMessage_IntList::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:stan.WriterMessage.IntList.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// WriterMessage_Feature

// string name = 1;
inline void WriterMessage_Feature::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WriterMessage_Feature::name() const {
  // @@protoc_insertion_point(field_get:stan.WriterMessage.Feature.name)
  return _internal_name();
}
inline void WriterMessage_Feature::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:stan.WriterMessage.Feature.name)
}
inline std::string* WriterMessage_Feature::mutable_name() {
  // @@protoc_insertion_point(field_mutable:stan.WriterMessage.Feature.name)
  return _internal_mutable_name();
}
inline const std::string& WriterMessage_Feature::_internal_name() const {
  return name_.Get();
}
inline void WriterMessage_Feature::_internal_set_name(const std::string& value) {
  
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WriterMessage_Feature::set_name(std::string&& value) {
  
  name_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:stan.WriterMessage.Feature.name)
}
inline void WriterMessage_Feature::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:stan.WriterMessage.Feature.name)
}
inline void WriterMessage_Feature::set_name(const char* value,
    size_t size) {
  
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:stan.WriterMessage.Feature.name)
}
inline std::string* WriterMessage_Feature::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WriterMessage_Feature::release_name() {
  // @@protoc_insertion_point(field_release:stan.WriterMessage.Feature.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriterMessage_Feature::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:stan.WriterMessage.Feature.name)
}

// .stan.WriterMessage.StringList string_list = 2;
inline bool WriterMessage_Feature::_internal_has_string_list() const {
  return kind_case() == kStringList;
}
inline bool WriterMessage_Feature::has_string_list() const {
  return _internal_has_string_list();
}
inline void WriterMessage_Feature::set_has_string_list() {
  _oneof_case_[0] = kStringList;
}
inline void WriterMessage_Feature::clear_string_list() {
  if (_internal_has_string_list()) {
    if (GetArena() == nullptr) {
      delete kind_.string_list_;
    }
    clear_has_kind();
  }
}
inline ::stan::WriterMessage_StringList* WriterMessage_Feature::release_string_list() {
  // @@protoc_insertion_point(field_release:stan.WriterMessage.Feature.string_list)
  if (_internal_has_string_list()) {
    clear_has_kind();
      ::stan::WriterMessage_StringList* temp = kind_.string_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.string_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::stan::WriterMessage_StringList& WriterMessage_Feature::_internal_string_list() const {
  return _internal_has_string_list()
      ? *kind_.string_list_
      : *reinterpret_cast< ::stan::WriterMessage_StringList*>(&::stan::_WriterMessage_StringList_default_instance_);
}
inline const ::stan::WriterMessage_StringList& WriterMessage_Feature::string_list() const {
  // @@protoc_insertion_point(field_get:stan.WriterMessage.Feature.string_list)
  return _internal_string_list();
}
inline ::stan::WriterMessage_StringList* WriterMessage_Feature::unsafe_arena_release_string_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:stan.WriterMessage.Feature.string_list)
  if (_internal_has_string_list()) {
    clear_has_kind();
    ::stan::WriterMessage_StringList* temp = kind_.string_list_;
    kind_.string_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WriterMessage_Feature::unsafe_arena_set_allocated_string_list(::stan::WriterMessage_StringList* string_list) {
  clear_kind();
  if (string_list) {
    set_has_string_list();
    kind_.string_list_ = string_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stan.WriterMessage.Feature.string_list)
}
inline ::stan::WriterMessage_StringList* WriterMessage_Feature::_internal_mutable_string_list() {
  if (!_internal_has_string_list()) {
    clear_kind();
    set_has_string_list();
    kind_.string_list_ = CreateMaybeMessage< ::stan::WriterMessage_StringList >(GetArena());
  }
  return kind_.string_list_;
}
inline ::stan::WriterMessage_StringList* WriterMessage_Feature::mutable_string_list() {
  // @@protoc_insertion_point(field_mutable:stan.WriterMessage.Feature.string_list)
  return _internal_mutable_string_list();
}

// .stan.WriterMessage.DoubleList double_list = 3;
inline bool WriterMessage_Feature::_internal_has_double_list() const {
  return kind_case() == kDoubleList;
}
inline bool WriterMessage_Feature::has_double_list() const {
  return _internal_has_double_list();
}
inline void WriterMessage_Feature::set_has_double_list() {
  _oneof_case_[0] = kDoubleList;
}
inline void WriterMessage_Feature::clear_double_list() {
  if (_internal_has_double_list()) {
    if (GetArena() == nullptr) {
      delete kind_.double_list_;
    }
    clear_has_kind();
  }
}
inline ::stan::WriterMessage_DoubleList* WriterMessage_Feature::release_double_list() {
  // @@protoc_insertion_point(field_release:stan.WriterMessage.Feature.double_list)
  if (_internal_has_double_list()) {
    clear_has_kind();
      ::stan::WriterMessage_DoubleList* temp = kind_.double_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.double_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::stan::WriterMessage_DoubleList& WriterMessage_Feature::_internal_double_list() const {
  return _internal_has_double_list()
      ? *kind_.double_list_
      : *reinterpret_cast< ::stan::WriterMessage_DoubleList*>(&::stan::_WriterMessage_DoubleList_default_instance_);
}
inline const ::stan::WriterMessage_DoubleList& WriterMessage_Feature::double_list() const {
  // @@protoc_insertion_point(field_get:stan.WriterMessage.Feature.double_list)
  return _internal_double_list();
}
inline ::stan::WriterMessage_DoubleList* WriterMessage_Feature::unsafe_arena_release_double_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:stan.WriterMessage.Feature.double_list)
  if (_internal_has_double_list()) {
    clear_has_kind();
    ::stan::WriterMessage_DoubleList* temp = kind_.double_list_;
    kind_.double_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WriterMessage_Feature::unsafe_arena_set_allocated_double_list(::stan::WriterMessage_DoubleList* double_list) {
  clear_kind();
  if (double_list) {
    set_has_double_list();
    kind_.double_list_ = double_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stan.WriterMessage.Feature.double_list)
}
inline ::stan::WriterMessage_DoubleList* WriterMessage_Feature::_internal_mutable_double_list() {
  if (!_internal_has_double_list()) {
    clear_kind();
    set_has_double_list();
    kind_.double_list_ = CreateMaybeMessage< ::stan::WriterMessage_DoubleList >(GetArena());
  }
  return kind_.double_list_;
}
inline ::stan::WriterMessage_DoubleList* WriterMessage_Feature::mutable_double_list() {
  // @@protoc_insertion_point(field_mutable:stan.WriterMessage.Feature.double_list)
  return _internal_mutable_double_list();
}

// .stan.WriterMessage.IntList int_list = 4;
inline bool WriterMessage_Feature::_internal_has_int_list() const {
  return kind_case() == kIntList;
}
inline bool WriterMessage_Feature::has_int_list() const {
  return _internal_has_int_list();
}
inline void WriterMessage_Feature::set_has_int_list() {
  _oneof_case_[0] = kIntList;
}
inline void WriterMessage_Feature::clear_int_list() {
  if (_internal_has_int_list()) {
    if (GetArena() == nullptr) {
      delete kind_.int_list_;
    }
    clear_has_kind();
  }
}
inline ::stan::WriterMessage_IntList* WriterMessage_Feature::release_int_list() {
  // @@protoc_insertion_point(field_release:stan.WriterMessage.Feature.int_list)
  if (_internal_has_int_list()) {
    clear_has_kind();
      ::stan::WriterMessage_IntList* temp = kind_.int_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.int_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::stan::WriterMessage_IntList& WriterMessage_Feature::_internal_int_list() const {
  return _internal_has_int_list()
      ? *kind_.int_list_
      : *reinterpret_cast< ::stan::WriterMessage_IntList*>(&::stan::_WriterMessage_IntList_default_instance_);
}
inline const ::stan::WriterMessage_IntList& WriterMessage_Feature::int_list() const {
  // @@protoc_insertion_point(field_get:stan.WriterMessage.Feature.int_list)
  return _internal_int_list();
}
inline ::stan::WriterMessage_IntList* WriterMessage_Feature::unsafe_arena_release_int_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:stan.WriterMessage.Feature.int_list)
  if (_internal_has_int_list()) {
    clear_has_kind();
    ::stan::WriterMessage_IntList* temp = kind_.int_list_;
    kind_.int_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WriterMessage_Feature::unsafe_arena_set_allocated_int_list(::stan::WriterMessage_IntList* int_list) {
  clear_kind();
  if (int_list) {
    set_has_int_list();
    kind_.int_list_ = int_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stan.WriterMessage.Feature.int_list)
}
inline ::stan::WriterMessage_IntList* WriterMessage_Feature::_internal_mutable_int_list() {
  if (!_internal_has_int_list()) {
    clear_kind();
    set_has_int_list();
    kind_.int_list_ = CreateMaybeMessage< ::stan::WriterMessage_IntList >(GetArena());
  }
  return kind_.int_list_;
}
inline ::stan::WriterMessage_IntList* WriterMessage_Feature::mutable_int_list() {
  // @@protoc_insertion_point(field_mutable:stan.WriterMessage.Feature.int_list)
  return _internal_mutable_int_list();
}

inline bool WriterMessage_Feature::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void WriterMessage_Feature::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline WriterMessage_Feature::KindCase WriterMessage_Feature::kind_case() const {
  return WriterMessage_Feature::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// WriterMessage

// .stan.WriterMessage.Topic topic = 1;
inline void WriterMessage::clear_topic() {
  topic_ = 0;
}
inline ::stan::WriterMessage_Topic WriterMessage::_internal_topic() const {
  return static_cast< ::stan::WriterMessage_Topic >(topic_);
}
inline ::stan::WriterMessage_Topic WriterMessage::topic() const {
  // @@protoc_insertion_point(field_get:stan.WriterMessage.topic)
  return _internal_topic();
}
inline void WriterMessage::_internal_set_topic(::stan::WriterMessage_Topic value) {
  
  topic_ = value;
}
inline void WriterMessage::set_topic(::stan::WriterMessage_Topic value) {
  _internal_set_topic(value);
  // @@protoc_insertion_point(field_set:stan.WriterMessage.topic)
}

// repeated .stan.WriterMessage.Feature feature = 2;
inline int WriterMessage::_internal_feature_size() const {
  return feature_.size();
}
inline int WriterMessage::feature_size() const {
  return _internal_feature_size();
}
inline void WriterMessage::clear_feature() {
  feature_.Clear();
}
inline ::stan::WriterMessage_Feature* WriterMessage::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:stan.WriterMessage.feature)
  return feature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stan::WriterMessage_Feature >*
WriterMessage::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:stan.WriterMessage.feature)
  return &feature_;
}
inline const ::stan::WriterMessage_Feature& WriterMessage::_internal_feature(int index) const {
  return feature_.Get(index);
}
inline const ::stan::WriterMessage_Feature& WriterMessage::feature(int index) const {
  // @@protoc_insertion_point(field_get:stan.WriterMessage.feature)
  return _internal_feature(index);
}
inline ::stan::WriterMessage_Feature* WriterMessage::_internal_add_feature() {
  return feature_.Add();
}
inline ::stan::WriterMessage_Feature* WriterMessage::add_feature() {
  // @@protoc_insertion_point(field_add:stan.WriterMessage.feature)
  return _internal_add_feature();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stan::WriterMessage_Feature >&
WriterMessage::feature() const {
  // @@protoc_insertion_point(field_list:stan.WriterMessage.feature)
  return feature_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace stan

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::stan::WriterMessage_Topic> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_callbacks_5fwriter_2eproto
