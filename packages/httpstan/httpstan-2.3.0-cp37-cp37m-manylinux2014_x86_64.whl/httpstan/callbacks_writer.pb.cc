// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: callbacks_writer.proto

#include "callbacks_writer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_callbacks_5fwriter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriterMessage_DoubleList_callbacks_5fwriter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_callbacks_5fwriter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WriterMessage_Feature_callbacks_5fwriter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_callbacks_5fwriter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriterMessage_IntList_callbacks_5fwriter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_callbacks_5fwriter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriterMessage_StringList_callbacks_5fwriter_2eproto;
namespace stan {
class WriterMessage_StringListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriterMessage_StringList> _instance;
} _WriterMessage_StringList_default_instance_;
class WriterMessage_DoubleListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriterMessage_DoubleList> _instance;
} _WriterMessage_DoubleList_default_instance_;
class WriterMessage_IntListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriterMessage_IntList> _instance;
} _WriterMessage_IntList_default_instance_;
class WriterMessage_FeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriterMessage_Feature> _instance;
  const ::stan::WriterMessage_StringList* string_list_;
  const ::stan::WriterMessage_DoubleList* double_list_;
  const ::stan::WriterMessage_IntList* int_list_;
} _WriterMessage_Feature_default_instance_;
class WriterMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriterMessage> _instance;
} _WriterMessage_default_instance_;
}  // namespace stan
static void InitDefaultsscc_info_WriterMessage_callbacks_5fwriter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stan::_WriterMessage_default_instance_;
    new (ptr) ::stan::WriterMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stan::WriterMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WriterMessage_callbacks_5fwriter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WriterMessage_callbacks_5fwriter_2eproto}, {
      &scc_info_WriterMessage_Feature_callbacks_5fwriter_2eproto.base,}};

static void InitDefaultsscc_info_WriterMessage_DoubleList_callbacks_5fwriter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stan::_WriterMessage_DoubleList_default_instance_;
    new (ptr) ::stan::WriterMessage_DoubleList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stan::WriterMessage_DoubleList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriterMessage_DoubleList_callbacks_5fwriter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WriterMessage_DoubleList_callbacks_5fwriter_2eproto}, {}};

static void InitDefaultsscc_info_WriterMessage_Feature_callbacks_5fwriter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stan::_WriterMessage_Feature_default_instance_;
    new (ptr) ::stan::WriterMessage_Feature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stan::WriterMessage_Feature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WriterMessage_Feature_callbacks_5fwriter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_WriterMessage_Feature_callbacks_5fwriter_2eproto}, {
      &scc_info_WriterMessage_StringList_callbacks_5fwriter_2eproto.base,
      &scc_info_WriterMessage_DoubleList_callbacks_5fwriter_2eproto.base,
      &scc_info_WriterMessage_IntList_callbacks_5fwriter_2eproto.base,}};

static void InitDefaultsscc_info_WriterMessage_IntList_callbacks_5fwriter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stan::_WriterMessage_IntList_default_instance_;
    new (ptr) ::stan::WriterMessage_IntList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stan::WriterMessage_IntList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriterMessage_IntList_callbacks_5fwriter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WriterMessage_IntList_callbacks_5fwriter_2eproto}, {}};

static void InitDefaultsscc_info_WriterMessage_StringList_callbacks_5fwriter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stan::_WriterMessage_StringList_default_instance_;
    new (ptr) ::stan::WriterMessage_StringList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stan::WriterMessage_StringList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriterMessage_StringList_callbacks_5fwriter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WriterMessage_StringList_callbacks_5fwriter_2eproto}, {}};

namespace stan {
bool WriterMessage_Topic_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WriterMessage_Topic_strings[5] = {};

static const char WriterMessage_Topic_names[] =
  "DIAGNOSTIC"
  "INITIALIZATION"
  "LOGGER"
  "SAMPLE"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WriterMessage_Topic_entries[] = {
  { {WriterMessage_Topic_names + 0, 10}, 4 },
  { {WriterMessage_Topic_names + 10, 14}, 2 },
  { {WriterMessage_Topic_names + 24, 6}, 1 },
  { {WriterMessage_Topic_names + 30, 6}, 3 },
  { {WriterMessage_Topic_names + 36, 7}, 0 },
};

static const int WriterMessage_Topic_entries_by_number[] = {
  4, // 0 -> UNKNOWN
  2, // 1 -> LOGGER
  1, // 2 -> INITIALIZATION
  3, // 3 -> SAMPLE
  0, // 4 -> DIAGNOSTIC
};

const std::string& WriterMessage_Topic_Name(
    WriterMessage_Topic value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WriterMessage_Topic_entries,
          WriterMessage_Topic_entries_by_number,
          5, WriterMessage_Topic_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WriterMessage_Topic_entries,
      WriterMessage_Topic_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WriterMessage_Topic_strings[idx].get();
}
bool WriterMessage_Topic_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WriterMessage_Topic* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WriterMessage_Topic_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<WriterMessage_Topic>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WriterMessage_Topic WriterMessage::UNKNOWN;
constexpr WriterMessage_Topic WriterMessage::LOGGER;
constexpr WriterMessage_Topic WriterMessage::INITIALIZATION;
constexpr WriterMessage_Topic WriterMessage::SAMPLE;
constexpr WriterMessage_Topic WriterMessage::DIAGNOSTIC;
constexpr WriterMessage_Topic WriterMessage::Topic_MIN;
constexpr WriterMessage_Topic WriterMessage::Topic_MAX;
constexpr int WriterMessage::Topic_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void WriterMessage_StringList::InitAsDefaultInstance() {
}
class WriterMessage_StringList::_Internal {
 public:
};

WriterMessage_StringList::WriterMessage_StringList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:stan.WriterMessage.StringList)
}
WriterMessage_StringList::WriterMessage_StringList(const WriterMessage_StringList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:stan.WriterMessage.StringList)
}

void WriterMessage_StringList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriterMessage_StringList_callbacks_5fwriter_2eproto.base);
}

WriterMessage_StringList::~WriterMessage_StringList() {
  // @@protoc_insertion_point(destructor:stan.WriterMessage.StringList)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void WriterMessage_StringList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WriterMessage_StringList::ArenaDtor(void* object) {
  WriterMessage_StringList* _this = reinterpret_cast< WriterMessage_StringList* >(object);
  (void)_this;
}
void WriterMessage_StringList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriterMessage_StringList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriterMessage_StringList& WriterMessage_StringList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriterMessage_StringList_callbacks_5fwriter_2eproto.base);
  return *internal_default_instance();
}


void WriterMessage_StringList::Clear() {
// @@protoc_insertion_point(message_clear_start:stan.WriterMessage.StringList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WriterMessage_StringList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriterMessage_StringList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stan.WriterMessage.StringList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string value = 1;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stan.WriterMessage.StringList.value");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stan.WriterMessage.StringList)
  return target;
}

size_t WriterMessage_StringList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stan.WriterMessage.StringList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string value = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_.size());
  for (int i = 0, n = value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      value_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriterMessage_StringList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WriterMessage_StringList*>(
      &from));
}

void WriterMessage_StringList::MergeFrom(const WriterMessage_StringList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stan.WriterMessage.StringList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void WriterMessage_StringList::CopyFrom(const WriterMessage_StringList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stan.WriterMessage.StringList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriterMessage_StringList::IsInitialized() const {
  return true;
}

void WriterMessage_StringList::InternalSwap(WriterMessage_StringList* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

std::string WriterMessage_StringList::GetTypeName() const {
  return "stan.WriterMessage.StringList";
}


// ===================================================================

void WriterMessage_DoubleList::InitAsDefaultInstance() {
}
class WriterMessage_DoubleList::_Internal {
 public:
};

WriterMessage_DoubleList::WriterMessage_DoubleList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:stan.WriterMessage.DoubleList)
}
WriterMessage_DoubleList::WriterMessage_DoubleList(const WriterMessage_DoubleList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:stan.WriterMessage.DoubleList)
}

void WriterMessage_DoubleList::SharedCtor() {
}

WriterMessage_DoubleList::~WriterMessage_DoubleList() {
  // @@protoc_insertion_point(destructor:stan.WriterMessage.DoubleList)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void WriterMessage_DoubleList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WriterMessage_DoubleList::ArenaDtor(void* object) {
  WriterMessage_DoubleList* _this = reinterpret_cast< WriterMessage_DoubleList* >(object);
  (void)_this;
}
void WriterMessage_DoubleList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriterMessage_DoubleList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriterMessage_DoubleList& WriterMessage_DoubleList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriterMessage_DoubleList_callbacks_5fwriter_2eproto.base);
  return *internal_default_instance();
}


void WriterMessage_DoubleList::Clear() {
// @@protoc_insertion_point(message_clear_start:stan.WriterMessage.DoubleList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WriterMessage_DoubleList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriterMessage_DoubleList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stan.WriterMessage.DoubleList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double value = 1;
  if (this->_internal_value_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stan.WriterMessage.DoubleList)
  return target;
}

size_t WriterMessage_DoubleList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stan.WriterMessage.DoubleList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double value = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriterMessage_DoubleList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WriterMessage_DoubleList*>(
      &from));
}

void WriterMessage_DoubleList::MergeFrom(const WriterMessage_DoubleList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stan.WriterMessage.DoubleList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void WriterMessage_DoubleList::CopyFrom(const WriterMessage_DoubleList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stan.WriterMessage.DoubleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriterMessage_DoubleList::IsInitialized() const {
  return true;
}

void WriterMessage_DoubleList::InternalSwap(WriterMessage_DoubleList* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

std::string WriterMessage_DoubleList::GetTypeName() const {
  return "stan.WriterMessage.DoubleList";
}


// ===================================================================

void WriterMessage_IntList::InitAsDefaultInstance() {
}
class WriterMessage_IntList::_Internal {
 public:
};

WriterMessage_IntList::WriterMessage_IntList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:stan.WriterMessage.IntList)
}
WriterMessage_IntList::WriterMessage_IntList(const WriterMessage_IntList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:stan.WriterMessage.IntList)
}

void WriterMessage_IntList::SharedCtor() {
}

WriterMessage_IntList::~WriterMessage_IntList() {
  // @@protoc_insertion_point(destructor:stan.WriterMessage.IntList)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void WriterMessage_IntList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WriterMessage_IntList::ArenaDtor(void* object) {
  WriterMessage_IntList* _this = reinterpret_cast< WriterMessage_IntList* >(object);
  (void)_this;
}
void WriterMessage_IntList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriterMessage_IntList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriterMessage_IntList& WriterMessage_IntList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriterMessage_IntList_callbacks_5fwriter_2eproto.base);
  return *internal_default_instance();
}


void WriterMessage_IntList::Clear() {
// @@protoc_insertion_point(message_clear_start:stan.WriterMessage.IntList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WriterMessage_IntList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriterMessage_IntList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stan.WriterMessage.IntList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 value = 1;
  {
    int byte_size = _value_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_value(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stan.WriterMessage.IntList)
  return target;
}

size_t WriterMessage_IntList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stan.WriterMessage.IntList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 value = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->value_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriterMessage_IntList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WriterMessage_IntList*>(
      &from));
}

void WriterMessage_IntList::MergeFrom(const WriterMessage_IntList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stan.WriterMessage.IntList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void WriterMessage_IntList::CopyFrom(const WriterMessage_IntList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stan.WriterMessage.IntList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriterMessage_IntList::IsInitialized() const {
  return true;
}

void WriterMessage_IntList::InternalSwap(WriterMessage_IntList* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

std::string WriterMessage_IntList::GetTypeName() const {
  return "stan.WriterMessage.IntList";
}


// ===================================================================

void WriterMessage_Feature::InitAsDefaultInstance() {
}
class WriterMessage_Feature::_Internal {
 public:
  static const ::stan::WriterMessage_StringList& string_list(const WriterMessage_Feature* msg);
  static const ::stan::WriterMessage_DoubleList& double_list(const WriterMessage_Feature* msg);
  static const ::stan::WriterMessage_IntList& int_list(const WriterMessage_Feature* msg);
};

const ::stan::WriterMessage_StringList&
WriterMessage_Feature::_Internal::string_list(const WriterMessage_Feature* msg) {
  return *msg->kind_.string_list_;
}
const ::stan::WriterMessage_DoubleList&
WriterMessage_Feature::_Internal::double_list(const WriterMessage_Feature* msg) {
  return *msg->kind_.double_list_;
}
const ::stan::WriterMessage_IntList&
WriterMessage_Feature::_Internal::int_list(const WriterMessage_Feature* msg) {
  return *msg->kind_.int_list_;
}
void WriterMessage_Feature::set_allocated_string_list(::stan::WriterMessage_StringList* string_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (string_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(string_list);
    if (message_arena != submessage_arena) {
      string_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string_list, submessage_arena);
    }
    set_has_string_list();
    kind_.string_list_ = string_list;
  }
  // @@protoc_insertion_point(field_set_allocated:stan.WriterMessage.Feature.string_list)
}
void WriterMessage_Feature::set_allocated_double_list(::stan::WriterMessage_DoubleList* double_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (double_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(double_list);
    if (message_arena != submessage_arena) {
      double_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_list, submessage_arena);
    }
    set_has_double_list();
    kind_.double_list_ = double_list;
  }
  // @@protoc_insertion_point(field_set_allocated:stan.WriterMessage.Feature.double_list)
}
void WriterMessage_Feature::set_allocated_int_list(::stan::WriterMessage_IntList* int_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (int_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(int_list);
    if (message_arena != submessage_arena) {
      int_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int_list, submessage_arena);
    }
    set_has_int_list();
    kind_.int_list_ = int_list;
  }
  // @@protoc_insertion_point(field_set_allocated:stan.WriterMessage.Feature.int_list)
}
WriterMessage_Feature::WriterMessage_Feature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:stan.WriterMessage.Feature)
}
WriterMessage_Feature::WriterMessage_Feature(const WriterMessage_Feature& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  clear_has_kind();
  switch (from.kind_case()) {
    case kStringList: {
      _internal_mutable_string_list()->::stan::WriterMessage_StringList::MergeFrom(from._internal_string_list());
      break;
    }
    case kDoubleList: {
      _internal_mutable_double_list()->::stan::WriterMessage_DoubleList::MergeFrom(from._internal_double_list());
      break;
    }
    case kIntList: {
      _internal_mutable_int_list()->::stan::WriterMessage_IntList::MergeFrom(from._internal_int_list());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:stan.WriterMessage.Feature)
}

void WriterMessage_Feature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriterMessage_Feature_callbacks_5fwriter_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_kind();
}

WriterMessage_Feature::~WriterMessage_Feature() {
  // @@protoc_insertion_point(destructor:stan.WriterMessage.Feature)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void WriterMessage_Feature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_kind()) {
    clear_kind();
  }
}

void WriterMessage_Feature::ArenaDtor(void* object) {
  WriterMessage_Feature* _this = reinterpret_cast< WriterMessage_Feature* >(object);
  (void)_this;
}
void WriterMessage_Feature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriterMessage_Feature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriterMessage_Feature& WriterMessage_Feature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriterMessage_Feature_callbacks_5fwriter_2eproto.base);
  return *internal_default_instance();
}


void WriterMessage_Feature::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:stan.WriterMessage.Feature)
  switch (kind_case()) {
    case kStringList: {
      if (GetArena() == nullptr) {
        delete kind_.string_list_;
      }
      break;
    }
    case kDoubleList: {
      if (GetArena() == nullptr) {
        delete kind_.double_list_;
      }
      break;
    }
    case kIntList: {
      if (GetArena() == nullptr) {
        delete kind_.int_list_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void WriterMessage_Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:stan.WriterMessage.Feature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clear_kind();
  _internal_metadata_.Clear<std::string>();
}

const char* WriterMessage_Feature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .stan.WriterMessage.StringList string_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_string_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .stan.WriterMessage.DoubleList double_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .stan.WriterMessage.IntList int_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_int_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriterMessage_Feature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stan.WriterMessage.Feature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stan.WriterMessage.Feature.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .stan.WriterMessage.StringList string_list = 2;
  if (_internal_has_string_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::string_list(this), target, stream);
  }

  // .stan.WriterMessage.DoubleList double_list = 3;
  if (_internal_has_double_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::double_list(this), target, stream);
  }

  // .stan.WriterMessage.IntList int_list = 4;
  if (_internal_has_int_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::int_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stan.WriterMessage.Feature)
  return target;
}

size_t WriterMessage_Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stan.WriterMessage.Feature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  switch (kind_case()) {
    // .stan.WriterMessage.StringList string_list = 2;
    case kStringList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.string_list_);
      break;
    }
    // .stan.WriterMessage.DoubleList double_list = 3;
    case kDoubleList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.double_list_);
      break;
    }
    // .stan.WriterMessage.IntList int_list = 4;
    case kIntList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.int_list_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriterMessage_Feature::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WriterMessage_Feature*>(
      &from));
}

void WriterMessage_Feature::MergeFrom(const WriterMessage_Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stan.WriterMessage.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  switch (from.kind_case()) {
    case kStringList: {
      _internal_mutable_string_list()->::stan::WriterMessage_StringList::MergeFrom(from._internal_string_list());
      break;
    }
    case kDoubleList: {
      _internal_mutable_double_list()->::stan::WriterMessage_DoubleList::MergeFrom(from._internal_double_list());
      break;
    }
    case kIntList: {
      _internal_mutable_int_list()->::stan::WriterMessage_IntList::MergeFrom(from._internal_int_list());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void WriterMessage_Feature::CopyFrom(const WriterMessage_Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stan.WriterMessage.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriterMessage_Feature::IsInitialized() const {
  return true;
}

void WriterMessage_Feature::InternalSwap(WriterMessage_Feature* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string WriterMessage_Feature::GetTypeName() const {
  return "stan.WriterMessage.Feature";
}


// ===================================================================

void WriterMessage::InitAsDefaultInstance() {
}
class WriterMessage::_Internal {
 public:
};

WriterMessage::WriterMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  feature_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:stan.WriterMessage)
}
WriterMessage::WriterMessage(const WriterMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      feature_(from.feature_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  topic_ = from.topic_;
  // @@protoc_insertion_point(copy_constructor:stan.WriterMessage)
}

void WriterMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriterMessage_callbacks_5fwriter_2eproto.base);
  topic_ = 0;
}

WriterMessage::~WriterMessage() {
  // @@protoc_insertion_point(destructor:stan.WriterMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void WriterMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WriterMessage::ArenaDtor(void* object) {
  WriterMessage* _this = reinterpret_cast< WriterMessage* >(object);
  (void)_this;
}
void WriterMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriterMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriterMessage& WriterMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriterMessage_callbacks_5fwriter_2eproto.base);
  return *internal_default_instance();
}


void WriterMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:stan.WriterMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_.Clear();
  topic_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* WriterMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .stan.WriterMessage.Topic topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_topic(static_cast<::stan::WriterMessage_Topic>(val));
        } else goto handle_unusual;
        continue;
      // repeated .stan.WriterMessage.Feature feature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriterMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stan.WriterMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .stan.WriterMessage.Topic topic = 1;
  if (this->topic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_topic(), target);
  }

  // repeated .stan.WriterMessage.Feature feature = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_feature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_feature(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stan.WriterMessage)
  return target;
}

size_t WriterMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stan.WriterMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .stan.WriterMessage.Feature feature = 2;
  total_size += 1UL * this->_internal_feature_size();
  for (const auto& msg : this->feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .stan.WriterMessage.Topic topic = 1;
  if (this->topic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_topic());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriterMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WriterMessage*>(
      &from));
}

void WriterMessage::MergeFrom(const WriterMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stan.WriterMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_.MergeFrom(from.feature_);
  if (from.topic() != 0) {
    _internal_set_topic(from._internal_topic());
  }
}

void WriterMessage::CopyFrom(const WriterMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stan.WriterMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriterMessage::IsInitialized() const {
  return true;
}

void WriterMessage::InternalSwap(WriterMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  feature_.InternalSwap(&other->feature_);
  swap(topic_, other->topic_);
}

std::string WriterMessage::GetTypeName() const {
  return "stan.WriterMessage";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace stan
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::stan::WriterMessage_StringList* Arena::CreateMaybeMessage< ::stan::WriterMessage_StringList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stan::WriterMessage_StringList >(arena);
}
template<> PROTOBUF_NOINLINE ::stan::WriterMessage_DoubleList* Arena::CreateMaybeMessage< ::stan::WriterMessage_DoubleList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stan::WriterMessage_DoubleList >(arena);
}
template<> PROTOBUF_NOINLINE ::stan::WriterMessage_IntList* Arena::CreateMaybeMessage< ::stan::WriterMessage_IntList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stan::WriterMessage_IntList >(arena);
}
template<> PROTOBUF_NOINLINE ::stan::WriterMessage_Feature* Arena::CreateMaybeMessage< ::stan::WriterMessage_Feature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stan::WriterMessage_Feature >(arena);
}
template<> PROTOBUF_NOINLINE ::stan::WriterMessage* Arena::CreateMaybeMessage< ::stan::WriterMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stan::WriterMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
