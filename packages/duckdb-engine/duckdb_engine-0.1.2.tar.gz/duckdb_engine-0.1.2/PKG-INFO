Metadata-Version: 2.1
Name: duckdb-engine
Version: 0.1.2
Summary: 
Home-page: https://github.com/Mause/duckdb_engine
License: MIT
Author: Elliana
Author-email: me@mause.me
Requires-Python: >=3.8,<4.0
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Requires-Dist: duckdb (==0.2.2.dev655)
Requires-Dist: sqlalchemy (>=1.3.19,<2.0.0)
Project-URL: Repository, https://github.com/Mause/duckdb_engine
Description-Content-Type: text/markdown

# duckdb_engine

Very very very basic sqlalchemy driver for duckdb

Once you install this package, you should be able to just use it, as sqlalchemy does a python path search

```python
from sqlalchemy import Column, Integer, Sequence, String, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm.session import Session

Base = declarative_base()


class FakeModel(Base):  # type: ignore
    __tablename__ = "fake"

    id = Column(Integer, Sequence("fakemodel_id_sequence"), primary_key=True)
    name = Column(String)


eng = create_engine("duckdb:///:memory:")
Base.metadata.create_all(eng)
session = Session(bind=eng)

session.add(FakeModel(name="Frank"))
session.commit()

frank = session.query(FakeModel).one()

assert frank.name == "Frank"
```

