# coding: utf-8

"""
    Firefly III API Client

    This is the Python client for Firefly III API  # noqa: E501

    The version of the OpenAPI document: 0.10.0
    Contact: thegrumpydictator@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RecurrenceTransactionMeta(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'budget_id': 'int',
        'budget_value': 'str',
        'category_id': 'int',
        'category_name': 'str',
        'name': 'str',
        'value': 'str'
    }

    attribute_map = {
        'budget_id': 'budget_id',
        'budget_value': 'budget_value',
        'category_id': 'category_id',
        'category_name': 'category_name',
        'name': 'name',
        'value': 'value'
    }

    def __init__(self, budget_id=None, budget_value=None, category_id=None, category_name=None, name=None, value=None):  # noqa: E501
        """RecurrenceTransactionMeta - a model defined in OpenAPI"""  # noqa: E501

        self._budget_id = None
        self._budget_value = None
        self._category_id = None
        self._category_name = None
        self._name = None
        self._value = None
        self.discriminator = None

        self.budget_id = budget_id
        self.budget_value = budget_value
        self.category_id = category_id
        self.category_name = category_name
        if name is not None:
            self.name = name
        if value is not None:
            self.value = value

    @property
    def budget_id(self):
        """Gets the budget_id of this RecurrenceTransactionMeta.  # noqa: E501

        If the name is 'budget_id', this value will hold the associated budget's ID (so it will be the same as 'value').  # noqa: E501

        :return: The budget_id of this RecurrenceTransactionMeta.  # noqa: E501
        :rtype: int
        """
        return self._budget_id

    @budget_id.setter
    def budget_id(self, budget_id):
        """Sets the budget_id of this RecurrenceTransactionMeta.

        If the name is 'budget_id', this value will hold the associated budget's ID (so it will be the same as 'value').  # noqa: E501

        :param budget_id: The budget_id of this RecurrenceTransactionMeta.  # noqa: E501
        :type: int
        """

        self._budget_id = budget_id

    @property
    def budget_value(self):
        """Gets the budget_value of this RecurrenceTransactionMeta.  # noqa: E501

        If the name is 'budget_id', this value will hold the associated budget's name.  # noqa: E501

        :return: The budget_value of this RecurrenceTransactionMeta.  # noqa: E501
        :rtype: str
        """
        return self._budget_value

    @budget_value.setter
    def budget_value(self, budget_value):
        """Sets the budget_value of this RecurrenceTransactionMeta.

        If the name is 'budget_id', this value will hold the associated budget's name.  # noqa: E501

        :param budget_value: The budget_value of this RecurrenceTransactionMeta.  # noqa: E501
        :type: str
        """

        self._budget_value = budget_value

    @property
    def category_id(self):
        """Gets the category_id of this RecurrenceTransactionMeta.  # noqa: E501

        If the name is 'category_name', this value will hold the associated category's ID.  # noqa: E501

        :return: The category_id of this RecurrenceTransactionMeta.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this RecurrenceTransactionMeta.

        If the name is 'category_name', this value will hold the associated category's ID.  # noqa: E501

        :param category_id: The category_id of this RecurrenceTransactionMeta.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def category_name(self):
        """Gets the category_name of this RecurrenceTransactionMeta.  # noqa: E501

        If the name is 'category_name', this value will hold the associated category's name (so it's the same as the 'value' field).  # noqa: E501

        :return: The category_name of this RecurrenceTransactionMeta.  # noqa: E501
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this RecurrenceTransactionMeta.

        If the name is 'category_name', this value will hold the associated category's name (so it's the same as the 'value' field).  # noqa: E501

        :param category_name: The category_name of this RecurrenceTransactionMeta.  # noqa: E501
        :type: str
        """

        self._category_name = category_name

    @property
    def name(self):
        """Gets the name of this RecurrenceTransactionMeta.  # noqa: E501

        Indication what kind of value the 'value' field actually holds.  # noqa: E501

        :return: The name of this RecurrenceTransactionMeta.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RecurrenceTransactionMeta.

        Indication what kind of value the 'value' field actually holds.  # noqa: E501

        :param name: The name of this RecurrenceTransactionMeta.  # noqa: E501
        :type: str
        """
        allowed_values = ["category_name", "budget_id"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"  # noqa: E501
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def value(self):
        """Gets the value of this RecurrenceTransactionMeta.  # noqa: E501

        Either a budget ID or a category name.  # noqa: E501

        :return: The value of this RecurrenceTransactionMeta.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RecurrenceTransactionMeta.

        Either a budget ID or a category name.  # noqa: E501

        :param value: The value of this RecurrenceTransactionMeta.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecurrenceTransactionMeta):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
