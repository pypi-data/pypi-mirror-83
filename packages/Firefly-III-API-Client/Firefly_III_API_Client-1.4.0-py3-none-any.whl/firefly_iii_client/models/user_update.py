# coding: utf-8

"""
    Firefly III API Client

    This is the Python client for Firefly III API  # noqa: E501

    The version of the OpenAPI document: 0.10.0
    Contact: thegrumpydictator@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UserUpdate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'blocked': 'bool',
        'blocked_code': 'str',
        'email': 'str',
        'role': 'str'
    }

    attribute_map = {
        'blocked': 'blocked',
        'blocked_code': 'blocked_code',
        'email': 'email',
        'role': 'role'
    }

    def __init__(self, blocked=None, blocked_code=None, email=None, role=None):  # noqa: E501
        """UserUpdate - a model defined in OpenAPI"""  # noqa: E501

        self._blocked = None
        self._blocked_code = None
        self._email = None
        self._role = None
        self.discriminator = None

        if blocked is not None:
            self.blocked = blocked
        self.blocked_code = blocked_code
        self.email = email
        self.role = role

    @property
    def blocked(self):
        """Gets the blocked of this UserUpdate.  # noqa: E501

        Creates a new users who is blocked immediately.  # noqa: E501

        :return: The blocked of this UserUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this UserUpdate.

        Creates a new users who is blocked immediately.  # noqa: E501

        :param blocked: The blocked of this UserUpdate.  # noqa: E501
        :type: bool
        """

        self._blocked = blocked

    @property
    def blocked_code(self):
        """Gets the blocked_code of this UserUpdate.  # noqa: E501

        If you say the user must be blocked, this will be the reason code.  # noqa: E501

        :return: The blocked_code of this UserUpdate.  # noqa: E501
        :rtype: str
        """
        return self._blocked_code

    @blocked_code.setter
    def blocked_code(self, blocked_code):
        """Sets the blocked_code of this UserUpdate.

        If you say the user must be blocked, this will be the reason code.  # noqa: E501

        :param blocked_code: The blocked_code of this UserUpdate.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"email_changed"]  # noqa: E501
        if blocked_code not in allowed_values:
            raise ValueError(
                "Invalid value for `blocked_code` ({0}), must be one of {1}"  # noqa: E501
                .format(blocked_code, allowed_values)
            )

        self._blocked_code = blocked_code

    @property
    def email(self):
        """Gets the email of this UserUpdate.  # noqa: E501

        The new users email address.  # noqa: E501

        :return: The email of this UserUpdate.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserUpdate.

        The new users email address.  # noqa: E501

        :param email: The email of this UserUpdate.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def role(self):
        """Gets the role of this UserUpdate.  # noqa: E501

        Role for the new user. Can be empty or omitted.  # noqa: E501

        :return: The role of this UserUpdate.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UserUpdate.

        Role for the new user. Can be empty or omitted.  # noqa: E501

        :param role: The role of this UserUpdate.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"owner", "demo"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
