# coding: utf-8

"""
    Firefly III API Client

    This is the Python client for Firefly III API  # noqa: E501

    The version of the OpenAPI document: 1.4.0
    Contact: james@firefly-iii.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from firefly_iii_client.configuration import Configuration


class Currency(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'code': 'str',
        'created_at': 'datetime',
        'decimal_places': 'int',
        'default': 'bool',
        'enabled': 'bool',
        'name': 'str',
        'symbol': 'str',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'code': 'code',
        'created_at': 'created_at',
        'decimal_places': 'decimal_places',
        'default': 'default',
        'enabled': 'enabled',
        'name': 'name',
        'symbol': 'symbol',
        'updated_at': 'updated_at'
    }

    def __init__(self, code=None, created_at=None, decimal_places=None, default=None, enabled=None, name=None, symbol=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """Currency - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._code = None
        self._created_at = None
        self._decimal_places = None
        self._default = None
        self._enabled = None
        self._name = None
        self._symbol = None
        self._updated_at = None
        self.discriminator = None

        self.code = code
        if created_at is not None:
            self.created_at = created_at
        if decimal_places is not None:
            self.decimal_places = decimal_places
        if default is not None:
            self.default = default
        if enabled is not None:
            self.enabled = enabled
        self.name = name
        self.symbol = symbol
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def code(self):
        """Gets the code of this Currency.  # noqa: E501


        :return: The code of this Currency.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Currency.


        :param code: The code of this Currency.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and code is None:  # noqa: E501
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def created_at(self):
        """Gets the created_at of this Currency.  # noqa: E501


        :return: The created_at of this Currency.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Currency.


        :param created_at: The created_at of this Currency.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def decimal_places(self):
        """Gets the decimal_places of this Currency.  # noqa: E501

        Supports 0-16 decimals.  # noqa: E501

        :return: The decimal_places of this Currency.  # noqa: E501
        :rtype: int
        """
        return self._decimal_places

    @decimal_places.setter
    def decimal_places(self, decimal_places):
        """Sets the decimal_places of this Currency.

        Supports 0-16 decimals.  # noqa: E501

        :param decimal_places: The decimal_places of this Currency.  # noqa: E501
        :type: int
        """

        self._decimal_places = decimal_places

    @property
    def default(self):
        """Gets the default of this Currency.  # noqa: E501

        Make this currency the default currency.  # noqa: E501

        :return: The default of this Currency.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this Currency.

        Make this currency the default currency.  # noqa: E501

        :param default: The default of this Currency.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def enabled(self):
        """Gets the enabled of this Currency.  # noqa: E501

        defaults to true  # noqa: E501

        :return: The enabled of this Currency.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Currency.

        defaults to true  # noqa: E501

        :param enabled: The enabled of this Currency.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def name(self):
        """Gets the name of this Currency.  # noqa: E501


        :return: The name of this Currency.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Currency.


        :param name: The name of this Currency.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def symbol(self):
        """Gets the symbol of this Currency.  # noqa: E501


        :return: The symbol of this Currency.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Currency.


        :param symbol: The symbol of this Currency.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and symbol is None:  # noqa: E501
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def updated_at(self):
        """Gets the updated_at of this Currency.  # noqa: E501


        :return: The updated_at of this Currency.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Currency.


        :param updated_at: The updated_at of this Currency.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Currency):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Currency):
            return True

        return self.to_dict() != other.to_dict()
