# coding: utf-8

"""
    Firefly III API Client

    This is the Python client for Firefly III API  # noqa: E501

    The version of the OpenAPI document: 1.4.0
    Contact: james@firefly-iii.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from firefly_iii_client.configuration import Configuration


class SystemInfoData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_version': 'str',
        'driver': 'str',
        'os': 'str',
        'php_version': 'str',
        'version': 'str'
    }

    attribute_map = {
        'api_version': 'api_version',
        'driver': 'driver',
        'os': 'os',
        'php_version': 'php_version',
        'version': 'version'
    }

    def __init__(self, api_version=None, driver=None, os=None, php_version=None, version=None, local_vars_configuration=None):  # noqa: E501
        """SystemInfoData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_version = None
        self._driver = None
        self._os = None
        self._php_version = None
        self._version = None
        self.discriminator = None

        self.api_version = api_version
        self.driver = driver
        self.os = os
        self.php_version = php_version
        self.version = version

    @property
    def api_version(self):
        """Gets the api_version of this SystemInfoData.  # noqa: E501


        :return: The api_version of this SystemInfoData.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this SystemInfoData.


        :param api_version: The api_version of this SystemInfoData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and api_version is None:  # noqa: E501
            raise ValueError("Invalid value for `api_version`, must not be `None`")  # noqa: E501

        self._api_version = api_version

    @property
    def driver(self):
        """Gets the driver of this SystemInfoData.  # noqa: E501


        :return: The driver of this SystemInfoData.  # noqa: E501
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this SystemInfoData.


        :param driver: The driver of this SystemInfoData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and driver is None:  # noqa: E501
            raise ValueError("Invalid value for `driver`, must not be `None`")  # noqa: E501

        self._driver = driver

    @property
    def os(self):
        """Gets the os of this SystemInfoData.  # noqa: E501


        :return: The os of this SystemInfoData.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this SystemInfoData.


        :param os: The os of this SystemInfoData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and os is None:  # noqa: E501
            raise ValueError("Invalid value for `os`, must not be `None`")  # noqa: E501

        self._os = os

    @property
    def php_version(self):
        """Gets the php_version of this SystemInfoData.  # noqa: E501


        :return: The php_version of this SystemInfoData.  # noqa: E501
        :rtype: str
        """
        return self._php_version

    @php_version.setter
    def php_version(self, php_version):
        """Sets the php_version of this SystemInfoData.


        :param php_version: The php_version of this SystemInfoData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and php_version is None:  # noqa: E501
            raise ValueError("Invalid value for `php_version`, must not be `None`")  # noqa: E501

        self._php_version = php_version

    @property
    def version(self):
        """Gets the version of this SystemInfoData.  # noqa: E501


        :return: The version of this SystemInfoData.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SystemInfoData.


        :param version: The version of this SystemInfoData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInfoData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SystemInfoData):
            return True

        return self.to_dict() != other.to_dict()
