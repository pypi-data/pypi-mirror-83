# coding: utf-8

"""
    Firefly III API Client

    This is the Python client for Firefly III API  # noqa: E501

    The version of the OpenAPI document: 0.10.0
    Contact: thegrumpydictator@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UserAttributes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'blocked': 'bool',
        'blocked_code': 'bool',
        'created_at': 'datetime',
        'email': 'str',
        'role': 'str',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'blocked': 'blocked',
        'blocked_code': 'blocked_code',
        'created_at': 'created_at',
        'email': 'email',
        'role': 'role',
        'updated_at': 'updated_at'
    }

    def __init__(self, blocked=None, blocked_code=None, created_at=None, email=None, role=None, updated_at=None):  # noqa: E501
        """UserAttributes - a model defined in OpenAPI"""  # noqa: E501

        self._blocked = None
        self._blocked_code = None
        self._created_at = None
        self._email = None
        self._role = None
        self._updated_at = None
        self.discriminator = None

        if blocked is not None:
            self.blocked = blocked
        self.blocked_code = blocked_code
        if created_at is not None:
            self.created_at = created_at
        if email is not None:
            self.email = email
        self.role = role
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def blocked(self):
        """Gets the blocked of this UserAttributes.  # noqa: E501

        Boolean to indicate if the user is blocked.  # noqa: E501

        :return: The blocked of this UserAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this UserAttributes.

        Boolean to indicate if the user is blocked.  # noqa: E501

        :param blocked: The blocked of this UserAttributes.  # noqa: E501
        :type: bool
        """

        self._blocked = blocked

    @property
    def blocked_code(self):
        """Gets the blocked_code of this UserAttributes.  # noqa: E501

        If the user is blocked, this is the reason.  # noqa: E501

        :return: The blocked_code of this UserAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._blocked_code

    @blocked_code.setter
    def blocked_code(self, blocked_code):
        """Sets the blocked_code of this UserAttributes.

        If the user is blocked, this is the reason.  # noqa: E501

        :param blocked_code: The blocked_code of this UserAttributes.  # noqa: E501
        :type: bool
        """

        self._blocked_code = blocked_code

    @property
    def created_at(self):
        """Gets the created_at of this UserAttributes.  # noqa: E501


        :return: The created_at of this UserAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UserAttributes.


        :param created_at: The created_at of this UserAttributes.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def email(self):
        """Gets the email of this UserAttributes.  # noqa: E501


        :return: The email of this UserAttributes.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserAttributes.


        :param email: The email of this UserAttributes.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def role(self):
        """Gets the role of this UserAttributes.  # noqa: E501

        If the user is owner of demo user. Otherwise it's NULL  # noqa: E501

        :return: The role of this UserAttributes.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UserAttributes.

        If the user is owner of demo user. Otherwise it's NULL  # noqa: E501

        :param role: The role of this UserAttributes.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def updated_at(self):
        """Gets the updated_at of this UserAttributes.  # noqa: E501


        :return: The updated_at of this UserAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this UserAttributes.


        :param updated_at: The updated_at of this UserAttributes.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
