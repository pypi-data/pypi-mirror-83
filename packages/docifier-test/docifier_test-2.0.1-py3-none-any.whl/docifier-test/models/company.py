# coding: utf-8

"""
    Finnhub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from docifier-test.configuration import Configuration


class Company(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'age': 'int',
        'sex': 'str',
        'name': 'str',
        'since': 'str',
        'title': 'str',
        'currency': 'str',
        'compensation': 'int'
    }

    attribute_map = {
        'age': 'age',
        'sex': 'sex',
        'name': 'name',
        'since': 'since',
        'title': 'title',
        'currency': 'currency',
        'compensation': 'compensation'
    }

    def __init__(self, age=None, sex=None, name=None, since=None, title=None, currency=None, compensation=None, local_vars_configuration=None):  # noqa: E501
        """Company - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._age = None
        self._sex = None
        self._name = None
        self._since = None
        self._title = None
        self._currency = None
        self._compensation = None
        self.discriminator = None

        if age is not None:
            self.age = age
        if sex is not None:
            self.sex = sex
        if name is not None:
            self.name = name
        if since is not None:
            self.since = since
        if title is not None:
            self.title = title
        if currency is not None:
            self.currency = currency
        if compensation is not None:
            self.compensation = compensation

    @property
    def age(self):
        """Gets the age of this Company.  # noqa: E501

        Age  # noqa: E501

        :return: The age of this Company.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this Company.

        Age  # noqa: E501

        :param age: The age of this Company.  # noqa: E501
        :type: int
        """

        self._age = age

    @property
    def sex(self):
        """Gets the sex of this Company.  # noqa: E501

        Sex  # noqa: E501

        :return: The sex of this Company.  # noqa: E501
        :rtype: str
        """
        return self._sex

    @sex.setter
    def sex(self, sex):
        """Sets the sex of this Company.

        Sex  # noqa: E501

        :param sex: The sex of this Company.  # noqa: E501
        :type: str
        """

        self._sex = sex

    @property
    def name(self):
        """Gets the name of this Company.  # noqa: E501

        Executive name  # noqa: E501

        :return: The name of this Company.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Company.

        Executive name  # noqa: E501

        :param name: The name of this Company.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def since(self):
        """Gets the since of this Company.  # noqa: E501

        Year appointed  # noqa: E501

        :return: The since of this Company.  # noqa: E501
        :rtype: str
        """
        return self._since

    @since.setter
    def since(self, since):
        """Sets the since of this Company.

        Year appointed  # noqa: E501

        :param since: The since of this Company.  # noqa: E501
        :type: str
        """

        self._since = since

    @property
    def title(self):
        """Gets the title of this Company.  # noqa: E501

        Title  # noqa: E501

        :return: The title of this Company.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Company.

        Title  # noqa: E501

        :param title: The title of this Company.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def currency(self):
        """Gets the currency of this Company.  # noqa: E501

        Compensation currency  # noqa: E501

        :return: The currency of this Company.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Company.

        Compensation currency  # noqa: E501

        :param currency: The currency of this Company.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def compensation(self):
        """Gets the compensation of this Company.  # noqa: E501

        Total compensation  # noqa: E501

        :return: The compensation of this Company.  # noqa: E501
        :rtype: int
        """
        return self._compensation

    @compensation.setter
    def compensation(self, compensation):
        """Sets the compensation of this Company.

        Total compensation  # noqa: E501

        :param compensation: The compensation of this Company.  # noqa: E501
        :type: int
        """

        self._compensation = compensation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Company):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Company):
            return True

        return self.to_dict() != other.to_dict()
