# coding: utf-8

"""
    Finnhub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from docifier-test.configuration import Configuration


class CompanyNewsStatistics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'buzz': 'float',
        'weekly_average': 'float',
        'articles_in_last_week': 'int'
    }

    attribute_map = {
        'buzz': 'buzz',
        'weekly_average': 'weeklyAverage',
        'articles_in_last_week': 'articlesInLastWeek'
    }

    def __init__(self, buzz=None, weekly_average=None, articles_in_last_week=None, local_vars_configuration=None):  # noqa: E501
        """CompanyNewsStatistics - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._buzz = None
        self._weekly_average = None
        self._articles_in_last_week = None
        self.discriminator = None

        if buzz is not None:
            self.buzz = buzz
        if weekly_average is not None:
            self.weekly_average = weekly_average
        if articles_in_last_week is not None:
            self.articles_in_last_week = articles_in_last_week

    @property
    def buzz(self):
        """Gets the buzz of this CompanyNewsStatistics.  # noqa: E501

          # noqa: E501

        :return: The buzz of this CompanyNewsStatistics.  # noqa: E501
        :rtype: float
        """
        return self._buzz

    @buzz.setter
    def buzz(self, buzz):
        """Sets the buzz of this CompanyNewsStatistics.

          # noqa: E501

        :param buzz: The buzz of this CompanyNewsStatistics.  # noqa: E501
        :type: float
        """

        self._buzz = buzz

    @property
    def weekly_average(self):
        """Gets the weekly_average of this CompanyNewsStatistics.  # noqa: E501

          # noqa: E501

        :return: The weekly_average of this CompanyNewsStatistics.  # noqa: E501
        :rtype: float
        """
        return self._weekly_average

    @weekly_average.setter
    def weekly_average(self, weekly_average):
        """Sets the weekly_average of this CompanyNewsStatistics.

          # noqa: E501

        :param weekly_average: The weekly_average of this CompanyNewsStatistics.  # noqa: E501
        :type: float
        """

        self._weekly_average = weekly_average

    @property
    def articles_in_last_week(self):
        """Gets the articles_in_last_week of this CompanyNewsStatistics.  # noqa: E501

          # noqa: E501

        :return: The articles_in_last_week of this CompanyNewsStatistics.  # noqa: E501
        :rtype: int
        """
        return self._articles_in_last_week

    @articles_in_last_week.setter
    def articles_in_last_week(self, articles_in_last_week):
        """Sets the articles_in_last_week of this CompanyNewsStatistics.

          # noqa: E501

        :param articles_in_last_week: The articles_in_last_week of this CompanyNewsStatistics.  # noqa: E501
        :type: int
        """

        self._articles_in_last_week = articles_in_last_week

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyNewsStatistics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompanyNewsStatistics):
            return True

        return self.to_dict() != other.to_dict()
