# coding: utf-8

"""
    Finnhub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from docifier-test.configuration import Configuration


class EconomicEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'prev': 'float',
        'time': 'str',
        'unit': 'str',
        'event': 'str',
        'actual': 'float',
        'impact': 'str',
        'country': 'str',
        'estimate': 'float'
    }

    attribute_map = {
        'prev': 'prev',
        'time': 'time',
        'unit': 'unit',
        'event': 'event',
        'actual': 'actual',
        'impact': 'impact',
        'country': 'country',
        'estimate': 'estimate'
    }

    def __init__(self, prev=None, time=None, unit=None, event=None, actual=None, impact=None, country=None, estimate=None, local_vars_configuration=None):  # noqa: E501
        """EconomicEvent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._prev = None
        self._time = None
        self._unit = None
        self._event = None
        self._actual = None
        self._impact = None
        self._country = None
        self._estimate = None
        self.discriminator = None

        if prev is not None:
            self.prev = prev
        if time is not None:
            self.time = time
        if unit is not None:
            self.unit = unit
        if event is not None:
            self.event = event
        if actual is not None:
            self.actual = actual
        if impact is not None:
            self.impact = impact
        if country is not None:
            self.country = country
        if estimate is not None:
            self.estimate = estimate

    @property
    def prev(self):
        """Gets the prev of this EconomicEvent.  # noqa: E501

        Previous release  # noqa: E501

        :return: The prev of this EconomicEvent.  # noqa: E501
        :rtype: float
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this EconomicEvent.

        Previous release  # noqa: E501

        :param prev: The prev of this EconomicEvent.  # noqa: E501
        :type: float
        """

        self._prev = prev

    @property
    def time(self):
        """Gets the time of this EconomicEvent.  # noqa: E501

        Release time  # noqa: E501

        :return: The time of this EconomicEvent.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this EconomicEvent.

        Release time  # noqa: E501

        :param time: The time of this EconomicEvent.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def unit(self):
        """Gets the unit of this EconomicEvent.  # noqa: E501

        Unit  # noqa: E501

        :return: The unit of this EconomicEvent.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this EconomicEvent.

        Unit  # noqa: E501

        :param unit: The unit of this EconomicEvent.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def event(self):
        """Gets the event of this EconomicEvent.  # noqa: E501

        Event  # noqa: E501

        :return: The event of this EconomicEvent.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this EconomicEvent.

        Event  # noqa: E501

        :param event: The event of this EconomicEvent.  # noqa: E501
        :type: str
        """

        self._event = event

    @property
    def actual(self):
        """Gets the actual of this EconomicEvent.  # noqa: E501

        Actual release  # noqa: E501

        :return: The actual of this EconomicEvent.  # noqa: E501
        :rtype: float
        """
        return self._actual

    @actual.setter
    def actual(self, actual):
        """Sets the actual of this EconomicEvent.

        Actual release  # noqa: E501

        :param actual: The actual of this EconomicEvent.  # noqa: E501
        :type: float
        """

        self._actual = actual

    @property
    def impact(self):
        """Gets the impact of this EconomicEvent.  # noqa: E501

        Impact level  # noqa: E501

        :return: The impact of this EconomicEvent.  # noqa: E501
        :rtype: str
        """
        return self._impact

    @impact.setter
    def impact(self, impact):
        """Sets the impact of this EconomicEvent.

        Impact level  # noqa: E501

        :param impact: The impact of this EconomicEvent.  # noqa: E501
        :type: str
        """

        self._impact = impact

    @property
    def country(self):
        """Gets the country of this EconomicEvent.  # noqa: E501

        Country  # noqa: E501

        :return: The country of this EconomicEvent.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this EconomicEvent.

        Country  # noqa: E501

        :param country: The country of this EconomicEvent.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def estimate(self):
        """Gets the estimate of this EconomicEvent.  # noqa: E501

        Estimate  # noqa: E501

        :return: The estimate of this EconomicEvent.  # noqa: E501
        :rtype: float
        """
        return self._estimate

    @estimate.setter
    def estimate(self, estimate):
        """Sets the estimate of this EconomicEvent.

        Estimate  # noqa: E501

        :param estimate: The estimate of this EconomicEvent.  # noqa: E501
        :type: float
        """

        self._estimate = estimate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EconomicEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EconomicEvent):
            return True

        return self.to_dict() != other.to_dict()
