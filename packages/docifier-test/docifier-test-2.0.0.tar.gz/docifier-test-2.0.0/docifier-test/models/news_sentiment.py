# coding: utf-8

"""
    Finnhub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from docifier-test.configuration import Configuration


class NewsSentiment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'buzz': 'CompanyNewsStatistics',
        'company_news_score': 'float',
        'sector_average_bullish_percent': 'float',
        'sector_average_news_score': 'float',
        'sentiment': 'Sentiment',
        'symbol': 'str'
    }

    attribute_map = {
        'buzz': 'buzz',
        'company_news_score': 'companyNewsScore',
        'sector_average_bullish_percent': 'sectorAverageBullishPercent',
        'sector_average_news_score': 'sectorAverageNewsScore',
        'sentiment': 'sentiment',
        'symbol': 'symbol'
    }

    def __init__(self, buzz=None, company_news_score=None, sector_average_bullish_percent=None, sector_average_news_score=None, sentiment=None, symbol=None, local_vars_configuration=None):  # noqa: E501
        """NewsSentiment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._buzz = None
        self._company_news_score = None
        self._sector_average_bullish_percent = None
        self._sector_average_news_score = None
        self._sentiment = None
        self._symbol = None
        self.discriminator = None

        if buzz is not None:
            self.buzz = buzz
        if company_news_score is not None:
            self.company_news_score = company_news_score
        if sector_average_bullish_percent is not None:
            self.sector_average_bullish_percent = sector_average_bullish_percent
        if sector_average_news_score is not None:
            self.sector_average_news_score = sector_average_news_score
        if sentiment is not None:
            self.sentiment = sentiment
        if symbol is not None:
            self.symbol = symbol

    @property
    def buzz(self):
        """Gets the buzz of this NewsSentiment.  # noqa: E501


        :return: The buzz of this NewsSentiment.  # noqa: E501
        :rtype: CompanyNewsStatistics
        """
        return self._buzz

    @buzz.setter
    def buzz(self, buzz):
        """Sets the buzz of this NewsSentiment.


        :param buzz: The buzz of this NewsSentiment.  # noqa: E501
        :type: CompanyNewsStatistics
        """

        self._buzz = buzz

    @property
    def company_news_score(self):
        """Gets the company_news_score of this NewsSentiment.  # noqa: E501

        News score.  # noqa: E501

        :return: The company_news_score of this NewsSentiment.  # noqa: E501
        :rtype: float
        """
        return self._company_news_score

    @company_news_score.setter
    def company_news_score(self, company_news_score):
        """Sets the company_news_score of this NewsSentiment.

        News score.  # noqa: E501

        :param company_news_score: The company_news_score of this NewsSentiment.  # noqa: E501
        :type: float
        """

        self._company_news_score = company_news_score

    @property
    def sector_average_bullish_percent(self):
        """Gets the sector_average_bullish_percent of this NewsSentiment.  # noqa: E501

        Sector average bullish percent.  # noqa: E501

        :return: The sector_average_bullish_percent of this NewsSentiment.  # noqa: E501
        :rtype: float
        """
        return self._sector_average_bullish_percent

    @sector_average_bullish_percent.setter
    def sector_average_bullish_percent(self, sector_average_bullish_percent):
        """Sets the sector_average_bullish_percent of this NewsSentiment.

        Sector average bullish percent.  # noqa: E501

        :param sector_average_bullish_percent: The sector_average_bullish_percent of this NewsSentiment.  # noqa: E501
        :type: float
        """

        self._sector_average_bullish_percent = sector_average_bullish_percent

    @property
    def sector_average_news_score(self):
        """Gets the sector_average_news_score of this NewsSentiment.  # noqa: E501

        Sectore average score.  # noqa: E501

        :return: The sector_average_news_score of this NewsSentiment.  # noqa: E501
        :rtype: float
        """
        return self._sector_average_news_score

    @sector_average_news_score.setter
    def sector_average_news_score(self, sector_average_news_score):
        """Sets the sector_average_news_score of this NewsSentiment.

        Sectore average score.  # noqa: E501

        :param sector_average_news_score: The sector_average_news_score of this NewsSentiment.  # noqa: E501
        :type: float
        """

        self._sector_average_news_score = sector_average_news_score

    @property
    def sentiment(self):
        """Gets the sentiment of this NewsSentiment.  # noqa: E501


        :return: The sentiment of this NewsSentiment.  # noqa: E501
        :rtype: Sentiment
        """
        return self._sentiment

    @sentiment.setter
    def sentiment(self, sentiment):
        """Sets the sentiment of this NewsSentiment.


        :param sentiment: The sentiment of this NewsSentiment.  # noqa: E501
        :type: Sentiment
        """

        self._sentiment = sentiment

    @property
    def symbol(self):
        """Gets the symbol of this NewsSentiment.  # noqa: E501

        Requested symbol.  # noqa: E501

        :return: The symbol of this NewsSentiment.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this NewsSentiment.

        Requested symbol.  # noqa: E501

        :param symbol: The symbol of this NewsSentiment.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewsSentiment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NewsSentiment):
            return True

        return self.to_dict() != other.to_dict()
