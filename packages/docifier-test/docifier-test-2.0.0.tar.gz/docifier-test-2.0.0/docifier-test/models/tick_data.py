# coding: utf-8

"""
    Finnhub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from docifier-test.configuration import Configuration


class TickData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        's': 'str',
        'skip': 'int',
        'count': 'int',
        'total': 'int',
        'v': 'list[float]',
        'p': 'list[float]',
        't': 'list[int]',
        'x': 'list[str]'
    }

    attribute_map = {
        's': 's',
        'skip': 'skip',
        'count': 'count',
        'total': 'total',
        'v': 'v',
        'p': 'p',
        't': 't',
        'x': 'x'
    }

    def __init__(self, s=None, skip=None, count=None, total=None, v=None, p=None, t=None, x=None, local_vars_configuration=None):  # noqa: E501
        """TickData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._s = None
        self._skip = None
        self._count = None
        self._total = None
        self._v = None
        self._p = None
        self._t = None
        self._x = None
        self.discriminator = None

        if s is not None:
            self.s = s
        if skip is not None:
            self.skip = skip
        if count is not None:
            self.count = count
        if total is not None:
            self.total = total
        if v is not None:
            self.v = v
        if p is not None:
            self.p = p
        if t is not None:
            self.t = t
        if x is not None:
            self.x = x

    @property
    def s(self):
        """Gets the s of this TickData.  # noqa: E501

        Symbol.  # noqa: E501

        :return: The s of this TickData.  # noqa: E501
        :rtype: str
        """
        return self._s

    @s.setter
    def s(self, s):
        """Sets the s of this TickData.

        Symbol.  # noqa: E501

        :param s: The s of this TickData.  # noqa: E501
        :type: str
        """

        self._s = s

    @property
    def skip(self):
        """Gets the skip of this TickData.  # noqa: E501

        Number of ticks skipped.  # noqa: E501

        :return: The skip of this TickData.  # noqa: E501
        :rtype: int
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this TickData.

        Number of ticks skipped.  # noqa: E501

        :param skip: The skip of this TickData.  # noqa: E501
        :type: int
        """

        self._skip = skip

    @property
    def count(self):
        """Gets the count of this TickData.  # noqa: E501

        Number of ticks returned. If <code>count</code> < <code>limit</code>, all data for that date has been returned.  # noqa: E501

        :return: The count of this TickData.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this TickData.

        Number of ticks returned. If <code>count</code> < <code>limit</code>, all data for that date has been returned.  # noqa: E501

        :param count: The count of this TickData.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def total(self):
        """Gets the total of this TickData.  # noqa: E501

        Total number of ticks for that date.  # noqa: E501

        :return: The total of this TickData.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this TickData.

        Total number of ticks for that date.  # noqa: E501

        :param total: The total of this TickData.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def v(self):
        """Gets the v of this TickData.  # noqa: E501

        List of volume data.  # noqa: E501

        :return: The v of this TickData.  # noqa: E501
        :rtype: list[float]
        """
        return self._v

    @v.setter
    def v(self, v):
        """Sets the v of this TickData.

        List of volume data.  # noqa: E501

        :param v: The v of this TickData.  # noqa: E501
        :type: list[float]
        """

        self._v = v

    @property
    def p(self):
        """Gets the p of this TickData.  # noqa: E501

        List of price data.  # noqa: E501

        :return: The p of this TickData.  # noqa: E501
        :rtype: list[float]
        """
        return self._p

    @p.setter
    def p(self, p):
        """Sets the p of this TickData.

        List of price data.  # noqa: E501

        :param p: The p of this TickData.  # noqa: E501
        :type: list[float]
        """

        self._p = p

    @property
    def t(self):
        """Gets the t of this TickData.  # noqa: E501

        List of timestamp in UNIX ms.  # noqa: E501

        :return: The t of this TickData.  # noqa: E501
        :rtype: list[int]
        """
        return self._t

    @t.setter
    def t(self, t):
        """Sets the t of this TickData.

        List of timestamp in UNIX ms.  # noqa: E501

        :param t: The t of this TickData.  # noqa: E501
        :type: list[int]
        """

        self._t = t

    @property
    def x(self):
        """Gets the x of this TickData.  # noqa: E501

        List of venues/exchanges.  # noqa: E501

        :return: The x of this TickData.  # noqa: E501
        :rtype: list[str]
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this TickData.

        List of venues/exchanges.  # noqa: E501

        :param x: The x of this TickData.  # noqa: E501
        :type: list[str]
        """

        self._x = x

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TickData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TickData):
            return True

        return self.to_dict() != other.to_dict()
