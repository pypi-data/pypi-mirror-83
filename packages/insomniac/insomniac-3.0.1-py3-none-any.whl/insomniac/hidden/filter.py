from insomniac.counters_parser import parse
from insomniac.hidden.activation import print_activation_required_to
from insomniac.utils import *

import base64

code = base64.b64decode(b'RklMRU5BTUVfQ09ORElUSU9OUyA9ICJmaWx0ZXIuanNvbiIKRklFTERfU0tJUF9CVVNJTkVTUyA9ICJza2lwX2J1c2luZXNzIgpGSUVMRF9TS0lQX05PTl9CVVNJTkVTUyA9ICJza2lwX25vbl9idXNpbmVzcyIKRklFTERfTUlOX0ZPTExPV0VSUyA9ICJtaW5fZm9sbG93ZXJzIgpGSUVMRF9NQVhfRk9MTE9XRVJTID0gIm1heF9mb2xsb3dlcnMiCkZJRUxEX01JTl9GT0xMT1dJTkdTID0gIm1pbl9mb2xsb3dpbmdzIgpGSUVMRF9NQVhfRk9MTE9XSU5HUyA9ICJtYXhfZm9sbG93aW5ncyIKRklFTERfTUlOX1BPVEVOQ1lfUkFUSU8gPSAibWluX3BvdGVuY3lfcmF0aW8iCkZJRUxEX0ZPTExPV19QUklWQVRFX09SX0VNUFRZID0gImZvbGxvd19wcml2YXRlX29yX2VtcHR5IgoKCmNsYXNzIEZpbHRlcjoKICAgIGNvbmRpdGlvbnMgPSBOb25lCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGFjdGl2YXRpb25fY29udHJvbGxlcik6CiAgICAgICAgaWYgb3MucGF0aC5leGlzdHMoRklMRU5BTUVfQ09ORElUSU9OUyk6CiAgICAgICAgICAgIGlmIG5vdCBhY3RpdmF0aW9uX2NvbnRyb2xsZXIuaXNfYWN0aXZhdGVkOgogICAgICAgICAgICAgICAgcHJpbnRfYWN0aXZhdGlvbl9yZXF1aXJlZF90bygidXNlIGZpbHRlci5qc29uIikKICAgICAgICAgICAgICAgIHJldHVybgoKICAgICAgICAgICAgd2l0aCBvcGVuKEZJTEVOQU1FX0NPTkRJVElPTlMpIGFzIGpzb25fZmlsZToKICAgICAgICAgICAgICAgIHNlbGYuY29uZGl0aW9ucyA9IGpzb24ubG9hZChqc29uX2ZpbGUpCgogICAgZGVmIGNoZWNrX3Byb2ZpbGUoc2VsZiwgZGV2aWNlLCB1c2VybmFtZSk6CiAgICAgICAgIiIiCiAgICAgICAgVGhpcyBtZXRob2QgYXNzdW1lcyBiZWluZyBvbiBzb21lb25lJ3MgcHJvZmlsZSBhbHJlYWR5LgogICAgICAgICIiIgogICAgICAgIGlmIHNlbGYuY29uZGl0aW9ucyBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gVHJ1ZQoKICAgICAgICBmaWVsZF9za2lwX2J1c2luZXNzID0gc2VsZi5jb25kaXRpb25zLmdldChGSUVMRF9TS0lQX0JVU0lORVNTKQogICAgICAgIGZpZWxkX3NraXBfbm9uX2J1c2luZXNzID0gc2VsZi5jb25kaXRpb25zLmdldChGSUVMRF9TS0lQX05PTl9CVVNJTkVTUykKICAgICAgICBmaWVsZF9taW5fZm9sbG93ZXJzID0gc2VsZi5jb25kaXRpb25zLmdldChGSUVMRF9NSU5fRk9MTE9XRVJTKQogICAgICAgIGZpZWxkX21heF9mb2xsb3dlcnMgPSBzZWxmLmNvbmRpdGlvbnMuZ2V0KEZJRUxEX01BWF9GT0xMT1dFUlMpCiAgICAgICAgZmllbGRfbWluX2ZvbGxvd2luZ3MgPSBzZWxmLmNvbmRpdGlvbnMuZ2V0KEZJRUxEX01JTl9GT0xMT1dJTkdTKQogICAgICAgIGZpZWxkX21heF9mb2xsb3dpbmdzID0gc2VsZi5jb25kaXRpb25zLmdldChGSUVMRF9NQVhfRk9MTE9XSU5HUykKICAgICAgICBmaWVsZF9taW5fcG90ZW5jeV9yYXRpbyA9IHNlbGYuY29uZGl0aW9ucy5nZXQoRklFTERfTUlOX1BPVEVOQ1lfUkFUSU8pCgogICAgICAgIGlmIGZpZWxkX3NraXBfYnVzaW5lc3MgaXMgbm90IE5vbmUgb3IgZmllbGRfc2tpcF9ub25fYnVzaW5lc3MgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGhhc19idXNpbmVzc19jYXRlZ29yeSA9IHNlbGYuX2hhc19idXNpbmVzc19jYXRlZ29yeShkZXZpY2UpCiAgICAgICAgICAgIGlmIGZpZWxkX3NraXBfYnVzaW5lc3MgYW5kIGhhc19idXNpbmVzc19jYXRlZ29yeSBpcyBUcnVlOgogICAgICAgICAgICAgICAgcHJpbnQoQ09MT1JfT0tHUkVFTiArICJAIiArIHVzZXJuYW1lICsgIiBoYXMgYnVzaW5lc3MgYWNjb3VudCwgc2tpcC4iICsgQ09MT1JfRU5EQykKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICBpZiBmaWVsZF9za2lwX25vbl9idXNpbmVzcyBhbmQgaGFzX2J1c2luZXNzX2NhdGVnb3J5IGlzIEZhbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoQ09MT1JfT0tHUkVFTiArICJAIiArIHVzZXJuYW1lICsgIiBoYXMgbm9uIGJ1c2luZXNzIGFjY291bnQsIHNraXAuIiArIENPTE9SX0VOREMpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAgICAgaWYgZmllbGRfbWluX2ZvbGxvd2VycyBpcyBub3QgTm9uZSBvciBmaWVsZF9tYXhfZm9sbG93ZXJzIGlzIG5vdCBOb25lIFwKICAgICAgICAgICAgICAgIG9yIGZpZWxkX21pbl9mb2xsb3dpbmdzIGlzIG5vdCBOb25lIG9yIGZpZWxkX21heF9mb2xsb3dpbmdzIGlzIG5vdCBOb25lIFwKICAgICAgICAgICAgICAgIG9yIGZpZWxkX21pbl9wb3RlbmN5X3JhdGlvIGlzIG5vdCBOb25lOgogICAgICAgICAgICBmb2xsb3dlcnMsIGZvbGxvd2luZ3MgPSBzZWxmLl9nZXRfZm9sbG93ZXJzX2FuZF9mb2xsb3dpbmdzKGRldmljZSkKICAgICAgICAgICAgaWYgZmllbGRfbWluX2ZvbGxvd2VycyBpcyBub3QgTm9uZSBhbmQgZm9sbG93ZXJzIDwgaW50KGZpZWxkX21pbl9mb2xsb3dlcnMpOgogICAgICAgICAgICAgICAgcHJpbnQoQ09MT1JfT0tHUkVFTiArICJAIiArIHVzZXJuYW1lICsgIiBoYXMgbGVzcyB0aGFuICIgKyBzdHIoZmllbGRfbWluX2ZvbGxvd2VycykgKwogICAgICAgICAgICAgICAgICAgICAgIiBmb2xsb3dlcnMsIHNraXAuIiArIENPTE9SX0VOREMpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgaWYgZmllbGRfbWF4X2ZvbGxvd2VycyBpcyBub3QgTm9uZSBhbmQgZm9sbG93ZXJzID4gaW50KGZpZWxkX21heF9mb2xsb3dlcnMpOgogICAgICAgICAgICAgICAgcHJpbnQoQ09MT1JfT0tHUkVFTiArICJAIiArIHVzZXJuYW1lICsgIiBoYXMgbW9yZSB0aGFuICIgKyBzdHIoZmllbGRfbWF4X2ZvbGxvd2VycykgKwogICAgICAgICAgICAgICAgICAgICAgIiBmb2xsb3dlcnMsIHNraXAuIiArIENPTE9SX0VOREMpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgaWYgZmllbGRfbWluX2ZvbGxvd2luZ3MgaXMgbm90IE5vbmUgYW5kIGZvbGxvd2luZ3MgPCBpbnQoZmllbGRfbWluX2ZvbGxvd2luZ3MpOgogICAgICAgICAgICAgICAgcHJpbnQoQ09MT1JfT0tHUkVFTiArICJAIiArIHVzZXJuYW1lICsgIiBoYXMgbGVzcyB0aGFuICIgKyBzdHIoZmllbGRfbWluX2ZvbGxvd2luZ3MpICsKICAgICAgICAgICAgICAgICAgICAgICIgZm9sbG93aW5ncywgc2tpcC4iICsgQ09MT1JfRU5EQykKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICBpZiBmaWVsZF9tYXhfZm9sbG93aW5ncyBpcyBub3QgTm9uZSBhbmQgZm9sbG93aW5ncyA+IGludChmaWVsZF9tYXhfZm9sbG93aW5ncyk6CiAgICAgICAgICAgICAgICBwcmludChDT0xPUl9PS0dSRUVOICsgIkAiICsgdXNlcm5hbWUgKyAiIGhhcyBtb3JlIHRoYW4gIiArIHN0cihmaWVsZF9tYXhfZm9sbG93aW5ncykgKwogICAgICAgICAgICAgICAgICAgICAgIiBmb2xsb3dpbmdzLCBza2lwLiIgKyBDT0xPUl9FTkRDKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIGlmIGZpZWxkX21pbl9wb3RlbmN5X3JhdGlvIGlzIG5vdCBOb25lIFwKICAgICAgICAgICAgICAgICAgICBhbmQgKGludChmb2xsb3dpbmdzKSA9PSAwIG9yIGZvbGxvd2VycyAvIGZvbGxvd2luZ3MgPCBmbG9hdChmaWVsZF9taW5fcG90ZW5jeV9yYXRpbykpOgogICAgICAgICAgICAgICAgcHJpbnQoQ09MT1JfT0tHUkVFTiArICJAIiArIHVzZXJuYW1lICsgIidzIHBvdGVuY3kgcmF0aW8gaXMgbGVzcyB0aGFuICIgKwogICAgICAgICAgICAgICAgICAgICAgc3RyKGZpZWxkX21pbl9wb3RlbmN5X3JhdGlvKSArICIsIHNraXAuIiArIENPTE9SX0VOREMpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBjYW5fZm9sbG93X3ByaXZhdGVfb3JfZW1wdHkoc2VsZik6CiAgICAgICAgaWYgc2VsZi5jb25kaXRpb25zIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICBmaWVsZF9mb2xsb3dfcHJpdmF0ZV9vcl9lbXB0eSA9IHNlbGYuY29uZGl0aW9ucy5nZXQoRklFTERfRk9MTE9XX1BSSVZBVEVfT1JfRU1QVFkpCiAgICAgICAgcmV0dXJuIGZpZWxkX2ZvbGxvd19wcml2YXRlX29yX2VtcHR5IGlzIG5vdCBOb25lIGFuZCBib29sKGZpZWxkX2ZvbGxvd19wcml2YXRlX29yX2VtcHR5KQoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBfZ2V0X2ZvbGxvd2Vyc19hbmRfZm9sbG93aW5ncyhkZXZpY2UpOgogICAgICAgIGZvbGxvd2VycyA9IDAKICAgICAgICBmb2xsb3dlcnNfdGV4dF92aWV3ID0gZGV2aWNlLmZpbmQoCiAgICAgICAgICAgIHJlc291cmNlSWQ9J2NvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9yb3dfcHJvZmlsZV9oZWFkZXJfdGV4dHZpZXdfZm9sbG93ZXJzX2NvdW50JywKICAgICAgICAgICAgY2xhc3NOYW1lPSdhbmRyb2lkLndpZGdldC5UZXh0VmlldycKICAgICAgICApCiAgICAgICAgaWYgZm9sbG93ZXJzX3RleHRfdmlldy5leGlzdHMoKToKICAgICAgICAgICAgZm9sbG93ZXJzX3RleHQgPSBmb2xsb3dlcnNfdGV4dF92aWV3LmdldF90ZXh0KCkKICAgICAgICAgICAgaWYgZm9sbG93ZXJzX3RleHQ6CiAgICAgICAgICAgICAgICBmb2xsb3dlcnMgPSBwYXJzZShkZXZpY2UsIGZvbGxvd2Vyc190ZXh0KQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcHJpbnRfdGltZWxlc3MoQ09MT1JfRkFJTCArICJDYW5ub3QgZ2V0IGZvbGxvd2VycyBjb3VudCB0ZXh0LCBkZWZhdWx0IGlzICIgKyBzdHIoZm9sbG93ZXJzKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDT0xPUl9FTkRDKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50X3RpbWVsZXNzKENPTE9SX0ZBSUwgKyAiQ2Fubm90IGZpbmQgZm9sbG93ZXJzIGNvdW50IHZpZXcsIGRlZmF1bHQgaXMgIiArIHN0cihmb2xsb3dlcnMpICsgQ09MT1JfRU5EQykKCiAgICAgICAgZm9sbG93aW5ncyA9IDAKICAgICAgICBmb2xsb3dpbmdzX3RleHRfdmlldyA9IGRldmljZS5maW5kKAogICAgICAgICAgICByZXNvdXJjZUlkPSdjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvcm93X3Byb2ZpbGVfaGVhZGVyX3RleHR2aWV3X2ZvbGxvd2luZ19jb3VudCcsCiAgICAgICAgICAgIGNsYXNzTmFtZT0nYW5kcm9pZC53aWRnZXQuVGV4dFZpZXcnKQogICAgICAgIGlmIGZvbGxvd2luZ3NfdGV4dF92aWV3LmV4aXN0cygpOgogICAgICAgICAgICBmb2xsb3dpbmdzX3RleHQgPSBmb2xsb3dpbmdzX3RleHRfdmlldy5nZXRfdGV4dCgpCiAgICAgICAgICAgIGlmIGZvbGxvd2luZ3NfdGV4dDoKICAgICAgICAgICAgICAgIGZvbGxvd2luZ3MgPSBwYXJzZShkZXZpY2UsIGZvbGxvd2luZ3NfdGV4dCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHByaW50X3RpbWVsZXNzKENPTE9SX0ZBSUwgKyAiQ2Fubm90IGdldCBmb2xsb3dpbmdzIGNvdW50IHRleHQsIGRlZmF1bHQgaXMgIiArIHN0cihmb2xsb3dpbmdzKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDT0xPUl9FTkRDKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50X3RpbWVsZXNzKENPTE9SX0ZBSUwgKyAiQ2Fubm90IGZpbmQgZm9sbG93aW5ncyBjb3VudCB2aWV3LCBkZWZhdWx0IGlzICIgKyBzdHIoZm9sbG93aW5ncykgKyBDT0xPUl9FTkRDKQoKICAgICAgICByZXR1cm4gZm9sbG93ZXJzLCBmb2xsb3dpbmdzCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIF9oYXNfYnVzaW5lc3NfY2F0ZWdvcnkoZGV2aWNlKToKICAgICAgICBidXNpbmVzc19jYXRlZ29yeV92aWV3ID0gZGV2aWNlLmZpbmQocmVzb3VyY2VJZD0nY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL3Byb2ZpbGVfaGVhZGVyX2J1c2luZXNzX2NhdGVnb3J5JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdhbmRyb2lkLndpZGdldC5UZXh0VmlldycpCiAgICAgICAgcmV0dXJuIGJ1c2luZXNzX2NhdGVnb3J5X3ZpZXcuZXhpc3RzKCkK')
exec(code)
