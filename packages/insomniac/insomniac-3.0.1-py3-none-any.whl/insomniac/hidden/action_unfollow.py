from insomniac import UnfollowRestriction
from insomniac.device_facade import DeviceFacade
from insomniac.hidden.activation import print_activation_required_to
from insomniac.navigation import switch_to_english, LanguageChangedException
from insomniac.storage import FollowingStatus
from insomniac.utils import *

import base64

code = base64.b64decode(b'')
exec(code)
