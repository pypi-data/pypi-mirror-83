from django.contrib.auth import authenticate, get_user_model
from django.core.exceptions import FieldDoesNotExist

from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from firebase_admin import auth

from .serializers import CredentialSerializer, TokenSerializer
from .app_settings import CUSTOM_TOKEN_KEY
from .firebase import firebase_admin


class CustomLoginView(APIView):
	"""
	Get credentials (username and password) from client side
	and return a custom token generated by Firebase admin
	if they are valid.
	"""
	def post(self, request, format=None):
		serializer = CredentialSerializer(data=request.data)

		if serializer.is_valid():
			username = serializer.validated_data['username']
			password = serializer.validated_data['password']

			user = authenticate(request, username=username, password=password)
			if user is not None:
				user_model = get_user_model()
				# Check if the key to generate a custom token exists and it is a primary key
				try:
					key_field = user_model._meta.get_field(CUSTOM_TOKEN_KEY)
				except FieldDoesNotExist:
					key_field = None

				if (key_field is not None and key_field.primary_key == True):
					key = str(getattr(user, CUSTOM_TOKEN_KEY))
					custom_token = auth.create_custom_token(key).decode()

					token_serializer = TokenSerializer({'token': custom_token})
					# Success
					return Response(data=token_serializer.data, status=status.HTTP_200_OK)
				# The key to generate a custom token is invalid.
				return Response(status=status.HTTP_500_INTERNAL_SERVER_ERROR)
		# The credentials are invalid.
		return Response(status=status.HTTP_406_NOT_ACCEPTABLE)
