{
  "src/lib/components/Button.react.js": {
    "description": "To trigger an operation.",
    "displayName": "Button",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks.\nThe ID needs to be unique across all of the components in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Use of *_timestamp props has been deprecated in Dash in favour of dash.callback_context.\nSee \"How do I determine which Input has changed?\" in the Dash FAQs https://dash.plot.ly/faqs.\n\nAn integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "block": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Option to fit button width to its parent width"
      },
      "danger": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set the danger status of button"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disabled state of button"
      },
      "ghost": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Make background transparent and invert text and border colors"
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Redirect url of link button"
      },
      "htmlType": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'submit'",
              "computed": false
            },
            {
              "value": "'reset'",
              "computed": false
            },
            {
              "value": "'button'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Set the original html type of button, see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type"
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Set the icon name of button"
      },
      "tooltip": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Set the tooltip title of button"
      },
      "loading": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Set the loading status of button"
      },
      "shape": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'circle'",
              "computed": false
            },
            {
              "value": "'round'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Can be set button shape"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'large'",
              "computed": false
            },
            {
              "value": "'middle'",
              "computed": false
            },
            {
              "value": "'small'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Set the size of button"
      },
      "target": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Same as target attribute of a, works when href is specified"
      },
      "type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'ghost'",
              "computed": false
            },
            {
              "value": "'dashed'",
              "computed": false
            },
            {
              "value": "'link'",
              "computed": false
            },
            {
              "value": "'text'",
              "computed": false
            },
            {
              "value": "'default'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Can be set to primary / ghost / dashed / link / text / default"
      }
    }
  },
  "src/lib/components/Divider.react.js": {
    "description": "Handling the overall sidebar of a page.",
    "displayName": "Divider",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks.\nThe ID needs to be unique across all of the components in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Container className"
      },
      "dashed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether line is dashed"
      },
      "orientation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The position of title inside divider"
      },
      "plain": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Divider text show as plain style"
      },
      "type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'horizontal'",
              "computed": false
            },
            {
              "value": "'vertical'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The direction type of divider"
      }
    }
  },
  "src/lib/components/GridCol.react.js": {
    "description": "24 Grids System.",
    "displayName": "GridCol",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks.\nThe ID needs to be unique across all of the components in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Container className"
      },
      "offset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of cells to offset Col from the left"
      },
      "order": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Raster order"
      },
      "pull": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of cells that raster is moved to the left"
      },
      "push": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of cells that raster is moved to the right"
      },
      "span": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Raster number of cells to occupy, 0 corresponds to display: none"
      },
      "xs": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "screen < 576px and also default setting, could be a span value or an object containing above props\tnumber | object\t-"
      },
      "sm": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "screen \u2265 576px, could be a span value or an object containing above props\tnumber | object\t-"
      },
      "md": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "screen \u2265 768px, could be a span value or an object containing above props\tnumber | object\t-"
      },
      "lg": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "screen \u2265 992px, could be a span value or an object containing above props\tnumber | object\t-"
      },
      "xl": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "screen \u2265 1200px, could be a span value or an object containing above props\tnumber | object\t-"
      },
      "xxl": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "screen \u2265 1600px, could be a span value or an object containing above props\tnumber | object"
      }
    }
  },
  "src/lib/components/GridRow.react.js": {
    "description": "24 Grids System.",
    "displayName": "GridRow",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks.\nThe ID needs to be unique across all of the components in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Container className"
      },
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'middle'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Vertical alignment"
      },
      "gutter": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "object"
            },
            {
              "name": "array"
            }
          ]
        },
        "required": false,
        "description": "Spacing between grids, could be a number or a object like { xs: 8, sm: 16, md: 24}.\nOr you can use array to make horizontal and vertical spacing work at the same time [horizontal, vertical]"
      },
      "justify": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'start'",
              "computed": false
            },
            {
              "value": "'end'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'space-around'",
              "computed": false
            },
            {
              "value": "'space-between'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Horizontal arrangement"
      }
    }
  },
  "src/lib/components/Icon.react.js": {
    "description": "Semantic vector graphics.",
    "displayName": "Icon",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks.\nThe ID needs to be unique across all of the components in an app."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The computed class name of the svg element"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The computed class name of the svg element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Define the color used to paint the svg element"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The height of the svg element"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The width of the svg element"
      }
    }
  },
  "src/lib/components/Input.react.js": {
    "description": "A basic widget for getting the user input is a text field.\nKeyboard and mouse can be used for providing or changing data.",
    "displayName": "Input",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks.\nThe ID needs to be unique across all of the components in an app."
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A short hint that describes the expected value of an input field."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The input content value"
      }
    }
  },
  "src/lib/components/Layout.react.js": {
    "description": "Handling the overall layout of a page.",
    "displayName": "Layout",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks.\nThe ID needs to be unique across all of the components in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Container className"
      }
    }
  },
  "src/lib/components/LayoutContent.react.js": {
    "description": "Handling the overall layout of a page.",
    "displayName": "LayoutContent",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks.\nThe ID needs to be unique across all of the components in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Container className"
      }
    }
  },
  "src/lib/components/LayoutFooter.react.js": {
    "description": "Handling the overall layout of a page.",
    "displayName": "LayoutFooter",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks.\nThe ID needs to be unique across all of the components in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Container className"
      }
    }
  },
  "src/lib/components/LayoutHeader.react.js": {
    "description": "Handling the overall layout of a page.",
    "displayName": "LayoutHeader",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks.\nThe ID needs to be unique across all of the components in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Container className"
      }
    }
  },
  "src/lib/components/LayoutSider.react.js": {
    "description": "Handling the overall sidebar of a page.",
    "displayName": "LayoutSider",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks.\nThe ID needs to be unique across all of the components in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Container className"
      },
      "collapsed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "To set the current status"
      },
      "collapsedWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of the collapsed sidebar, by setting to 0 a special trigger will appear"
      },
      "collapsible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether can be collapsed"
      },
      "reverseArrow": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Reverse direction of arrow, for a sider that expands from the right"
      },
      "theme": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'light'",
              "computed": false
            },
            {
              "value": "'dark'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Color theme of the sidebar"
      },
      "trigger": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Specify the customized trigger, set to null to hide the trigger"
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of the sidebar"
      }
    }
  },
  "src/lib/components/Space.react.js": {
    "description": "Handling the overall sidebar of a page.",
    "displayName": "Space",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks.\nThe ID needs to be unique across all of the components in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Container className"
      },
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'start'",
              "computed": false
            },
            {
              "value": "'end'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'baseline'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Align items"
      },
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'horizontal'",
              "computed": false
            },
            {
              "value": "'vertical'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The space direction"
      },
      "size": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "'small'",
                  "computed": false
                },
                {
                  "value": "'middle'",
                  "computed": false
                },
                {
                  "value": "'large'",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The space size"
      },
      "split": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Set split"
      }
    }
  },
  "src/lib/components/Typography.react.js": {
    "description": "Basic text writing, including headings, body text, lists, and more.",
    "displayName": "Typography",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks.\nThe ID needs to be unique across all of the components in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Container className"
      }
    }
  },
  "src/lib/components/TypographyLink.react.js": {
    "description": "Basic text writing, including headings, body text, lists, and more.",
    "displayName": "TypographyLink",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks.\nThe ID needs to be unique across all of the components in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Container className"
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Container href"
      },
      "target": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Container target"
      }
    }
  },
  "src/lib/components/TypographyParagraph.react.js": {
    "description": "Basic text writing, including headings, body text, lists, and more.",
    "displayName": "TypographyParagraph",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks.\nThe ID needs to be unique across all of the components in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Container className"
      },
      "code": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Code style"
      },
      "copyable": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Whether to be copyable, customize it via setting an object"
      },
      "delete": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Deleted line style"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disabled content"
      },
      "editable": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "If editable. Can control edit state when is object"
      },
      "ellipsis": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Display ellipsis when text overflows, can configure rows and expandable by using object"
      },
      "mark": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Marked style"
      },
      "strong": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Bold style"
      },
      "type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'success'",
              "computed": false
            },
            {
              "value": "'warning'",
              "computed": false
            },
            {
              "value": "'danger'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Content type"
      },
      "underline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Underlined style\tboolean\tfalse"
      }
    }
  },
  "src/lib/components/TypographyText.react.js": {
    "description": "Basic text writing, including headings, body text, lists, and more.",
    "displayName": "TypographyText",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks.\nThe ID needs to be unique across all of the components in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Container className"
      },
      "code": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Code style"
      },
      "copyable": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Whether to be copyable, customize it via setting an object"
      },
      "delete": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Deleted line style"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disabled content"
      },
      "editable": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "If editable. Can control edit state when is object"
      },
      "ellipsis": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Display ellipsis when text overflows, can configure rows and expandable by using object"
      },
      "keyboard": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Keyboard style"
      },
      "mark": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Marked style"
      },
      "strong": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Bold style"
      },
      "type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'success'",
              "computed": false
            },
            {
              "value": "'warning'",
              "computed": false
            },
            {
              "value": "'danger'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Content type"
      },
      "underline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Underlined style\tboolean\tfalse"
      }
    }
  },
  "src/lib/components/TypographyTitle.react.js": {
    "description": "Basic text writing, including headings, body text, lists, and more.",
    "displayName": "TypographyTitle",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks.\nThe ID needs to be unique across all of the components in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Container className"
      },
      "code": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Code style"
      },
      "copyable": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Whether to be copyable, customize it via setting an object"
      },
      "delete": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Deleted line style"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disabled content"
      },
      "editable": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "If editable. Can control edit state when is object"
      },
      "ellipsis": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Display ellipsis when text overflows, can configure rows and expandable by using object"
      },
      "level": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Set content importance. Match with h1, h2, h3, h4, h5"
      },
      "mark": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Marked style"
      },
      "strong": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Bold style"
      },
      "type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'success'",
              "computed": false
            },
            {
              "value": "'warning'",
              "computed": false
            },
            {
              "value": "'danger'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Content type"
      },
      "underline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Underlined style\tboolean\tfalse"
      }
    }
  }
}