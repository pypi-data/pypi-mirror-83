# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_kyber', [dirname(__file__)])
        except ImportError:
            import _kyber
            return _kyber
        if fp is not None:
            try:
                _mod = imp.load_module('_kyber', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _kyber = swig_import_helper()
    del swig_import_helper
else:
    import _kyber
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def cdata(ptr, nelements=1):
    return _kyber.cdata(ptr, nelements)
cdata = _kyber.cdata

def memmove(data, indata):
    return _kyber.memmove(data, indata)
memmove = _kyber.memmove
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _kyber.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _kyber.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _kyber.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _kyber.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _kyber.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _kyber.SwigPyIterator_equal(self, x)

    def copy(self):
        return _kyber.SwigPyIterator_copy(self)

    def next(self):
        return _kyber.SwigPyIterator_next(self)

    def __next__(self):
        return _kyber.SwigPyIterator___next__(self)

    def previous(self):
        return _kyber.SwigPyIterator_previous(self)

    def advance(self, n):
        return _kyber.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _kyber.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _kyber.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _kyber.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _kyber.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _kyber.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _kyber.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _kyber.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_kyber.SHARED_PTR_DISOWN_swigconstant(_kyber)
SHARED_PTR_DISOWN = _kyber.SHARED_PTR_DISOWN
class ucharCArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ucharCArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ucharCArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _kyber.new_ucharCArray(nelements)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kyber.delete_ucharCArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _kyber.ucharCArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _kyber.ucharCArray___setitem__(self, index, value)

    def cast(self):
        return _kyber.ucharCArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _kyber.ucharCArray_frompointer
    if _newclass:
        frompointer = staticmethod(_kyber.ucharCArray_frompointer)
ucharCArray_swigregister = _kyber.ucharCArray_swigregister
ucharCArray_swigregister(ucharCArray)

def ucharCArray_frompointer(t):
    return _kyber.ucharCArray_frompointer(t)
ucharCArray_frompointer = _kyber.ucharCArray_frompointer

class uintCArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uintCArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uintCArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _kyber.new_uintCArray(nelements)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kyber.delete_uintCArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _kyber.uintCArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _kyber.uintCArray___setitem__(self, index, value)

    def cast(self):
        return _kyber.uintCArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _kyber.uintCArray_frompointer
    if _newclass:
        frompointer = staticmethod(_kyber.uintCArray_frompointer)
uintCArray_swigregister = _kyber.uintCArray_swigregister
uintCArray_swigregister(uintCArray)

def uintCArray_frompointer(t):
    return _kyber.uintCArray_frompointer(t)
uintCArray_frompointer = _kyber.uintCArray_frompointer

class uint32CArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint32CArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint32CArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _kyber.new_uint32CArray(nelements)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kyber.delete_uint32CArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _kyber.uint32CArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _kyber.uint32CArray___setitem__(self, index, value)

    def cast(self):
        return _kyber.uint32CArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _kyber.uint32CArray_frompointer
    if _newclass:
        frompointer = staticmethod(_kyber.uint32CArray_frompointer)
uint32CArray_swigregister = _kyber.uint32CArray_swigregister
uint32CArray_swigregister(uint32CArray)

def uint32CArray_frompointer(t):
    return _kyber.uint32CArray_frompointer(t)
uint32CArray_frompointer = _kyber.uint32CArray_frompointer

class intVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _kyber.intVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _kyber.intVector___nonzero__(self)

    def __bool__(self):
        return _kyber.intVector___bool__(self)

    def __len__(self):
        return _kyber.intVector___len__(self)

    def __getslice__(self, i, j):
        return _kyber.intVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _kyber.intVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _kyber.intVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _kyber.intVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _kyber.intVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _kyber.intVector___setitem__(self, *args)

    def pop(self):
        return _kyber.intVector_pop(self)

    def append(self, x):
        return _kyber.intVector_append(self, x)

    def empty(self):
        return _kyber.intVector_empty(self)

    def size(self):
        return _kyber.intVector_size(self)

    def swap(self, v):
        return _kyber.intVector_swap(self, v)

    def begin(self):
        return _kyber.intVector_begin(self)

    def end(self):
        return _kyber.intVector_end(self)

    def rbegin(self):
        return _kyber.intVector_rbegin(self)

    def rend(self):
        return _kyber.intVector_rend(self)

    def clear(self):
        return _kyber.intVector_clear(self)

    def get_allocator(self):
        return _kyber.intVector_get_allocator(self)

    def pop_back(self):
        return _kyber.intVector_pop_back(self)

    def erase(self, *args):
        return _kyber.intVector_erase(self, *args)

    def __init__(self, *args):
        this = _kyber.new_intVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _kyber.intVector_push_back(self, x)

    def front(self):
        return _kyber.intVector_front(self)

    def back(self):
        return _kyber.intVector_back(self)

    def assign(self, n, x):
        return _kyber.intVector_assign(self, n, x)

    def resize(self, *args):
        return _kyber.intVector_resize(self, *args)

    def insert(self, *args):
        return _kyber.intVector_insert(self, *args)

    def reserve(self, n):
        return _kyber.intVector_reserve(self, n)

    def capacity(self):
        return _kyber.intVector_capacity(self)
    __swig_destroy__ = _kyber.delete_intVector
    __del__ = lambda self: None
intVector_swigregister = _kyber.intVector_swigregister
intVector_swigregister(intVector)

class uintVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uintVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uintVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _kyber.uintVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _kyber.uintVector___nonzero__(self)

    def __bool__(self):
        return _kyber.uintVector___bool__(self)

    def __len__(self):
        return _kyber.uintVector___len__(self)

    def __getslice__(self, i, j):
        return _kyber.uintVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _kyber.uintVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _kyber.uintVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _kyber.uintVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _kyber.uintVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _kyber.uintVector___setitem__(self, *args)

    def pop(self):
        return _kyber.uintVector_pop(self)

    def append(self, x):
        return _kyber.uintVector_append(self, x)

    def empty(self):
        return _kyber.uintVector_empty(self)

    def size(self):
        return _kyber.uintVector_size(self)

    def swap(self, v):
        return _kyber.uintVector_swap(self, v)

    def begin(self):
        return _kyber.uintVector_begin(self)

    def end(self):
        return _kyber.uintVector_end(self)

    def rbegin(self):
        return _kyber.uintVector_rbegin(self)

    def rend(self):
        return _kyber.uintVector_rend(self)

    def clear(self):
        return _kyber.uintVector_clear(self)

    def get_allocator(self):
        return _kyber.uintVector_get_allocator(self)

    def pop_back(self):
        return _kyber.uintVector_pop_back(self)

    def erase(self, *args):
        return _kyber.uintVector_erase(self, *args)

    def __init__(self, *args):
        this = _kyber.new_uintVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _kyber.uintVector_push_back(self, x)

    def front(self):
        return _kyber.uintVector_front(self)

    def back(self):
        return _kyber.uintVector_back(self)

    def assign(self, n, x):
        return _kyber.uintVector_assign(self, n, x)

    def resize(self, *args):
        return _kyber.uintVector_resize(self, *args)

    def insert(self, *args):
        return _kyber.uintVector_insert(self, *args)

    def reserve(self, n):
        return _kyber.uintVector_reserve(self, n)

    def capacity(self):
        return _kyber.uintVector_capacity(self)
    __swig_destroy__ = _kyber.delete_uintVector
    __del__ = lambda self: None
uintVector_swigregister = _kyber.uintVector_swigregister
uintVector_swigregister(uintVector)

class ucharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ucharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ucharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _kyber.ucharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _kyber.ucharVector___nonzero__(self)

    def __bool__(self):
        return _kyber.ucharVector___bool__(self)

    def __len__(self):
        return _kyber.ucharVector___len__(self)

    def __getslice__(self, i, j):
        return _kyber.ucharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _kyber.ucharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _kyber.ucharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _kyber.ucharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _kyber.ucharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _kyber.ucharVector___setitem__(self, *args)

    def pop(self):
        return _kyber.ucharVector_pop(self)

    def append(self, x):
        return _kyber.ucharVector_append(self, x)

    def empty(self):
        return _kyber.ucharVector_empty(self)

    def size(self):
        return _kyber.ucharVector_size(self)

    def swap(self, v):
        return _kyber.ucharVector_swap(self, v)

    def begin(self):
        return _kyber.ucharVector_begin(self)

    def end(self):
        return _kyber.ucharVector_end(self)

    def rbegin(self):
        return _kyber.ucharVector_rbegin(self)

    def rend(self):
        return _kyber.ucharVector_rend(self)

    def clear(self):
        return _kyber.ucharVector_clear(self)

    def get_allocator(self):
        return _kyber.ucharVector_get_allocator(self)

    def pop_back(self):
        return _kyber.ucharVector_pop_back(self)

    def erase(self, *args):
        return _kyber.ucharVector_erase(self, *args)

    def __init__(self, *args):
        this = _kyber.new_ucharVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _kyber.ucharVector_push_back(self, x)

    def front(self):
        return _kyber.ucharVector_front(self)

    def back(self):
        return _kyber.ucharVector_back(self)

    def assign(self, n, x):
        return _kyber.ucharVector_assign(self, n, x)

    def resize(self, *args):
        return _kyber.ucharVector_resize(self, *args)

    def insert(self, *args):
        return _kyber.ucharVector_insert(self, *args)

    def reserve(self, n):
        return _kyber.ucharVector_reserve(self, n)

    def capacity(self):
        return _kyber.ucharVector_capacity(self)
    __swig_destroy__ = _kyber.delete_ucharVector
    __del__ = lambda self: None
ucharVector_swigregister = _kyber.ucharVector_swigregister
ucharVector_swigregister(ucharVector)

class charVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, charVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, charVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _kyber.charVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _kyber.charVector___nonzero__(self)

    def __bool__(self):
        return _kyber.charVector___bool__(self)

    def __len__(self):
        return _kyber.charVector___len__(self)

    def __getslice__(self, i, j):
        return _kyber.charVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _kyber.charVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _kyber.charVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _kyber.charVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _kyber.charVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _kyber.charVector___setitem__(self, *args)

    def pop(self):
        return _kyber.charVector_pop(self)

    def append(self, x):
        return _kyber.charVector_append(self, x)

    def empty(self):
        return _kyber.charVector_empty(self)

    def size(self):
        return _kyber.charVector_size(self)

    def swap(self, v):
        return _kyber.charVector_swap(self, v)

    def begin(self):
        return _kyber.charVector_begin(self)

    def end(self):
        return _kyber.charVector_end(self)

    def rbegin(self):
        return _kyber.charVector_rbegin(self)

    def rend(self):
        return _kyber.charVector_rend(self)

    def clear(self):
        return _kyber.charVector_clear(self)

    def get_allocator(self):
        return _kyber.charVector_get_allocator(self)

    def pop_back(self):
        return _kyber.charVector_pop_back(self)

    def erase(self, *args):
        return _kyber.charVector_erase(self, *args)

    def __init__(self, *args):
        this = _kyber.new_charVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _kyber.charVector_push_back(self, x)

    def front(self):
        return _kyber.charVector_front(self)

    def back(self):
        return _kyber.charVector_back(self)

    def assign(self, n, x):
        return _kyber.charVector_assign(self, n, x)

    def resize(self, *args):
        return _kyber.charVector_resize(self, *args)

    def insert(self, *args):
        return _kyber.charVector_insert(self, *args)

    def reserve(self, n):
        return _kyber.charVector_reserve(self, n)

    def capacity(self):
        return _kyber.charVector_capacity(self)
    __swig_destroy__ = _kyber.delete_charVector
    __del__ = lambda self: None
charVector_swigregister = _kyber.charVector_swigregister
charVector_swigregister(charVector)

class doubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _kyber.doubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _kyber.doubleVector___nonzero__(self)

    def __bool__(self):
        return _kyber.doubleVector___bool__(self)

    def __len__(self):
        return _kyber.doubleVector___len__(self)

    def __getslice__(self, i, j):
        return _kyber.doubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _kyber.doubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _kyber.doubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _kyber.doubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _kyber.doubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _kyber.doubleVector___setitem__(self, *args)

    def pop(self):
        return _kyber.doubleVector_pop(self)

    def append(self, x):
        return _kyber.doubleVector_append(self, x)

    def empty(self):
        return _kyber.doubleVector_empty(self)

    def size(self):
        return _kyber.doubleVector_size(self)

    def swap(self, v):
        return _kyber.doubleVector_swap(self, v)

    def begin(self):
        return _kyber.doubleVector_begin(self)

    def end(self):
        return _kyber.doubleVector_end(self)

    def rbegin(self):
        return _kyber.doubleVector_rbegin(self)

    def rend(self):
        return _kyber.doubleVector_rend(self)

    def clear(self):
        return _kyber.doubleVector_clear(self)

    def get_allocator(self):
        return _kyber.doubleVector_get_allocator(self)

    def pop_back(self):
        return _kyber.doubleVector_pop_back(self)

    def erase(self, *args):
        return _kyber.doubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _kyber.new_doubleVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _kyber.doubleVector_push_back(self, x)

    def front(self):
        return _kyber.doubleVector_front(self)

    def back(self):
        return _kyber.doubleVector_back(self)

    def assign(self, n, x):
        return _kyber.doubleVector_assign(self, n, x)

    def resize(self, *args):
        return _kyber.doubleVector_resize(self, *args)

    def insert(self, *args):
        return _kyber.doubleVector_insert(self, *args)

    def reserve(self, n):
        return _kyber.doubleVector_reserve(self, n)

    def capacity(self):
        return _kyber.doubleVector_capacity(self)
    __swig_destroy__ = _kyber.delete_doubleVector
    __del__ = lambda self: None
doubleVector_swigregister = _kyber.doubleVector_swigregister
doubleVector_swigregister(doubleVector)

class _string_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _string_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _string_list, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _kyber._string_list_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _kyber._string_list___nonzero__(self)

    def __bool__(self):
        return _kyber._string_list___bool__(self)

    def __len__(self):
        return _kyber._string_list___len__(self)

    def __getslice__(self, i, j):
        return _kyber._string_list___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _kyber._string_list___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _kyber._string_list___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _kyber._string_list___delitem__(self, *args)

    def __getitem__(self, *args):
        return _kyber._string_list___getitem__(self, *args)

    def __setitem__(self, *args):
        return _kyber._string_list___setitem__(self, *args)

    def pop(self):
        return _kyber._string_list_pop(self)

    def append(self, x):
        return _kyber._string_list_append(self, x)

    def empty(self):
        return _kyber._string_list_empty(self)

    def size(self):
        return _kyber._string_list_size(self)

    def swap(self, v):
        return _kyber._string_list_swap(self, v)

    def begin(self):
        return _kyber._string_list_begin(self)

    def end(self):
        return _kyber._string_list_end(self)

    def rbegin(self):
        return _kyber._string_list_rbegin(self)

    def rend(self):
        return _kyber._string_list_rend(self)

    def clear(self):
        return _kyber._string_list_clear(self)

    def get_allocator(self):
        return _kyber._string_list_get_allocator(self)

    def pop_back(self):
        return _kyber._string_list_pop_back(self)

    def erase(self, *args):
        return _kyber._string_list_erase(self, *args)

    def __init__(self, *args):
        this = _kyber.new__string_list(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _kyber._string_list_push_back(self, x)

    def front(self):
        return _kyber._string_list_front(self)

    def back(self):
        return _kyber._string_list_back(self)

    def assign(self, n, x):
        return _kyber._string_list_assign(self, n, x)

    def resize(self, *args):
        return _kyber._string_list_resize(self, *args)

    def insert(self, *args):
        return _kyber._string_list_insert(self, *args)

    def reserve(self, n):
        return _kyber._string_list_reserve(self, n)

    def capacity(self):
        return _kyber._string_list_capacity(self)
    __swig_destroy__ = _kyber.delete__string_list
    __del__ = lambda self: None
_string_list_swigregister = _kyber._string_list_swigregister
_string_list_swigregister(_string_list)

class _string_list_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _string_list_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _string_list_list, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _kyber._string_list_list_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _kyber._string_list_list___nonzero__(self)

    def __bool__(self):
        return _kyber._string_list_list___bool__(self)

    def __len__(self):
        return _kyber._string_list_list___len__(self)

    def __getslice__(self, i, j):
        return _kyber._string_list_list___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _kyber._string_list_list___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _kyber._string_list_list___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _kyber._string_list_list___delitem__(self, *args)

    def __getitem__(self, *args):
        return _kyber._string_list_list___getitem__(self, *args)

    def __setitem__(self, *args):
        return _kyber._string_list_list___setitem__(self, *args)

    def pop(self):
        return _kyber._string_list_list_pop(self)

    def append(self, x):
        return _kyber._string_list_list_append(self, x)

    def empty(self):
        return _kyber._string_list_list_empty(self)

    def size(self):
        return _kyber._string_list_list_size(self)

    def swap(self, v):
        return _kyber._string_list_list_swap(self, v)

    def begin(self):
        return _kyber._string_list_list_begin(self)

    def end(self):
        return _kyber._string_list_list_end(self)

    def rbegin(self):
        return _kyber._string_list_list_rbegin(self)

    def rend(self):
        return _kyber._string_list_list_rend(self)

    def clear(self):
        return _kyber._string_list_list_clear(self)

    def get_allocator(self):
        return _kyber._string_list_list_get_allocator(self)

    def pop_back(self):
        return _kyber._string_list_list_pop_back(self)

    def erase(self, *args):
        return _kyber._string_list_list_erase(self, *args)

    def __init__(self, *args):
        this = _kyber.new__string_list_list(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _kyber._string_list_list_push_back(self, x)

    def front(self):
        return _kyber._string_list_list_front(self)

    def back(self):
        return _kyber._string_list_list_back(self)

    def assign(self, n, x):
        return _kyber._string_list_list_assign(self, n, x)

    def resize(self, *args):
        return _kyber._string_list_list_resize(self, *args)

    def insert(self, *args):
        return _kyber._string_list_list_insert(self, *args)

    def reserve(self, n):
        return _kyber._string_list_list_reserve(self, n)

    def capacity(self):
        return _kyber._string_list_list_capacity(self)
    __swig_destroy__ = _kyber.delete__string_list_list
    __del__ = lambda self: None
_string_list_list_swigregister = _kyber._string_list_list_swigregister
_string_list_list_swigregister(_string_list_list)


_kyber.KYBER_K_swigconstant(_kyber)
KYBER_K = _kyber.KYBER_K

_kyber.CRYPTO_ALGNAME_swigconstant(_kyber)
CRYPTO_ALGNAME = _kyber.CRYPTO_ALGNAME

def crypto_kem_keypair(pk, sk):
    return _kyber.crypto_kem_keypair(pk, sk)
crypto_kem_keypair = _kyber.crypto_kem_keypair

def crypto_kem_enc(ct, ss, pk):
    return _kyber.crypto_kem_enc(ct, ss, pk)
crypto_kem_enc = _kyber.crypto_kem_enc

def crypto_kem_dec(ss, ct, sk):
    return _kyber.crypto_kem_dec(ss, ct, sk)
crypto_kem_dec = _kyber.crypto_kem_dec

def randombytes(x, xlen):
    return _kyber.randombytes(x, xlen)
randombytes = _kyber.randombytes
class Kyber(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Kyber, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Kyber, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _kyber.new_Kyber(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kyber.delete_Kyber
    __del__ = lambda self: None

    def getPK(self):
        return _kyber.Kyber_getPK(self)

    def getSK(self):
        return _kyber.Kyber_getSK(self)

    def getMyKey(self):
        return _kyber.Kyber_getMyKey(self)

    def getCypherText(self):
        return _kyber.Kyber_getCypherText(self)

    def kem_encode(self, other_pk):
        return _kyber.Kyber_kem_encode(self, other_pk)

    def kem_decode(self, cyphertext):
        return _kyber.Kyber_kem_decode(self, cyphertext)
Kyber_swigregister = _kyber.Kyber_swigregister
Kyber_swigregister(Kyber)

# This file is compatible with both classic and new-style classes.


