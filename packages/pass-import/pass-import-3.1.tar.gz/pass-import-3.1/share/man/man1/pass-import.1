.TH MARK 1 "April 2020" "pass-import"

.SH NAME
pass-import \- A \fBpass\fP(1) extension for importing data from most of
the existing password manager.


.SH SYNOPSIS
\fBpass import\fP [options] src [src]

.SH DESCRIPTION
\fBpass import\fP is a password store extension allowing you to import your
password database to a password store repository conveniently. It natively
supports import from \# NB BEGIN
53
\# NB END
different password managers. More manager support can easily be added.

Passwords are imported into the existing default password store; therefore,
the password store must have been initialised before with \fBpass init\fP.

By default, pass imports entries at the root of the password store and only
keeps the primary data (password, login, email, URL, group). This behavior can
be changed using the provided options.

Pass import handles duplicates and is compatible with \fIbrowserpass\fP. It
imports OTP secret in a way that is compatible with \fIpass-otp\fP.

.SH COMMAND
.TP
\fBpass import\fP [ \fI--path <path>\fP, \fI-p <path>\fP ] [ \fI--root <path>\fP, \fI-r <path>\fP ]
     [ \fI--key <file>\fP, \fI-k <file>\fP ] [ \fI--all\fP, \fI-a\fP ] [ \fI--force\fP, \fI-f\fP ]
     [ \fI--clean\fP, \fI-c\fP ] [\fI--convert\fP, \fI-Cl\fP] [ \fI--sep <char>\fP ]
     [ \fI--del <char>\fP ] [ \fI--cols <cols>\fP ] [ \fI--config <file>\fP ] [\fI--list\fP, \fI-l\fP]
     [\fI--help\fP, \fI-h\fP] [\fI--version\fP, \fI-V\fP] [ \fI--verbose\fP, \fI-v\fP ] [ \fI--quiet\fP, \fI-q\fP ]
     \fIsrc\fP [\fIsrc\fP]

Import data from most of the password manager. Passwords are imported into
the existing default password store; therefore, the password store must have
been initialised before with \fIpass init\fP.

.I src [\fIsrc\fP]
can refer to two things: the path to the data to import or to the password
manager name followed by the path to the data to import. If only the path to the
data to import is given, pass-import automatically detects the data format to
import. The complete list of supported managers can be found in the section
\fISUPPORTED MANAGERS\fP.

Specific root directory to use in the password store can be given using
\fI--path\fP or \fI-p\fP or \fI--root\fP or \fI-r\fP, along with an argument.
Where \fI--path\fP refer to the destination repository while \fI--root\fP refer
to the source repository.

If required by a password manager, a key file can be given using the
\fI--key\fP or \fI-k\fP option along with the path to the keyfile to use.

If \fI--all\fP or \fI-a\fP is specified, conserve and import all the data
present in the backup file. Otherwise, only title, password, login, URL,
comments, and group data are imported.

If \fI--force\fP or \fI-f\fP is specified, the import process will overwrite
existing password entry if it already exists.

If \fI--clean\fP or \fI-c\fP is specified, clean the password path in order to
be more command line friendly.

If \fI--convert\fP or \fI-C\fP is specified, convert the invalid characters
present in the paths before import. Invalid characters for both Windows and Unix
systems are supported. The default separator replaces the invalid characters: '-'

If \fI--sep\fP is specified, provide a character of replacement for the path
separator. Default: '-'

If \fI--del\fP is specified, provide an alternative CSV delimiter character.
Default: ','

If \fI--cols\fP is specified along with an argument, set the expected CSV columns
to map columns to credential attributes. Only used for the generic csv importer.

If \fI--config\fP is specified along with an argument, pass-import will consider
this config file instead of the default one '.import'.

If \fI--list\fP or \fI-l\fP is specified, print the list of the available
password manager.

If \fI--help\fP or \fI-h\fP is specified without argument, print the program
usage. If the option is specified along with an argument and if this argument is
a supported password manager, print usage for this manager.

If \fI--verbose\fP or \fI-v\fP is specified, be more verbose. This option
can be specified multiple times to set the verbosity level.

.SH OPTIONS

.TP
\fB\-r <path>\fB, \-\-root=<path>\fR
Only import the password from a specific subfolder.

.TP
\fB\-p <path>\fB, \-\-path=<path>\fR
Import the passwords to a specific subfolder.

.TP
\fB\-k <file>\fB, \-\-key=<file>\fR
Path to a keyfile if required by a manager.

.TP
\fB\-a\fB, \-\-all\fR
Also import all the extra data present.

.TP
\fB\-f\fB, \-\-force\fR
Overwrite existing passwords.

.TP
\fB\-c\fB, \-\-clean\fR
Clean data before import.

.TP
\fB\-C\fB, \-\-convert\fR
Convert invalid characters present in the paths.

.TP
\fB\-\-sep=<char>\fR
Provide a character of replacement for the path separator. Default: '-'

.TP
\fB\-\-del=<char>\fR
Provide an alternative CSV delimiter character. Default: ','

.TP
\fB\-\-cols=<cols>\fR
CSV expected columns to map columns to credential attributes. Only used for the
generic csv importer.

.TP
\fB\-\-config=<file>\fR
Set a config file. Default: '.import'

.TP
\fB\-l\fB, \-\-list\fR
List the supported password managers.

.TP
\fB\-h\fB, \-\-help\fR
Show usage message.

.TP
\fB\-V\fB, \-\-version\fR
Show the program version and exit.

.TP
\fB\-v\fB, \-\-verbose\fR
Set verbosity level, can be used more than once.

.TP
\fB\-q\fB, \-\-quiet\fR
Be quiet.

.SH EXAMPLES

.TP
Import password from KeePass
.B zx2c4@laptop ~ $ pass import keepass.xml
.br
(*) Importing passwords from keepass to pass
.br
 .  Passwords imported from: keepass.xml
.br
 .  Passwords exported to: ~/.password-store
.br
 .  Number of password imported: 6
.br
 .  Passwords imported:
.br
       Social/mastodon.social
.br
       Social/twitter.com
.br
       Social/news.ycombinator.com
.br
       Servers/ovh.com/bynbyjhqjz
.br
       Servers/ovh.com/jsdkyvbwjn
.br
       Bank/aib

.TP
Import password to a different password store
.B zx2c4@laptop ~ $ export PASSWORD_STORE_DIR="~/.mypassword-store"
.br
.B zx2c4@laptop ~ $ pass init <gpg-id>
.br
.B zx2c4@laptop ~ $ pass import keepass.kdbx

.TP
Import password to a subfolder
.B zx2c4@laptop ~ $ pass import bitwarden.json -p Import/
.br
(*) Importing passwords from bitwarden to pass
.br
 .  Passwords imported from: bitwarden.json
.br
 .  Passwords exported to: ~/.password-store
.br
 .  Root path: Import
.br
 .  Number of password imported: 6
.br
 .  Passwords imported:
.br
      Import/Social/mastodon.social
.br
      Import/Social/twitter.com
.br
      Import/Social/news.ycombinator.com
.br
      Import/Servers/ovh.com/bynbyjhqjz
.br
      Import/Servers/ovh.com/jsdkyvbwjn
.br
      Import/Bank/aib

.TP
If the manager is not correctly detected, you can pass it at source argument
.B zx2c4@laptop ~ $ pass import dashlane dashlane.csv

.SH CONFIGURATION FILE

Some configurations can be read from a configuration file called \fI.import\fP if
it is present at the root of the password repository. The configuration read from
this file will be overwritten by their corresponding command-line option
if present.

.TP
Example of the .import configuration file for the default password repository
.B zx2c4@laptop ~ $ cat ~/.password-store/.import
.br
---

# Separator string
.br
separator: '-'

# The list of string that should be replaced by other string. Only activated
.br
# if the `clean` option is enabled.
.br
cleans:
.br
  ' ': '-'
.br
  '&': 'and'

# The list of protocol. To be removed from the title.
.br
protocols:
.br
  - http://

# The list of invalid characters. Replaced by the separator.
.br
invalids:
.br
  - '<'
.br
  - '>'


.SH SUPPORTED MANAGERS

\# LIST BEGIN

.TP
\fB1password (csv) v6\fP
Website: \fIhttps://1password.com\fP

Export: See this guide: \fIhttps://support.1password.com/export\fP

Command: pass import 1password file.csv

.TP
\fB1password (1pif) v4\fP
Website: \fIhttps://1password.com\fP

Export: See this guide: \fIhttps://support.1password.com/export\fP

Command: pass import 1password file.1pif

.TP
\fB1password (csv) v4\fP
Website: \fIhttps://1password.com\fP

Export: See this guide: \fIhttps://support.1password.com/export\fP

Command: pass import 1password file.csv

.TP
\fBaegis (json)\fP
Website: \fIhttps://github.com/beemdevelopment/Aegis\fP

Export: Settings> Tools: Export Plain

Command: pass import aegis file.json

.TP
\fBaegis (json)\fP
Website: \fIhttps://github.com/beemdevelopment/Aegis\fP

Export: Settings> Tools: Export encrypted

Command: pass import aegis file.json

.TP
\fBandotp (json)\fP
Website: \fIhttps://github.com/andOTP/andOTP\fP

Export: Backups> Backup plain

Command: pass import andotp file.json

.TP
\fBapple-keychain (keychain)\fP
Website: \fIhttps://support.apple.com/guide/keychain-access\fP

Export: See this guide: \fIhttps://gist.github.com/santigz/601f4fd2f039d6ceb2198e2f9f4f01e0\fP

Command: pass import applekeychain file.txt

.TP
\fBbitwarden (csv)\fP
Website: \fIhttps://bitwarden.com\fP

Export: Tools> Export Vault> File Format: .csv

Command: pass import bitwarden file.csv

.TP
\fBbitwarden (json)\fP
Website: \fIhttps://bitwarden.com\fP

Export: Tools> Export Vault> File Format: .json

Command: pass import bitwarden file.json

.TP
\fBblur (json)\fP
Website: \fIhttps://abine.com\fP

Export: Settings: Export Data: Export Blur Data

Command: pass import blur file.json

.TP
\fBblur (csv)\fP
Website: \fIhttps://abine.com\fP

Export: Settings: Export Data: Export CSV: Accounts: Export CSV

Command: pass import blur file.csv

.TP
\fBbuttercup (csv)\fP
Website: \fIhttps://buttercup.pw\fP

Export: File > Export > Export File to CSV

Command: pass import buttercup file.csv

.TP
\fBchrome (csv)\fP
Website: \fIhttps://support.google.com/chrome\fP

Export: See this guide: \fIhttps://support.google.com/chrome/answer/95606#see\fP

Command: pass import chrome file.csv

.TP
\fBchrome (csv)\fP
Website: \fIhttps://support.google.com/chrome\fP

Export: See this guide: \fIhttps://support.google.com/chrome/answer/95606#see\fP

Command: pass import chrome file.csv

.TP
\fBclipperz (html)\fP
Website: \fIhttps://clipperz.is\fP

Export: Settings > Data > Export: HTML + JSON

Command: pass import clipperz file.html

.TP
\fBcsv (csv)\fP
Website: \fI\fP


 You should use the --cols option to map columns to credential attributes.
 The recognized column names by pass-import are the following:
 'title', 'password', 'login', 'email', 'url', 'comments',
 'otpauth', 'group'
 ``title`` and ``group`` field are used to generate the password
 path. If you have otp data, they should be named as ``otpauth``.
 These are the *standard* field names. You can add any other field
 you want.


Export: Nothing to do

Command: pass import csv file.csv --cols 'url,login,,password'

.TP
\fBdashlane (csv)\fP
Website: \fIhttps://www.dashlane.com\fP

Export: File > Export > Unsecured Archive in CSV

Command: pass import dashlane file.csv

.TP
\fBdashlane (json)\fP
Website: \fIhttps://www.dashlane.com\fP

Export: File > Export > Unsecured Archive in JSON

Command: pass import dashlane file.json

.TP
\fBencryptr (csv)\fP
Website: \fIhttps://spideroak.com/encryptr\fP

Export: Compile from source and follow instructions from this guide: \fIhttps://github.com/SpiderOak/Encryptr/issues/295#issuecomment-322449705\fP

Command: pass import encryptr file.csv

.TP
\fBenpass (json) v6\fP
Website: \fIhttps://www.enpass.io\fP

Export: Menu > File > Export > As JSON

Command: pass import enpass file.json

.TP
\fBenpass (csv)\fP
Website: \fIhttps://www.enpass.io\fP

Export: File > Export > As CSV

Command: pass import enpass file.csv

.TP
\fBfirefox (csv)\fP
Website: \fIhttps://github.com/kspearrin/ff-password-exporter\fP

Export: Add-ons Prefs: Export Passwords: CSV

Command: pass import firefox file.csv

.TP
\fBfpm (xml)\fP
Website: \fIhttp://fpm.sourceforge.net\fP

Export: File > Export Passwords: Plain XML

Command: pass import fpm file.xml

.TP
\fBfreeotp+ (json)\fP
Website: \fIhttps://github.com/helloworld1/FreeOTPPlus\fP

Export: Settings> Export> Export JSON Format

Command: pass import freeotp+ file.json

.TP
\fBgnome (libsecret)\fP
Website: \fIhttps://wiki.gnome.org/Projects/GnomeKeyring\fP


 You can provide a gnome-keyring collection label to import. It can be empty
 to import all collections.


Export: Nothing to do

Command: pass import gnome-keyring <label>

.TP
\fBgnome-auth (json)\fP
Website: \fIhttps://gitlab.gnome.org/World/Authenticator\fP

Export: Backup > in a plain-text JSON file

Command: pass import gnome-authenticator file.json

.TP
\fBgorilla (csv)\fP
Website: \fIhttps://github.com/zdia/gorilla/wiki\fP

Export: File > Export: Yes: CSV Files

Command: pass import gorilla file.csv

.TP
\fBkedpm (xml)\fP
Website: \fIhttp://fpm.sourceforge.net\fP

Export: File > Export Passwords: Plain XML

Command: pass import kedpm file.xml

.TP
\fBkeepass (kdbx)\fP
Website: \fIhttps://www.keepass.info\fP

Export: Nothing to do

Command: pass import keepass file.kdbx

.TP
\fBkeepass (csv)\fP
Website: \fIhttps://www.keepass.info\fP

Export: File > Export > Keepass (CSV)

Command: pass import keepass file.csv

.TP
\fBkeepass (xml)\fP
Website: \fIhttps://www.keepass.info\fP

Export: File > Export > Keepass (XML)

Command: pass import keepass file.xml

.TP
\fBkeepassx (xml)\fP
Website: \fIhttps://www.keepassx.org\fP

Export: File > Export to > Keepass XML File

Command: pass import keepassx file.xml

.TP
\fBkeepassx2 (kdbx)\fP
Website: \fIhttps://www.keepassx.org\fP

Export: Nothing to do

Command: pass import keepassx2 file.kdbx

.TP
\fBkeepassx2 (csv)\fP
Website: \fIhttps://www.keepassx.org\fP

Export: Database > Export to CSV File

Command: pass import keepassx2 file.csv

.TP
\fBkeepassxc (kdbx)\fP
Website: \fIhttps://keepassxc.org\fP

Export: Nothing to do

Command: pass import keepassxc file.kdbx

.TP
\fBkeepassxc (csv)\fP
Website: \fIhttps://keepassxc.org\fP

Export: Database > Export to CSV File

Command: pass import keepassxc file.csv

.TP
\fBkeeper (csv)\fP
Website: \fIhttps://keepersecurity.com\fP

Export: Settings > Export : Export to CSV File

Command: pass import keeper file.csv

.TP
\fBlastpass (csv)\fP
Website: \fIhttps://www.lastpass.com\fP

Export: More Options > Advanced > Export

Command: pass import lastpass file.csv

.TP
\fBmyki (csv)\fP
Website: \fIhttps://myki.com\fP

Export: See this guide: \fIhttps://support.myki.com/myki-app/exporting-your-passwords-from-the-myki-app/how-to-export-your-passwords-account-data-from-myki\fP

Command: pass import myki file.csv

.TP
\fBnetwork-manager (nm)\fP
Website: \fIhttps://wiki.gnome.org/Projects/NetworkManager\fP


 Support import from the installed network configuration but also from a
 specific directory of NetworkManager configuration file or from a given
 file.

 Example:
 -------
 - From directory of ini file: `pass import networkmanager dir/`.
 - From ini file: `pass import networkmanager file.ini`.


Export: Also support specific networkmanager dir and ini file

Command: pass import networkmanager

.TP
\fBpadlock (csv)\fP
Website: \fIhttps://padloc.app\fP

Export: Settings > Export Data and copy text into a .csv file

Command: pass import padlock file.csv

.TP
\fBpass (pass)\fP
Website: \fIhttps://passwordstore.org\fP

Export: Nothing to do

Command: pass import pass path/to/store

.TP
\fBpassman (csv)\fP
Website: \fIhttps://passman.cc\fP

Export: Settings > Export credentials  > Export type: CSV

Command: pass import passman file.csv

.TP
\fBpassman (json)\fP
Website: \fIhttps://passman.cc\fP

Export: Settings > Export credentials  > Export type: JSON

Command: pass import passman file.json

.TP
\fBpasspack (csv)\fP
Website: \fIhttps://www.passpack.com\fP

Export: Settings > Export > Save to CSV

Command: pass import passpack file.csv

.TP
\fBpasspie (yaml) v1.0\fP
Website: \fIhttps://www.enpass.io\fP

Export: `passpie export file.yml`

Command: pass import passpie file.yml

.TP
\fBpwsafe (xml)\fP
Website: \fIhttps://pwsafe.org\fP

Export: File > Export To > XML Format

Command: pass import pwsafe file.xml

.TP
\fBrevelation (xml)\fP
Website: \fIhttps://revelation.olasagasti.info\fP

Export: File > Export: XML

Command: pass import revelation file.xml

.TP
\fBroboform (csv)\fP
Website: \fIhttps://www.roboform.com\fP

Export: Roboform > Options > Data & Sync > Export To: CSV file

Command: pass import roboform file.csv

.TP
\fBsaferpass (csv)\fP
Website: \fIhttps://saferpass.net\fP

Export: Settings > Export Data: Export data

Command: pass import saferpass file.csv

.TP
\fBupm (csv)\fP
Website: \fIhttp://upm.sourceforge.net\fP

Export: Database > Export

Command: pass import upm file.csv

.TP
\fBzoho (csv)\fP
Website: \fIhttps://www.zoho.com/vault\fP

Export: Tools > Export Secrets: Zoho Vault Format CSV

Command: pass import zoho file.csv

.TP
\fBzoho (csv)\fP
Website: \fIhttps://www.zoho.com/vault\fP

Export: Tools > Export Secrets: Zoho Vault Format CSV

Command: pass import zoho file.csv
\# LIST END


.SH SECURITY CONSIDERATION

.TP
Passwords should not be written in plain text form on the drive. Therefore when possible, you should import it directly from the encrypted data. For instance, with an encrypted Keepass database:

.B user@laptop ~ $ pass import keepass file.kdbx

.TP
Otherwise, if your password manager does not support it, you should take care of securely removing the plain text password database:

.B user@laptop ~ $ pass import lastpass data.csv
.br
.B user@laptop ~ $ shred -u data.csv

.TP
Alternatively, pass-import can decrypt gpg encrypted file before importing it. For example:

.B user@laptop ~ $ pass import lastpass lastpass.csv.gpg

.SH SEE ALSO
.BR pass(1),
.BR pass-tomb(1),
.BR pass-update(1),
.BR pass-otp(1),
.BR pimport(1),
.BR pass-audit(1).


.SH AUTHORS
.B pass import
was written by
.MT alexandre@pujol.io
Alexandre Pujol
.ME .


.SH COPYING
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
