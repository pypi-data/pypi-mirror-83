# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyaogmaneo
else:
    import _pyaogmaneo

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyaogmaneo.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _pyaogmaneo.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _pyaogmaneo.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _pyaogmaneo.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _pyaogmaneo.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _pyaogmaneo.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _pyaogmaneo.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _pyaogmaneo.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _pyaogmaneo.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _pyaogmaneo.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _pyaogmaneo.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _pyaogmaneo.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _pyaogmaneo.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _pyaogmaneo.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _pyaogmaneo.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _pyaogmaneo.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _pyaogmaneo.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pyaogmaneo:
_pyaogmaneo.SwigPyIterator_swigregister(SwigPyIterator)

class StdArray3i(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyaogmaneo.StdArray3i_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyaogmaneo.StdArray3i___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyaogmaneo.StdArray3i___bool__(self)

    def __len__(self) -> "std::array< int,3 >::size_type":
        return _pyaogmaneo.StdArray3i___len__(self)

    def __getslice__(self, i: "std::array< int,3 >::difference_type", j: "std::array< int,3 >::difference_type") -> "std::array< int,3 > *":
        return _pyaogmaneo.StdArray3i___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pyaogmaneo.StdArray3i___setslice__(self, *args)

    def __delslice__(self, i: "std::array< int,3 >::difference_type", j: "std::array< int,3 >::difference_type") -> "void":
        return _pyaogmaneo.StdArray3i___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pyaogmaneo.StdArray3i___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::array< int,3 >::value_type const &":
        return _pyaogmaneo.StdArray3i___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pyaogmaneo.StdArray3i___setitem__(self, *args)

    def __init__(self, *args):
        _pyaogmaneo.StdArray3i_swiginit(self, _pyaogmaneo.new_StdArray3i(*args))

    def empty(self) -> "bool":
        return _pyaogmaneo.StdArray3i_empty(self)

    def size(self) -> "std::array< int,3 >::size_type":
        return _pyaogmaneo.StdArray3i_size(self)

    def swap(self, v: "StdArray3i") -> "void":
        return _pyaogmaneo.StdArray3i_swap(self, v)

    def begin(self) -> "std::array< int,3 >::iterator":
        return _pyaogmaneo.StdArray3i_begin(self)

    def end(self) -> "std::array< int,3 >::iterator":
        return _pyaogmaneo.StdArray3i_end(self)

    def rbegin(self) -> "std::array< int,3 >::reverse_iterator":
        return _pyaogmaneo.StdArray3i_rbegin(self)

    def rend(self) -> "std::array< int,3 >::reverse_iterator":
        return _pyaogmaneo.StdArray3i_rend(self)

    def front(self) -> "std::array< int,3 >::value_type const &":
        return _pyaogmaneo.StdArray3i_front(self)

    def back(self) -> "std::array< int,3 >::value_type const &":
        return _pyaogmaneo.StdArray3i_back(self)

    def fill(self, u: "std::array< int,3 >::value_type const &") -> "void":
        return _pyaogmaneo.StdArray3i_fill(self, u)
    __swig_destroy__ = _pyaogmaneo.delete_StdArray3i

# Register StdArray3i in _pyaogmaneo:
_pyaogmaneo.StdArray3i_swigregister(StdArray3i)

class StdVeci(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyaogmaneo.StdVeci_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyaogmaneo.StdVeci___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyaogmaneo.StdVeci___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _pyaogmaneo.StdVeci___len__(self)

    def __getslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "std::vector< int,std::allocator< int > > *":
        return _pyaogmaneo.StdVeci___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pyaogmaneo.StdVeci___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "void":
        return _pyaogmaneo.StdVeci___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pyaogmaneo.StdVeci___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _pyaogmaneo.StdVeci___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pyaogmaneo.StdVeci___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _pyaogmaneo.StdVeci_pop(self)

    def append(self, x: "std::vector< int >::value_type const &") -> "void":
        return _pyaogmaneo.StdVeci_append(self, x)

    def empty(self) -> "bool":
        return _pyaogmaneo.StdVeci_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _pyaogmaneo.StdVeci_size(self)

    def swap(self, v: "StdVeci") -> "void":
        return _pyaogmaneo.StdVeci_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _pyaogmaneo.StdVeci_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _pyaogmaneo.StdVeci_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _pyaogmaneo.StdVeci_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _pyaogmaneo.StdVeci_rend(self)

    def clear(self) -> "void":
        return _pyaogmaneo.StdVeci_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _pyaogmaneo.StdVeci_get_allocator(self)

    def pop_back(self) -> "void":
        return _pyaogmaneo.StdVeci_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _pyaogmaneo.StdVeci_erase(self, *args)

    def __init__(self, *args):
        _pyaogmaneo.StdVeci_swiginit(self, _pyaogmaneo.new_StdVeci(*args))

    def push_back(self, x: "std::vector< int >::value_type const &") -> "void":
        return _pyaogmaneo.StdVeci_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _pyaogmaneo.StdVeci_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _pyaogmaneo.StdVeci_back(self)

    def assign(self, n: "std::vector< int >::size_type", x: "std::vector< int >::value_type const &") -> "void":
        return _pyaogmaneo.StdVeci_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pyaogmaneo.StdVeci_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pyaogmaneo.StdVeci_insert(self, *args)

    def reserve(self, n: "std::vector< int >::size_type") -> "void":
        return _pyaogmaneo.StdVeci_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _pyaogmaneo.StdVeci_capacity(self)
    __swig_destroy__ = _pyaogmaneo.delete_StdVeci

# Register StdVeci in _pyaogmaneo:
_pyaogmaneo.StdVeci_swigregister(StdVeci)

class StdVec2Di(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyaogmaneo.StdVec2Di_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyaogmaneo.StdVec2Di___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyaogmaneo.StdVec2Di___bool__(self)

    def __len__(self) -> "std::vector< std::vector< int > >::size_type":
        return _pyaogmaneo.StdVec2Di___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< int > >::difference_type", j: "std::vector< std::vector< int > >::difference_type") -> "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *":
        return _pyaogmaneo.StdVec2Di___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pyaogmaneo.StdVec2Di___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< int > >::difference_type", j: "std::vector< std::vector< int > >::difference_type") -> "void":
        return _pyaogmaneo.StdVec2Di___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pyaogmaneo.StdVec2Di___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< int > >::value_type const &":
        return _pyaogmaneo.StdVec2Di___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pyaogmaneo.StdVec2Di___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< int > >::value_type":
        return _pyaogmaneo.StdVec2Di_pop(self)

    def append(self, x: "StdVeci") -> "void":
        return _pyaogmaneo.StdVec2Di_append(self, x)

    def empty(self) -> "bool":
        return _pyaogmaneo.StdVec2Di_empty(self)

    def size(self) -> "std::vector< std::vector< int > >::size_type":
        return _pyaogmaneo.StdVec2Di_size(self)

    def swap(self, v: "StdVec2Di") -> "void":
        return _pyaogmaneo.StdVec2Di_swap(self, v)

    def begin(self) -> "std::vector< std::vector< int > >::iterator":
        return _pyaogmaneo.StdVec2Di_begin(self)

    def end(self) -> "std::vector< std::vector< int > >::iterator":
        return _pyaogmaneo.StdVec2Di_end(self)

    def rbegin(self) -> "std::vector< std::vector< int > >::reverse_iterator":
        return _pyaogmaneo.StdVec2Di_rbegin(self)

    def rend(self) -> "std::vector< std::vector< int > >::reverse_iterator":
        return _pyaogmaneo.StdVec2Di_rend(self)

    def clear(self) -> "void":
        return _pyaogmaneo.StdVec2Di_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< int > >::allocator_type":
        return _pyaogmaneo.StdVec2Di_get_allocator(self)

    def pop_back(self) -> "void":
        return _pyaogmaneo.StdVec2Di_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< int > >::iterator":
        return _pyaogmaneo.StdVec2Di_erase(self, *args)

    def __init__(self, *args):
        _pyaogmaneo.StdVec2Di_swiginit(self, _pyaogmaneo.new_StdVec2Di(*args))

    def push_back(self, x: "StdVeci") -> "void":
        return _pyaogmaneo.StdVec2Di_push_back(self, x)

    def front(self) -> "std::vector< std::vector< int > >::value_type const &":
        return _pyaogmaneo.StdVec2Di_front(self)

    def back(self) -> "std::vector< std::vector< int > >::value_type const &":
        return _pyaogmaneo.StdVec2Di_back(self)

    def assign(self, n: "std::vector< std::vector< int > >::size_type", x: "StdVeci") -> "void":
        return _pyaogmaneo.StdVec2Di_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pyaogmaneo.StdVec2Di_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pyaogmaneo.StdVec2Di_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< int > >::size_type") -> "void":
        return _pyaogmaneo.StdVec2Di_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< int > >::size_type":
        return _pyaogmaneo.StdVec2Di_capacity(self)
    __swig_destroy__ = _pyaogmaneo.delete_StdVec2Di

# Register StdVec2Di in _pyaogmaneo:
_pyaogmaneo.StdVec2Di_swigregister(StdVec2Di)

class StdVecf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyaogmaneo.StdVecf_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyaogmaneo.StdVecf___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyaogmaneo.StdVecf___bool__(self)

    def __len__(self) -> "std::vector< float >::size_type":
        return _pyaogmaneo.StdVecf___len__(self)

    def __getslice__(self, i: "std::vector< float >::difference_type", j: "std::vector< float >::difference_type") -> "std::vector< float,std::allocator< float > > *":
        return _pyaogmaneo.StdVecf___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pyaogmaneo.StdVecf___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< float >::difference_type", j: "std::vector< float >::difference_type") -> "void":
        return _pyaogmaneo.StdVecf___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pyaogmaneo.StdVecf___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< float >::value_type const &":
        return _pyaogmaneo.StdVecf___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pyaogmaneo.StdVecf___setitem__(self, *args)

    def pop(self) -> "std::vector< float >::value_type":
        return _pyaogmaneo.StdVecf_pop(self)

    def append(self, x: "std::vector< float >::value_type const &") -> "void":
        return _pyaogmaneo.StdVecf_append(self, x)

    def empty(self) -> "bool":
        return _pyaogmaneo.StdVecf_empty(self)

    def size(self) -> "std::vector< float >::size_type":
        return _pyaogmaneo.StdVecf_size(self)

    def swap(self, v: "StdVecf") -> "void":
        return _pyaogmaneo.StdVecf_swap(self, v)

    def begin(self) -> "std::vector< float >::iterator":
        return _pyaogmaneo.StdVecf_begin(self)

    def end(self) -> "std::vector< float >::iterator":
        return _pyaogmaneo.StdVecf_end(self)

    def rbegin(self) -> "std::vector< float >::reverse_iterator":
        return _pyaogmaneo.StdVecf_rbegin(self)

    def rend(self) -> "std::vector< float >::reverse_iterator":
        return _pyaogmaneo.StdVecf_rend(self)

    def clear(self) -> "void":
        return _pyaogmaneo.StdVecf_clear(self)

    def get_allocator(self) -> "std::vector< float >::allocator_type":
        return _pyaogmaneo.StdVecf_get_allocator(self)

    def pop_back(self) -> "void":
        return _pyaogmaneo.StdVecf_pop_back(self)

    def erase(self, *args) -> "std::vector< float >::iterator":
        return _pyaogmaneo.StdVecf_erase(self, *args)

    def __init__(self, *args):
        _pyaogmaneo.StdVecf_swiginit(self, _pyaogmaneo.new_StdVecf(*args))

    def push_back(self, x: "std::vector< float >::value_type const &") -> "void":
        return _pyaogmaneo.StdVecf_push_back(self, x)

    def front(self) -> "std::vector< float >::value_type const &":
        return _pyaogmaneo.StdVecf_front(self)

    def back(self) -> "std::vector< float >::value_type const &":
        return _pyaogmaneo.StdVecf_back(self)

    def assign(self, n: "std::vector< float >::size_type", x: "std::vector< float >::value_type const &") -> "void":
        return _pyaogmaneo.StdVecf_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pyaogmaneo.StdVecf_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pyaogmaneo.StdVecf_insert(self, *args)

    def reserve(self, n: "std::vector< float >::size_type") -> "void":
        return _pyaogmaneo.StdVecf_reserve(self, n)

    def capacity(self) -> "std::vector< float >::size_type":
        return _pyaogmaneo.StdVecf_capacity(self)
    __swig_destroy__ = _pyaogmaneo.delete_StdVecf

# Register StdVecf in _pyaogmaneo:
_pyaogmaneo.StdVecf_swigregister(StdVecf)

class StdVec2Df(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyaogmaneo.StdVec2Df_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyaogmaneo.StdVec2Df___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyaogmaneo.StdVec2Df___bool__(self)

    def __len__(self) -> "std::vector< std::vector< float > >::size_type":
        return _pyaogmaneo.StdVec2Df___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< float > >::difference_type", j: "std::vector< std::vector< float > >::difference_type") -> "std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > *":
        return _pyaogmaneo.StdVec2Df___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pyaogmaneo.StdVec2Df___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< float > >::difference_type", j: "std::vector< std::vector< float > >::difference_type") -> "void":
        return _pyaogmaneo.StdVec2Df___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pyaogmaneo.StdVec2Df___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< float > >::value_type const &":
        return _pyaogmaneo.StdVec2Df___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pyaogmaneo.StdVec2Df___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< float > >::value_type":
        return _pyaogmaneo.StdVec2Df_pop(self)

    def append(self, x: "StdVecf") -> "void":
        return _pyaogmaneo.StdVec2Df_append(self, x)

    def empty(self) -> "bool":
        return _pyaogmaneo.StdVec2Df_empty(self)

    def size(self) -> "std::vector< std::vector< float > >::size_type":
        return _pyaogmaneo.StdVec2Df_size(self)

    def swap(self, v: "StdVec2Df") -> "void":
        return _pyaogmaneo.StdVec2Df_swap(self, v)

    def begin(self) -> "std::vector< std::vector< float > >::iterator":
        return _pyaogmaneo.StdVec2Df_begin(self)

    def end(self) -> "std::vector< std::vector< float > >::iterator":
        return _pyaogmaneo.StdVec2Df_end(self)

    def rbegin(self) -> "std::vector< std::vector< float > >::reverse_iterator":
        return _pyaogmaneo.StdVec2Df_rbegin(self)

    def rend(self) -> "std::vector< std::vector< float > >::reverse_iterator":
        return _pyaogmaneo.StdVec2Df_rend(self)

    def clear(self) -> "void":
        return _pyaogmaneo.StdVec2Df_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< float > >::allocator_type":
        return _pyaogmaneo.StdVec2Df_get_allocator(self)

    def pop_back(self) -> "void":
        return _pyaogmaneo.StdVec2Df_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< float > >::iterator":
        return _pyaogmaneo.StdVec2Df_erase(self, *args)

    def __init__(self, *args):
        _pyaogmaneo.StdVec2Df_swiginit(self, _pyaogmaneo.new_StdVec2Df(*args))

    def push_back(self, x: "StdVecf") -> "void":
        return _pyaogmaneo.StdVec2Df_push_back(self, x)

    def front(self) -> "std::vector< std::vector< float > >::value_type const &":
        return _pyaogmaneo.StdVec2Df_front(self)

    def back(self) -> "std::vector< std::vector< float > >::value_type const &":
        return _pyaogmaneo.StdVec2Df_back(self)

    def assign(self, n: "std::vector< std::vector< float > >::size_type", x: "StdVecf") -> "void":
        return _pyaogmaneo.StdVec2Df_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pyaogmaneo.StdVec2Df_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pyaogmaneo.StdVec2Df_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< float > >::size_type") -> "void":
        return _pyaogmaneo.StdVec2Df_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< float > >::size_type":
        return _pyaogmaneo.StdVec2Df_capacity(self)
    __swig_destroy__ = _pyaogmaneo.delete_StdVec2Df

# Register StdVec2Df in _pyaogmaneo:
_pyaogmaneo.StdVec2Df_swigregister(StdVec2Df)

class StdVecuchar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyaogmaneo.StdVecuchar_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyaogmaneo.StdVecuchar___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyaogmaneo.StdVecuchar___bool__(self)

    def __len__(self) -> "std::vector< unsigned char >::size_type":
        return _pyaogmaneo.StdVecuchar___len__(self)

    def __getslice__(self, i: "std::vector< unsigned char >::difference_type", j: "std::vector< unsigned char >::difference_type") -> "std::vector< unsigned char,std::allocator< unsigned char > > *":
        return _pyaogmaneo.StdVecuchar___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pyaogmaneo.StdVecuchar___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< unsigned char >::difference_type", j: "std::vector< unsigned char >::difference_type") -> "void":
        return _pyaogmaneo.StdVecuchar___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pyaogmaneo.StdVecuchar___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< unsigned char >::value_type const &":
        return _pyaogmaneo.StdVecuchar___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pyaogmaneo.StdVecuchar___setitem__(self, *args)

    def pop(self) -> "std::vector< unsigned char >::value_type":
        return _pyaogmaneo.StdVecuchar_pop(self)

    def append(self, x: "std::vector< unsigned char >::value_type const &") -> "void":
        return _pyaogmaneo.StdVecuchar_append(self, x)

    def empty(self) -> "bool":
        return _pyaogmaneo.StdVecuchar_empty(self)

    def size(self) -> "std::vector< unsigned char >::size_type":
        return _pyaogmaneo.StdVecuchar_size(self)

    def swap(self, v: "StdVecuchar") -> "void":
        return _pyaogmaneo.StdVecuchar_swap(self, v)

    def begin(self) -> "std::vector< unsigned char >::iterator":
        return _pyaogmaneo.StdVecuchar_begin(self)

    def end(self) -> "std::vector< unsigned char >::iterator":
        return _pyaogmaneo.StdVecuchar_end(self)

    def rbegin(self) -> "std::vector< unsigned char >::reverse_iterator":
        return _pyaogmaneo.StdVecuchar_rbegin(self)

    def rend(self) -> "std::vector< unsigned char >::reverse_iterator":
        return _pyaogmaneo.StdVecuchar_rend(self)

    def clear(self) -> "void":
        return _pyaogmaneo.StdVecuchar_clear(self)

    def get_allocator(self) -> "std::vector< unsigned char >::allocator_type":
        return _pyaogmaneo.StdVecuchar_get_allocator(self)

    def pop_back(self) -> "void":
        return _pyaogmaneo.StdVecuchar_pop_back(self)

    def erase(self, *args) -> "std::vector< unsigned char >::iterator":
        return _pyaogmaneo.StdVecuchar_erase(self, *args)

    def __init__(self, *args):
        _pyaogmaneo.StdVecuchar_swiginit(self, _pyaogmaneo.new_StdVecuchar(*args))

    def push_back(self, x: "std::vector< unsigned char >::value_type const &") -> "void":
        return _pyaogmaneo.StdVecuchar_push_back(self, x)

    def front(self) -> "std::vector< unsigned char >::value_type const &":
        return _pyaogmaneo.StdVecuchar_front(self)

    def back(self) -> "std::vector< unsigned char >::value_type const &":
        return _pyaogmaneo.StdVecuchar_back(self)

    def assign(self, n: "std::vector< unsigned char >::size_type", x: "std::vector< unsigned char >::value_type const &") -> "void":
        return _pyaogmaneo.StdVecuchar_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pyaogmaneo.StdVecuchar_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pyaogmaneo.StdVecuchar_insert(self, *args)

    def reserve(self, n: "std::vector< unsigned char >::size_type") -> "void":
        return _pyaogmaneo.StdVecuchar_reserve(self, n)

    def capacity(self) -> "std::vector< unsigned char >::size_type":
        return _pyaogmaneo.StdVecuchar_capacity(self)
    __swig_destroy__ = _pyaogmaneo.delete_StdVecuchar

# Register StdVecuchar in _pyaogmaneo:
_pyaogmaneo.StdVecuchar_swigregister(StdVecuchar)

class StdVec2Duchar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyaogmaneo.StdVec2Duchar_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyaogmaneo.StdVec2Duchar___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyaogmaneo.StdVec2Duchar___bool__(self)

    def __len__(self) -> "std::vector< std::vector< unsigned char > >::size_type":
        return _pyaogmaneo.StdVec2Duchar___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< unsigned char > >::difference_type", j: "std::vector< std::vector< unsigned char > >::difference_type") -> "std::vector< std::vector< unsigned char,std::allocator< unsigned char > >,std::allocator< std::vector< unsigned char,std::allocator< unsigned char > > > > *":
        return _pyaogmaneo.StdVec2Duchar___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pyaogmaneo.StdVec2Duchar___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< unsigned char > >::difference_type", j: "std::vector< std::vector< unsigned char > >::difference_type") -> "void":
        return _pyaogmaneo.StdVec2Duchar___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pyaogmaneo.StdVec2Duchar___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< unsigned char > >::value_type const &":
        return _pyaogmaneo.StdVec2Duchar___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pyaogmaneo.StdVec2Duchar___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< unsigned char > >::value_type":
        return _pyaogmaneo.StdVec2Duchar_pop(self)

    def append(self, x: "StdVecuchar") -> "void":
        return _pyaogmaneo.StdVec2Duchar_append(self, x)

    def empty(self) -> "bool":
        return _pyaogmaneo.StdVec2Duchar_empty(self)

    def size(self) -> "std::vector< std::vector< unsigned char > >::size_type":
        return _pyaogmaneo.StdVec2Duchar_size(self)

    def swap(self, v: "StdVec2Duchar") -> "void":
        return _pyaogmaneo.StdVec2Duchar_swap(self, v)

    def begin(self) -> "std::vector< std::vector< unsigned char > >::iterator":
        return _pyaogmaneo.StdVec2Duchar_begin(self)

    def end(self) -> "std::vector< std::vector< unsigned char > >::iterator":
        return _pyaogmaneo.StdVec2Duchar_end(self)

    def rbegin(self) -> "std::vector< std::vector< unsigned char > >::reverse_iterator":
        return _pyaogmaneo.StdVec2Duchar_rbegin(self)

    def rend(self) -> "std::vector< std::vector< unsigned char > >::reverse_iterator":
        return _pyaogmaneo.StdVec2Duchar_rend(self)

    def clear(self) -> "void":
        return _pyaogmaneo.StdVec2Duchar_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< unsigned char > >::allocator_type":
        return _pyaogmaneo.StdVec2Duchar_get_allocator(self)

    def pop_back(self) -> "void":
        return _pyaogmaneo.StdVec2Duchar_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< unsigned char > >::iterator":
        return _pyaogmaneo.StdVec2Duchar_erase(self, *args)

    def __init__(self, *args):
        _pyaogmaneo.StdVec2Duchar_swiginit(self, _pyaogmaneo.new_StdVec2Duchar(*args))

    def push_back(self, x: "StdVecuchar") -> "void":
        return _pyaogmaneo.StdVec2Duchar_push_back(self, x)

    def front(self) -> "std::vector< std::vector< unsigned char > >::value_type const &":
        return _pyaogmaneo.StdVec2Duchar_front(self)

    def back(self) -> "std::vector< std::vector< unsigned char > >::value_type const &":
        return _pyaogmaneo.StdVec2Duchar_back(self)

    def assign(self, n: "std::vector< std::vector< unsigned char > >::size_type", x: "StdVecuchar") -> "void":
        return _pyaogmaneo.StdVec2Duchar_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pyaogmaneo.StdVec2Duchar_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pyaogmaneo.StdVec2Duchar_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< unsigned char > >::size_type") -> "void":
        return _pyaogmaneo.StdVec2Duchar_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< unsigned char > >::size_type":
        return _pyaogmaneo.StdVec2Duchar_capacity(self)
    __swig_destroy__ = _pyaogmaneo.delete_StdVec2Duchar

# Register StdVec2Duchar in _pyaogmaneo:
_pyaogmaneo.StdVec2Duchar_swigregister(StdVec2Duchar)

class StdVecInt3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyaogmaneo.StdVecInt3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyaogmaneo.StdVecInt3___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyaogmaneo.StdVecInt3___bool__(self)

    def __len__(self) -> "std::vector< std::array< int,3 > >::size_type":
        return _pyaogmaneo.StdVecInt3___len__(self)

    def __getslice__(self, i: "std::vector< std::array< int,3 > >::difference_type", j: "std::vector< std::array< int,3 > >::difference_type") -> "std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > *":
        return _pyaogmaneo.StdVecInt3___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pyaogmaneo.StdVecInt3___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::array< int,3 > >::difference_type", j: "std::vector< std::array< int,3 > >::difference_type") -> "void":
        return _pyaogmaneo.StdVecInt3___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pyaogmaneo.StdVecInt3___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::array< int,3 > >::value_type const &":
        return _pyaogmaneo.StdVecInt3___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pyaogmaneo.StdVecInt3___setitem__(self, *args)

    def pop(self) -> "std::vector< std::array< int,3 > >::value_type":
        return _pyaogmaneo.StdVecInt3_pop(self)

    def append(self, x: "StdArray3i") -> "void":
        return _pyaogmaneo.StdVecInt3_append(self, x)

    def empty(self) -> "bool":
        return _pyaogmaneo.StdVecInt3_empty(self)

    def size(self) -> "std::vector< std::array< int,3 > >::size_type":
        return _pyaogmaneo.StdVecInt3_size(self)

    def swap(self, v: "StdVecInt3") -> "void":
        return _pyaogmaneo.StdVecInt3_swap(self, v)

    def begin(self) -> "std::vector< std::array< int,3 > >::iterator":
        return _pyaogmaneo.StdVecInt3_begin(self)

    def end(self) -> "std::vector< std::array< int,3 > >::iterator":
        return _pyaogmaneo.StdVecInt3_end(self)

    def rbegin(self) -> "std::vector< std::array< int,3 > >::reverse_iterator":
        return _pyaogmaneo.StdVecInt3_rbegin(self)

    def rend(self) -> "std::vector< std::array< int,3 > >::reverse_iterator":
        return _pyaogmaneo.StdVecInt3_rend(self)

    def clear(self) -> "void":
        return _pyaogmaneo.StdVecInt3_clear(self)

    def get_allocator(self) -> "std::vector< std::array< int,3 > >::allocator_type":
        return _pyaogmaneo.StdVecInt3_get_allocator(self)

    def pop_back(self) -> "void":
        return _pyaogmaneo.StdVecInt3_pop_back(self)

    def erase(self, *args) -> "std::vector< std::array< int,3 > >::iterator":
        return _pyaogmaneo.StdVecInt3_erase(self, *args)

    def __init__(self, *args):
        _pyaogmaneo.StdVecInt3_swiginit(self, _pyaogmaneo.new_StdVecInt3(*args))

    def push_back(self, x: "StdArray3i") -> "void":
        return _pyaogmaneo.StdVecInt3_push_back(self, x)

    def front(self) -> "std::vector< std::array< int,3 > >::value_type const &":
        return _pyaogmaneo.StdVecInt3_front(self)

    def back(self) -> "std::vector< std::array< int,3 > >::value_type const &":
        return _pyaogmaneo.StdVecInt3_back(self)

    def assign(self, n: "std::vector< std::array< int,3 > >::size_type", x: "StdArray3i") -> "void":
        return _pyaogmaneo.StdVecInt3_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pyaogmaneo.StdVecInt3_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pyaogmaneo.StdVecInt3_insert(self, *args)

    def reserve(self, n: "std::vector< std::array< int,3 > >::size_type") -> "void":
        return _pyaogmaneo.StdVecInt3_reserve(self, n)

    def capacity(self) -> "std::vector< std::array< int,3 > >::size_type":
        return _pyaogmaneo.StdVecInt3_capacity(self)
    __swig_destroy__ = _pyaogmaneo.delete_StdVecInt3

# Register StdVecInt3 in _pyaogmaneo:
_pyaogmaneo.StdVecInt3_swigregister(StdVecInt3)

class StdVecIODesc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyaogmaneo.StdVecIODesc_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyaogmaneo.StdVecIODesc___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyaogmaneo.StdVecIODesc___bool__(self)

    def __len__(self) -> "std::vector< pyaon::PyIODesc >::size_type":
        return _pyaogmaneo.StdVecIODesc___len__(self)

    def __getslice__(self, i: "std::vector< pyaon::PyIODesc >::difference_type", j: "std::vector< pyaon::PyIODesc >::difference_type") -> "std::vector< pyaon::PyIODesc,std::allocator< pyaon::PyIODesc > > *":
        return _pyaogmaneo.StdVecIODesc___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pyaogmaneo.StdVecIODesc___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< pyaon::PyIODesc >::difference_type", j: "std::vector< pyaon::PyIODesc >::difference_type") -> "void":
        return _pyaogmaneo.StdVecIODesc___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pyaogmaneo.StdVecIODesc___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< pyaon::PyIODesc >::value_type const &":
        return _pyaogmaneo.StdVecIODesc___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pyaogmaneo.StdVecIODesc___setitem__(self, *args)

    def pop(self) -> "std::vector< pyaon::PyIODesc >::value_type":
        return _pyaogmaneo.StdVecIODesc_pop(self)

    def append(self, x: "IODesc") -> "void":
        return _pyaogmaneo.StdVecIODesc_append(self, x)

    def empty(self) -> "bool":
        return _pyaogmaneo.StdVecIODesc_empty(self)

    def size(self) -> "std::vector< pyaon::PyIODesc >::size_type":
        return _pyaogmaneo.StdVecIODesc_size(self)

    def swap(self, v: "StdVecIODesc") -> "void":
        return _pyaogmaneo.StdVecIODesc_swap(self, v)

    def begin(self) -> "std::vector< pyaon::PyIODesc >::iterator":
        return _pyaogmaneo.StdVecIODesc_begin(self)

    def end(self) -> "std::vector< pyaon::PyIODesc >::iterator":
        return _pyaogmaneo.StdVecIODesc_end(self)

    def rbegin(self) -> "std::vector< pyaon::PyIODesc >::reverse_iterator":
        return _pyaogmaneo.StdVecIODesc_rbegin(self)

    def rend(self) -> "std::vector< pyaon::PyIODesc >::reverse_iterator":
        return _pyaogmaneo.StdVecIODesc_rend(self)

    def clear(self) -> "void":
        return _pyaogmaneo.StdVecIODesc_clear(self)

    def get_allocator(self) -> "std::vector< pyaon::PyIODesc >::allocator_type":
        return _pyaogmaneo.StdVecIODesc_get_allocator(self)

    def pop_back(self) -> "void":
        return _pyaogmaneo.StdVecIODesc_pop_back(self)

    def erase(self, *args) -> "std::vector< pyaon::PyIODesc >::iterator":
        return _pyaogmaneo.StdVecIODesc_erase(self, *args)

    def __init__(self, *args):
        _pyaogmaneo.StdVecIODesc_swiginit(self, _pyaogmaneo.new_StdVecIODesc(*args))

    def push_back(self, x: "IODesc") -> "void":
        return _pyaogmaneo.StdVecIODesc_push_back(self, x)

    def front(self) -> "std::vector< pyaon::PyIODesc >::value_type const &":
        return _pyaogmaneo.StdVecIODesc_front(self)

    def back(self) -> "std::vector< pyaon::PyIODesc >::value_type const &":
        return _pyaogmaneo.StdVecIODesc_back(self)

    def assign(self, n: "std::vector< pyaon::PyIODesc >::size_type", x: "IODesc") -> "void":
        return _pyaogmaneo.StdVecIODesc_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pyaogmaneo.StdVecIODesc_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pyaogmaneo.StdVecIODesc_insert(self, *args)

    def reserve(self, n: "std::vector< pyaon::PyIODesc >::size_type") -> "void":
        return _pyaogmaneo.StdVecIODesc_reserve(self, n)

    def capacity(self) -> "std::vector< pyaon::PyIODesc >::size_type":
        return _pyaogmaneo.StdVecIODesc_capacity(self)
    __swig_destroy__ = _pyaogmaneo.delete_StdVecIODesc

# Register StdVecIODesc in _pyaogmaneo:
_pyaogmaneo.StdVecIODesc_swigregister(StdVecIODesc)

class StdVecLayerDesc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyaogmaneo.StdVecLayerDesc_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyaogmaneo.StdVecLayerDesc___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyaogmaneo.StdVecLayerDesc___bool__(self)

    def __len__(self) -> "std::vector< pyaon::PyLayerDesc >::size_type":
        return _pyaogmaneo.StdVecLayerDesc___len__(self)

    def __getslice__(self, i: "std::vector< pyaon::PyLayerDesc >::difference_type", j: "std::vector< pyaon::PyLayerDesc >::difference_type") -> "std::vector< pyaon::PyLayerDesc,std::allocator< pyaon::PyLayerDesc > > *":
        return _pyaogmaneo.StdVecLayerDesc___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pyaogmaneo.StdVecLayerDesc___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< pyaon::PyLayerDesc >::difference_type", j: "std::vector< pyaon::PyLayerDesc >::difference_type") -> "void":
        return _pyaogmaneo.StdVecLayerDesc___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pyaogmaneo.StdVecLayerDesc___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< pyaon::PyLayerDesc >::value_type const &":
        return _pyaogmaneo.StdVecLayerDesc___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pyaogmaneo.StdVecLayerDesc___setitem__(self, *args)

    def pop(self) -> "std::vector< pyaon::PyLayerDesc >::value_type":
        return _pyaogmaneo.StdVecLayerDesc_pop(self)

    def append(self, x: "LayerDesc") -> "void":
        return _pyaogmaneo.StdVecLayerDesc_append(self, x)

    def empty(self) -> "bool":
        return _pyaogmaneo.StdVecLayerDesc_empty(self)

    def size(self) -> "std::vector< pyaon::PyLayerDesc >::size_type":
        return _pyaogmaneo.StdVecLayerDesc_size(self)

    def swap(self, v: "StdVecLayerDesc") -> "void":
        return _pyaogmaneo.StdVecLayerDesc_swap(self, v)

    def begin(self) -> "std::vector< pyaon::PyLayerDesc >::iterator":
        return _pyaogmaneo.StdVecLayerDesc_begin(self)

    def end(self) -> "std::vector< pyaon::PyLayerDesc >::iterator":
        return _pyaogmaneo.StdVecLayerDesc_end(self)

    def rbegin(self) -> "std::vector< pyaon::PyLayerDesc >::reverse_iterator":
        return _pyaogmaneo.StdVecLayerDesc_rbegin(self)

    def rend(self) -> "std::vector< pyaon::PyLayerDesc >::reverse_iterator":
        return _pyaogmaneo.StdVecLayerDesc_rend(self)

    def clear(self) -> "void":
        return _pyaogmaneo.StdVecLayerDesc_clear(self)

    def get_allocator(self) -> "std::vector< pyaon::PyLayerDesc >::allocator_type":
        return _pyaogmaneo.StdVecLayerDesc_get_allocator(self)

    def pop_back(self) -> "void":
        return _pyaogmaneo.StdVecLayerDesc_pop_back(self)

    def erase(self, *args) -> "std::vector< pyaon::PyLayerDesc >::iterator":
        return _pyaogmaneo.StdVecLayerDesc_erase(self, *args)

    def __init__(self, *args):
        _pyaogmaneo.StdVecLayerDesc_swiginit(self, _pyaogmaneo.new_StdVecLayerDesc(*args))

    def push_back(self, x: "LayerDesc") -> "void":
        return _pyaogmaneo.StdVecLayerDesc_push_back(self, x)

    def front(self) -> "std::vector< pyaon::PyLayerDesc >::value_type const &":
        return _pyaogmaneo.StdVecLayerDesc_front(self)

    def back(self) -> "std::vector< pyaon::PyLayerDesc >::value_type const &":
        return _pyaogmaneo.StdVecLayerDesc_back(self)

    def assign(self, n: "std::vector< pyaon::PyLayerDesc >::size_type", x: "LayerDesc") -> "void":
        return _pyaogmaneo.StdVecLayerDesc_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pyaogmaneo.StdVecLayerDesc_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pyaogmaneo.StdVecLayerDesc_insert(self, *args)

    def reserve(self, n: "std::vector< pyaon::PyLayerDesc >::size_type") -> "void":
        return _pyaogmaneo.StdVecLayerDesc_reserve(self, n)

    def capacity(self) -> "std::vector< pyaon::PyLayerDesc >::size_type":
        return _pyaogmaneo.StdVecLayerDesc_capacity(self)
    __swig_destroy__ = _pyaogmaneo.delete_StdVecLayerDesc

# Register StdVecLayerDesc in _pyaogmaneo:
_pyaogmaneo.StdVecLayerDesc_swigregister(StdVecLayerDesc)

class StdVecImageEncoderVisibleLayerDesc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc___bool__(self)

    def __len__(self) -> "std::vector< pyaon::PyImageEncoderVisibleLayerDesc >::size_type":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc___len__(self)

    def __getslice__(self, i: "std::vector< pyaon::PyImageEncoderVisibleLayerDesc >::difference_type", j: "std::vector< pyaon::PyImageEncoderVisibleLayerDesc >::difference_type") -> "std::vector< pyaon::PyImageEncoderVisibleLayerDesc,std::allocator< pyaon::PyImageEncoderVisibleLayerDesc > > *":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< pyaon::PyImageEncoderVisibleLayerDesc >::difference_type", j: "std::vector< pyaon::PyImageEncoderVisibleLayerDesc >::difference_type") -> "void":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< pyaon::PyImageEncoderVisibleLayerDesc >::value_type const &":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc___setitem__(self, *args)

    def pop(self) -> "std::vector< pyaon::PyImageEncoderVisibleLayerDesc >::value_type":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc_pop(self)

    def append(self, x: "ImageEncoderVisibleLayerDesc") -> "void":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc_append(self, x)

    def empty(self) -> "bool":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc_empty(self)

    def size(self) -> "std::vector< pyaon::PyImageEncoderVisibleLayerDesc >::size_type":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc_size(self)

    def swap(self, v: "StdVecImageEncoderVisibleLayerDesc") -> "void":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc_swap(self, v)

    def begin(self) -> "std::vector< pyaon::PyImageEncoderVisibleLayerDesc >::iterator":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc_begin(self)

    def end(self) -> "std::vector< pyaon::PyImageEncoderVisibleLayerDesc >::iterator":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc_end(self)

    def rbegin(self) -> "std::vector< pyaon::PyImageEncoderVisibleLayerDesc >::reverse_iterator":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc_rbegin(self)

    def rend(self) -> "std::vector< pyaon::PyImageEncoderVisibleLayerDesc >::reverse_iterator":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc_rend(self)

    def clear(self) -> "void":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc_clear(self)

    def get_allocator(self) -> "std::vector< pyaon::PyImageEncoderVisibleLayerDesc >::allocator_type":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc_get_allocator(self)

    def pop_back(self) -> "void":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc_pop_back(self)

    def erase(self, *args) -> "std::vector< pyaon::PyImageEncoderVisibleLayerDesc >::iterator":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc_erase(self, *args)

    def __init__(self, *args):
        _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc_swiginit(self, _pyaogmaneo.new_StdVecImageEncoderVisibleLayerDesc(*args))

    def push_back(self, x: "ImageEncoderVisibleLayerDesc") -> "void":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc_push_back(self, x)

    def front(self) -> "std::vector< pyaon::PyImageEncoderVisibleLayerDesc >::value_type const &":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc_front(self)

    def back(self) -> "std::vector< pyaon::PyImageEncoderVisibleLayerDesc >::value_type const &":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc_back(self)

    def assign(self, n: "std::vector< pyaon::PyImageEncoderVisibleLayerDesc >::size_type", x: "ImageEncoderVisibleLayerDesc") -> "void":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc_insert(self, *args)

    def reserve(self, n: "std::vector< pyaon::PyImageEncoderVisibleLayerDesc >::size_type") -> "void":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc_reserve(self, n)

    def capacity(self) -> "std::vector< pyaon::PyImageEncoderVisibleLayerDesc >::size_type":
        return _pyaogmaneo.StdVecImageEncoderVisibleLayerDesc_capacity(self)
    __swig_destroy__ = _pyaogmaneo.delete_StdVecImageEncoderVisibleLayerDesc

# Register StdVecImageEncoderVisibleLayerDesc in _pyaogmaneo:
_pyaogmaneo.StdVecImageEncoderVisibleLayerDesc_swigregister(StdVecImageEncoderVisibleLayerDesc)

class BufferReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    start = property(_pyaogmaneo.BufferReader_start_get, _pyaogmaneo.BufferReader_start_set)
    buffer = property(_pyaogmaneo.BufferReader_buffer_get, _pyaogmaneo.BufferReader_buffer_set)

    def __init__(self):
        _pyaogmaneo.BufferReader_swiginit(self, _pyaogmaneo.new_BufferReader())

    def read(self, data: "void *", len: "int") -> "void":
        return _pyaogmaneo.BufferReader_read(self, data, len)
    __swig_destroy__ = _pyaogmaneo.delete_BufferReader

# Register BufferReader in _pyaogmaneo:
_pyaogmaneo.BufferReader_swigregister(BufferReader)

class BufferWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    buffer = property(_pyaogmaneo.BufferWriter_buffer_get, _pyaogmaneo.BufferWriter_buffer_set)

    def write(self, data: "void const *", len: "int") -> "void":
        return _pyaogmaneo.BufferWriter_write(self, data, len)

    def __init__(self):
        _pyaogmaneo.BufferWriter_swiginit(self, _pyaogmaneo.new_BufferWriter())
    __swig_destroy__ = _pyaogmaneo.delete_BufferWriter

# Register BufferWriter in _pyaogmaneo:
_pyaogmaneo.BufferWriter_swigregister(BufferWriter)


def setNumThreads(numThreads: "int") -> "void":
    return _pyaogmaneo.setNumThreads(numThreads)

def getNumThreads() -> "int":
    return _pyaogmaneo.getNumThreads()
class IODesc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    size = property(_pyaogmaneo.IODesc_size_get, _pyaogmaneo.IODesc_size_set)
    type = property(_pyaogmaneo.IODesc_type_get, _pyaogmaneo.IODesc_type_set)

    def __init__(self, *args, **kwargs):
        _pyaogmaneo.IODesc_swiginit(self, _pyaogmaneo.new_IODesc(*args, **kwargs))
    __swig_destroy__ = _pyaogmaneo.delete_IODesc

# Register IODesc in _pyaogmaneo:
_pyaogmaneo.IODesc_swigregister(IODesc)
cvar = _pyaogmaneo.cvar
typeNone = cvar.typeNone
typePrediction = cvar.typePrediction
typeAction = cvar.typeAction

class LayerDesc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    hiddenSize = property(_pyaogmaneo.LayerDesc_hiddenSize_get, _pyaogmaneo.LayerDesc_hiddenSize_set)
    ffRadius = property(_pyaogmaneo.LayerDesc_ffRadius_get, _pyaogmaneo.LayerDesc_ffRadius_set)
    pRadius = property(_pyaogmaneo.LayerDesc_pRadius_get, _pyaogmaneo.LayerDesc_pRadius_set)
    aRadius = property(_pyaogmaneo.LayerDesc_aRadius_get, _pyaogmaneo.LayerDesc_aRadius_set)
    ticksPerUpdate = property(_pyaogmaneo.LayerDesc_ticksPerUpdate_get, _pyaogmaneo.LayerDesc_ticksPerUpdate_set)
    temporalHorizon = property(_pyaogmaneo.LayerDesc_temporalHorizon_get, _pyaogmaneo.LayerDesc_temporalHorizon_set)
    historyCapacity = property(_pyaogmaneo.LayerDesc_historyCapacity_get, _pyaogmaneo.LayerDesc_historyCapacity_set)

    def __init__(self, *args, **kwargs):
        _pyaogmaneo.LayerDesc_swiginit(self, _pyaogmaneo.new_LayerDesc(*args, **kwargs))
    __swig_destroy__ = _pyaogmaneo.delete_LayerDesc

# Register LayerDesc in _pyaogmaneo:
_pyaogmaneo.LayerDesc_swigregister(LayerDesc)

class Hierarchy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaogmaneo.Hierarchy_swiginit(self, _pyaogmaneo.new_Hierarchy())

    def initRandom(self, ioDescs: "StdVecIODesc", layerDescs: "StdVecLayerDesc") -> "void":
        return _pyaogmaneo.Hierarchy_initRandom(self, ioDescs, layerDescs)

    def initFromFile(self, name: "std::string const &") -> "void":
        return _pyaogmaneo.Hierarchy_initFromFile(self, name)

    def initFromBuffer(self, buffer: "StdVecuchar") -> "void":
        return _pyaogmaneo.Hierarchy_initFromBuffer(self, buffer)

    def saveToFile(self, name: "std::string const &") -> "void":
        return _pyaogmaneo.Hierarchy_saveToFile(self, name)

    def serializeToBuffer(self) -> "std::vector< unsigned char,std::allocator< unsigned char > >":
        return _pyaogmaneo.Hierarchy_serializeToBuffer(self)

    def step(self, inputCIs: "StdVec2Di", learnEnabled: "bool"=True, reward: "float"=0.0, mimic: "bool"=False) -> "void":
        return _pyaogmaneo.Hierarchy_step(self, inputCIs, learnEnabled, reward, mimic)

    def getNumLayers(self) -> "int":
        return _pyaogmaneo.Hierarchy_getNumLayers(self)

    def getPredictionCIs(self, i: "int") -> "std::vector< int,std::allocator< int > >":
        return _pyaogmaneo.Hierarchy_getPredictionCIs(self, i)

    def getUpdate(self, l: "int") -> "bool":
        return _pyaogmaneo.Hierarchy_getUpdate(self, l)

    def getHiddenCIs(self, l: "int") -> "std::vector< int,std::allocator< int > >":
        return _pyaogmaneo.Hierarchy_getHiddenCIs(self, l)

    def getHiddenSize(self, l: "int") -> "std::array< int,3 >":
        return _pyaogmaneo.Hierarchy_getHiddenSize(self, l)

    def getTicks(self, l: "int") -> "int":
        return _pyaogmaneo.Hierarchy_getTicks(self, l)

    def getTicksPerUpdate(self, l: "int") -> "int":
        return _pyaogmaneo.Hierarchy_getTicksPerUpdate(self, l)

    def getNumSCVisibleLayers(self, l: "int") -> "int":
        return _pyaogmaneo.Hierarchy_getNumSCVisibleLayers(self, l)

    def getNumInputs(self) -> "int":
        return _pyaogmaneo.Hierarchy_getNumInputs(self)

    def getInputSize(self, i: "int") -> "std::array< int,3 >":
        return _pyaogmaneo.Hierarchy_getInputSize(self, i)

    def pLayerExists(self, l: "int", v: "int") -> "bool":
        return _pyaogmaneo.Hierarchy_pLayerExists(self, l, v)

    def aLayerExists(self, v: "int") -> "bool":
        return _pyaogmaneo.Hierarchy_aLayerExists(self, v)

    def setSCAlpha(self, l: "int", alpha: "float") -> "void":
        return _pyaogmaneo.Hierarchy_setSCAlpha(self, l, alpha)

    def getSCAlpha(self, l: "int") -> "float":
        return _pyaogmaneo.Hierarchy_getSCAlpha(self, l)

    def setPAlpha(self, l: "int", v: "int", alpha: "float") -> "void":
        return _pyaogmaneo.Hierarchy_setPAlpha(self, l, v, alpha)

    def getPAlpha(self, l: "int", v: "int") -> "float":
        return _pyaogmaneo.Hierarchy_getPAlpha(self, l, v)

    def setAAlpha(self, v: "int", alpha: "float") -> "void":
        return _pyaogmaneo.Hierarchy_setAAlpha(self, v, alpha)

    def getAAlpha(self, v: "int") -> "float":
        return _pyaogmaneo.Hierarchy_getAAlpha(self, v)

    def setABeta(self, v: "int", beta: "float") -> "void":
        return _pyaogmaneo.Hierarchy_setABeta(self, v, beta)

    def getABeta(self, v: "int") -> "float":
        return _pyaogmaneo.Hierarchy_getABeta(self, v)

    def setAGamma(self, v: "int", gamma: "float") -> "void":
        return _pyaogmaneo.Hierarchy_setAGamma(self, v, gamma)

    def getAGamma(self, v: "int") -> "float":
        return _pyaogmaneo.Hierarchy_getAGamma(self, v)

    def setAMinSteps(self, v: "int", minSteps: "int") -> "void":
        return _pyaogmaneo.Hierarchy_setAMinSteps(self, v, minSteps)

    def getAMinSteps(self, v: "int") -> "int":
        return _pyaogmaneo.Hierarchy_getAMinSteps(self, v)

    def setAHistoryIters(self, v: "int", historyIters: "int") -> "void":
        return _pyaogmaneo.Hierarchy_setAHistoryIters(self, v, historyIters)

    def getAHistoryIters(self, v: "int") -> "int":
        return _pyaogmaneo.Hierarchy_getAHistoryIters(self, v)

    def getFFRadius(self, l: "int") -> "int":
        return _pyaogmaneo.Hierarchy_getFFRadius(self, l)

    def getPRadius(self, l: "int", v: "int") -> "int":
        return _pyaogmaneo.Hierarchy_getPRadius(self, l, v)

    def getARadius(self, v: "int") -> "int":
        return _pyaogmaneo.Hierarchy_getARadius(self, v)

    def getAHistoryCapacity(self, v: "int") -> "int":
        return _pyaogmaneo.Hierarchy_getAHistoryCapacity(self, v)
    __swig_destroy__ = _pyaogmaneo.delete_Hierarchy

# Register Hierarchy in _pyaogmaneo:
_pyaogmaneo.Hierarchy_swigregister(Hierarchy)

class ImageEncoderVisibleLayerDesc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    size = property(_pyaogmaneo.ImageEncoderVisibleLayerDesc_size_get, _pyaogmaneo.ImageEncoderVisibleLayerDesc_size_set)
    radius = property(_pyaogmaneo.ImageEncoderVisibleLayerDesc_radius_get, _pyaogmaneo.ImageEncoderVisibleLayerDesc_radius_set)

    def __init__(self, *args, **kwargs):
        _pyaogmaneo.ImageEncoderVisibleLayerDesc_swiginit(self, _pyaogmaneo.new_ImageEncoderVisibleLayerDesc(*args, **kwargs))
    __swig_destroy__ = _pyaogmaneo.delete_ImageEncoderVisibleLayerDesc

# Register ImageEncoderVisibleLayerDesc in _pyaogmaneo:
_pyaogmaneo.ImageEncoderVisibleLayerDesc_swigregister(ImageEncoderVisibleLayerDesc)

class ImageEncoder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    alpha = property(_pyaogmaneo.ImageEncoder_alpha_get, _pyaogmaneo.ImageEncoder_alpha_set)
    gamma = property(_pyaogmaneo.ImageEncoder_gamma_get, _pyaogmaneo.ImageEncoder_gamma_set)

    def __init__(self):
        _pyaogmaneo.ImageEncoder_swiginit(self, _pyaogmaneo.new_ImageEncoder())

    def initRandom(self, hiddenSize: "StdArray3i", visibleLayerDescs: "StdVecImageEncoderVisibleLayerDesc") -> "void":
        return _pyaogmaneo.ImageEncoder_initRandom(self, hiddenSize, visibleLayerDescs)

    def initFromFile(self, name: "std::string const &") -> "void":
        return _pyaogmaneo.ImageEncoder_initFromFile(self, name)

    def initFromBuffer(self, buffer: "StdVecuchar") -> "void":
        return _pyaogmaneo.ImageEncoder_initFromBuffer(self, buffer)

    def saveToFile(self, name: "std::string const &") -> "void":
        return _pyaogmaneo.ImageEncoder_saveToFile(self, name)

    def serializeToBuffer(self) -> "std::vector< unsigned char,std::allocator< unsigned char > >":
        return _pyaogmaneo.ImageEncoder_serializeToBuffer(self)

    def step(self, inputs: "StdVec2Df", learnEnabled: "bool"=True) -> "void":
        return _pyaogmaneo.ImageEncoder_step(self, inputs, learnEnabled)

    def reconstruct(self, reconCIs: "StdVeci") -> "void":
        return _pyaogmaneo.ImageEncoder_reconstruct(self, reconCIs)

    def getNumVisibleLayers(self) -> "int":
        return _pyaogmaneo.ImageEncoder_getNumVisibleLayers(self)

    def getReconstruction(self, i: "int") -> "std::vector< float,std::allocator< float > >":
        return _pyaogmaneo.ImageEncoder_getReconstruction(self, i)

    def getHiddenCIs(self) -> "std::vector< int,std::allocator< int > >":
        return _pyaogmaneo.ImageEncoder_getHiddenCIs(self)

    def getHiddenSize(self) -> "std::array< int,3 >":
        return _pyaogmaneo.ImageEncoder_getHiddenSize(self)

    def getVisibleSize(self, i: "int") -> "std::array< int,3 >":
        return _pyaogmaneo.ImageEncoder_getVisibleSize(self, i)
    __swig_destroy__ = _pyaogmaneo.delete_ImageEncoder

# Register ImageEncoder in _pyaogmaneo:
_pyaogmaneo.ImageEncoder_swigregister(ImageEncoder)



