<%!
    import pprint
%>

<em>Note: In the table below, if `None` is a value, it means the session namespace was accessed but denied by a discriminator.  If the value is empty, then the session namespace was not accessed.</em>
<table class="table table-striped table-condensed">
	<thead>
		<tr>
			<th>namespace</th>
			<th>in</th>
			<th>out</th>
		</tr>
	</thead>
	<tbody>
		% for namespace in sorted(session_data['namespaces']):
			<%
				## this looks halfassed, but not all session implementations will pformat as-is
			
				data_in = session_data['in'].get(namespace, '')
				if data_in is not '':
					if data_in:
						data_in = pprint.pformat(dict(data_in.items()))
					data_in = "<pre>%s</pre>" % data_in

				data_out = session_data['out'].get(namespace, '')
				if data_out is not '':
					if data_out:
						data_out = pprint.pformat(dict(data_out.items()))
					data_out = "<pre>%s</pre>" % data_out
			%>
			<tr>
				<th>${namespace}</th>
				<td>${data_in|n}</td>
				<td>${data_out|n}</td>
			</tr>
		% endfor
	</tbody>
</table>

<h4>Configuration</h4>
% if not configuration:
	<div class="alert alert-danger">
		<b>Error</b>
		No configuration detected. The package has not been configured properly.
	</div>
% else:
	<table class="table table-striped table-condensed">
		<thead>
			<tr>
				<th>namespace</th>
				<th>cookie_name</th>
				<th>has discriminators?</th>
				<th>info</th>
			</tr>
		</thead>
		<tbody>
			% for (namespace, cookie_name, has_discriminators, info, ) in sorted(configuration):
				<tr>
					<th>${namespace}</th>
					<td><code>${cookie_name}</code></td>
					<td>${has_discriminators or ''}</td>
					<td>
						## catch factory generators
						% if hasattr(info, '__code__'):
							${info.__code__}
						% else:
							${info}
						% endif
					</td>
				</tr>
			% endfor
		</tbody>
	</table>
% endif