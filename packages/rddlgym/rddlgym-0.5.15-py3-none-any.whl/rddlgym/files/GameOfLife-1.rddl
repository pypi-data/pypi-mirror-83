////////////////////////////////////////////////////////////////////
// Game of Life Boolean POMDP
//
// A simple DBN to encode Conway's cellular automata "game of life" 
// on a grid.  One gets a reward for generating patterns that keep 
// the most cells alive.
//
// Author: Scott Sanner (ssanner [at] gmail.com)
////////////////////////////////////////////////////////////////////
domain game_of_life_mdp {
    
    requirements = { reward-deterministic };

    types { 
        x_pos : object;
        y_pos : object; 
    };
        
    pvariables { 
        NOISE-PROB(x_pos,y_pos) : { non-fluent, real, default = 0.1 };
        NEIGHBOR(x_pos,y_pos,x_pos,y_pos) : { non-fluent, bool, default = false };
        alive(x_pos,y_pos) : { state-fluent,  bool, default = false };
        set(x_pos,y_pos)   : { action-fluent, bool, default = false };
    };
  
    cpfs {
        // Conway's game of life rules (from Wikipedia):
        // 1. Any live cell with fewer than two live neighbors dies, as if caused by under-population.
        // 2. Any live cell with more than three live neighbors dies, as if by overcrowding.
        // 3. Any live cell with two or three live neighbors lives on to the next generation.
        // 4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
        //
        // For interactivity: we allow an agent to explicitly set different cells.
        
        alive'(?x,?y) = 
            if ([alive(?x,?y) ^ ([sum_{?x2 : x_pos, ?y2 : y_pos} NEIGHBOR(?x,?y,?x2,?y2) ^ alive(?x2,?y2)] >= 2) 
                            ^ ([sum_{?x2 : x_pos, ?y2 : y_pos} NEIGHBOR(?x,?y,?x2,?y2) ^ alive(?x2,?y2)] <= 3)]
                        | [~alive(?x,?y) ^ ([sum_{?x2 : x_pos, ?y2 : y_pos} NEIGHBOR(?x,?y,?x2,?y2) ^ alive(?x2,?y2)] == 3)]
                        | set(?x,?y))
            then Bernoulli(1.0 - NOISE-PROB(?x,?y))
            else Bernoulli(NOISE-PROB(?x,?y));
    };
        
    reward = sum_{?x : x_pos, ?y : y_pos} [alive(?x,?y) - set(?x,?y)];
        
    state-action-constraints {
        forall_{?x : x_pos, ?y : y_pos}
            [(NOISE-PROB(?x,?y) >= 0.0) ^ (NOISE-PROB(?x,?y) <= 1.0)];
    };
}

non-fluents nf_game_of_life_inst_mdp__1 {
    domain = game_of_life_mdp;
    objects {
        x_pos : {x1,x2,x3};
        y_pos : {y1,y2,y3};
    };
    non-fluents {
        NOISE-PROB(x1,y1) = 0.020850267;
        NEIGHBOR(x1,y1,x1,y2);
        NEIGHBOR(x1,y1,x2,y1);
        NEIGHBOR(x1,y1,x2,y2);
        NOISE-PROB(x1,y2) = 0.031577107;
        NEIGHBOR(x1,y2,x1,y1);
        NEIGHBOR(x1,y2,x1,y3);
        NEIGHBOR(x1,y2,x2,y1);
        NEIGHBOR(x1,y2,x2,y2);
        NEIGHBOR(x1,y2,x2,y3);
        NOISE-PROB(x1,y3) = 0.02465339;
        NEIGHBOR(x1,y3,x1,y2);
        NEIGHBOR(x1,y3,x2,y2);
        NEIGHBOR(x1,y3,x2,y3);
        NOISE-PROB(x2,y1) = 0.017134635;
        NEIGHBOR(x2,y1,x1,y1);
        NEIGHBOR(x2,y1,x1,y2);
        NEIGHBOR(x2,y1,x2,y2);
        NEIGHBOR(x2,y1,x3,y1);
        NEIGHBOR(x2,y1,x3,y2);
        NOISE-PROB(x2,y2) = 0.014217583;
        NEIGHBOR(x2,y2,x1,y1);
        NEIGHBOR(x2,y2,x1,y2);
        NEIGHBOR(x2,y2,x1,y3);
        NEIGHBOR(x2,y2,x2,y1);
        NEIGHBOR(x2,y2,x2,y3);
        NEIGHBOR(x2,y2,x3,y1);
        NEIGHBOR(x2,y2,x3,y2);
        NEIGHBOR(x2,y2,x3,y3);
        NOISE-PROB(x2,y3) = 0.037390165;
        NEIGHBOR(x2,y3,x1,y2);
        NEIGHBOR(x2,y3,x1,y3);
        NEIGHBOR(x2,y3,x2,y2);
        NEIGHBOR(x2,y3,x3,y2);
        NEIGHBOR(x2,y3,x3,y3);
        NOISE-PROB(x3,y1) = 0.017355671;
        NEIGHBOR(x3,y1,x2,y1);
        NEIGHBOR(x3,y1,x2,y2);
        NEIGHBOR(x3,y1,x3,y2);
        NOISE-PROB(x3,y2) = 0.044999346;
        NEIGHBOR(x3,y2,x2,y1);
        NEIGHBOR(x3,y2,x2,y2);
        NEIGHBOR(x3,y2,x2,y3);
        NEIGHBOR(x3,y2,x3,y1);
        NEIGHBOR(x3,y2,x3,y3);
        NOISE-PROB(x3,y3) = 0.049556054;
        NEIGHBOR(x3,y3,x2,y2);
        NEIGHBOR(x3,y3,x2,y3);
        NEIGHBOR(x3,y3,x3,y2);
    };
}

instance game_of_life_inst_mdp__1 {
    domain = game_of_life_mdp;
    non-fluents = nf_game_of_life_inst_mdp__1;
    init-state {
        alive(x1,y1);
        alive(x1,y3);
        alive(x2,y1);
        alive(x2,y2);
    };

    max-nondef-actions = 1;
    horizon  = 40;
    discount = 1.0;
}