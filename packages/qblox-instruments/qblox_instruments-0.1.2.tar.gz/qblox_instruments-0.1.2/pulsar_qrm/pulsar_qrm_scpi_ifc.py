""""""
#------------------------------------------------------------------------------
# Description    : SCPI interface
# Git repository : https://gitlab.com/qblox/packages/software/qblox_instruments.git
# Copyright (C) Qblox BV (2020)
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY THIS FILE MANUALLY!
#------------------------------------------------------------------------------


#-- include --------------------------------------------------------------------

import sys
import os
import struct

#Add IEEE488.2 support
from ieee488_2.ieee488_2 import ieee488_2
from ieee488_2.transport import transport

#-- class ----------------------------------------------------------------------

class pulsar_qrm_scpi_ifc(ieee488_2):

    #---------------------------------------------------------------------------
    def __init__(self, transport_inst, debug = 0):
        """
        Constructor
        """

        #Store parameters for later use.
        self._debug = debug

        #Initialize parent class.
        super(pulsar_qrm_scpi_ifc, self).__init__(transport_inst)

        if self._debug == 0:
            try:
                #Check if build is compatible.
                build     = self._read("*IDN?").split(',')[-1]
                build_ref = "fwVersion=0.2.0 fwBuild=24/09/2020-11:56:55 fwHash=0x5744EB00 fwDirty=0 kmodVersion=0.2.0 kmodBuild=24/09/2020-11:56:55 kmodHash=0x5744EB00 kmodDirty=0 swVersion=0.2.0 swBuild=24/09/2020-11:56:55 swHash=0x5744EB00 swDirty=0"
                if build != build_ref:
                    raise Exception("Error: pulsar_qrm_scpi_ifc version ({}) is not compatible with device version ({}).".format(build_ref, build))

                #Clear SCPI error queue.
                while int(self._read('SYSTem:ERRor:COUNt?')) != 0:
                    self._read('SYSTem:ERRor:NEXT?')
            except Exception as err:
                raise

    #---------------------------------------------------------------------------
    def _get_scpi_commands(self):
        """
        Get SCPI commands.
        """

        #SCPI call
        try:
            var0 = self._read('*CMDS?')

            return var0
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _get_idn(self):
        """
        Get device identity and build information.
        """

        #SCPI call
        try:
            var0 = self._read('*IDN?')

            return var0
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def reset(self):
        """
        Reset device.
        """

        #SCPI call
        try:
            self._write('*RST')
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def clear(self):
        """
        Clear all status registers.
        """

        #SCPI call
        try:
            self._write('*CLS')
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def get_status_byte(self):
        """
        Get status byte.
        """

        #SCPI call
        try:
            var0 = self._read('*STB?')

            return int(var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def set_service_request_enable(self, reg):
        """
        Set service request enable.
        """

        #Check input types.
        self._check_in_type(locals(), ['int'])

        #SCPI call
        try:
            self._write('*SRE {}'.format(reg))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def get_service_request_enable(self):
        """
        Get service request enable.
        """

        #SCPI call
        try:
            var0 = self._read('*SRE?')

            return int(var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def set_standard_event_status_enable(self, reg):
        """
        Set standard event status enable.
        """

        #Check input types.
        self._check_in_type(locals(), ['int'])

        #SCPI call
        try:
            self._write('*ESE {}'.format(reg))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def get_standard_event_status_enable(self):
        """
        Get standard event status enable.
        """

        #SCPI call
        try:
            var0 = self._read('*ESE?')

            return int(var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def get_standard_event_status(self):
        """
        Get standard event status.
        """

        #SCPI call
        try:
            var0 = self._read('*ESR?')

            return int(var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def set_operation_complete(self):
        """
        Set operation complete command.
        """

        #SCPI call
        try:
            self._write('*OPC')
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def get_operation_complete(self):
        """
        Get operation complete status.
        """

        #SCPI call
        try:
            var0 = self._read('*OPC?')

            return bool(int(var0))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def test(self):
        """
        Run self-test.
        """

        #SCPI call
        try:
            var0 = self._read('*TST?')

            return bool(int(var0))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def wait(self):
        """
        Wait-to-continue.
        """

        #SCPI call
        try:
            self._write('*WAI')
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def get_system_error(self):
        """
        Get system error from queue.
        """

        #SCPI call
        try:
            var0 = self._read('SYSTem:ERRor:NEXT?')

            return var0
        except:
            raise

    #---------------------------------------------------------------------------
    def get_num_system_error(self):
        """
        Get number of system errors.
        """

        #SCPI call
        try:
            var0 = self._read('SYSTem:ERRor:COUNt?')

            return int(var0)
        except:
            raise

    #---------------------------------------------------------------------------
    def get_system_version(self):
        """
        Get system version.
        """

        #SCPI call
        try:
            var0 = self._read('SYSTem:VERSion?')

            return var0
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def preset_system_status(self):
        """
        Preset system status registers.
        """

        #SCPI call
        try:
            self._write('STATus:PRESet')
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _get_system_status(self):
        """
        Get general system status.
        """

        #SCPI call
        try:
            var0 = self._read('STATus:GENeral:STATE?')

            return var0
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def get_questionable_condition(self):
        """
        Get questionable condition.
        """

        #SCPI call
        try:
            var0 = self._read('STATus:QUEStionable:CONDition?')

            return int(var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def get_questionable_event(self):
        """
        Get questionable events.
        """

        #SCPI call
        try:
            var0 = self._read('STATus:QUEStionable:EVENt?')

            return int(var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def set_questionable_enable(self, reg):
        """
        Set questionable enable.
        """

        #Check input types.
        self._check_in_type(locals(), ['int'])

        #SCPI call
        try:
            self._write('STATus:QUEStionable:ENABle {}'.format(reg))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def get_questionable_enable(self):
        """
        Get questionable enable.
        """

        #SCPI call
        try:
            var0 = self._read('STATus:QUEStionable:ENABle?')

            return int(var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def get_current_fpga_temperature(self):
        """
        Get current FPGA temperature.
        """

        #SCPI call
        try:
            var0 = self._read('STATus:QUEStionable:TEMPerature:FPGA:CURRent?')

            return int(var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def get_maximum_fpga_temperature(self):
        """
        Get maximum FPGA temperature.
        """

        #SCPI call
        try:
            var0 = self._read('STATus:QUEStionable:TEMPerature:FPGA:MAXimum?')

            return int(var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def get_current_carrier_temperature(self):
        """
        Get current carrier temperature.
        """

        #SCPI call
        try:
            var0 = self._read('STATus:QUEStionable:TEMPerature:CARRier:CURRent?')

            return int(var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def get_maximum_carrier_temperature(self):
        """
        Get maximum carrier temperature.
        """

        #SCPI call
        try:
            var0 = self._read('STATus:QUEStionable:TEMPerature:CARRier:MAXimum?')

            return int(var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def get_current_afe_temperature(self):
        """
        Get analog frontend temperature.
        """

        #SCPI call
        try:
            var0 = self._read('STATus:QUEStionable:TEMPerature:AFE:CURRent?')

            return int(var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def get_maximum_afe_temperature(self):
        """
        Get analog frontend temperature.
        """

        #SCPI call
        try:
            var0 = self._read('STATus:QUEStionable:TEMPerature:AFE:MAXimum?')

            return int(var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _set_reference_source(self, internal):
        """
        Set reference source.
        """

        #Check input types.
        self._check_in_type(locals(), ['bool'])

        #SCPI call
        try:
            self._write('STATus:QUEStionable:FREQuency:REFerence:SRC {}'.format(0 if internal == False else 1))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _get_reference_source(self):
        """
        Get reference source.
        """

        #SCPI call
        try:
            var0 = self._read('STATus:QUEStionable:FREQuency:REFerence:SRC?')

            return bool(int(var0))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def get_operation_condition(self):
        """
        Get operation condition.
        """

        #SCPI call
        try:
            var0 = self._read('STATus:OPERation:CONDition?')

            return int(var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def get_operation_events(self):
        """
        Get operation events.
        """

        #SCPI call
        try:
            var0 = self._read('STATus:OPERation:EVENt?')

            return int(var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def set_operation_enable(self, reg):
        """
        Get operation enable.
        """

        #Check input types.
        self._check_in_type(locals(), ['int'])

        #SCPI call
        try:
            self._write('STATus:OPERation:ENABle {}'.format(reg))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def get_operation_enable(self):
        """
        Get operation enable.
        """

        #SCPI call
        try:
            var0 = self._read('STATus:OPERation:ENABle?')

            return int(var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def get_assembler_status(self):
        """
        Get assembler status.
        """

        #SCPI call
        try:
            var0 = self._read('STATus:ASSEMbler:SUCCess?')

            return bool(int(var0))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def get_assembler_log(self):
        """
        Get assembler log.
        """

        #SCPI call
        try:
            var0 = self._read_bin('STATus:ASSEMbler:LOG?')

            return var0.decode('utf-8', 'ignore')
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _set_sequencer_program(self, sequencer, program):
        """
        Program sequencer.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'str'])

        #SCPI call
        try:
            self._write_bin('SEQuencer{}:PROGram '.format(sequencer), program.encode('ascii'))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _set_sequencer_config(self, sequencer, config):
        """
        Set sequencer configuration.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'bytes'])

        #SCPI call
        try:
            self._write_bin('SEQuencer{}:CONFiguration '.format(sequencer), config)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _get_sequencer_config(self, sequencer):
        """
        Get sequencer configuration.
        """

        #Check input types.
        self._check_in_type(locals(), ['int'])

        #SCPI call
        try:
            var0 = self._read_bin('SEQuencer{}:CONFiguration?'.format(sequencer))

            return var0
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _arm_sequencer(self, sequencer):
        """
        Arm sequencer.
        """

        #Check input types.
        self._check_in_type(locals(), ['int'])

        #SCPI call
        try:
            self._write('SEQuencer{}:ARM'.format(sequencer))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _start_sequencer(self, sequencer):
        """
        Start sequencer.
        """

        #Check input types.
        self._check_in_type(locals(), ['int'])

        #SCPI call
        try:
            self._write('SEQuencer{}:START'.format(sequencer))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _stop_sequencer(self, sequencer):
        """
        Stop sequencer.
        """

        #Check input types.
        self._check_in_type(locals(), ['int'])

        #SCPI call
        try:
            self._write('SEQuencer{}:STOP'.format(sequencer))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _get_sequencer_state(self, sequencer):
        """
        Get sequencer state.
        """

        #Check input types.
        self._check_in_type(locals(), ['int'])

        #SCPI call
        try:
            var0 = self._read('SEQuencer{}:STATE?'.format(sequencer))

            return var0
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _add_awg_waveform(self, sequencer, awg, name, size, is_integer):
        """
        Add waveform to sequencer AWG path.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int', 'str', 'int', 'bool'])

        #SCPI call
        try:
            self._write('SEQuencer{}:AWG{}:WLISt:WAVeform:NEW "{}",{},{}'.format(sequencer, awg, name, size, 0 if is_integer == False else 1))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _delete_awg_waveform(self, sequencer, awg, name):
        """
        Delete waveform from sequencer AWG path.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int', 'str'])

        #SCPI call
        try:
            self._write('SEQuencer{}:AWG{}:WLISt:WAVeform:DELete "{}"'.format(sequencer, awg, name))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _set_awg_waveform_data(self, sequencer, awg, name, waveform):
        """
        Set waveform data in sequencer AWG path.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int', 'str', 'float'])

        #SCPI call
        try:
            self._write_bin('SEQuencer{}:AWG{}:WLISt:WAVeform:DATA "{}",'.format(sequencer, awg, name), struct.pack('f'*len(waveform), *waveform))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _get_awg_waveform_data(self, sequencer, awg, name, start, size):
        """
        Get waveform data from sequencer AWG path.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int', 'str', 'int', 'int'])

        #SCPI call
        try:
            var0 = self._read_bin('SEQuencer{}:AWG{}:WLISt:WAVeform:DATA? "{}",{},{}'.format(sequencer, awg, name, start, size))

            return struct.unpack('f'*int(len(var0)/4), var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _set_awg_waveform_index(self, sequencer, awg, name, index):
        """
        Set waveform index in sequencer AWG path.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int', 'str', 'int'])

        #SCPI call
        try:
            self._write('SEQuencer{}:AWG{}:WLISt:WAVeform:INDex "{}",{}'.format(sequencer, awg, name, index))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _get_awg_waveform_index(self, sequencer, awg, name):
        """
        Get waveform index from sequencer AWG path.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int', 'str'])

        #SCPI call
        try:
            var0 = self._read('SEQuencer{}:AWG{}:WLISt:WAVeform:INDex? "{}"'.format(sequencer, awg, name))

            return int(var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _get_awg_waveform_length(self, sequencer, awg, name):
        """
        Get waveform length from sequencer AWG path.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int', 'str'])

        #SCPI call
        try:
            var0 = self._read('SEQuencer{}:AWG{}:WLISt:WAVeform:LENGth? "{}"'.format(sequencer, awg, name))

            return int(var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _get_awg_waveform_name(self, sequencer, awg, index):
        """
        Get waveform name from sequencer AWG path based on index.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int', 'int'])

        #SCPI call
        try:
            var0 = self._read('SEQuencer{}:AWG{}:WLISt:WAVeform:NAME? {}'.format(sequencer, awg, index))

            return var0
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _get_awg_num_waveforms(self, sequencer, awg):
        """
        Get number of waveforms in sequencer AWG path.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int'])

        #SCPI call
        try:
            var0 = self._read('SEQuencer{}:AWG{}:WLISt:SIZE?'.format(sequencer, awg))

            return int(var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _get_awg_waveforms(self, sequencer, awg):
        """
        Get all waveform names from sequencer AWG path.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int'])

        #SCPI call
        try:
            var0 = self._read('SEQuencer{}:AWG{}:WLISt?'.format(sequencer, awg))

            return var0
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _add_acq_waveform(self, sequencer, acq, name, size, is_integer):
        """
        Add waveform to sequencer acquisition path.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int', 'str', 'int', 'bool'])

        #SCPI call
        try:
            self._write('SEQuencer{}:ACQ{}:WLISt:WAVeform:NEW "{}",{},{}'.format(sequencer, acq, name, size, 0 if is_integer == False else 1))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _delete_acq_waveform(self, sequencer, acq, name):
        """
        Delete waveform from sequencer acquisition path.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int', 'str'])

        #SCPI call
        try:
            self._write('SEQuencer{}:ACQ{}:WLISt:WAVeform:DELete "{}"'.format(sequencer, acq, name))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _set_acq_waveform_data(self, sequencer, acq, name, waveform):
        """
        Set waveform data in sequencer acquisition path.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int', 'str', 'float'])

        #SCPI call
        try:
            self._write_bin('SEQuencer{}:ACQ{}:WLISt:WAVeform:DATA "{}",'.format(sequencer, acq, name), struct.pack('f'*len(waveform), *waveform))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _get_acq_waveform_data(self, sequencer, acq, name, start, size):
        """
        Get waveform data from sequencer acquisition path.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int', 'str', 'int', 'int'])

        #SCPI call
        try:
            var0 = self._read_bin('SEQuencer{}:ACQ{}:WLISt:WAVeform:DATA? "{}",{},{}'.format(sequencer, acq, name, start, size))

            return struct.unpack('f'*int(len(var0)/4), var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _set_acq_waveform_index(self, sequencer, acq, name, index):
        """
        Set waveform index in sequencer acquisition path.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int', 'str', 'int'])

        #SCPI call
        try:
            self._write('SEQuencer{}:ACQ{}:WLISt:WAVeform:INDex "{}",{}'.format(sequencer, acq, name, index))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _get_acq_waveform_index(self, sequencer, acq, name):
        """
        Get waveform index from sequencer acquisition path.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int', 'str'])

        #SCPI call
        try:
            var0 = self._read('SEQuencer{}:ACQ{}:WLISt:WAVeform:INDex? "{}"'.format(sequencer, acq, name))

            return int(var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _get_acq_waveform_length(self, sequencer, acq, name):
        """
        Get waveform length from sequencer acquisition path.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int', 'str'])

        #SCPI call
        try:
            var0 = self._read('SEQuencer{}:ACQ{}:WLISt:WAVeform:LENGth? "{}"'.format(sequencer, acq, name))

            return int(var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _get_acq_waveform_name(self, sequencer, acq, index):
        """
        Get waveform name from sequencer acquisition path based on index.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int', 'int'])

        #SCPI call
        try:
            var0 = self._read('SEQuencer{}:ACQ{}:WLISt:WAVeform:NAME? {}'.format(sequencer, acq, index))

            return var0
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _get_acq_num_waveforms(self, sequencer, acq):
        """
        Get number of waveforms in sequencer acquisition path.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int'])

        #SCPI call
        try:
            var0 = self._read('SEQuencer{}:ACQ{}:WLISt:SIZE?'.format(sequencer, acq))

            return int(var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _get_acq_waveforms(self, sequencer, acq):
        """
        Get all waveform names from sequencer acquisition path.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int'])

        #SCPI call
        try:
            var0 = self._read('SEQuencer{}:ACQ{}:WLISt?'.format(sequencer, acq))

            return var0
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _add_acq_acquisition(self, sequencer, acq, path, name, size):
        """
        Add acquisition to sequencer acquisition list.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int', 'int', 'str', 'int'])

        #SCPI call
        try:
            self._write('SEQuencer{}:ACQ{}:PATH{}:ALISt:ACQuisition:NEW "{}",{}'.format(sequencer, acq, path, name, size))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _delete_acq_acquisition(self, sequencer, acq, path, name):
        """
        Delete acquisition from sequencer acquisition list.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int', 'int', 'str'])

        #SCPI call
        try:
            self._write('SEQuencer{}:ACQ{}:PATH{}:ALISt:ACQuisition:DELete "{}"'.format(sequencer, acq, path, name))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _set_acq_acquisition_data(self, sequencer, acq, path, name):
        """
        Set acquisition data in sequencer acquisition list from acquisition path.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int', 'int', 'str'])

        #SCPI call
        try:
            self._write('SEQuencer{}:ACQ{}:PATH{}:ALISt:ACQuisition:DATA "{}"'.format(sequencer, acq, path, name))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _get_acq_acquisition_data(self, sequencer, acq, path, name, start, size):
        """
        Get acquisition data from sequencer acquisition list.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int', 'int', 'str', 'int', 'int'])

        #SCPI call
        try:
            var0 = self._read_bin('SEQuencer{}:ACQ{}:PATH{}:ALISt:ACQuisition:DATA? "{}",{},{}'.format(sequencer, acq, path, name, start, size))

            return struct.unpack('f'*int(len(var0)/4), var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _get_acq_acquisition_length(self, sequencer, acq, path, name):
        """
        Get acquisition length from sequencer acquisition list.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int', 'int', 'str'])

        #SCPI call
        try:
            var0 = self._read('SEQuencer{}:ACQ{}:PATH{}:ALISt:ACQuisition:LENGth? "{}"'.format(sequencer, acq, path, name))

            return int(var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _get_acq_num_acquisitions(self, sequencer, acq, path):
        """
        Get number of acquisition in sequencer acquisition list.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int', 'int'])

        #SCPI call
        try:
            var0 = self._read('SEQuencer{}:ACQ{}:PATH{}:ALISt:SIZE?'.format(sequencer, acq, path))

            return int(var0)
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def _get_acq_acquisitions(self, sequencer, acq, path):
        """
        Get all acquisition names from sequencer acquisition list.
        """

        #Check input types.
        self._check_in_type(locals(), ['int', 'int', 'int'])

        #SCPI call
        try:
            var0 = self._read('SEQuencer{}:ACQ{}:PATH{}:ALISt?'.format(sequencer, acq, path))

            return var0
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #-----------------------------------------------------------------------
    def _check_in_type(self, in_arg_dict, in_type_list):
        """
        Check input types
        """

        if self._debug <= 1:
            del in_arg_dict['self']
            in_val_list  = [in_arg_dict[name] for name in in_arg_dict]
            for i, (in_val, in_type) in enumerate(zip(in_val_list, in_type_list)):
                if str(type(in_val).__name__) == "list" or str(type(in_val).__name__) == "ndarray":
                    if len(in_val) > 0:
                        in_val = in_val[0]
                    else:
                        raise Exception("Error: unexpected type for input argument {}, expected {} but got empty {}.".format(i, in_type, str(type(in_val).__name__)))
                if str(type(in_val).__name__)[:len(in_type)] != in_type:
                    raise Exception("Error: unexpected type for input argument {}, expected {} but got {}.".format(i, in_type, str(type(in_val).__name__)))

    #---------------------------------------------------------------------------
    def _check_error_queue(self, err=None):
        """
        Check SCPI error queue
        """

        if self._debug <= 1:
            errors = [str(err)] if err is not None else []
            while int(self._read('SYSTem:ERRor:COUNt?')) != 0:
                errors.append(','.join(self._read('SYSTem:ERRor:NEXT?').split(',')[1:]))

            if len(errors):
                if err is not None:
                    err_type = type(err)
                else:
                    err_type = Exception
                raise err_type('\n'.join(errors)).with_traceback(sys.exc_info()[2]) from None
