""""""
#------------------------------------------------------------------------------
# Description    : SCPI interface
# Git repository : https://gitlab.com/qblox/packages/software/qblox_qcodes_instruments.git
# Copyright (C) Qblox BV (2020)
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY THIS FILE MANUALLY!
#------------------------------------------------------------------------------


#-- include --------------------------------------------------------------------

import sys
import os

#Add SCPI support
from pulsar_qcm.pulsar_qcm_scpi_ifc import pulsar_qcm_scpi_ifc

#-- class ----------------------------------------------------------------------

class pulsar_qcm_scpi_ifc_private(pulsar_qcm_scpi_ifc):

    #---------------------------------------------------------------------------
    def __init__(self, transport_inst, debug = 0):
        """
        Constructor
        """

        #Initialize parent class
        super(pulsar_qcm_scpi_ifc_private, self).__init__(transport_inst, debug)

    #---------------------------------------------------------------------------
    def get_private_scpi_commands(self):
        """
        Get private SCPI commands.
        """

        #SCPI call
        try:
            var0 = self._read('*PRVT_CMDS?')

            return var0
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def set_cb_eeprom(self, type, rev, board_num, dev_num):
        """
        Set board type, revision and serial number and device serial number in carier board EEPROM.
        """

        #Check input types.
        self._check_in_type(locals(), ['str', 'str', 'str', 'str'])

        #SCPI call
        try:
            self._write('*CB_EEPROM "{}","{}","{}","{}"'.format(type, rev, board_num, dev_num))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def get_cb_eeprom(self):
        """
        Get board type, revision and serial number and device serial number from carier board EEPROM.
        """

        #SCPI call
        try:
            var0 = self._read('*CB_EEPROM?')

            return var0
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def set_afe_eeprom(self, type, rev, board_num, dev_num):
        """
        Set board type, revision and serial number and device serial number in AFE board EEPROM.
        """

        #Check input types.
        self._check_in_type(locals(), ['str', 'str', 'str', 'str'])

        #SCPI call
        try:
            self._write('*AFE_EEPROM "{}","{}","{}","{}"'.format(type, rev, board_num, dev_num))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def get_afe_eeprom(self):
        """
        Get board type, revision and serial number and device serial number from AFE board EEPROM.
        """

        #SCPI call
        try:
            var0 = self._read('*AFE_EEPROM?')

            return var0
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def set_extio_eeprom(self, type, rev, board_num, dev_num):
        """
        Set board type, revision and serial number and device serial number in EXTIO board EEPROM.
        """

        #Check input types.
        self._check_in_type(locals(), ['str', 'str', 'str', 'str'])

        #SCPI call
        try:
            self._write('*EXTIO_EEPROM "{}","{}","{}","{}"'.format(type, rev, board_num, dev_num))
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

    #---------------------------------------------------------------------------
    def get_extio_eeprom(self):
        """
        Get board type, revision and serial number and device serial number from EXTIO board EEPROM.
        """

        #SCPI call
        try:
            var0 = self._read('*EXTIO_EEPROM?')

            return var0
        except Exception as err:
            self._check_error_queue(err)
        finally:
            self._check_error_queue()

