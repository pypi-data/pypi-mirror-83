Metadata-Version: 1.1
Name: abnamrolib
Version: 5.2.1
Summary: A library implementing authenticating to an Abn Amro account or ICS credit card and retrieving the transactions
Home-page: https://github.com/costastf/abnamrolib
Author: Costas Tyfoxylos
Author-email: costas.tyf@gmail.com
License: MIT
Description: ==========
        abnamrolib
        ==========
        
        A library implementing authenticating to an Abn Amro account or ICS credit card and retrieving the transactions
        
        
        * Documentation: https://abnamrolib.readthedocs.org/en/latest
        
        
        Development Workflow
        ====================
        
        The workflow supports the following steps
        
         * lint
         * test
         * build
         * document
         * upload
         * graph
        
        These actions are supported out of the box by the corresponding scripts under _CI/scripts directory with sane defaults based on best practices.
        Sourcing setup_aliases.ps1 for windows powershell or setup_aliases.sh in bash on Mac or Linux will provide with handy aliases for the shell of all those commands prepended with an underscore.
        
        The bootstrap script creates a .venv directory inside the project directory hosting the virtual environment. It uses pipenv for that.
        It is called by all other scripts before they do anything. So one could simple start by calling _lint and that would set up everything before it tried to actually lint the project
        
        Once the code is ready to be delivered the _tag script should be called accepting one of three arguments, patch, minor, major following the semantic versioning scheme.
        So for the initial delivery one would call
        
            $ _tag --minor
        
        which would bump the version of the project to 0.1.0 tag it in git and do a push and also ask for the change and automagically update HISTORY.rst with the version and the change provided.
        
        
        So the full workflow after git is initialized is:
        
         * repeat as necessary (of course it could be test - code - lint :) )
        
           * code
           * lint
           * test
         * commit and push
         * develop more through the code-lint-test cycle
         * tag (with the appropriate argument)
         * build
         * upload (if you want to host your package in pypi)
         * document (of course this could be run at any point)
        
        
        Important Information
        =====================
        
        This template is based on pipenv. In order to be compatible with requirements.txt so the actual created package can be used by any part of the existing python ecosystem some hacks were needed.
        So when building a package out of this **do not** simple call
        
            $ python setup.py sdist bdist_egg
        
        **as this will produce an unusable artifact with files missing.**
        Instead use the provided build and upload scripts that create all the necessary files in the artifact.
        
        
        
        Project Features
        ================
        
        * TODO
        
        
        
        
        History
        -------
        
        0.0.1 (19-07-2019)
        ---------------------
        
        * First code creation
        
        
        0.1.0 (19-07-2019)
        ------------------
        
        * initial code implementation
        
        
        0.2.0 (20-07-2019)
        ------------------
        
        * Exposed transaction objects
        
        
        0.2.1 (20-07-2019)
        ------------------
        
        * Reverted to default provided value for account transaction amount
        
        
        0.3.0 (21-07-2019)
        ------------------
        
        * Removed uneeded properties from account transaction
        
        
        0.4.0 (21-07-2019)
        ------------------
        
        * Exposed actually existing attribute
        
        
        1.0.0 (24-07-2019)
        ------------------
        
        * Initial working version with accounts, foreign accounts and transaction retrieval.
        
        
        1.0.1 (25-07-2019)
        ------------------
        
        * made credit card a Comparable
        
        
        1.0.2 (25-07-2019)
        ------------------
        
        * Generalized the comparison of Comparable objects
        
        
        2.0.0 (26-07-2019)
        ------------------
        
        * Implemented a credit card contract to make credit cards compatible with bank accounts
        
        
        3.0.0 (26-07-2019)
        ------------------
        
        * Refactored code to use external dependency and implemented a contract interface standardizing the retrieval of accounts.
        
        
        3.0.1 (28-07-2019)
        ------------------
        
        * Fixed session dropping issue
        
        
        3.0.2 (28-07-2019)
        ------------------
        
        * Made error in retrieving non breaking
        
        
        3.0.3 (28-07-2019)
        ------------------
        
        * Made retrieving of objects safe and implemented backoff for get methods
        
        
        3.0.4 (28-07-2019)
        ------------------
        
        * Removed unnecessary method call
        
        
        3.0.5 (28-07-2019)
        ------------------
        
        * Extended logging
        
        
        3.0.6 (28-07-2019)
        ------------------
        
        * Updated dependencies
        
        
        3.0.7 (28-07-2019)
        ------------------
        
        * Added logging
        
        
        3.0.8 (28-07-2019)
        ------------------
        
        * Updated logging
        
        
        3.0.9 (28-07-2019)
        ------------------
        
        * Removed unneeded logging
        
        
        3.0.10 (30-07-2019)
        -------------------
        
        * Extended logging
        
        
        3.1.0 (02-08-2019)
        ------------------
        
        * Uniquely identify a transaction and an account
        
        
        3.1.1 (16-08-2019)
        ------------------
        
        * renamed underlying dependency and updated the code accordingly and fixed bug with a pop up covering the submission of the login.
        
        
        3.2.0 (17-08-2019)
        ------------------
        
        * Shortened timout on click event on log in.
        
        
        3.2.1 (29-08-2019)
        ------------------
        
        * Added latest popup window
        
        
        4.0.0 (13-09-2019)
        ------------------
        
        * Implemented cookie based authentication
        
        
        5.0.0 (09-12-2019)
        ------------------
        
        * Implemented cookie authentication for credit card and moved relevant shared code into a common module.
        
        
        5.1.0 (10-12-2019)
        ------------------
        
        * Implemented retrieving transaction by date, by ranges of dates and since a date.
        
        
        5.2.0 (10-12-2019)
        ------------------
        
        * Fixed name of method.
        
        
        5.2.1 (26-10-2020)
        ------------------
        
        * Fixed bug with new cookie header required by ICS.
        
Keywords: abnamrolib abn amro transactions ics
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3.7
