# coding: utf-8

"""
    MailMojo API

    v1 of the MailMojo API  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: hjelp@mailmojo.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class List(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'description': 'str',
        'facebook': 'str',
        'from_email': 'str',
        'from_name': 'str',
        'id': 'int',
        'instagram': 'str',
        'linkedin': 'str',
        'name': 'str',
        'pinterest': 'str',
        'subscribe_redirect_url': 'str',
        'subscribe_url': 'str',
        'twitter': 'str',
        'unsubscribe_cascades': 'bool',
        'unsubscribe_redirect_url': 'str',
        'unsubscribe_url': 'str',
        'website': 'str',
        'youtube': 'str'
    }

    attribute_map = {
        'created': 'created',
        'description': 'description',
        'facebook': 'facebook',
        'from_email': 'from_email',
        'from_name': 'from_name',
        'id': 'id',
        'instagram': 'instagram',
        'linkedin': 'linkedin',
        'name': 'name',
        'pinterest': 'pinterest',
        'subscribe_redirect_url': 'subscribe_redirect_url',
        'subscribe_url': 'subscribe_url',
        'twitter': 'twitter',
        'unsubscribe_cascades': 'unsubscribe_cascades',
        'unsubscribe_redirect_url': 'unsubscribe_redirect_url',
        'unsubscribe_url': 'unsubscribe_url',
        'website': 'website',
        'youtube': 'youtube'
    }

    def __init__(self, created=None, description=None, facebook=None, from_email=None, from_name=None, id=None, instagram=None, linkedin=None, name=None, pinterest=None, subscribe_redirect_url=None, subscribe_url=None, twitter=None, unsubscribe_cascades=None, unsubscribe_redirect_url=None, unsubscribe_url=None, website=None, youtube=None):  # noqa: E501
        """List - a model defined in Swagger"""  # noqa: E501

        self._created = None
        self._description = None
        self._facebook = None
        self._from_email = None
        self._from_name = None
        self._id = None
        self._instagram = None
        self._linkedin = None
        self._name = None
        self._pinterest = None
        self._subscribe_redirect_url = None
        self._subscribe_url = None
        self._twitter = None
        self._unsubscribe_cascades = None
        self._unsubscribe_redirect_url = None
        self._unsubscribe_url = None
        self._website = None
        self._youtube = None
        self.discriminator = None

        if created is not None:
            self.created = created
        if description is not None:
            self.description = description
        if facebook is not None:
            self.facebook = facebook
        self.from_email = from_email
        self.from_name = from_name
        if id is not None:
            self.id = id
        if instagram is not None:
            self.instagram = instagram
        if linkedin is not None:
            self.linkedin = linkedin
        self.name = name
        if pinterest is not None:
            self.pinterest = pinterest
        self.subscribe_redirect_url = subscribe_redirect_url
        if subscribe_url is not None:
            self.subscribe_url = subscribe_url
        if twitter is not None:
            self.twitter = twitter
        if unsubscribe_cascades is not None:
            self.unsubscribe_cascades = unsubscribe_cascades
        self.unsubscribe_redirect_url = unsubscribe_redirect_url
        if unsubscribe_url is not None:
            self.unsubscribe_url = unsubscribe_url
        if website is not None:
            self.website = website
        if youtube is not None:
            self.youtube = youtube

    @property
    def created(self):
        """Gets the created of this List.  # noqa: E501


        :return: The created of this List.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this List.


        :param created: The created of this List.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this List.  # noqa: E501


        :return: The description of this List.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this List.


        :param description: The description of this List.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def facebook(self):
        """Gets the facebook of this List.  # noqa: E501


        :return: The facebook of this List.  # noqa: E501
        :rtype: str
        """
        return self._facebook

    @facebook.setter
    def facebook(self, facebook):
        """Sets the facebook of this List.


        :param facebook: The facebook of this List.  # noqa: E501
        :type: str
        """

        self._facebook = facebook

    @property
    def from_email(self):
        """Gets the from_email of this List.  # noqa: E501


        :return: The from_email of this List.  # noqa: E501
        :rtype: str
        """
        return self._from_email

    @from_email.setter
    def from_email(self, from_email):
        """Sets the from_email of this List.


        :param from_email: The from_email of this List.  # noqa: E501
        :type: str
        """
        if from_email is None:
            raise ValueError("Invalid value for `from_email`, must not be `None`")  # noqa: E501
        if from_email is not None and len(from_email) < 5:
            raise ValueError("Invalid value for `from_email`, length must be greater than or equal to `5`")  # noqa: E501

        self._from_email = from_email

    @property
    def from_name(self):
        """Gets the from_name of this List.  # noqa: E501


        :return: The from_name of this List.  # noqa: E501
        :rtype: str
        """
        return self._from_name

    @from_name.setter
    def from_name(self, from_name):
        """Sets the from_name of this List.


        :param from_name: The from_name of this List.  # noqa: E501
        :type: str
        """
        if from_name is None:
            raise ValueError("Invalid value for `from_name`, must not be `None`")  # noqa: E501
        if from_name is not None and len(from_name) < 1:
            raise ValueError("Invalid value for `from_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._from_name = from_name

    @property
    def id(self):
        """Gets the id of this List.  # noqa: E501


        :return: The id of this List.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this List.


        :param id: The id of this List.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def instagram(self):
        """Gets the instagram of this List.  # noqa: E501


        :return: The instagram of this List.  # noqa: E501
        :rtype: str
        """
        return self._instagram

    @instagram.setter
    def instagram(self, instagram):
        """Sets the instagram of this List.


        :param instagram: The instagram of this List.  # noqa: E501
        :type: str
        """

        self._instagram = instagram

    @property
    def linkedin(self):
        """Gets the linkedin of this List.  # noqa: E501


        :return: The linkedin of this List.  # noqa: E501
        :rtype: str
        """
        return self._linkedin

    @linkedin.setter
    def linkedin(self, linkedin):
        """Sets the linkedin of this List.


        :param linkedin: The linkedin of this List.  # noqa: E501
        :type: str
        """

        self._linkedin = linkedin

    @property
    def name(self):
        """Gets the name of this List.  # noqa: E501


        :return: The name of this List.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this List.


        :param name: The name of this List.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def pinterest(self):
        """Gets the pinterest of this List.  # noqa: E501


        :return: The pinterest of this List.  # noqa: E501
        :rtype: str
        """
        return self._pinterest

    @pinterest.setter
    def pinterest(self, pinterest):
        """Sets the pinterest of this List.


        :param pinterest: The pinterest of this List.  # noqa: E501
        :type: str
        """

        self._pinterest = pinterest

    @property
    def subscribe_redirect_url(self):
        """Gets the subscribe_redirect_url of this List.  # noqa: E501


        :return: The subscribe_redirect_url of this List.  # noqa: E501
        :rtype: str
        """
        return self._subscribe_redirect_url

    @subscribe_redirect_url.setter
    def subscribe_redirect_url(self, subscribe_redirect_url):
        """Sets the subscribe_redirect_url of this List.


        :param subscribe_redirect_url: The subscribe_redirect_url of this List.  # noqa: E501
        :type: str
        """
        if subscribe_redirect_url is None:
            raise ValueError("Invalid value for `subscribe_redirect_url`, must not be `None`")  # noqa: E501

        self._subscribe_redirect_url = subscribe_redirect_url

    @property
    def subscribe_url(self):
        """Gets the subscribe_url of this List.  # noqa: E501


        :return: The subscribe_url of this List.  # noqa: E501
        :rtype: str
        """
        return self._subscribe_url

    @subscribe_url.setter
    def subscribe_url(self, subscribe_url):
        """Sets the subscribe_url of this List.


        :param subscribe_url: The subscribe_url of this List.  # noqa: E501
        :type: str
        """

        self._subscribe_url = subscribe_url

    @property
    def twitter(self):
        """Gets the twitter of this List.  # noqa: E501


        :return: The twitter of this List.  # noqa: E501
        :rtype: str
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this List.


        :param twitter: The twitter of this List.  # noqa: E501
        :type: str
        """

        self._twitter = twitter

    @property
    def unsubscribe_cascades(self):
        """Gets the unsubscribe_cascades of this List.  # noqa: E501


        :return: The unsubscribe_cascades of this List.  # noqa: E501
        :rtype: bool
        """
        return self._unsubscribe_cascades

    @unsubscribe_cascades.setter
    def unsubscribe_cascades(self, unsubscribe_cascades):
        """Sets the unsubscribe_cascades of this List.


        :param unsubscribe_cascades: The unsubscribe_cascades of this List.  # noqa: E501
        :type: bool
        """

        self._unsubscribe_cascades = unsubscribe_cascades

    @property
    def unsubscribe_redirect_url(self):
        """Gets the unsubscribe_redirect_url of this List.  # noqa: E501


        :return: The unsubscribe_redirect_url of this List.  # noqa: E501
        :rtype: str
        """
        return self._unsubscribe_redirect_url

    @unsubscribe_redirect_url.setter
    def unsubscribe_redirect_url(self, unsubscribe_redirect_url):
        """Sets the unsubscribe_redirect_url of this List.


        :param unsubscribe_redirect_url: The unsubscribe_redirect_url of this List.  # noqa: E501
        :type: str
        """
        if unsubscribe_redirect_url is None:
            raise ValueError("Invalid value for `unsubscribe_redirect_url`, must not be `None`")  # noqa: E501

        self._unsubscribe_redirect_url = unsubscribe_redirect_url

    @property
    def unsubscribe_url(self):
        """Gets the unsubscribe_url of this List.  # noqa: E501


        :return: The unsubscribe_url of this List.  # noqa: E501
        :rtype: str
        """
        return self._unsubscribe_url

    @unsubscribe_url.setter
    def unsubscribe_url(self, unsubscribe_url):
        """Sets the unsubscribe_url of this List.


        :param unsubscribe_url: The unsubscribe_url of this List.  # noqa: E501
        :type: str
        """

        self._unsubscribe_url = unsubscribe_url

    @property
    def website(self):
        """Gets the website of this List.  # noqa: E501


        :return: The website of this List.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this List.


        :param website: The website of this List.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def youtube(self):
        """Gets the youtube of this List.  # noqa: E501


        :return: The youtube of this List.  # noqa: E501
        :rtype: str
        """
        return self._youtube

    @youtube.setter
    def youtube(self, youtube):
        """Sets the youtube of this List.


        :param youtube: The youtube of this List.  # noqa: E501
        :type: str
        """

        self._youtube = youtube

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(List, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, List):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
