# coding: utf-8

"""
    MailMojo API

    v1 of the MailMojo API  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: hjelp@mailmojo.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Embed(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'options': 'EmbedOptions',
        'session_type': 'str',
        'user_ip': 'str'
    }

    attribute_map = {
        'options': 'options',
        'session_type': 'session_type',
        'user_ip': 'user_ip'
    }

    def __init__(self, options=None, session_type=None, user_ip=None):  # noqa: E501
        """Embed - a model defined in Swagger"""  # noqa: E501

        self._options = None
        self._session_type = None
        self._user_ip = None
        self.discriminator = None

        if options is not None:
            self.options = options
        self.session_type = session_type
        self.user_ip = user_ip

    @property
    def options(self):
        """Gets the options of this Embed.  # noqa: E501


        :return: The options of this Embed.  # noqa: E501
        :rtype: EmbedOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Embed.


        :param options: The options of this Embed.  # noqa: E501
        :type: EmbedOptions
        """

        self._options = options

    @property
    def session_type(self):
        """Gets the session_type of this Embed.  # noqa: E501


        :return: The session_type of this Embed.  # noqa: E501
        :rtype: str
        """
        return self._session_type

    @session_type.setter
    def session_type(self, session_type):
        """Sets the session_type of this Embed.


        :param session_type: The session_type of this Embed.  # noqa: E501
        :type: str
        """
        if session_type is None:
            raise ValueError("Invalid value for `session_type`, must not be `None`")  # noqa: E501
        allowed_values = ["newsletters"]  # noqa: E501
        if session_type not in allowed_values:
            raise ValueError(
                "Invalid value for `session_type` ({0}), must be one of {1}"  # noqa: E501
                .format(session_type, allowed_values)
            )

        self._session_type = session_type

    @property
    def user_ip(self):
        """Gets the user_ip of this Embed.  # noqa: E501


        :return: The user_ip of this Embed.  # noqa: E501
        :rtype: str
        """
        return self._user_ip

    @user_ip.setter
    def user_ip(self, user_ip):
        """Sets the user_ip of this Embed.


        :param user_ip: The user_ip of this Embed.  # noqa: E501
        :type: str
        """
        if user_ip is None:
            raise ValueError("Invalid value for `user_ip`, must not be `None`")  # noqa: E501

        self._user_ip = user_ip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Embed, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Embed):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
