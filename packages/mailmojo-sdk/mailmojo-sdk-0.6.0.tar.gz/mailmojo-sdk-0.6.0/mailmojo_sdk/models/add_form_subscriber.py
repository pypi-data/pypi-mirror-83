# coding: utf-8

"""
    MailMojo API

    v1 of the MailMojo API  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: hjelp@mailmojo.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AddFormSubscriber(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contact': 'BaseContact',
        'page_view_id': 'int',
        'view_id': 'int'
    }

    attribute_map = {
        'contact': 'contact',
        'page_view_id': 'page_view_id',
        'view_id': 'view_id'
    }

    def __init__(self, contact=None, page_view_id=None, view_id=None):  # noqa: E501
        """AddFormSubscriber - a model defined in Swagger"""  # noqa: E501

        self._contact = None
        self._page_view_id = None
        self._view_id = None
        self.discriminator = None

        self.contact = contact
        if page_view_id is not None:
            self.page_view_id = page_view_id
        self.view_id = view_id

    @property
    def contact(self):
        """Gets the contact of this AddFormSubscriber.  # noqa: E501


        :return: The contact of this AddFormSubscriber.  # noqa: E501
        :rtype: BaseContact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this AddFormSubscriber.


        :param contact: The contact of this AddFormSubscriber.  # noqa: E501
        :type: BaseContact
        """
        if contact is None:
            raise ValueError("Invalid value for `contact`, must not be `None`")  # noqa: E501

        self._contact = contact

    @property
    def page_view_id(self):
        """Gets the page_view_id of this AddFormSubscriber.  # noqa: E501


        :return: The page_view_id of this AddFormSubscriber.  # noqa: E501
        :rtype: int
        """
        return self._page_view_id

    @page_view_id.setter
    def page_view_id(self, page_view_id):
        """Sets the page_view_id of this AddFormSubscriber.


        :param page_view_id: The page_view_id of this AddFormSubscriber.  # noqa: E501
        :type: int
        """

        self._page_view_id = page_view_id

    @property
    def view_id(self):
        """Gets the view_id of this AddFormSubscriber.  # noqa: E501


        :return: The view_id of this AddFormSubscriber.  # noqa: E501
        :rtype: int
        """
        return self._view_id

    @view_id.setter
    def view_id(self, view_id):
        """Sets the view_id of this AddFormSubscriber.


        :param view_id: The view_id of this AddFormSubscriber.  # noqa: E501
        :type: int
        """
        if view_id is None:
            raise ValueError("Invalid value for `view_id`, must not be `None`")  # noqa: E501

        self._view_id = view_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddFormSubscriber, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddFormSubscriber):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
