# coding: utf-8

"""
    MailMojo API

    v1 of the MailMojo API  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: hjelp@mailmojo.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CampaignDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_email': 'str',
        'from_name': 'str',
        'id': 'int',
        'name': 'str',
        'statistics': 'CampaignStatistics',
        'utm_campaign': 'str'
    }

    attribute_map = {
        'from_email': 'from_email',
        'from_name': 'from_name',
        'id': 'id',
        'name': 'name',
        'statistics': 'statistics',
        'utm_campaign': 'utm_campaign'
    }

    def __init__(self, from_email=None, from_name=None, id=None, name=None, statistics=None, utm_campaign=None):  # noqa: E501
        """CampaignDetail - a model defined in Swagger"""  # noqa: E501

        self._from_email = None
        self._from_name = None
        self._id = None
        self._name = None
        self._statistics = None
        self._utm_campaign = None
        self.discriminator = None

        self.from_email = from_email
        self.from_name = from_name
        if id is not None:
            self.id = id
        self.name = name
        if statistics is not None:
            self.statistics = statistics
        if utm_campaign is not None:
            self.utm_campaign = utm_campaign

    @property
    def from_email(self):
        """Gets the from_email of this CampaignDetail.  # noqa: E501


        :return: The from_email of this CampaignDetail.  # noqa: E501
        :rtype: str
        """
        return self._from_email

    @from_email.setter
    def from_email(self, from_email):
        """Sets the from_email of this CampaignDetail.


        :param from_email: The from_email of this CampaignDetail.  # noqa: E501
        :type: str
        """
        if from_email is None:
            raise ValueError("Invalid value for `from_email`, must not be `None`")  # noqa: E501

        self._from_email = from_email

    @property
    def from_name(self):
        """Gets the from_name of this CampaignDetail.  # noqa: E501


        :return: The from_name of this CampaignDetail.  # noqa: E501
        :rtype: str
        """
        return self._from_name

    @from_name.setter
    def from_name(self, from_name):
        """Sets the from_name of this CampaignDetail.


        :param from_name: The from_name of this CampaignDetail.  # noqa: E501
        :type: str
        """
        if from_name is None:
            raise ValueError("Invalid value for `from_name`, must not be `None`")  # noqa: E501

        self._from_name = from_name

    @property
    def id(self):
        """Gets the id of this CampaignDetail.  # noqa: E501


        :return: The id of this CampaignDetail.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CampaignDetail.


        :param id: The id of this CampaignDetail.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CampaignDetail.  # noqa: E501


        :return: The name of this CampaignDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CampaignDetail.


        :param name: The name of this CampaignDetail.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def statistics(self):
        """Gets the statistics of this CampaignDetail.  # noqa: E501


        :return: The statistics of this CampaignDetail.  # noqa: E501
        :rtype: CampaignStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this CampaignDetail.


        :param statistics: The statistics of this CampaignDetail.  # noqa: E501
        :type: CampaignStatistics
        """

        self._statistics = statistics

    @property
    def utm_campaign(self):
        """Gets the utm_campaign of this CampaignDetail.  # noqa: E501


        :return: The utm_campaign of this CampaignDetail.  # noqa: E501
        :rtype: str
        """
        return self._utm_campaign

    @utm_campaign.setter
    def utm_campaign(self, utm_campaign):
        """Sets the utm_campaign of this CampaignDetail.


        :param utm_campaign: The utm_campaign of this CampaignDetail.  # noqa: E501
        :type: str
        """

        self._utm_campaign = utm_campaign

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CampaignDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CampaignDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
