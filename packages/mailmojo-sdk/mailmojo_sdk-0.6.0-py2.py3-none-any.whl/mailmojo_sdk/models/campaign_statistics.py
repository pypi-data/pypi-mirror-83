# coding: utf-8

"""
    MailMojo API

    v1 of the MailMojo API  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: hjelp@mailmojo.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CampaignStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bounce_rate': 'float',
        'click_rate': 'float',
        'num_recipients': 'int',
        'open_rate': 'float'
    }

    attribute_map = {
        'bounce_rate': 'bounce_rate',
        'click_rate': 'click_rate',
        'num_recipients': 'num_recipients',
        'open_rate': 'open_rate'
    }

    def __init__(self, bounce_rate=None, click_rate=None, num_recipients=None, open_rate=None):  # noqa: E501
        """CampaignStatistics - a model defined in Swagger"""  # noqa: E501

        self._bounce_rate = None
        self._click_rate = None
        self._num_recipients = None
        self._open_rate = None
        self.discriminator = None

        if bounce_rate is not None:
            self.bounce_rate = bounce_rate
        if click_rate is not None:
            self.click_rate = click_rate
        if num_recipients is not None:
            self.num_recipients = num_recipients
        if open_rate is not None:
            self.open_rate = open_rate

    @property
    def bounce_rate(self):
        """Gets the bounce_rate of this CampaignStatistics.  # noqa: E501


        :return: The bounce_rate of this CampaignStatistics.  # noqa: E501
        :rtype: float
        """
        return self._bounce_rate

    @bounce_rate.setter
    def bounce_rate(self, bounce_rate):
        """Sets the bounce_rate of this CampaignStatistics.


        :param bounce_rate: The bounce_rate of this CampaignStatistics.  # noqa: E501
        :type: float
        """

        self._bounce_rate = bounce_rate

    @property
    def click_rate(self):
        """Gets the click_rate of this CampaignStatistics.  # noqa: E501


        :return: The click_rate of this CampaignStatistics.  # noqa: E501
        :rtype: float
        """
        return self._click_rate

    @click_rate.setter
    def click_rate(self, click_rate):
        """Sets the click_rate of this CampaignStatistics.


        :param click_rate: The click_rate of this CampaignStatistics.  # noqa: E501
        :type: float
        """

        self._click_rate = click_rate

    @property
    def num_recipients(self):
        """Gets the num_recipients of this CampaignStatistics.  # noqa: E501


        :return: The num_recipients of this CampaignStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_recipients

    @num_recipients.setter
    def num_recipients(self, num_recipients):
        """Sets the num_recipients of this CampaignStatistics.


        :param num_recipients: The num_recipients of this CampaignStatistics.  # noqa: E501
        :type: int
        """

        self._num_recipients = num_recipients

    @property
    def open_rate(self):
        """Gets the open_rate of this CampaignStatistics.  # noqa: E501


        :return: The open_rate of this CampaignStatistics.  # noqa: E501
        :rtype: float
        """
        return self._open_rate

    @open_rate.setter
    def open_rate(self, open_rate):
        """Sets the open_rate of this CampaignStatistics.


        :param open_rate: The open_rate of this CampaignStatistics.  # noqa: E501
        :type: float
        """

        self._open_rate = open_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CampaignStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CampaignStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
