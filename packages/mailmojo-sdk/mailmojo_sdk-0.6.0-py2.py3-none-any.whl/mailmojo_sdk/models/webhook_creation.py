# coding: utf-8

"""
    MailMojo API

    v1 of the MailMojo API  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: hjelp@mailmojo.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WebhookCreation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'callback_url': 'str',
        'created_at': 'datetime',
        'id': 'int',
        'integration_id': 'str',
        'is_enabled': 'bool',
        'secret': 'str',
        'topic': 'str'
    }

    attribute_map = {
        'callback_url': 'callback_url',
        'created_at': 'created_at',
        'id': 'id',
        'integration_id': 'integration_id',
        'is_enabled': 'is_enabled',
        'secret': 'secret',
        'topic': 'topic'
    }

    def __init__(self, callback_url=None, created_at=None, id=None, integration_id=None, is_enabled=None, secret=None, topic=None):  # noqa: E501
        """WebhookCreation - a model defined in Swagger"""  # noqa: E501

        self._callback_url = None
        self._created_at = None
        self._id = None
        self._integration_id = None
        self._is_enabled = None
        self._secret = None
        self._topic = None
        self.discriminator = None

        self.callback_url = callback_url
        if created_at is not None:
            self.created_at = created_at
        if id is not None:
            self.id = id
        if integration_id is not None:
            self.integration_id = integration_id
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if secret is not None:
            self.secret = secret
        self.topic = topic

    @property
    def callback_url(self):
        """Gets the callback_url of this WebhookCreation.  # noqa: E501


        :return: The callback_url of this WebhookCreation.  # noqa: E501
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this WebhookCreation.


        :param callback_url: The callback_url of this WebhookCreation.  # noqa: E501
        :type: str
        """
        if callback_url is None:
            raise ValueError("Invalid value for `callback_url`, must not be `None`")  # noqa: E501

        self._callback_url = callback_url

    @property
    def created_at(self):
        """Gets the created_at of this WebhookCreation.  # noqa: E501


        :return: The created_at of this WebhookCreation.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this WebhookCreation.


        :param created_at: The created_at of this WebhookCreation.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this WebhookCreation.  # noqa: E501


        :return: The id of this WebhookCreation.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WebhookCreation.


        :param id: The id of this WebhookCreation.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def integration_id(self):
        """Gets the integration_id of this WebhookCreation.  # noqa: E501


        :return: The integration_id of this WebhookCreation.  # noqa: E501
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this WebhookCreation.


        :param integration_id: The integration_id of this WebhookCreation.  # noqa: E501
        :type: str
        """

        self._integration_id = integration_id

    @property
    def is_enabled(self):
        """Gets the is_enabled of this WebhookCreation.  # noqa: E501


        :return: The is_enabled of this WebhookCreation.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this WebhookCreation.


        :param is_enabled: The is_enabled of this WebhookCreation.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def secret(self):
        """Gets the secret of this WebhookCreation.  # noqa: E501


        :return: The secret of this WebhookCreation.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this WebhookCreation.


        :param secret: The secret of this WebhookCreation.  # noqa: E501
        :type: str
        """

        self._secret = secret

    @property
    def topic(self):
        """Gets the topic of this WebhookCreation.  # noqa: E501


        :return: The topic of this WebhookCreation.  # noqa: E501
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this WebhookCreation.


        :param topic: The topic of this WebhookCreation.  # noqa: E501
        :type: str
        """
        if topic is None:
            raise ValueError("Invalid value for `topic`, must not be `None`")  # noqa: E501
        allowed_values = ["contacts/subscribed", "contacts/unsubscribed"]  # noqa: E501
        if topic not in allowed_values:
            raise ValueError(
                "Invalid value for `topic` ({0}), must be one of {1}"  # noqa: E501
                .format(topic, allowed_values)
            )

        self._topic = topic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebhookCreation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookCreation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
