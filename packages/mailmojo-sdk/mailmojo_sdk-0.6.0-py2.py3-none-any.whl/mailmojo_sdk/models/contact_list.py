# coding: utf-8

"""
    MailMojo API

    v1 of the MailMojo API  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: hjelp@mailmojo.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ContactList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'added': 'datetime',
        'email': 'str',
        'list_id': 'int',
        'status': 'str',
        'status_changed': 'datetime'
    }

    attribute_map = {
        'added': 'added',
        'email': 'email',
        'list_id': 'list_id',
        'status': 'status',
        'status_changed': 'status_changed'
    }

    def __init__(self, added=None, email=None, list_id=None, status=None, status_changed=None):  # noqa: E501
        """ContactList - a model defined in Swagger"""  # noqa: E501

        self._added = None
        self._email = None
        self._list_id = None
        self._status = None
        self._status_changed = None
        self.discriminator = None

        if added is not None:
            self.added = added
        self.email = email
        self.list_id = list_id
        if status is not None:
            self.status = status
        if status_changed is not None:
            self.status_changed = status_changed

    @property
    def added(self):
        """Gets the added of this ContactList.  # noqa: E501


        :return: The added of this ContactList.  # noqa: E501
        :rtype: datetime
        """
        return self._added

    @added.setter
    def added(self, added):
        """Sets the added of this ContactList.


        :param added: The added of this ContactList.  # noqa: E501
        :type: datetime
        """

        self._added = added

    @property
    def email(self):
        """Gets the email of this ContactList.  # noqa: E501


        :return: The email of this ContactList.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ContactList.


        :param email: The email of this ContactList.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def list_id(self):
        """Gets the list_id of this ContactList.  # noqa: E501


        :return: The list_id of this ContactList.  # noqa: E501
        :rtype: int
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """Sets the list_id of this ContactList.


        :param list_id: The list_id of this ContactList.  # noqa: E501
        :type: int
        """
        if list_id is None:
            raise ValueError("Invalid value for `list_id`, must not be `None`")  # noqa: E501

        self._list_id = list_id

    @property
    def status(self):
        """Gets the status of this ContactList.  # noqa: E501


        :return: The status of this ContactList.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ContactList.


        :param status: The status of this ContactList.  # noqa: E501
        :type: str
        """
        allowed_values = ["a", "u", "b", "d"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_changed(self):
        """Gets the status_changed of this ContactList.  # noqa: E501


        :return: The status_changed of this ContactList.  # noqa: E501
        :rtype: datetime
        """
        return self._status_changed

    @status_changed.setter
    def status_changed(self, status_changed):
        """Sets the status_changed of this ContactList.


        :param status_changed: The status_changed of this ContactList.  # noqa: E501
        :type: datetime
        """

        self._status_changed = status_changed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
