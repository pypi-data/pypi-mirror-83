# coding: utf-8

"""
    MailMojo API

    v1 of the MailMojo API  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: hjelp@mailmojo.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HistoricalContactsStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'added': 'int',
        'bounced': 'int',
        '_date': 'date',
        'deleted': 'int',
        'sum': 'int',
        'unsubscribed': 'int'
    }

    attribute_map = {
        'added': 'added',
        'bounced': 'bounced',
        '_date': 'date',
        'deleted': 'deleted',
        'sum': 'sum',
        'unsubscribed': 'unsubscribed'
    }

    def __init__(self, added=None, bounced=None, _date=None, deleted=None, sum=None, unsubscribed=None):  # noqa: E501
        """HistoricalContactsStats - a model defined in Swagger"""  # noqa: E501

        self._added = None
        self._bounced = None
        self.__date = None
        self._deleted = None
        self._sum = None
        self._unsubscribed = None
        self.discriminator = None

        if added is not None:
            self.added = added
        if bounced is not None:
            self.bounced = bounced
        if _date is not None:
            self._date = _date
        if deleted is not None:
            self.deleted = deleted
        if sum is not None:
            self.sum = sum
        if unsubscribed is not None:
            self.unsubscribed = unsubscribed

    @property
    def added(self):
        """Gets the added of this HistoricalContactsStats.  # noqa: E501


        :return: The added of this HistoricalContactsStats.  # noqa: E501
        :rtype: int
        """
        return self._added

    @added.setter
    def added(self, added):
        """Sets the added of this HistoricalContactsStats.


        :param added: The added of this HistoricalContactsStats.  # noqa: E501
        :type: int
        """

        self._added = added

    @property
    def bounced(self):
        """Gets the bounced of this HistoricalContactsStats.  # noqa: E501


        :return: The bounced of this HistoricalContactsStats.  # noqa: E501
        :rtype: int
        """
        return self._bounced

    @bounced.setter
    def bounced(self, bounced):
        """Sets the bounced of this HistoricalContactsStats.


        :param bounced: The bounced of this HistoricalContactsStats.  # noqa: E501
        :type: int
        """

        self._bounced = bounced

    @property
    def _date(self):
        """Gets the _date of this HistoricalContactsStats.  # noqa: E501


        :return: The _date of this HistoricalContactsStats.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this HistoricalContactsStats.


        :param _date: The _date of this HistoricalContactsStats.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def deleted(self):
        """Gets the deleted of this HistoricalContactsStats.  # noqa: E501


        :return: The deleted of this HistoricalContactsStats.  # noqa: E501
        :rtype: int
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this HistoricalContactsStats.


        :param deleted: The deleted of this HistoricalContactsStats.  # noqa: E501
        :type: int
        """

        self._deleted = deleted

    @property
    def sum(self):
        """Gets the sum of this HistoricalContactsStats.  # noqa: E501


        :return: The sum of this HistoricalContactsStats.  # noqa: E501
        :rtype: int
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this HistoricalContactsStats.


        :param sum: The sum of this HistoricalContactsStats.  # noqa: E501
        :type: int
        """

        self._sum = sum

    @property
    def unsubscribed(self):
        """Gets the unsubscribed of this HistoricalContactsStats.  # noqa: E501


        :return: The unsubscribed of this HistoricalContactsStats.  # noqa: E501
        :rtype: int
        """
        return self._unsubscribed

    @unsubscribed.setter
    def unsubscribed(self, unsubscribed):
        """Sets the unsubscribed of this HistoricalContactsStats.


        :param unsubscribed: The unsubscribed of this HistoricalContactsStats.  # noqa: E501
        :type: int
        """

        self._unsubscribed = unsubscribed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HistoricalContactsStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistoricalContactsStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
