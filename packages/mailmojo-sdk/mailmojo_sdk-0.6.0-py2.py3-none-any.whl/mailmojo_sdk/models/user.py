# coding: utf-8

"""
    MailMojo API

    v1 of the MailMojo API  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: hjelp@mailmojo.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'city': 'str',
        'contact_email': 'str',
        'contact_name': 'str',
        'created': 'datetime',
        'logo': 'object',
        'logo_url': 'str',
        'name': 'str',
        'num_contacts': 'int',
        'partner': 'str',
        'plan': 'str',
        'trial_expires': 'date',
        'username': 'str',
        'zip_code': 'str'
    }

    attribute_map = {
        'address': 'address',
        'city': 'city',
        'contact_email': 'contact_email',
        'contact_name': 'contact_name',
        'created': 'created',
        'logo': 'logo',
        'logo_url': 'logo_url',
        'name': 'name',
        'num_contacts': 'num_contacts',
        'partner': 'partner',
        'plan': 'plan',
        'trial_expires': 'trial_expires',
        'username': 'username',
        'zip_code': 'zip_code'
    }

    def __init__(self, address=None, city=None, contact_email=None, contact_name=None, created=None, logo=None, logo_url=None, name=None, num_contacts=None, partner=None, plan=None, trial_expires=None, username=None, zip_code=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._city = None
        self._contact_email = None
        self._contact_name = None
        self._created = None
        self._logo = None
        self._logo_url = None
        self._name = None
        self._num_contacts = None
        self._partner = None
        self._plan = None
        self._trial_expires = None
        self._username = None
        self._zip_code = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if city is not None:
            self.city = city
        self.contact_email = contact_email
        if contact_name is not None:
            self.contact_name = contact_name
        if created is not None:
            self.created = created
        if logo is not None:
            self.logo = logo
        if logo_url is not None:
            self.logo_url = logo_url
        self.name = name
        if num_contacts is not None:
            self.num_contacts = num_contacts
        if partner is not None:
            self.partner = partner
        if plan is not None:
            self.plan = plan
        if trial_expires is not None:
            self.trial_expires = trial_expires
        if username is not None:
            self.username = username
        if zip_code is not None:
            self.zip_code = zip_code

    @property
    def address(self):
        """Gets the address of this User.  # noqa: E501


        :return: The address of this User.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this User.


        :param address: The address of this User.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def city(self):
        """Gets the city of this User.  # noqa: E501


        :return: The city of this User.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this User.


        :param city: The city of this User.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def contact_email(self):
        """Gets the contact_email of this User.  # noqa: E501


        :return: The contact_email of this User.  # noqa: E501
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this User.


        :param contact_email: The contact_email of this User.  # noqa: E501
        :type: str
        """
        if contact_email is None:
            raise ValueError("Invalid value for `contact_email`, must not be `None`")  # noqa: E501

        self._contact_email = contact_email

    @property
    def contact_name(self):
        """Gets the contact_name of this User.  # noqa: E501


        :return: The contact_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this User.


        :param contact_name: The contact_name of this User.  # noqa: E501
        :type: str
        """

        self._contact_name = contact_name

    @property
    def created(self):
        """Gets the created of this User.  # noqa: E501


        :return: The created of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this User.


        :param created: The created of this User.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def logo(self):
        """Gets the logo of this User.  # noqa: E501


        :return: The logo of this User.  # noqa: E501
        :rtype: object
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this User.


        :param logo: The logo of this User.  # noqa: E501
        :type: object
        """

        self._logo = logo

    @property
    def logo_url(self):
        """Gets the logo_url of this User.  # noqa: E501


        :return: The logo_url of this User.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this User.


        :param logo_url: The logo_url of this User.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def name(self):
        """Gets the name of this User.  # noqa: E501


        :return: The name of this User.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.


        :param name: The name of this User.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def num_contacts(self):
        """Gets the num_contacts of this User.  # noqa: E501


        :return: The num_contacts of this User.  # noqa: E501
        :rtype: int
        """
        return self._num_contacts

    @num_contacts.setter
    def num_contacts(self, num_contacts):
        """Sets the num_contacts of this User.


        :param num_contacts: The num_contacts of this User.  # noqa: E501
        :type: int
        """

        self._num_contacts = num_contacts

    @property
    def partner(self):
        """Gets the partner of this User.  # noqa: E501


        :return: The partner of this User.  # noqa: E501
        :rtype: str
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this User.


        :param partner: The partner of this User.  # noqa: E501
        :type: str
        """

        self._partner = partner

    @property
    def plan(self):
        """Gets the plan of this User.  # noqa: E501


        :return: The plan of this User.  # noqa: E501
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this User.


        :param plan: The plan of this User.  # noqa: E501
        :type: str
        """

        self._plan = plan

    @property
    def trial_expires(self):
        """Gets the trial_expires of this User.  # noqa: E501


        :return: The trial_expires of this User.  # noqa: E501
        :rtype: date
        """
        return self._trial_expires

    @trial_expires.setter
    def trial_expires(self, trial_expires):
        """Sets the trial_expires of this User.


        :param trial_expires: The trial_expires of this User.  # noqa: E501
        :type: date
        """

        self._trial_expires = trial_expires

    @property
    def username(self):
        """Gets the username of this User.  # noqa: E501


        :return: The username of this User.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.


        :param username: The username of this User.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def zip_code(self):
        """Gets the zip_code of this User.  # noqa: E501


        :return: The zip_code of this User.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this User.


        :param zip_code: The zip_code of this User.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
