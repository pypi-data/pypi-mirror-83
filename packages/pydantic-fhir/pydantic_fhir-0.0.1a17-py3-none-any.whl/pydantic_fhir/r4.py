import enum
import decimal
import stringcase
import typing
from collections.abc import Mapping
import json


import pydantic

# Field of JSON-primitive types can be extended in FHIR using an underscore
# Example: field `given` (type `str`) is extended by `_given`.
# However, in pydantic fields beginning with an underscore are ignored by default.
# As a workaround, we set an alias for primitive fields extensions by removing the
# underscore prefix and adding a `__extension` suffix to the extension name.
# See method `primitive_extension_alias_generator` below.
_EXTENSION_SUFFIX = "__extension"


def choice_of_validator(choices, optional):
    def check_at_least_one(cls, values):

        setted_values = len(
            set(k for k, v in values.items() if v is not None) & choices
        )
        if setted_values > 1:
            raise ValueError(f"Only one of the fields is allowed to be set ({choices})")
        elif not optional and setted_values < 1:
            raise ValueError(f"At least one of the fields needs to be set ({choices})")
        return values

    return check_at_least_one


def get_primitive_field_root_validator(field_name: str) -> classmethod:
    """Build a root validator that validates a primitive field.

    Root validator is used in order to have access to all other (already validated)
    fields. `skip_on_failure` is set in order to avoid validating fields that
    might not be cleaned.
    """

    @pydantic.root_validator(pre=True, skip_on_failure=True, allow_reuse=True)
    def _validator(
        cls, values: typing.Dict[str, typing.Any]
    ) -> typing.Dict[str, typing.Any]:
        # Check if both field and extension are set.
        # If field or extension is not set, we do not need to validate the consistency
        # between them.
        # Note: that might not be the case anymore when we will also validate cardinality.

        # Field can either be present as the real field name or its alias
        inner_field_name = field_name
        if inner_field_name not in values:
            inner_field_name = alias_generator(inner_field_name)
            if inner_field_name not in values:
                return values

        # Extension can either be present as the real extension name or its alias
        extension_name = field_name + _EXTENSION_SUFFIX
        if extension_name not in values:
            extension_name = alias_generator(extension_name)
            if extension_name not in values:
                return values

        # Get field and extension values
        field_value = values[inner_field_name]
        extension_value = values[extension_name]

        # Validate them and get validated values
        validated_field_value, validated_extension_value = _validate_primitive_field(
            field_value, extension_value
        )

        # Assign new values and return
        values[inner_field_name] = validated_field_value
        values[extension_name] = validated_extension_value
        return values

    return _validator


def _validate_primitive_field(
    initial_field_value: typing.Any, extension_field_value: typing.Any
) -> typing.Tuple[typing.Any, typing.Any]:
    """Validate the consistency of a primitive field or list-of-primitives field.

    Note: `initial_field_value` refer to the primitive field that is extended
          and `extension_field_value` refer to the extension field.

    Validators :
        - from https://www.hl7.org/fhir/json.html#primitive :
          "In the case where the primitive element may repeat, it is represented
          in two arrays. JSON null values are used to fill out both arrays so
          that the id and/or extension are aligned with the matching value in the
          first array."
          "Note: when one of the repeating elements has no value, it is represented
          in the first array using a null. When an element has a value but no
          extension/id, the second array will have a null at the position of that
          element."

        - TODO : if a field is required, it is possible to provide only an extension
                 instead. At the moment, this behavior is NOT implemented (a required
                 primitive field must always be filled). TODO : fix this.

    See tests in `tests/pydantic/test_primitive_list.py` for examples.
    """
    if isinstance(extension_field_value, list):
        if initial_field_value is None:
            if None in extension_field_value:
                # Should never reach this point.
                raise Exception(
                    "None values must have already been removed by `_without_empty_items`."
                )
        else:
            # Extension is a list -> initial field must also be a list (or None)
            if not isinstance(initial_field_value, list):
                raise ValueError(
                    f"If an extension of a primitive field is a list, the initial field must be either `null` or a list. Not {type(initial_field_value)}."
                )

            # Validate that both lists have same length
            if len(initial_field_value) != len(extension_field_value):
                if all(value is None for value in initial_field_value) and any(
                    value is not None for value in extension_field_value
                ):
                    # Case `initial_field_value=[None]` and `extension_field_value=['A', None, 'B']`
                    # Initial value is set to `None` and `None` values in second array are removed.
                    return (
                        None,
                        [value for value in extension_field_value if value is not None],
                    )
                elif any(value is not None for value in initial_field_value) and all(
                    value is None for value in extension_field_value
                ):
                    # Case `initial_field_value=['A', None, 'B']` and `extension_field_value=[None]`
                    # Extension value is set to `None` and `None` values in first array are removed.
                    return (
                        [value for value in initial_field_value if value is not None],
                        None,
                    )
                else:
                    raise ValueError(
                        "When setting a primitive extension of a list, field list and field extension list must be both of same length."
                    )

            if len(initial_field_value) == 0:
                raise ValueError(
                    "When setting a primitive extension of a list, field and field extension cannot be both set with an empty list."
                )

            for initial_item, extension_item in zip(
                initial_field_value, extension_field_value
            ):
                if initial_item is None and extension_item is None:
                    raise ValueError(
                        "When setting a primitive extension of a list, field item and primitive item cannot be `null` at the same position."
                    )

    if isinstance(initial_field_value, list):
        if extension_field_value is None:
            # Should never reach this point.
            # List is not extended. Therefore, `null` values must not be present.
            # `null` values should have already been removed by `_without_empty_items` since
            # there wasn't an extension list.
            if None in initial_field_value:
                raise Exception(
                    "None values must have already been removed by `_without_empty_items`."
                )
        elif isinstance(extension_field_value, list):
            # Case already handled above
            pass
        else:
            # Should have already been validated.
            raise ValueError(
                "Extension of a field with a list of primitive type must be of type `list`."
            )

    return initial_field_value, extension_field_value


def camelcase_alias_generator(name: str) -> str:
    """Map snakecase to camelcase.

    This enables members to be created from camelCase. It takes the existing snakecase membername
    like foo_bar and converts it to its camelcase pendant fooBar.

    Additionally it removes trailing _, since this is used to make membernames of reserved keywords
    usable, like `class`.
    """
    if name.endswith("_"):
        name = name[:-1]
    return stringcase.camelcase(name)


def primitive_extension_alias_generator(name: str) -> str:
    """Map pydantic name to JSON extension name (only primitive fields).

    Add `_` prefix and remove `__extension` suffix.
    """
    if name.endswith(_EXTENSION_SUFFIX):
        return "_" + name[: -len(_EXTENSION_SUFFIX)]
    return name


def alias_generator(name: str) -> str:
    """Map a field name to its alias."""
    name = primitive_extension_alias_generator(name)
    name = camelcase_alias_generator(name)
    return name


class DocEnum(enum.Enum):
    """Enum with docstrings support."""

    def __new__(cls, value, doc=None):
        """Add docstring to the member of Enum if exists.

        Args:
            value: Enum member value
            doc: Enum member docstring, None if not exists
        """
        obj = str.__new__(cls, value)
        obj._value_ = value
        if doc:
            obj.__doc__ = doc
        return obj


class DecimalEncoder(json.JSONEncoder):
    def encode(self, obj):
        if isinstance(obj, Mapping):
            return (
                "{"
                + ", ".join(
                    f"{self.encode(k)}: {self.encode(v)}" for (k, v) in obj.items()
                )
                + "}"
            )
        if isinstance(obj, typing.Iterable) and (not isinstance(obj, str)):
            return "[" + ", ".join(map(self.encode, obj)) + "]"
        if isinstance(obj, decimal.Decimal):
            return str(obj)
        return super().encode(obj)


def check_for_duplicate_keys(
    ordered_pairs: typing.List[typing.Tuple[typing.Hashable, typing.Any]]
) -> typing.Dict:
    """Check for duplicated keys.

    Raise ValueError if a duplicate key exists in provided ordered
    list of pairs, otherwise return a dict.

    Taken from https://stackoverflow.com/a/49518779/2750114 .
    """
    dict_out: typing.Dict = {}
    for key, val in ordered_pairs:
        if key in dict_out:
            raise ValueError(f"Duplicate key: {key}")
        else:
            dict_out[key] = val
    return dict_out


def json_dumps(*args, **kwargs):
    return json.dumps(*args, **kwargs, cls=DecimalEncoder)


def json_loads(*args, **kwargs):
    return json.loads(
        *args,
        **kwargs,
        parse_float=decimal.Decimal,
        object_pairs_hook=check_for_duplicate_keys,
    )


class FHIRAbstractBase(pydantic.BaseModel):
    """Abstract base class for all FHIR elements."""

    class Meta:
        profile: typing.List[str] = []
        """ Profiles this resource claims to conform to.
        List of `str` items. """

    def dict(self, *args, **kwargs):
        serialized = super().dict(*args, **kwargs)
        return _without_empty_items(serialized) or {}

    @pydantic.root_validator(pre=True)
    def strip_empty_items(cls, values: typing.Dict) -> typing.Dict:
        """This strips all empty elements according to the fhir spec."""
        return _without_empty_items(values) or {}

    @pydantic.root_validator()
    def dynamic_post_root_validator(cls, values: typing.Dict) -> typing.Dict:
        """Validate data.

        The behavior of this validator can be changed after definition of the BaseModel
        by using method `_add_post_root_validator`.
        """
        for validator in cls._dynamic_validators():
            values = validator(values)
        return values

    @classmethod
    def _add_post_root_validator(
        cls, validator: typing.Callable[[typing.Dict], typing.Dict]
    ) -> None:
        """Add a post root validator to the FHIR object.

        The order of the dynamic validators has not been a priority in this
        implementation. All dynamic validators must be considered to be independent
        from each other.
        TODO : add more flexibility to order validators.

        Internally, each FHIR class stores a list of dynamic validators. Then,
        `dynamic_post_root_validator` iterates over validators one by one using the
        __mro__ resolution order.

        Warning: there is currently no way of removing a validator. Since this
        method is more or less doing monkeypatching, it is preferred to use it
        carefully.
        """
        dynamic_validators_field = cls._get_dynamic_validators_field_name()
        dynamic_validators = getattr(cls, dynamic_validators_field, [])
        dynamic_validators.append(validator)
        setattr(cls, dynamic_validators_field, dynamic_validators)

    @classmethod
    def _dynamic_validators(
        cls,
    ) -> typing.Generator[typing.Callable[[typing.Dict], typing.Dict], None, None]:
        """Return a generator iterating over dynamic validators."""
        for subclass in cls.__mro__:
            if issubclass(subclass, FHIRAbstractBase):
                subclass_field = subclass._get_dynamic_validators_field_name()
                subclass_validators = getattr(subclass, subclass_field, None)
                if subclass_validators is not None:
                    yield from subclass_validators
            else:
                # If here, it means we are already in the parents' classes of FHIRAbstractBase
                # We do not need to continue to iterate
                return

    @classmethod
    def _get_dynamic_validators_field_name(cls) -> str:
        """Return a field "unique" to this class to store dynamic validators.

        Unicity is guaranted unless two FHIR classes has the same name and one is
        the child of the other one.
        TODO : ensure unicity of this field name in every cases.
        """
        return f"_dynamic_validators__{cls.__name__}"

    @pydantic.root_validator(pre=True)
    def validate_list_not_allowed_for_singleton_fields(cls, values):
        """Ensure that Singleton fields cannot receive a List as input.

        See issue on GitHub : https://github.com/skalarsystems/fhirzeug/issues/59

        This is also related to an issue on pydantic_repository :
        https://github.com/samuelcolvin/pydantic/issues/1268 .
        TODO: remove this validator once pydantic is updated to V2.
        """
        for cls_field in cls.__fields__.values():
            if cls_field.shape == pydantic.fields.SHAPE_SINGLETON:
                for field_name in [cls_field.alias, cls_field.name]:
                    if field_name in values:
                        if isinstance(values[field_name], list):
                            raise ValueError(
                                f"List is not suitable for a Singleton field : {field_name}."
                            )
        return values

    class Config:
        alias_generator = alias_generator
        allow_population_by_field_name = True
        extra = "forbid"
        json_dumps = json_dumps
        json_loads = json_loads


def _without_empty_items(obj: typing.Any):
    """Clean empty items.

    See : https://www.hl7.org/fhir/datatypes.html#representations

    Extension of list of primitive values is handled differently by
    its own root validator. See: https://www.hl7.org/fhir/json.html#null
    """
    if isinstance(obj, Mapping):
        cleaned_dict = {}
        for key, value in obj.items():
            primitive_key, extension_key = None, None
            if key.startswith("_") and key[1:] in obj:
                primitive_key = key[1:]
                extension_key = key
            elif ("_" + key) in obj:
                primitive_key = key
                extension_key = "_" + key
            elif (
                key.endswith(_EXTENSION_SUFFIX)
                and key[: -len(_EXTENSION_SUFFIX)] in obj
            ):
                primitive_key = key[: -len(_EXTENSION_SUFFIX)]
                extension_key = key
            elif key + _EXTENSION_SUFFIX in obj:
                primitive_key = key
                extension_key = key + _EXTENSION_SUFFIX

            if (primitive_key, extension_key) != (None, None):
                primitive_value = obj[primitive_key]
                extension_value = obj[extension_key]
                if isinstance(primitive_value, list) and isinstance(
                    extension_value, list
                ):
                    if primitive_key not in cleaned_dict:
                        assert extension_key not in cleaned_dict
                        # WARNING : Here lists consistency is NOT validated
                        #           This is done later by the primitive field validator
                        cleaned_dict[primitive_key] = [
                            _without_empty_items(value) for value in primitive_value
                        ]
                        cleaned_dict[extension_key] = [
                            _without_empty_items(value) for value in extension_value
                        ]
                    continue

            cleaned_value = _without_empty_items(value)
            if cleaned_value is not None:
                cleaned_dict[key] = cleaned_value

        if cleaned_dict:
            return cleaned_dict
        return None

    if isinstance(obj, str):
        obj = obj.strip()
        if not obj:
            return None
        return obj

    if isinstance(obj, (list, tuple)):
        cleaned_list_with_none = [_without_empty_items(item) for item in obj]
        cleaned_list = [item for item in cleaned_list_with_none if item is not None]
        if cleaned_list:
            return cleaned_list
        return None

    return obj

# this inherits from string as well so we can serialize it correctly with pydantic
class AbstractType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/abstract-types
    """
    
    type = "Type", """A place holder that means any kind of data type """
    
    any = "Any", """A place holder that means any kind of resource """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AccountStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/account-status
    """
    
    active = "active", """This account is active and may be used. """
    
    inactive = "inactive", """This account is inactive and should not be used to track financial information. """
    
    enteredInError = "entered-in-error", """This instance should not have been part of this patient's medical record. """
    
    onHold = "on-hold", """This account is on hold. """
    
    unknown = "unknown", """The account status is unknown. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ActionCardinalityBehavior(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/action-cardinality-behavior
    """
    
    single = "single", """The action may only be selected one time. """
    
    multiple = "multiple", """The action may be selected multiple times. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ActionConditionKind(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/action-condition-kind
    """
    
    applicability = "applicability", """The condition describes whether or not a given action is applicable. """
    
    start = "start", """The condition is a starting condition for the action. """
    
    stop = "stop", """The condition is a stop, or exit condition for the action. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ActionGroupingBehavior(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/action-grouping-behavior
    """
    
    visualGroup = "visual-group", """Any group marked with this behavior should be displayed as a visual group to the end user. """
    
    logicalGroup = "logical-group", """A group with this behavior logically groups its sub-elements, and may be shown as a visual group to the end user, but it is not required to do so. """
    
    sentenceGroup = "sentence-group", """A group of related alternative actions is a sentence group if the target referenced by the action is the same in all the actions and each action simply constitutes a different variation on how to specify the details for the target. For example, two actions that could be in a SentenceGroup are "aspirin, 500 mg, 2 times per day" and "aspirin, 300 mg, 3 times per day". In both cases, aspirin is the target referenced by the action, and the two actions represent different options for how aspirin might be ordered for the patient. Note that a SentenceGroup would almost always have an associated selection behavior of "AtMostOne", unless it's a required action, in which case, it would be "ExactlyOne". """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ActionParticipantType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/action-participant-type
    """
    
    patient = "patient", """The participant is the patient under evaluation. """
    
    practitioner = "practitioner", """The participant is a practitioner involved in the patient's care. """
    
    relatedPerson = "related-person", """The participant is a person related to the patient. """
    
    device = "device", """The participant is a system or device used in the care of the patient. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ActionPrecheckBehavior(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/action-precheck-behavior
    """
    
    yes = "yes", """An action with this behavior is one of the most frequent action that is, or should be, included by an end user, for the particular context in which the action occurs. The system displaying the action to the end user should consider "pre-checking" such an action as a convenience for the user. """
    
    no = "no", """An action with this behavior is one of the less frequent actions included by the end user, for the particular context in which the action occurs. The system displaying the actions to the end user would typically not "pre-check" such an action. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ActionRelationshipType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/action-relationship-type
    """
    
    beforeStart = "before-start", """The action must be performed before the start of the related action. """
    
    before = "before", """The action must be performed before the related action. """
    
    beforeEnd = "before-end", """The action must be performed before the end of the related action. """
    
    concurrentWithStart = "concurrent-with-start", """The action must be performed concurrent with the start of the related action. """
    
    concurrent = "concurrent", """The action must be performed concurrent with the related action. """
    
    concurrentWithEnd = "concurrent-with-end", """The action must be performed concurrent with the end of the related action. """
    
    afterStart = "after-start", """The action must be performed after the start of the related action. """
    
    after = "after", """The action must be performed after the related action. """
    
    afterEnd = "after-end", """The action must be performed after the end of the related action. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ActionRequiredBehavior(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/action-required-behavior
    """
    
    must = "must", """An action with this behavior must be included in the actions processed by the end user; the end user SHALL NOT choose not to include this action. """
    
    could = "could", """An action with this behavior may be included in the set of actions processed by the end user. """
    
    mustUnlessDocumented = "must-unless-documented", """An action with this behavior must be included in the set of actions processed by the end user, unless the end user provides documentation as to why the action was not included. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ActionSelectionBehavior(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/action-selection-behavior
    """
    
    any = "any", """Any number of the actions in the group may be chosen, from zero to all. """
    
    all = "all", """All the actions in the group must be selected as a single unit. """
    
    allOrNone = "all-or-none", """All the actions in the group are meant to be chosen as a single unit: either all must be selected by the end user, or none may be selected. """
    
    exactlyOne = "exactly-one", """The end user must choose one and only one of the selectable actions in the group. The user SHALL NOT choose none of the actions in the group. """
    
    atMostOne = "at-most-one", """The end user may choose zero or at most one of the actions in the group. """
    
    oneOrMore = "one-or-more", """The end user must choose a minimum of one, and as many additional as desired. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ActionType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/action-type
    """
    
    create = "create", """The action is to create a new resource. """
    
    update = "update", """The action is to update an existing resource. """
    
    remove = "remove", """The action is to remove an existing resource. """
    
    fireEvent = "fire-event", """The action is to fire a specific event. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ActivityDefinitionCategory(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/activity-definition-category
    """
    
    treatment = "treatment", """The activity is intended to provide or is related to treatment of the patient. """
    
    education = "education", """The activity is intended to provide or is related to education of the patient. """
    
    assessment = "assessment", """The activity is intended to perform or is related to assessment of the patient. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AdditionalMaterialCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/additionalmaterials
    """
    
    xray = "xray", """XRay """
    
    image = "image", """Image """
    
    email = "email", """Email """
    
    model = "model", """Model """
    
    document = "document", """Document """
    
    other = "other", """Other """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AddressType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/address-type
    """
    
    postal = "postal", """Mailing addresses - PO Boxes and care-of addresses. """
    
    physical = "physical", """A physical address that can be visited. """
    
    both = "both", """An address that is both physical and postal. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AddressUse(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/address-use
    """
    
    home = "home", """A communication address at a home. """
    
    work = "work", """An office address. First choice for business related contacts during business hours. """
    
    temp = "temp", """A temporary address. The period can provide more detailed information. """
    
    old = "old", """This address is no longer in use (or was never correct but retained for records). """
    
    billing = "billing", """An address to be used to send bills, invoices, receipts etc. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AdjudicationReasonCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/adjudication-reason
    """
    
    ar001 = "ar001", """Not covered """
    
    ar002 = "ar002", """Plan Limit Reached """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AdjudicationValueCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/adjudication
    """
    
    submitted = "submitted", """The total submitted amount for the claim or group or line item. """
    
    copay = "copay", """Patient Co-Payment """
    
    eligible = "eligible", """Amount of the change which is considered for adjudication. """
    
    deductible = "deductible", """Amount deducted from the eligible amount prior to adjudication. """
    
    unallocdeduct = "unallocdeduct", """The amount of deductible which could not allocated to other line items. """
    
    eligpercent = "eligpercent", """Eligible Percentage. """
    
    tax = "tax", """The amount of tax. """
    
    benefit = "benefit", """Amount payable under the coverage """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AdministrativeGender(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/administrative-gender
    """
    
    male = "male", """Male. """
    
    female = "female", """Female. """
    
    other = "other", """Other. """
    
    unknown = "unknown", """Unknown. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AdmitSource(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/admit-source
    """
    
    hospTrans = "hosp-trans", """The Patient has been transferred from another hospital for this encounter. """
    
    emd = "emd", """The patient has been transferred from the emergency department within the hospital. This is typically used in the transition to an inpatient encounter """
    
    outp = "outp", """The patient has been transferred from an outpatient department within the hospital. """
    
    born = "born", """The patient is a newborn and the encounter will track the baby related activities (as opposed to the Mothers encounter - that may be associated using the newborn encounters partof property) """
    
    gp = "gp", """The patient has been admitted due to a referred from a General Practitioner. """
    
    mp = "mp", """The patient has been admitted due to a referred from a Specialist (as opposed to a General Practitioner). """
    
    nursing = "nursing", """The patient has been transferred from a nursing home. """
    
    psych = "psych", """The patient has been transferred from a psychiatric facility. """
    
    rehab = "rehab", """The patient has been transferred from a rehabilitation facility or clinic. """
    
    other = "other", """The patient has been admitted from a source otherwise not specified here. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AdverseEventActuality(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/adverse-event-actuality
    """
    
    actual = "actual", """The adverse event actually happened regardless of whether anyone was affected or harmed. """
    
    potential = "potential", """A potential adverse event. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AdverseEventCategory(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/adverse-event-category
    """
    
    productProblem = "product-problem", """The adverse event pertains to a product problem. """
    
    productQuality = "product-quality", """The adverse event pertains to product quality. """
    
    productUseError = "product-use-error", """The adverse event pertains to a product use error. """
    
    wrongDose = "wrong-dose", """The adverse event pertains to a wrong dose. """
    
    incorrectPrescribingInformation = "incorrect-prescribing-information", """The adverse event pertains to incorrect perscribing information. """
    
    wrongTechnique = "wrong-technique", """The adverse event pertains to a wrong technique. """
    
    wrongRouteOfAdministration = "wrong-route-of-administration", """The adverse event pertains to a wrong route of administration. """
    
    wrongRate = "wrong-rate", """The adverse event pertains to a wrong rate. """
    
    wrongDuration = "wrong-duration", """The adverse event pertains to a wrong duration. """
    
    wrongTime = "wrong-time", """The adverse event pertains to a wrong time. """
    
    expiredDrug = "expired-drug", """The adverse event pertains to an expired drug. """
    
    medicalDeviceUseError = "medical-device-use-error", """The adverse event pertains to a medical device use error. """
    
    problemDifferentManufacturer = "problem-different-manufacturer", """The adverse event pertains to a problem with a different manufacturer of the same medication. """
    
    unsafePhysicalEnvironment = "unsafe-physical-environment", """The adverse event pertains to an unsafe physical environment. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AdverseEventCausalityAssessment(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/adverse-event-causality-assess
    """
    
    certain = "Certain", """i) Event or laboratory test abnormality, with plausible time relationship to drug intake; ii) Cannot be explained by disease or other drugs; iii) Response to withdrawal plausible (pharmacologically, pathologically); iv) Event definitive pharmacologically or phenomenologically (i.e. an objective and specific medical disorder or a recognized pharmacological phenomenon); or v) Re-challenge satisfactory, if necessary. """
    
    probablyLikely = "Probably-Likely", """i) Event or laboratory test abnormality, with reasonable time relationship to drug intake; ii) Unlikely to be attributed to disease or other drugs; iii) Response to withdrawal clinically reasonable; or iv) Re-challenge not required. """
    
    possible = "Possible", """i) Event or laboratory test abnormality, with reasonable time relationship to drug intake; ii) Could also be explained by disease or other drugs; or iii) Information on drug withdrawal may be lacking or unclear. """
    
    unlikely = "Unlikely", """i) Event or laboratory test abnormality, with a time to drug intake that makes a relationship improbable (but not impossible); or ii) Disease or other drugs provide plausible explanations. """
    
    conditionalClassified = "Conditional-Classified", """i) Event or laboratory test abnormality; ii) More data for proper assessment needed; or iii) Additional data under examination. """
    
    unassessableUnclassifiable = "Unassessable-Unclassifiable", """i) Report suggesting an adverse reaction; ii) Cannot be judged because information is insufficient or contradictory; or iii) Data cannot be supplemented or verified. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AdverseEventCausalityMethod(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/adverse-event-causality-method
    """
    
    probabilityScale = "ProbabilityScale", """probabilityScale """
    
    bayesian = "Bayesian", """bayesian """
    
    checklist = "Checklist", """checklist """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AdverseEventOutcome(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/adverse-event-outcome
    """
    
    resolved = "resolved", """resolved """
    
    recovering = "recovering", """recovering """
    
    ongoing = "ongoing", """ongoing """
    
    resolvedWithSequelae = "resolvedWithSequelae", """resolvedWithSequelae """
    
    fatal = "fatal", """fatal """
    
    unknown = "unknown", """unknown """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AdverseEventSeriousness(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/adverse-event-seriousness
    """
    
    nonSerious = "Non-serious", """Non-serious. """
    
    serious = "Serious", """Serious. """
    
    seriousResultsInDeath = "SeriousResultsInDeath", """Results in death. """
    
    seriousIsLifeThreatening = "SeriousIsLifeThreatening", """Is Life-threatening. """
    
    seriousResultsInHospitalization = "SeriousResultsInHospitalization", """Requires inpatient hospitalization or causes prolongation of existing hospitalization. """
    
    seriousResultsInDisability = "SeriousResultsInDisability", """Results in persistent or significant disability/incapacity. """
    
    seriousIsBirthDefect = "SeriousIsBirthDefect", """Is a congenital anomaly/birth defect. """
    
    seriousRequiresPreventImpairment = "SeriousRequiresPreventImpairment", """Requires intervention to prevent permanent impairment or damage (i.e., an important medical event that requires medical judgement). """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AdverseEventSeverity(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/adverse-event-severity
    """
    
    mild = "mild", """mild """
    
    moderate = "moderate", """moderate """
    
    severe = "severe", """severe """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AggregationMode(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/resource-aggregation-mode
    """
    
    contained = "contained", """The reference is a local reference to a contained resource. """
    
    referenced = "referenced", """The reference to a resource that has to be resolved externally to the resource that includes the reference. """
    
    bundled = "bundled", """The resource the reference points to will be found in the same bundle as the resource that includes the reference. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AllergyIntoleranceCategory(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/allergy-intolerance-category
    """
    
    food = "food", """Any substance consumed to provide nutritional support for the body. """
    
    medication = "medication", """Substances administered to achieve a physiological effect. """
    
    environment = "environment", """Any substances that are encountered in the environment, including any substance not already classified as food, medication, or biologic. """
    
    biologic = "biologic", """A preparation that is synthesized from living organisms or their products, especially a human or animal protein, such as a hormone or antitoxin, that is used as a diagnostic, preventive, or therapeutic agent. Examples of biologic medications include: vaccines; allergenic extracts, which are used for both diagnosis and treatment (for example, allergy shots); gene therapies; cellular therapies.  There are other biologic products, such as tissues, which are not typically associated with allergies. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AllergyIntoleranceCertainty(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/reaction-event-certainty
    """
    
    unlikely = "unlikely", """There is a low level of clinical certainty that the reaction was caused by the identified substance. """
    
    likely = "likely", """There is a high level of clinical certainty that the reaction was caused by the identified substance. """
    
    confirmed = "confirmed", """There is a very high level of clinical certainty that the reaction was due to the identified substance, which may include clinical evidence by testing or rechallenge. """
    
    unknown = "unknown", """The clinical certainty that the reaction was caused by the identified substance is unknown.  It is an explicit assertion that certainty is not known. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AllergyIntoleranceClinicalStatusCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical
    """
    
    active = "active", """The subject is currently experiencing, or is at risk of, a reaction to the identified substance. """
    
    inactive = "inactive", """The subject is no longer at risk of a reaction to the identified substance. """
    
    resolved = "resolved", """A reaction to the identified substance has been clinically reassessed by testing or re-exposure and is considered no longer to be present. Re-exposure could be accidental, unplanned, or outside of any clinical setting. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AllergyIntoleranceCriticality(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/allergy-intolerance-criticality
    """
    
    low = "low", """Worst case result of a future exposure is not assessed to be life-threatening or having high potential for organ system failure. """
    
    high = "high", """Worst case result of a future exposure is assessed to be life-threatening or having high potential for organ system failure. """
    
    unableToAssess = "unable-to-assess", """Unable to assess the worst case result of a future exposure. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AllergyIntoleranceSeverity(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/reaction-event-severity
    """
    
    mild = "mild", """Causes mild physiological effects. """
    
    moderate = "moderate", """Causes moderate physiological effects. """
    
    severe = "severe", """Causes severe physiological effects. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AllergyIntoleranceSubstanceExposureRisk(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/allerg-intol-substance-exp-risk
    """
    
    knownReactionRisk = "known-reaction-risk", """Known risk of allergy or intolerance reaction upon exposure to the specified substance. """
    
    noKnownReactionRisk = "no-known-reaction-risk", """No known risk of allergy or intolerance reaction upon exposure to the specified substance. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AllergyIntoleranceType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/allergy-intolerance-type
    """
    
    allergy = "allergy", """A propensity for hypersensitive reaction(s) to a substance.  These reactions are most typically type I hypersensitivity, plus other "allergy-like" reactions, including pseudoallergy. """
    
    intolerance = "intolerance", """A propensity for adverse reactions to a substance that is not judged to be allergic or "allergy-like".  These reactions are typically (but not necessarily) non-immune.  They are to some degree idiosyncratic and/or patient-specific (i.e. are not a reaction that is expected to occur with most or all patients given similar circumstances). """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AllergyIntoleranceVerificationStatusCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/allergyintolerance-verification
    """
    
    unconfirmed = "unconfirmed", """A low level of certainty about the propensity for a reaction to the identified substance. """
    
    confirmed = "confirmed", """A high level of certainty about the propensity for a reaction to the identified substance, which may include clinical evidence by testing or rechallenge. """
    
    refuted = "refuted", """A propensity for a reaction to the identified substance has been disputed or disproven with a sufficient level of clinical certainty to justify invalidating the assertion. This might or might not include testing or rechallenge. """
    
    enteredInError = "entered-in-error", """The statement was entered in error and is not valid. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AnimalSpecies(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/animal-species
    """
    
    canislf = "canislf", """Canis lupus familiaris """
    
    ovisa = "ovisa", """Ovis aries """
    
    serinuscd = "serinuscd", """Serinus canaria domestica """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AppointmentStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/appointmentstatus
    """
    
    proposed = "proposed", """None of the participant(s) have finalized their acceptance of the appointment request, and the start/end time might not be set yet. """
    
    pending = "pending", """Some or all of the participant(s) have not finalized their acceptance of the appointment request. """
    
    booked = "booked", """All participant(s) have been considered and the appointment is confirmed to go ahead at the date/times specified. """
    
    arrived = "arrived", """The patient/patients has/have arrived and is/are waiting to be seen. """
    
    fulfilled = "fulfilled", """The planning stages of the appointment are now complete, the encounter resource will exist and will track further status changes. Note that an encounter may exist before the appointment status is fulfilled for many reasons. """
    
    cancelled = "cancelled", """The appointment has been cancelled. """
    
    noshow = "noshow", """Some or all of the participant(s) have not/did not appear for the appointment (usually the patient). """
    
    enteredInError = "entered-in-error", """This instance should not have been part of this patient's medical record. """
    
    checkedIn = "checked-in", """When checked in, all pre-encounter administrative work is complete, and the encounter may begin. (where multiple patients are involved, they are all present). """
    
    waitlist = "waitlist", """The appointment has been placed on a waitlist, to be scheduled/confirmed in the future when a slot/service is available.
A specific time might or might not be pre-allocated. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AssertionDirectionType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/assert-direction-codes
    """
    
    response = "response", """The assertion is evaluated on the response. This is the default value. """
    
    request = "request", """The assertion is evaluated on the request. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AssertionOperatorType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/assert-operator-codes
    """
    
    equals = "equals", """Default value. Equals comparison. """
    
    notEquals = "notEquals", """Not equals comparison. """
    
    in_ = "in", """Compare value within a known set of values. """
    
    notIn = "notIn", """Compare value not within a known set of values. """
    
    greaterThan = "greaterThan", """Compare value to be greater than a known value. """
    
    lessThan = "lessThan", """Compare value to be less than a known value. """
    
    empty = "empty", """Compare value is empty. """
    
    notEmpty = "notEmpty", """Compare value is not empty. """
    
    contains = "contains", """Compare value string contains a known value. """
    
    notContains = "notContains", """Compare value string does not contain a known value. """
    
    eval = "eval", """Evaluate the FHIRPath expression as a boolean condition. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AssertionResponseTypes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/assert-response-code-types
    """
    
    okay = "okay", """Response code is 200. """
    
    created = "created", """Response code is 201. """
    
    noContent = "noContent", """Response code is 204. """
    
    notModified = "notModified", """Response code is 304. """
    
    bad = "bad", """Response code is 400. """
    
    forbidden = "forbidden", """Response code is 403. """
    
    notFound = "notFound", """Response code is 404. """
    
    methodNotAllowed = "methodNotAllowed", """Response code is 405. """
    
    conflict = "conflict", """Response code is 409. """
    
    gone = "gone", """Response code is 410. """
    
    preconditionFailed = "preconditionFailed", """Response code is 412. """
    
    unprocessable = "unprocessable", """Response code is 422. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AuditEventAction(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/audit-event-action
    """
    
    C = "C", """Create a new database object, such as placing an order. """
    
    R = "R", """Display or print data, such as a doctor census. """
    
    U = "U", """Update data, such as revise patient information. """
    
    D = "D", """Delete items, such as a doctor master file record. """
    
    E = "E", """Perform a system or application function such as log-on, program execution or use of an object's method, or perform a query/search operation. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class AuditEventID(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/audit-event-type
    """
    
    rest = "rest", """Audit Event: Execution of a RESTful operation as defined by FHIR. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class BasicResourceTypes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/basic-resource-type
    """
    
    consent = "consent", """An assertion of permission for an activity or set of activities to occur, possibly subject to particular limitations; e.g. surgical consent, information disclosure consent, etc. """
    
    referral = "referral", """A request that care of a particular type be provided to a patient.  Could involve the transfer of care, a consult, etc. """
    
    advevent = "advevent", """An undesired reaction caused by exposure to some agent (e.g. a medication, immunization, food, or environmental agent). """
    
    aptmtreq = "aptmtreq", """A request that a time be scheduled for a type of service for a specified patient, potentially subject to other constraints """
    
    transfer = "transfer", """The transition of a patient or set of material from one location to another """
    
    diet = "diet", """The specification of a set of food and/or other nutritional material to be delivered to a patient. """
    
    adminact = "adminact", """An occurrence of a non-care-related event in the healthcare domain, such as approvals, reviews, etc. """
    
    exposure = "exposure", """Record of a situation where a subject was exposed to a substance.  Usually of interest to public health. """
    
    investigation = "investigation", """A formalized inquiry into the circumstances surrounding a particular unplanned event or potential event for the purposes of identifying possible causes and contributing factors for the event """
    
    account = "account", """A financial instrument used to track costs, charges or other amounts. """
    
    invoice = "invoice", """A request for payment for goods and/or services.  Includes the idea of a healthcare insurance claim. """
    
    adjudicat = "adjudicat", """The determination of what will be paid against a particular invoice based on coverage, plan rules, etc. """
    
    predetreq = "predetreq", """A request for a pre-determination of the cost that would be paid under an insurance plan for a hypothetical claim for goods or services """
    
    predetermine = "predetermine", """An adjudication of what would be paid under an insurance plan for a hypothetical claim for goods or services """
    
    study = "study", """An investigation to determine information about a particular therapy or product """
    
    protocol = "protocol", """A set of (possibly conditional) steps to be taken to achieve some aim.  Includes study protocols, treatment protocols, emergency protocols, etc. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class BenefitCostApplicability(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/applicability
    """
    
    inNetwork = "in-network", """Provider is contracted with the health insurance company to provide services to plan members for specific pre-negotiated rates """
    
    outOfNetwork = "out-of-network", """Provider is  not contracted with the health insurance company to provide services to plan members for specific pre-negotiated rates """
    
    other = "other", """Other applicability """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class BenefitTermCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/benefit-term
    """
    
    annual = "annual", """Annual, renewing on the anniversary """
    
    day = "day", """Per day """
    
    lifetime = "lifetime", """For the total term, lifetime, of the policy or coverage """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class BenefitTypeCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/benefit-type
    """
    
    benefit = "benefit", """Maximum benefit allowable. """
    
    deductible = "deductible", """Cost to be incurred before benefits are applied """
    
    visit = "visit", """Service visit """
    
    room = "room", """Type of room """
    
    copay = "copay", """Copayment per service """
    
    copayPercent = "copay-percent", """Copayment percentage per service """
    
    copayMaximum = "copay-maximum", """Copayment maximum per service """
    
    visionExam = "vision-exam", """Vision Exam """
    
    visionGlasses = "vision-glasses", """Frames and lenses """
    
    visionContacts = "vision-contacts", """Contact Lenses """
    
    medicalPrimarycare = "medical-primarycare", """Medical Primary Health Coverage """
    
    pharmacyDispense = "pharmacy-dispense", """Pharmacy Dispense Coverage """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class BindingStrength(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/binding-strength
    """
    
    required = "required", """To be conformant, the concept in this element SHALL be from the specified value set. """
    
    extensible = "extensible", """To be conformant, the concept in this element SHALL be from the specified value set if any of the codes within the value set can apply to the concept being communicated.  If the value set does not cover the concept (based on human review), alternate codings (or, data type allowing, text) may be included instead. """
    
    preferred = "preferred", """Instances are encouraged to draw from the specified codes for interoperability purposes but are not required to do so to be considered conformant. """
    
    example = "example", """Instances are not expected or even encouraged to draw from the specified value set.  The value set merely provides examples of the types of concepts intended to be included. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class BiologicallyDerivedProductCategory(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/product-category
    """
    
    organ = "organ", """A collection of tissues joined in a structural unit to serve a common function. """
    
    tissue = "tissue", """An ensemble of similar cells and their extracellular matrix from the same origin that together carry out a specific function. """
    
    fluid = "fluid", """Body fluid. """
    
    cells = "cells", """Collection of cells. """
    
    biologicalAgent = "biologicalAgent", """Biological agent of unspecified type. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class BiologicallyDerivedProductStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/product-status
    """
    
    available = "available", """Product is currently available for use. """
    
    unavailable = "unavailable", """Product is not currently available for use. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class BiologicallyDerivedProductStorageScale(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/product-storage-scale
    """
    
    farenheit = "farenheit", """Fahrenheit temperature scale. """
    
    celsius = "celsius", """Celsius or centigrade temperature scale. """
    
    kelvin = "kelvin", """Kelvin absolute thermodynamic temperature scale. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class BundleType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/bundle-type
    """
    
    document = "document", """The bundle is a document. The first resource is a Composition. """
    
    message = "message", """The bundle is a message. The first resource is a MessageHeader. """
    
    transaction = "transaction", """The bundle is a transaction - intended to be processed by a server as an atomic commit. """
    
    transactionResponse = "transaction-response", """The bundle is a transaction response. Because the response is a transaction response, the transaction has succeeded, and all responses are error free. """
    
    batch = "batch", """The bundle is a set of actions - intended to be processed by a server as a group of independent actions. """
    
    batchResponse = "batch-response", """The bundle is a batch response. Note that as a batch, some responses may indicate failure and others success. """
    
    history = "history", """The bundle is a list of resources from a history interaction on a server. """
    
    searchset = "searchset", """The bundle is a list of resources returned as a result of a search/query interaction, operation, or message. """
    
    collection = "collection", """The bundle is a set of resources collected into a single package for ease of distribution that imposes no processing obligations or behavioral rules beyond persistence. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CanPushUpdates(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/can-push-updates
    """
    
    yes = "yes", """yes """
    
    no = "no", """no """
    
    undetermined = "undetermined", """undetermined """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CanonicalStatusCodesForFHIRResources(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/resource-status
    """
    
    error = "error", """The resource was created in error, and should not be treated as valid (note: in many cases, for various data integrity related reasons, the information cannot be removed from the record) """
    
    proposed = "proposed", """The resource describes an action or plan that is proposed, and not yet approved by the participants """
    
    planned = "planned", """The resource describes a course of action that is planned and agreed/approved, but at the time of recording was still future """
    
    draft = "draft", """The information in the resource is still being prepared and edited """
    
    requested = "requested", """A fulfiller has been asked to perform this action, but it has not yet occurred """
    
    received = "received", """The fulfiller has received the request, but not yet agreed to carry out the action """
    
    declined = "declined", """The fulfiller chose not to perform the action """
    
    accepted = "accepted", """The fulfiller has decided to perform the action, and plans are in train to do this in the future """
    
    arrived = "arrived", """The pre-conditions for the action are all fulfilled, and it is imminent """
    
    active = "active", """The resource describes information that is currently valid or a process that is presently occuring """
    
    suspended = "suspended", """The process described/requested in this resource has been halted for some reason """
    
    failed = "failed", """The process described/requested in the resource could not be completed, and no further action is planned """
    
    replaced = "replaced", """The information in this resource has been replaced by information in another resource """
    
    complete = "complete", """The process described/requested in the resource has been completed, and no further action is planned """
    
    inactive = "inactive", """The resource describes information that is no longer valid or a process that is stopped occurring """
    
    abandoned = "abandoned", """The process described/requested in the resource did not complete - usually due to some workflow error, and no further action is planned """
    
    unknown = "unknown", """Authoring system does not know the status """
    
    unconfirmed = "unconfirmed", """The information in this resource is not yet approved """
    
    confirmed = "confirmed", """The information in this resource is approved """
    
    resolved = "resolved", """The issue identified by this resource is no longer of concern """
    
    refuted = "refuted", """This information has been ruled out by testing and evaluation """
    
    differential = "differential", """Potentially true? """
    
    partial = "partial", """This information is still being assembled """
    
    busyUnavailable = "busy-unavailable", """not available at this time/location """
    
    free = "free", """Free for scheduling """
    
    onTarget = "on-target", """Ready to act """
    
    aheadOfTarget = "ahead-of-target", """Ahead of the planned timelines """
    
    behindTarget = "behind-target", """behindTarget """
    
    notReady = "not-ready", """Behind the planned timelines """
    
    transducDiscon = "transduc-discon", """The device transducer is disconnected """
    
    hwDiscon = "hw-discon", """The hardware is disconnected """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CapabilityStatementKind(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/capability-statement-kind
    """
    
    instance = "instance", """The CapabilityStatement instance represents the present capabilities of a specific system instance.  This is the kind returned by /metadata for a FHIR server end-point. """
    
    capability = "capability", """The CapabilityStatement instance represents the capabilities of a system or piece of software, independent of a particular installation. """
    
    requirements = "requirements", """The CapabilityStatement instance represents a set of requirements for other systems to meet; e.g. as part of an implementation guide or 'request for proposal'. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CarePlanActivityStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/care-plan-activity-status
    """
    
    notStarted = "not-started", """Care plan activity is planned but no action has yet been taken. """
    
    scheduled = "scheduled", """Appointment or other booking has occurred but activity has not yet begun. """
    
    inProgress = "in-progress", """Care plan activity has been started but is not yet complete. """
    
    onHold = "on-hold", """Care plan activity was started but has temporarily ceased with an expectation of resumption at a future time. """
    
    completed = "completed", """Care plan activity has been completed (more or less) as planned. """
    
    cancelled = "cancelled", """The planned care plan activity has been withdrawn. """
    
    stopped = "stopped", """The planned care plan activity has been ended prior to completion after the activity was started. """
    
    unknown = "unknown", """The current state of the care plan activity is not known.  Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, but the authoring/source system does not know which one. """
    
    enteredInError = "entered-in-error", """Care plan activity was entered in error and voided. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CareTeamStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/care-team-status
    """
    
    proposed = "proposed", """The care team has been drafted and proposed, but not yet participating in the coordination and delivery of patient care. """
    
    active = "active", """The care team is currently participating in the coordination and delivery of care. """
    
    suspended = "suspended", """The care team is temporarily on hold or suspended and not participating in the coordination and delivery of care. """
    
    inactive = "inactive", """The care team was, but is no longer, participating in the coordination and delivery of care. """
    
    enteredInError = "entered-in-error", """The care team should have never existed. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CatalogEntryRelationType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/relation-type
    """
    
    triggers = "triggers", """the related entry represents an activity that may be triggered by the current item. """
    
    isReplacedBy = "is-replaced-by", """the related entry represents an item that replaces the current retired item. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CatalogType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/catalogType
    """
    
    medication = "medication", """Medication Catalog. """
    
    device = "device", """Device Catalog. """
    
    protocol = "protocol", """Protocol List. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CertaintySubcomponentRating(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating
    """
    
    noChange = "no-change", """no change to quality rating. """
    
    downcode1 = "downcode1", """reduce quality rating by 1. """
    
    downcode2 = "downcode2", """reduce quality rating by 2. """
    
    downcode3 = "downcode3", """reduce quality rating by 3. """
    
    upcode1 = "upcode1", """increase quality rating by 1. """
    
    upcode2 = "upcode2", """increase quality rating by 2. """
    
    noConcern = "no-concern", """no serious concern. """
    
    seriousConcern = "serious-concern", """serious concern. """
    
    criticalConcern = "critical-concern", """critical concern. """
    
    present = "present", """possible reason for increasing quality rating was checked and found to bepresent. """
    
    absent = "absent", """possible reason for increasing quality rating was checked and found to be absent. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CertaintySubcomponentType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type
    """
    
    riskOfBias = "RiskOfBias", """methodologic concerns reducing internal validity. """
    
    inconsistency = "Inconsistency", """concerns that findings are not similar enough to support certainty. """
    
    indirectness = "Indirectness", """concerns reducing external validity. """
    
    imprecision = "Imprecision", """High quality evidence. """
    
    publicationBias = "PublicationBias", """likelihood that what is published misrepresents what is available to publish. """
    
    doseResponseGradient = "DoseResponseGradient", """higher certainty due to dose response relationship. """
    
    plausibleConfounding = "PlausibleConfounding", """higher certainty due to risk of bias in opposite direction. """
    
    largeEffect = "LargeEffect", """higher certainty due to large effect size. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ChargeItemStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/chargeitem-status
    """
    
    planned = "planned", """The charge item has been entered, but the charged service is not  yet complete, so it shall not be billed yet but might be used in the context of pre-authorization. """
    
    billable = "billable", """The charge item is ready for billing. """
    
    notBillable = "not-billable", """The charge item has been determined to be not billable (e.g. due to rules associated with the billing code). """
    
    aborted = "aborted", """The processing of the charge was aborted. """
    
    billed = "billed", """The charge item has been billed (e.g. a billing engine has generated financial transactions by applying the associated ruled for the charge item to the context of the Encounter, and placed them into Claims/Invoices. """
    
    enteredInError = "entered-in-error", """The charge item has been entered in error and should not be processed for billing. """
    
    unknown = "unknown", """The authoring system does not know which of the status values currently applies for this charge item  Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, it's just not known which one. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ChoiceListOrientation(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/choice-list-orientation
    """
    
    horizontal = "horizontal", """List choices along the horizontal axis. """
    
    vertical = "vertical", """List choices down the vertical axis. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ClaimCareTeamRoleCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/claimcareteamrole
    """
    
    primary = "primary", """The primary care provider. """
    
    assist = "assist", """Assisting care provider. """
    
    supervisor = "supervisor", """Supervising care provider. """
    
    other = "other", """Other role on the care team. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ClaimInformationCategoryCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/claiminformationcategory
    """
    
    info = "info", """Codes conveying additional situation and condition information. """
    
    discharge = "discharge", """Discharge status and discharge to locations. """
    
    onset = "onset", """Period, start or end dates of aspects of the Condition. """
    
    related = "related", """Nature and date of the related event e.g. Last exam, service, X-ray etc. """
    
    exception = "exception", """Insurance policy exceptions. """
    
    material = "material", """Materials being forwarded, e.g. Models, molds, images, documents. """
    
    attachment = "attachment", """Materials attached such as images, documents and resources. """
    
    missingtooth = "missingtooth", """Teeth which are missing for any reason, for example: prior extraction, never developed. """
    
    prosthesis = "prosthesis", """The type of prosthesis and date of supply if a previously supplied prosthesis. """
    
    other = "other", """Other information identified by the type.system. """
    
    hospitalized = "hospitalized", """An indication that the patient was hospitalized, the period if known otherwise a Yes/No (boolean). """
    
    employmentimpacted = "employmentimpacted", """An indication that the patient was unable to work, the period if known otherwise a Yes/No (boolean). """
    
    externalcause = "externalcause", """The external cause of an illness or injury. """
    
    patientreasonforvisit = "patientreasonforvisit", """The reason for the patient visit. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ClaimItemTypeCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/ex-claimitemtype
    """
    
    group = "group", """A group of products and/or Services, amount ar the summary or detail level products and services. """
    
    product = "product", """A billed product line item. """
    
    service = "service", """A billed service line item. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ClaimPayeeResourceType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/ex-payee-resource-type
    """
    
    organization = "organization", """Organization resource. """
    
    patient = "patient", """Patient resource. """
    
    practitioner = "practitioner", """Practitioner resource. """
    
    relatedperson = "relatedperson", """RelatedPerson resource. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ClaimProcessingCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/remittance-outcome
    """
    
    queued = "queued", """The Claim/Pre-authorization/Pre-determination has been received but processing has not begun. """
    
    complete = "complete", """The processing has completed without errors """
    
    error = "error", """One or more errors have been detected in the Claim """
    
    partial = "partial", """No errors have been detected in the Claim and some of the adjudication has been performed. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ClaimTypeCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/claim-type
    """
    
    institutional = "institutional", """Hospital, clinic and typically inpatient claims. """
    
    oral = "oral", """Dental, Denture and Hygiene claims. """
    
    pharmacy = "pharmacy", """Pharmacy claims for goods and services. """
    
    professional = "professional", """Typically, outpatient claims from Physician, Psychological, Chiropractor, Physiotherapy, Speech Pathology, rehabilitative, consulting. """
    
    vision = "vision", """Vision claims for professional services and products such as glasses and contact lenses. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CodeSearchSupport(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/code-search-support
    """
    
    explicit = "explicit", """The search for code on ValueSet only includes codes explicitly detailed on includes or expansions. """
    
    all = "all", """The search for code on ValueSet only includes all codes based on the expansion of the value set. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CodeSystemContentMode(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/codesystem-content-mode
    """
    
    notPresent = "not-present", """None of the concepts defined by the code system are included in the code system resource. """
    
    example = "example", """A few representative concepts are included in the code system resource. There is no useful intent in the subset choice and there's no process to make it workable: it's not intended to be workable. """
    
    fragment = "fragment", """A subset of the code system concepts are included in the code system resource. This is a curated subset released for a specific purpose under the governance of the code system steward, and that the intent, bounds and consequences of the fragmentation are clearly defined in the fragment or the code system documentation. Fragments are also known as partitions. """
    
    complete = "complete", """All the concepts defined by the code system are included in the code system resource. """
    
    supplement = "supplement", """The resource doesn't define any new concepts; it just provides additional designations and properties to another code system. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CodeSystemHierarchyMeaning(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/codesystem-hierarchy-meaning
    """
    
    groupedBy = "grouped-by", """No particular relationship between the concepts can be assumed, except what can be determined by inspection of the definitions of the elements (possible reasons to use this: importing from a source where this is not defined, or where various parts of the hierarchy have different meanings). """
    
    isA = "is-a", """A hierarchy where the child concepts have an IS-A relationship with the parents - that is, all the properties of the parent are also true for its child concepts. Not that is-a is a property of the concepts, so additional subsumption relationships may be defined using properties or the [subsumes](extension-codesystem-subsumes.html) extension. """
    
    partOf = "part-of", """Child elements list the individual parts of a composite whole (e.g. body site). """
    
    classifiedWith = "classified-with", """Child concepts in the hierarchy may have only one parent, and there is a presumption that the code system is a "closed world" meaning all things must be in the hierarchy. This results in concepts such as "not otherwise classified.". """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CodesystemAltcodeKind(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/codesystem-altcode-kind
    """
    
    alternate = "alternate", """The code is an alternative code that can be used in any of the circumstances that the primary code can be used. """
    
    deprecated = "deprecated", """The code should no longer be used, but was used in the past. """
    
    caseInsensitive = "case-insensitive", """The code is an alternative to be used when a case insensitive code is required (when the primary codes are case sensitive). """
    
    caseSensitive = "case-sensitive", """The code is an alternative to be used when a case sensitive code is required (when the primary codes are case insensitive). """
    
    expression = "expression", """The code is an alternative for the primary code that is built using the expression grammar defined by the code system. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CommonTags(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/common-tags
    """
    
    actionable = "actionable", """This request is intended to be acted upon, not merely stored """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CommunicationCategory(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/communication-category
    """
    
    alert = "alert", """The communication conveys an alert. """
    
    notification = "notification", """The communication conveys a notification. """
    
    reminder = "reminder", """The communication conveys a reminder. """
    
    instruction = "instruction", """The communication conveys an instruction. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CommunicationNotDoneReason(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/communication-not-done-reason
    """
    
    unknown = "unknown", """The communication was not done due to an unknown reason. """
    
    systemError = "system-error", """The communication was not done due to a system error. """
    
    invalidPhoneNumber = "invalid-phone-number", """The communication was not done due to an invalid phone number. """
    
    recipientUnavailable = "recipient-unavailable", """The communication was not done due to the recipient being unavailable. """
    
    familyObjection = "family-objection", """The communication was not done due to a family objection. """
    
    patientObjection = "patient-objection", """The communication was not done due to a patient objection. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CommunicationTopic(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/communication-topic
    """
    
    prescriptionRefillRequest = "prescription-refill-request", """The purpose or content of the communication is a prescription refill request. """
    
    progressUpdate = "progress-update", """The purpose or content of the communication is a progress update. """
    
    reportLabs = "report-labs", """The purpose or content of the communication is to report labs. """
    
    appointmentReminder = "appointment-reminder", """The purpose or content of the communication is an appointment reminder. """
    
    phoneConsult = "phone-consult", """The purpose or content of the communication is a phone consult. """
    
    summaryReport = "summary-report", """The purpose or content of the communication is a summary report. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CompartmentType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/compartment-type
    """
    
    patient = "Patient", """The compartment definition is for the patient compartment. """
    
    encounter = "Encounter", """The compartment definition is for the encounter compartment. """
    
    relatedPerson = "RelatedPerson", """The compartment definition is for the related-person compartment. """
    
    practitioner = "Practitioner", """The compartment definition is for the practitioner compartment. """
    
    device = "Device", """The compartment definition is for the device compartment. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CompositeMeasureScoring(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/composite-measure-scoring
    """
    
    opportunity = "opportunity", """Opportunity scoring combines the scores from component measures by combining the numerators and denominators for each component. """
    
    allOrNothing = "all-or-nothing", """All-or-nothing scoring includes an individual in the numerator of the composite measure if they are in the numerators of all of the component measures in which they are in the denominator. """
    
    linear = "linear", """Linear scoring gives an individual a score based on the number of numerators in which they appear. """
    
    weighted = "weighted", """Weighted scoring gives an individual a score based on a weighted factor for each component numerator in which they appear. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CompositionAltcodeKind(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/composition-altcode-kind
    """
    
    alternate = "alternate", """The code is an alternative code that can be used in any of the circumstances that the primary code can be used. """
    
    deprecated = "deprecated", """The code should no longer be used, but was used in the past. """
    
    caseInsensitive = "case-insensitive", """The code is an alternative to be used when a case insensitive code is required (when the primary codes are case sensitive). """
    
    caseSensitive = "case-sensitive", """The code is an alternative to be used when a case sensitive code is required (when the primary codes are case insensitive). """
    
    expression = "expression", """The code is an alternative for the primary code that is built using the expression grammar defined by the code system. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CompositionAttestationMode(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/composition-attestation-mode
    """
    
    personal = "personal", """The person authenticated the content in their personal capacity. """
    
    professional = "professional", """The person authenticated the content in their professional capacity. """
    
    legal = "legal", """The person authenticated the content and accepted legal responsibility for its content. """
    
    official = "official", """The organization authenticated the content as consistent with their policies and procedures. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CompositionStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/composition-status
    """
    
    preliminary = "preliminary", """This is a preliminary composition or document (also known as initial or interim). The content may be incomplete or unverified. """
    
    final = "final", """This version of the composition is complete and verified by an appropriate person and no further work is planned. Any subsequent updates would be on a new version of the composition. """
    
    amended = "amended", """The composition content or the referenced resources have been modified (edited or added to) subsequent to being released as "final" and the composition is complete and verified by an authorized person. """
    
    enteredInError = "entered-in-error", """The composition or document was originally created/issued in error, and this is an amendment that marks that the entire series should not be considered as valid. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ConceptMapEquivalence(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/concept-map-equivalence
    """
    
    relatedto = "relatedto", """The concepts are related to each other, and have at least some overlap in meaning, but the exact relationship is not known. """
    
    equivalent = "equivalent", """The definitions of the concepts mean the same thing (including when structural implications of meaning are considered) (i.e. extensionally identical). """
    
    equal = "equal", """The definitions of the concepts are exactly the same (i.e. only grammatical differences) and structural implications of meaning are identical or irrelevant (i.e. intentionally identical). """
    
    wider = "wider", """The target mapping is wider in meaning than the source concept. """
    
    subsumes = "subsumes", """The target mapping subsumes the meaning of the source concept (e.g. the source is-a target). """
    
    narrower = "narrower", """The target mapping is narrower in meaning than the source concept. The sense in which the mapping is narrower SHALL be described in the comments in this case, and applications should be careful when attempting to use these mappings operationally. """
    
    specializes = "specializes", """The target mapping specializes the meaning of the source concept (e.g. the target is-a source). """
    
    inexact = "inexact", """The target mapping overlaps with the source concept, but both source and target cover additional meaning, or the definitions are imprecise and it is uncertain whether they have the same boundaries to their meaning. The sense in which the mapping is inexact SHALL be described in the comments in this case, and applications should be careful when attempting to use these mappings operationally. """
    
    unmatched = "unmatched", """There is no match for this concept in the target code system. """
    
    disjoint = "disjoint", """This is an explicit assertion that there is no mapping between the source and target concept. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ConceptMapGroupUnmappedMode(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/conceptmap-unmapped-mode
    """
    
    provided = "provided", """Use the code as provided in the $translate request. """
    
    fixed = "fixed", """Use the code explicitly provided in the group.unmapped. """
    
    otherMap = "other-map", """Use the map identified by the canonical URL in the url element. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ConceptSubsumptionOutcome(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/concept-subsumption-outcome
    """
    
    equivalent = "equivalent", """The two concepts are equivalent (have the same properties). """
    
    subsumes = "subsumes", """Coding/code "A" subsumes Coding/code "B" (e.g. B has all the properties A has, and some of it's own). """
    
    subsumedBy = "subsumed-by", """Coding/code "A" is subsumed by Coding/code "B" (e.g. A has all the properties B has, and some of it's own). """
    
    notSubsumed = "not-subsumed", """Coding/code "A" and Coding/code "B" are disjoint (e.g. each has propeties that the other doesn't have). """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ConditionCategoryCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/condition-category
    """
    
    problemListItem = "problem-list-item", """An item on a problem list that can be managed over time and can be expressed by a practitioner (e.g. physician, nurse), patient, or related person. """
    
    encounterDiagnosis = "encounter-diagnosis", """A point in time diagnosis (e.g. from a physician or nurse) in context of an encounter. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ConditionClinicalStatusCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/condition-clinical
    """
    
    active = "active", """The subject is currently experiencing the symptoms of the condition or there is evidence of the condition. """
    
    recurrence = "recurrence", """The subject is experiencing a re-occurence or repeating of a previously resolved condition, e.g. urinary tract infection, pancreatitis, cholangitis, conjunctivitis. """
    
    relapse = "relapse", """The subject is experiencing a return of a condition, or signs and symptoms after a period of improvement or remission, e.g. relapse of cancer, multiple sclerosis, rheumatoid arthritis, systemic lupus erythematosus, bipolar disorder, [psychotic relapse of] schizophrenia, etc. """
    
    inactive = "inactive", """The subject is no longer experiencing the symptoms of the condition or there is no longer evidence of the condition. """
    
    remission = "remission", """The subject is no longer experiencing the symptoms of the condition, but there is a risk of the symptoms returning. """
    
    resolved = "resolved", """The subject is no longer experiencing the symptoms of the condition and there is a negligible perceived risk of the symptoms returning. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ConditionState(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/condition-state
    """
    
    active = "active", """The condition is active. """
    
    inactive = "inactive", """The condition is inactive, but not resolved. """
    
    resolved = "resolved", """The condition is resolved. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ConditionVerificationStatus(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/condition-ver-status
    """
    
    unconfirmed = "unconfirmed", """There is not sufficient diagnostic and/or clinical evidence to treat this as a confirmed condition. """
    
    provisional = "provisional", """This is a tentative diagnosis - still a candidate that is under consideration. """
    
    differential = "differential", """One of a set of potential (and typically mutually exclusive) diagnoses asserted to further guide the diagnostic process and preliminary treatment. """
    
    confirmed = "confirmed", """There is sufficient diagnostic and/or clinical evidence to treat this as a confirmed condition. """
    
    refuted = "refuted", """This condition has been ruled out by diagnostic and clinical evidence. """
    
    enteredInError = "entered-in-error", """The statement was entered in error and is not valid. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ConditionalDeleteStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/conditional-delete-status
    """
    
    notSupported = "not-supported", """No support for conditional deletes. """
    
    single = "single", """Conditional deletes are supported, but only single resources at a time. """
    
    multiple = "multiple", """Conditional deletes are supported, and multiple resources can be deleted in a single interaction. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ConditionalReadStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/conditional-read-status
    """
    
    notSupported = "not-supported", """No support for conditional reads. """
    
    modifiedSince = "modified-since", """Conditional reads are supported, but only with the If-Modified-Since HTTP Header. """
    
    notMatch = "not-match", """Conditional reads are supported, but only with the If-None-Match HTTP Header. """
    
    fullSupport = "full-support", """Conditional reads are supported, with both If-Modified-Since and If-None-Match HTTP Headers. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ConformanceExpectation(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/conformance-expectation
    """
    
    SHALL = "SHALL", """Support for the specified capability is required to be considered conformant. """
    
    SHOULD = "SHOULD", """Support for the specified capability is strongly encouraged, and failure to support it should only occur after careful consideration. """
    
    MAY = "MAY", """Support for the specified capability is not necessary to be considered conformant, and the requirement should be considered strictly optional. """
    
    SHOULDNOT = "SHOULD-NOT", """Support for the specified capability is strongly discouraged and should occur only after careful consideration. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ConsentActionCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/consentaction
    """
    
    collect = "collect", """Gather retrieved information for storage """
    
    access = "access", """Retrieval without permitting collection, use or disclosure. e.g., no screen-scraping for collection, use or disclosure (view-only access) """
    
    use = "use", """Utilize the retrieved information """
    
    disclose = "disclose", """Transfer retrieved information """
    
    correct = "correct", """Allow retrieval of a patient's information for the purpose of update or rectify """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ConsentCategoryCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/consentcategorycodes
    """
    
    acd = "acd", """Any instructions, written or given verbally by a patient to a health care provider in anticipation of potential need for medical treatment. [2005 Honor My Wishes] """
    
    dnr = "dnr", """A legal document, signed by both the patient and their provider, stating a desire not to have CPR initiated in case of a cardiac event. Note: This form was replaced in 2003 with the Physician Orders for Life-Sustaining Treatment [POLST]. """
    
    emrgonly = "emrgonly", """Opt-in to disclosure of health information for emergency only consent directive. Comment: This general consent directive specifically limits disclosure of health information for purpose of emergency treatment. Additional parameters may further limit the disclosure to specific users, roles, duration, types of information, and impose uses obligations. [ActConsentDirective (2.16.840.1.113883.1.11.20425)] """
    
    hcd = "hcd", """Patient's document telling patient's health care provider what the patient wants or does not want if the patient is diagnosed as being terminally ill and in a persistent vegetative state or in a permanently unconscious condition.[2005 Honor My Wishes] """
    
    npp = "npp", """Acknowledgement of custodian notice of privacy practices. Usage Notes: This type of consent directive acknowledges a custodian's notice of privacy practices including its permitted collection, access, use and disclosure of health information to users and for purposes of use specified. [ActConsentDirective (2.16.840.1.113883.1.11.20425)] """
    
    polst = "polst", """The Physician Order for Life-Sustaining Treatment form records a person's health care wishes for end of life emergency treatment and translates them into an order by the physician. It must be reviewed and signed by both the patient and the physician, Advanced Registered Nurse Practitioner or Physician Assistant. [2005 Honor My Wishes] Comment: Opt-in Consent Directive with restrictions. """
    
    research = "research", """Consent to have healthcare information in an electronic health record accessed for research purposes. [VALUE SET: ActConsentType (2.16.840.1.113883.1.11.19897)] """
    
    rsdid = "rsdid", """Consent to have de-identified healthcare information in an electronic health record that is accessed for research purposes, but without consent to re-identify the information under any circumstance. [VALUE SET: ActConsentType (2.16.840.1.113883.1.11.19897) """
    
    rsreid = "rsreid", """Consent to have de-identified healthcare information in an electronic health record that is accessed for research purposes re-identified under specific circumstances outlined in the consent. [VALUE SET: ActConsentType (2.16.840.1.113883.1.11.19897)] """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ConsentDataMeaning(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/consent-data-meaning
    """
    
    instance = "instance", """The consent applies directly to the instance of the resource. """
    
    related = "related", """The consent applies directly to the instance of the resource and instances it refers to. """
    
    dependents = "dependents", """The consent applies directly to the instance of the resource and instances that refer to it. """
    
    authoredby = "authoredby", """The consent applies to instances of resources that are authored by. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ConsentPolicyRuleCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/consentpolicycodes
    """
    
    cric = "cric", """45 CFR part 46 §46.116 General requirements for informed consent; and §46.117 Documentation of informed consent. https://www.gpo.gov/fdsys/pkg/FR-2017-01-19/pdf/2017-01058.pdf """
    
    illinoisMinorProcedure = "illinois-minor-procedure", """The consent to the performance of a medical or surgical procedure by a physician licensed to practice medicine and surgery, a licensed advanced practice nurse, or a licensed physician assistant executed by a married person who is a minor, by a parent who is a minor, by a pregnant woman who is a minor, or by any person 18 years of age or older, is not voidable because of such minority, and, for such purpose, a married person who is a minor, a parent who is a minor, a pregnant woman who is a minor, or any person 18 years of age or older, is deemed to have the same legal capacity to act and has the same powers and obligations as has a person of legal age. Consent by Minors to Medical Procedures Act. (410 ILCS 210/0.01) (from Ch. 111, par. 4500) Sec. 0.01. Short title. This Act may be cited as the Consent by Minors to Medical Procedures Act. (Source: P.A. 86-1324.) http://www.ilga.gov/legislation/ilcs/ilcs3.asp?ActID=1539&ChapterID=35 """
    
    hipaaAuth = "hipaa-auth", """HIPAA 45 CFR Section 164.508 Uses and disclosures for which an authorization is required. (a) Standard: Authorizations for uses and disclosures. (1) Authorization required: General rule. Except as otherwise permitted or required by this subchapter, a covered entity SHALL not use or disclose protected health information without an authorization that is valid under this section. When a covered entity obtains or receives a valid authorization for its use or disclosure of protected health information, such use or disclosure must be consistent with such authorization. Usage Note: Authorizations governed under this regulation meet the definition of an opt in class of consent directive. """
    
    hipaaNpp = "hipaa-npp", """164.520  Notice of privacy practices for protected health information. (1) Right to notice. Except as provided by paragraph (a)(2) or (3) of this section, an individual has a right to adequate notice of the uses and disclosures of protected health information that may be made by the covered entity, and of the individual's rights and the covered entity's legal duties with respect to protected health information. Usage Note: Restrictions governed under this regulation meet the definition of an implied with an opportunity to dissent class of consent directive. """
    
    hipaaRestrictions = "hipaa-restrictions", """HIPAA 45 CFR 164.510 - Uses and disclosures requiring an opportunity for the individual to agree or to object. A covered entity may use or disclose protected health information, provided that the individual is informed in advance of the use or disclosure and has the opportunity to agree to or prohibit or restrict the use or disclosure, in accordance with the applicable requirements of this section. The covered entity may orally inform the individual of and obtain the individual's oral agreement or objection to a use or disclosure permitted by this section. Usage Note: Restrictions governed under this regulation meet the definition of an opt out with exception class of consent directive. """
    
    hipaaResearch = "hipaa-research", """HIPAA 45 CFR 164.508 - Uses and disclosures for which an authorization is required. (a) Standard: Authorizations for uses and disclosures. (3) Compound authorizations. An authorization for use or disclosure of protected health information SHALL NOT be combined with any other document to create a compound authorization, except as follows: (i) An authorization for the use or disclosure of protected health information for a research study may be combined with any other type of written permission for the same or another research study. This exception includes combining an authorization for the use or disclosure of protected health information for a research study with another authorization for the same research study, with an authorization for the creation or maintenance of a research database or repository, or with a consent to participate in research. Where a covered health care provider has conditioned the provision of research-related treatment on the provision of one of the authorizations, as permitted under paragraph (b)(4)(i) of this section, any compound authorization created under this paragraph must clearly differentiate between the conditioned and unconditioned components and provide the individual with an opportunity to opt in to the research activities described in the unconditioned authorization. Usage Notes: See HHS http://www.hhs.gov/hipaa/for-professionals/special-topics/research/index.html and OCR http://www.hhs.gov/hipaa/for-professionals/special-topics/research/index.html """
    
    hipaaSelfPay = "hipaa-self-pay", """HIPAA 45 CFR 164.522(a) Right To Request a Restriction of Uses and Disclosures. (vi) A covered entity must agree to the request of an individual to restrict disclosure of protected health information about the individual to a health plan if: (A) The disclosure is for the purpose of carrying out payment or health care operations and is not otherwise required by law; and (B) The protected health information pertains solely to a health care item or service for which the individual, or person other than the health plan on behalf of the individual, has paid the covered entity in full. Usage Note: Restrictions governed under this regulation meet the definition of an opt out with exception class of consent directive. Opt out is limited to disclosures to a payer for payment and operations purpose of use. See HL7 HIPAA Self-Pay code in ActPrivacyLaw (2.16.840.1.113883.1.11.20426). """
    
    mdhhs5515 = "mdhhs-5515", """On January 1, 2015, the Michigan Department of Health and Human Services (MDHHS) released a standard consent form for the sharing of health information specific to behavioral health and substance use treatment in accordance with Public Act 129 of 2014. In Michigan, while providers are not required to use this new standard form (MDHHS-5515), they are required to accept it. Note: Form is available at http://www.michigan.gov/documents/mdhhs/Consent_to_Share_Behavioral_Health_Information_for_Care_Coordination_Purposes_548835_7.docx For more information see http://www.michigan.gov/documents/mdhhs/Behavioral_Health_Consent_Form_Background_Information_548864_7.pdf """
    
    nyssipp = "nyssipp", """The New York State Surgical and Invasive Procedure Protocol (NYSSIPP) applies to all operative and invasive procedures including endoscopy, general surgery or interventional radiology. Other procedures that involve puncture or incision of the skin, or insertion of an instrument or foreign material into the body are within the scope of the protocol. This protocol also applies to those anesthesia procedures either prior to a surgical procedure or independent of a surgical procedure such as spinal facet blocks. Example: Certain 'minor' procedures such as venipuncture, peripheral IV placement, insertion of nasogastric tube and foley catheter insertion are not within the scope of the protocol. From http://www.health.ny.gov/professionals/protocols_and_guidelines/surgical_and_invasive_procedure/nyssipp_faq.htm Note: HHC 100B-1 Form is available at http://www.downstate.edu/emergency_medicine/documents/Consent_CT_with_contrast.pdf """
    
    va100484 = "va-10-0484", """VA Form 10-0484 Revocation for Release of Individually-Identifiable Health Information enables a veteran to revoke authorization for the VA to release specified copies of individually-identifiable health information with the non-VA health care provider organizations participating in the eHealth Exchange and partnering with VA. Comment: Opt-in Consent Directive with status = rescinded (aka 'revoked'). Note: Form is available at http://www.va.gov/vaforms/medical/pdf/vha-10-0484-fill.pdf """
    
    va100485 = "va-10-0485", """VA Form 10-0485 Request for and Authorization to Release Protected Health Information to eHealth Exchange enables a veteran to request and authorize a VA health care facility to release protected health information (PHI) for treatment purposes only to the communities that are participating in the eHealth Exchange, VLER Directive, and other Health Information Exchanges with who VA has an agreement. This information may consist of the diagnosis of Sickle Cell Anemia, the treatment of or referral for Drug Abuse, treatment of or referral for Alcohol Abuse or the treatment of or testing for infection with Human Immunodeficiency Virus. This authorization covers the diagnoses that I may have upon signing of the authorization and the diagnoses that I may acquire in the future including those protected by 38 U.S.C. 7332. Comment: Opt-in Consent Directive. Note: Form is available at http://www.va.gov/vaforms/medical/pdf/10-0485-fill.pdf """
    
    va105345 = "va-10-5345", """VA Form 10-5345 Request for and Authorization to Release Medical Records or Health Information enables a veteran to request and authorize the VA to release specified copies of protected health information (PHI), such as hospital summary or outpatient treatment notes, which may include information about conditions governed under Title 38 Section 7332 (drug abuse, alcoholism or alcohol abuse, testing for or infection with HIV, and sickle cell anemia). Comment: Opt-in Consent Directive. Note: Form is available at http://www.va.gov/vaforms/medical/pdf/vha-10-5345-fill.pdf """
    
    va105345a = "va-10-5345a", """VA Form 10-5345a Individuals' Request for a Copy of Their Own Health Information enables a veteran to request and authorize the VA to release specified copies of protected health information (PHI), such as hospital summary or outpatient treatment notes. Note: Form is available at http://www.va.gov/vaforms/medical/pdf/vha-10-5345a-fill.pdf """
    
    va105345aMhv = "va-10-5345a-mhv", """VA Form 10-5345a-MHV Individual's Request for a Copy of their own health information from MyHealtheVet enables a veteran to receive a copy of all available personal health information to be delivered through the veteran's My HealtheVet account. Note: Form is available at http://www.va.gov/vaforms/medical/pdf/vha-10-5345a-MHV-fill.pdf """
    
    va1010116 = "va-10-10116", """VA Form 10-10116 Revocation of Authorization for Use and Release of Individually Identifiable Health Information for Veterans Health Administration Research. Comment: Opt-in with Restriction Consent Directive with status = 'completed'. Note: Form is available at http://www.northerncalifornia.va.gov/northerncalifornia/services/rnd/docs/vha-10-10116.pdf  """
    
    va214142 = "va-21-4142", """VA Form 21-4142 (Authorization and Consent to Release Information to the Department of Veterans Affairs (VA) enables a veteran to authorize the US Veterans Administration [VA] to request veteran's health information from non-VA providers. Aka VA Compensation Application Note: Form is available at http://www.vba.va.gov/pubs/forms/VBA-21-4142-ARE.pdf . For additional information regarding VA Form 21-4142, refer to the following website: www.benefits.va.gov/compensation/consent_privateproviders """
    
    ssa827 = "ssa-827", """SA Form SSA-827 (Authorization to Disclose Information to the Social Security Administration (SSA)). Form is available at https://www.socialsecurity.gov/forms/ssa-827-inst-sp.pdf """
    
    dch3927 = "dch-3927", """Michigan DCH-3927 Consent to Share Behavioral Health Information for Care Coordination Purposes, which combines 42 CFR Part 2 and Michigan Mental Health Code, Act 258 of 1974. Form is available at http://www.michigan.gov/documents/mdch/DCH-3927_Consent_to_Share_Health_Information_477005_7.docx """
    
    squaxin = "squaxin", """Squaxin Indian HIPAA and 42 CFR Part 2 Consent for Release and Exchange of Confidential Information, which permits consenter to select healthcare record type and types of treatment purposes.  This consent requires disclosers and recipients to comply with 42 C.F.R. Part 2, and HIPAA 45 C.F.R. parts 160 and 164. It includes patient notice of the refrain policy not to disclose without consent, and revocation rights. https://www.ncsacw.samhsa.gov/files/SI_ConsentForReleaseAndExchange.PDF """
    
    nlLsp = "nl-lsp", """LSP (National Exchange Point) requires that providers, hospitals and pharmacy obtain explicit permission [opt-in] from healthcare consumers to submit and retrieve all or only some of a subject of care’s health information collected by the LSP for purpose of treatment, which can be revoked.  Without permission, a provider cannot access LSP information even in an emergency. The LSP provides healthcare consumers with accountings of disclosures. https://www.vzvz.nl/uploaded/FILES/htmlcontent/Formulieren/TOESTEMMINGSFORMULIER.pdf, https://www.ikgeeftoestemming.nl/en, https://www.ikgeeftoestemming.nl/en/registration/find-healthcare-provider """
    
    atElga = "at-elga", """Pursuant to Sec. 2 no. 9 Health Telematics Act 2012, ELGA Health Data ( “ELGA-Gesundheitsdaten”) = Medical documents. Austria opted for an opt-out approach. This means that a person is by default ‘ELGA participant’ unless he/she objects. ELGA participants have the following options: General opt out: No participation in ELGA, Partial opt-out: No participation in a particular ELGA application, e.g. eMedication and Case-specific opt-out: No participation in ELGA only regarding a particular case/treatment. There is the possibility to opt-in again. ELGA participants can also exclude the access of a particular ELGA healthcare provider to a particular piece of or all of their ELGA data. http://ec.europa.eu/health/ehealth/docs/laws_austria_en.pdf """
    
    nihHipaa = "nih-hipaa", """Guidance and template form https://privacyruleandresearch.nih.gov/pdf/authorization.pdf """
    
    nci = "nci", """see http://ctep.cancer.gov/protocolDevelopment/docs/Informed_Consent_Template.docx """
    
    nihGrdr = "nih-grdr", """Global Rare Disease Patient Registry and Data Repository (GRDR) consent is an agreement of a healthcare consumer to permit collection, access, use and disclosure of de-identified rare disease information and collection of bio-specimens, medical information, family history and other related information from patients to permit the registry collection of health and genetic information, and specimens for pseudonymized disclosure for research purpose of use. https://rarediseases.info.nih.gov/files/informed_consent_template.pdf """
    
    nih527 = "nih-527", """NIH Authorization for the Release of Medical Information is a patient’s consent for the National Institutes of Health Clinical Center to release medical information to care providers, which can be revoked. Note: Consent Form available @ http://cc.nih.gov/participate/_pdf/NIH-527.pdf """
    
    ga4gh = "ga4gh", """Global Alliance for Genomic Health Data Sharing Consent Form is an example of the GA4GH Population origins and ancestry research consent form. Consenters agree to permitting a specified research project to collect ancestry and genetic information in controlled-access databases, and to allow other researchers to use deidentified information from those databases. http://www.commonaccord.org/index.php?action=doc&file=Wx/org/genomicsandhealth/REWG/Demo/Roberta_Robinson_US """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ConsentProvisionType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/consent-provision-type
    """
    
    deny = "deny", """Consent is denied for actions meeting these rules. """
    
    permit = "permit", """Consent is provided for actions meeting these rules. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ConsentScopeCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/consentscope
    """
    
    adr = "adr", """Actions to be taken if they are no longer able to make decisions for themselves """
    
    research = "research", """Consent to participate in research protocol and information sharing required """
    
    patientPrivacy = "patient-privacy", """Agreement to collect, access, use or disclose (share) information """
    
    treatment = "treatment", """Consent to undergo a specific treatment """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ConsentState(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/consent-state-codes
    """
    
    draft = "draft", """The consent is in development or awaiting use but is not yet intended to be acted upon. """
    
    proposed = "proposed", """The consent has been proposed but not yet agreed to by all parties. The negotiation stage. """
    
    active = "active", """The consent is to be followed and enforced. """
    
    rejected = "rejected", """The consent has been rejected by one or more of the parties. """
    
    inactive = "inactive", """The consent is terminated or replaced. """
    
    enteredInError = "entered-in-error", """The consent was created wrongly (e.g. wrong patient) and should be ignored. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ConstraintSeverity(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/constraint-severity
    """
    
    error = "error", """If the constraint is violated, the resource is not conformant. """
    
    warning = "warning", """If the constraint is violated, the resource is conformant, but it is not necessarily following best practice. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContactEntityType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/contactentity-type
    """
    
    BILL = "BILL", """Contact details for information regarding to billing/general finance enquiries. """
    
    ADMIN = "ADMIN", """Contact details for administrative enquiries. """
    
    HR = "HR", """Contact details for issues related to Human Resources, such as staff matters, OH&S etc. """
    
    PAYOR = "PAYOR", """Contact details for dealing with issues related to insurance claims/adjudication/payment. """
    
    PATINF = "PATINF", """Generic information contact for patients. """
    
    PRESS = "PRESS", """Dedicated contact point for matters relating to press enquiries. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContactPointSystem(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/contact-point-system
    """
    
    phone = "phone", """The value is a telephone number used for voice calls. Use of full international numbers starting with + is recommended to enable automatic dialing support but not required. """
    
    fax = "fax", """The value is a fax machine. Use of full international numbers starting with + is recommended to enable automatic dialing support but not required. """
    
    email = "email", """The value is an email address. """
    
    pager = "pager", """The value is a pager number. These may be local pager numbers that are only usable on a particular pager system. """
    
    url = "url", """A contact that is not a phone, fax, pager or email address and is expressed as a URL.  This is intended for various institutional or personal contacts including web sites, blogs, Skype, Twitter, Facebook, etc. Do not use for email addresses. """
    
    sms = "sms", """A contact that can be used for sending an sms message (e.g. mobile phones, some landlines). """
    
    other = "other", """A contact that is not a phone, fax, page or email address and is not expressible as a URL.  E.g. Internal mail address.  This SHOULD NOT be used for contacts that are expressible as a URL (e.g. Skype, Twitter, Facebook, etc.)  Extensions may be used to distinguish "other" contact types. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContactPointUse(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/contact-point-use
    """
    
    home = "home", """A communication contact point at a home; attempted contacts for business purposes might intrude privacy and chances are one will contact family or other household members instead of the person one wishes to call. Typically used with urgent cases, or if no other contacts are available. """
    
    work = "work", """An office contact point. First choice for business related contacts during business hours. """
    
    temp = "temp", """A temporary contact point. The period can provide more detailed information. """
    
    old = "old", """This contact point is no longer in use (or was never correct, but retained for records). """
    
    mobile = "mobile", """A telecommunication device that moves and stays with its owner. May have characteristics of all other use codes, suitable for urgent matters, not the first choice for routine business. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContainerCap(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/container-cap
    """
    
    red = "red", """red cap. """
    
    yellow = "yellow", """yellow cap. """
    
    darkYellow = "dark-yellow", """dark yellow cap. """
    
    grey = "grey", """grey cap. """
    
    lightBlue = "light-blue", """light blue cap. """
    
    black = "black", """black cap. """
    
    green = "green", """green cap. """
    
    lightGreen = "light-green", """light green cap. """
    
    lavender = "lavender", """lavender cap. """
    
    brown = "brown", """brown cap. """
    
    white = "white", """white cap. """
    
    pink = "pink", """pink cap. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractActionCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/contractaction
    """
    
    actionA = "action-a", """Definition for Action A """
    
    actionB = "action-b", """Definition for Action B """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractActorRoleCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/contractactorrole
    """
    
    practitioner = "practitioner", """Someone who provides health care related services to people or animals including both clinical and support services. """
    
    patient = "patient", """A receiver, human or animal, of health care related goods and services. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractContentDerivationCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/contract-content-derivative
    """
    
    registration = "registration", """Content derivative that conveys sufficient information needed to register the source basal content from which it is derived.  This derivative content may be used to register the basal content as it changes status in its lifecycle.  For example, content registration may occur when the basal content is created, updated, inactive, or deleted. """
    
    retrieval = "retrieval", """A content derivative that conveys sufficient information to locate and retrieve the content. """
    
    statement = "statement", """Content derivative that has less than full fidelity to the basal information source from which it was 'transcribed'. It provides recipients with the full content representation they may require for compliance purposes, and typically include a reference to or an attached unstructured representation for recipients needing an exact copy of the legal agreement. """
    
    shareable = "shareable", """A Content Derivative that conveys sufficient information to determine the authorized entities with which the content may be shared. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractDataMeaning(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/contract-data-meaning
    """
    
    instance = "instance", """The consent applies directly to the instance of the resource. """
    
    related = "related", """The consent applies directly to the instance of the resource and instances it refers to. """
    
    dependents = "dependents", """The consent applies directly to the instance of the resource and instances that refer to it. """
    
    authoredby = "authoredby", """The consent applies to instances of resources that are authored by. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractResourceActionStatusCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/contract-action-status
    """
    
    complete = "complete", """To be completed """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractResourceAssetAvailiabilityCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/asset-availability
    """
    
    lease = "lease", """To be completed """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractResourceAssetContextCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/contract-asset-context
    """
    
    custodian = "custodian", """To be completed """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractResourceAssetScopeCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/contract-asset-scope
    """
    
    thing = "thing", """To be completed """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractResourceAssetSubTypeCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/contract-asset-subtype
    """
    
    participation = "participation", """To be completed """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractResourceAssetTypeCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/contract-asset-type
    """
    
    participation = "participation", """To be completed """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractResourceDecisionModeCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/contract-decision-mode
    """
    
    policy = "policy", """To be completed """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractResourceDefinitionSubtypeCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/contract-definition-subtype
    """
    
    temp = "temp", """To be completed """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractResourceDefinitionTypeCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/contract-definition-type
    """
    
    temp = "temp", """To be completed """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractResourceExpirationTypeCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/contract-expiration-type
    """
    
    breach = "breach", """To be completed """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractResourceLegalStateCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/contract-legalstate
    """
    
    amended = "amended", """Contract is augmented with additional information to correct errors in a predecessor or to updated values in a predecessor. Usage: Contract altered within effective time. Precedence Order = 9. Comparable FHIR and v.3 status codes: revised; replaced. """
    
    appended = "appended", """Contract is augmented with additional information that was missing from a predecessor Contract. Usage: Contract altered within effective time. Precedence Order = 9. Comparable FHIR and v.3 status codes: updated, replaced. """
    
    cancelled = "cancelled", """Contract is terminated due to failure of the Grantor and/or the Grantee to fulfil one or more contract provisions. Usage: Abnormal contract termination. Precedence Order = 10. Comparable FHIR and v.3 status codes: stopped; failed; aborted. """
    
    disputed = "disputed", """Contract is pended to rectify failure of the Grantor or the Grantee to fulfil contract provision(s). E.g., Grantee complaint about Grantor's failure to comply with contract provisions. Usage: Contract pended. Precedence Order = 7. Comparable FHIR and v.3 status codes: on hold; pended; suspended. """
    
    enteredInError = "entered-in-error", """Contract was created in error. No Precedence Order.  Status may be applied to a Contract with any status. """
    
    executable = "executable", """Contract execution pending; may be executed when either the Grantor or the Grantee accepts the contract provisions by signing. I.e., where either the Grantor or the Grantee has signed, but not both. E.g., when an insurance applicant signs the insurers application, which references the policy. Usage: Optional first step of contract execution activity.  May be skipped and contracting activity moves directly to executed state. Precedence Order = 3. Comparable FHIR and v.3 status codes: draft; preliminary; planned; intended; active. """
    
    executed = "executed", """Contract is activated for period stipulated when both the Grantor and Grantee have signed it. Usage: Required state for normal completion of contracting activity.  Precedence Order = 6. Comparable FHIR and v.3 status codes: accepted; completed. """
    
    negotiable = "negotiable", """Contract execution is suspended while either or both the Grantor and Grantee propose and consider new or revised contract provisions. I.e., where the party which has not signed proposes changes to the terms.  E .g., a life insurer declines to agree to the signed application because the life insurer has evidence that the applicant, who asserted to being younger or a non-smoker to get a lower premium rate - but offers instead to agree to a higher premium based on the applicants actual age or smoking status. Usage: Optional contract activity between executable and executed state. Precedence Order = 4. Comparable FHIR and v.3 status codes: in progress; review; held. """
    
    offered = "offered", """Contract is a proposal by either the Grantor or the Grantee. Aka - A Contract hard copy or electronic 'template', 'form' or 'application'. E.g., health insurance application; consent directive form. Usage: Beginning of contract negotiation, which may have been completed as a precondition because used for 0..* contracts. Precedence Order = 2. Comparable FHIR and v.3 status codes: requested; new. """
    
    policy = "policy", """Contract template is available as the basis for an application or offer by the Grantor or Grantee. E.g., health insurance policy; consent directive policy.  Usage: Required initial contract activity, which may have been completed as a precondition because used for 0..* contracts. Precedence Order = 1. Comparable FHIR and v.3 status codes: proposed; intended. """
    
    rejected = "rejected", """ Execution of the Contract is not completed because either or both the Grantor and Grantee decline to accept some or all of the contract provisions. Usage: Optional contract activity between executable and abnormal termination. Precedence Order = 5. Comparable FHIR and v.3 status codes:  stopped; cancelled. """
    
    renewed = "renewed", """Beginning of a successor Contract at the termination of predecessor Contract lifecycle. Usage: Follows termination of a preceding Contract that has reached its expiry date. Precedence Order = 13. Comparable FHIR and v.3 status codes: superseded. """
    
    revoked = "revoked", """A Contract that is rescinded.  May be required prior to replacing with an updated Contract. Comparable FHIR and v.3 status codes: nullified. """
    
    resolved = "resolved", """Contract is reactivated after being pended because of faulty execution. *E.g., competency of the signer(s), or where the policy is substantially different from and did not accompany the application/form so that the applicant could not compare them. Aka - ''reactivated''. Usage: Optional stage where a pended contract is reactivated. Precedence Order = 8. Comparable FHIR and v.3 status codes: reactivated. """
    
    terminated = "terminated", """Contract reaches its expiry date. It might or might not be renewed or renegotiated. Usage: Normal end of contract period. Precedence Order = 12. Comparable FHIR and v.3 status codes: Obsoleted. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractResourcePartyRoleCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/contract-party-role
    """
    
    flunky = "flunky", """To be completed """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractResourcePublicationStatusCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/contract-publicationstatus
    """
    
    amended = "amended", """Contract is augmented with additional information to correct errors in a predecessor or to updated values in a predecessor. Usage: Contract altered within effective time. Precedence Order = 9. Comparable FHIR and v.3 status codes: revised; replaced. """
    
    appended = "appended", """Contract is augmented with additional information that was missing from a predecessor Contract. Usage: Contract altered within effective time. Precedence Order = 9. Comparable FHIR and v.3 status codes: updated, replaced. """
    
    cancelled = "cancelled", """Contract is terminated due to failure of the Grantor and/or the Grantee to fulfil one or more contract provisions. Usage: Abnormal contract termination. Precedence Order = 10. Comparable FHIR and v.3 status codes: stopped; failed; aborted. """
    
    disputed = "disputed", """Contract is pended to rectify failure of the Grantor or the Grantee to fulfil contract provision(s). E.g., Grantee complaint about Grantor's failure to comply with contract provisions. Usage: Contract pended. Precedence Order = 7. Comparable FHIR and v.3 status codes: on hold; pended; suspended. """
    
    enteredInError = "entered-in-error", """Contract was created in error. No Precedence Order.  Status may be applied to a Contract with any status. """
    
    executable = "executable", """Contract execution pending; may be executed when either the Grantor or the Grantee accepts the contract provisions by signing. I.e., where either the Grantor or the Grantee has signed, but not both. E.g., when an insurance applicant signs the insurers application, which references the policy. Usage: Optional first step of contract execution activity.  May be skipped and contracting activity moves directly to executed state. Precedence Order = 3. Comparable FHIR and v.3 status codes: draft; preliminary; planned; intended; active. """
    
    executed = "executed", """Contract is activated for period stipulated when both the Grantor and Grantee have signed it. Usage: Required state for normal completion of contracting activity.  Precedence Order = 6. Comparable FHIR and v.3 status codes: accepted; completed. """
    
    negotiable = "negotiable", """Contract execution is suspended while either or both the Grantor and Grantee propose and consider new or revised contract provisions. I.e., where the party which has not signed proposes changes to the terms.  E .g., a life insurer declines to agree to the signed application because the life insurer has evidence that the applicant, who asserted to being younger or a non-smoker to get a lower premium rate - but offers instead to agree to a higher premium based on the applicants actual age or smoking status. Usage: Optional contract activity between executable and executed state. Precedence Order = 4. Comparable FHIR and v.3 status codes: in progress; review; held. """
    
    offered = "offered", """Contract is a proposal by either the Grantor or the Grantee. Aka - A Contract hard copy or electronic 'template', 'form' or 'application'. E.g., health insurance application; consent directive form. Usage: Beginning of contract negotiation, which may have been completed as a precondition because used for 0..* contracts. Precedence Order = 2. Comparable FHIR and v.3 status codes: requested; new. """
    
    policy = "policy", """Contract template is available as the basis for an application or offer by the Grantor or Grantee. E.g., health insurance policy; consent directive policy.  Usage: Required initial contract activity, which may have been completed as a precondition because used for 0..* contracts. Precedence Order = 1. Comparable FHIR and v.3 status codes: proposed; intended. """
    
    rejected = "rejected", """ Execution of the Contract is not completed because either or both the Grantor and Grantee decline to accept some or all of the contract provisions. Usage: Optional contract activity between executable and abnormal termination. Precedence Order = 5. Comparable FHIR and v.3 status codes:  stopped; cancelled. """
    
    renewed = "renewed", """Beginning of a successor Contract at the termination of predecessor Contract lifecycle. Usage: Follows termination of a preceding Contract that has reached its expiry date. Precedence Order = 13. Comparable FHIR and v.3 status codes: superseded. """
    
    revoked = "revoked", """A Contract that is rescinded.  May be required prior to replacing with an updated Contract. Comparable FHIR and v.3 status codes: nullified. """
    
    resolved = "resolved", """Contract is reactivated after being pended because of faulty execution. *E.g., competency of the signer(s), or where the policy is substantially different from and did not accompany the application/form so that the applicant could not compare them. Aka - ''reactivated''. Usage: Optional stage where a pended contract is reactivated. Precedence Order = 8. Comparable FHIR and v.3 status codes: reactivated. """
    
    terminated = "terminated", """Contract reaches its expiry date. It might or might not be renewed or renegotiated. Usage: Normal end of contract period. Precedence Order = 12. Comparable FHIR and v.3 status codes: Obsoleted. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractResourceSecurityControlCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/contract-security-control
    """
    
    policy = "policy", """To be completed """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractResourceStatusCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/contract-status
    """
    
    amended = "amended", """Contract is augmented with additional information to correct errors in a predecessor or to updated values in a predecessor. Usage: Contract altered within effective time. Precedence Order = 9. Comparable FHIR and v.3 status codes: revised; replaced. """
    
    appended = "appended", """Contract is augmented with additional information that was missing from a predecessor Contract. Usage: Contract altered within effective time. Precedence Order = 9. Comparable FHIR and v.3 status codes: updated, replaced. """
    
    cancelled = "cancelled", """Contract is terminated due to failure of the Grantor and/or the Grantee to fulfil one or more contract provisions. Usage: Abnormal contract termination. Precedence Order = 10. Comparable FHIR and v.3 status codes: stopped; failed; aborted. """
    
    disputed = "disputed", """Contract is pended to rectify failure of the Grantor or the Grantee to fulfil contract provision(s). E.g., Grantee complaint about Grantor's failure to comply with contract provisions. Usage: Contract pended. Precedence Order = 7. Comparable FHIR and v.3 status codes: on hold; pended; suspended. """
    
    enteredInError = "entered-in-error", """Contract was created in error. No Precedence Order.  Status may be applied to a Contract with any status. """
    
    executable = "executable", """Contract execution pending; may be executed when either the Grantor or the Grantee accepts the contract provisions by signing. I.e., where either the Grantor or the Grantee has signed, but not both. E.g., when an insurance applicant signs the insurers application, which references the policy. Usage: Optional first step of contract execution activity.  May be skipped and contracting activity moves directly to executed state. Precedence Order = 3. Comparable FHIR and v.3 status codes: draft; preliminary; planned; intended; active. """
    
    executed = "executed", """Contract is activated for period stipulated when both the Grantor and Grantee have signed it. Usage: Required state for normal completion of contracting activity.  Precedence Order = 6. Comparable FHIR and v.3 status codes: accepted; completed. """
    
    negotiable = "negotiable", """Contract execution is suspended while either or both the Grantor and Grantee propose and consider new or revised contract provisions. I.e., where the party which has not signed proposes changes to the terms.  E .g., a life insurer declines to agree to the signed application because the life insurer has evidence that the applicant, who asserted to being younger or a non-smoker to get a lower premium rate - but offers instead to agree to a higher premium based on the applicants actual age or smoking status. Usage: Optional contract activity between executable and executed state. Precedence Order = 4. Comparable FHIR and v.3 status codes: in progress; review; held. """
    
    offered = "offered", """Contract is a proposal by either the Grantor or the Grantee. Aka - A Contract hard copy or electronic 'template', 'form' or 'application'. E.g., health insurance application; consent directive form. Usage: Beginning of contract negotiation, which may have been completed as a precondition because used for 0..* contracts. Precedence Order = 2. Comparable FHIR and v.3 status codes: requested; new. """
    
    policy = "policy", """Contract template is available as the basis for an application or offer by the Grantor or Grantee. E.g., health insurance policy; consent directive policy.  Usage: Required initial contract activity, which may have been completed as a precondition because used for 0..* contracts. Precedence Order = 1. Comparable FHIR and v.3 status codes: proposed; intended. """
    
    rejected = "rejected", """ Execution of the Contract is not completed because either or both the Grantor and Grantee decline to accept some or all of the contract provisions. Usage: Optional contract activity between executable and abnormal termination. Precedence Order = 5. Comparable FHIR and v.3 status codes:  stopped; cancelled. """
    
    renewed = "renewed", """Beginning of a successor Contract at the termination of predecessor Contract lifecycle. Usage: Follows termination of a preceding Contract that has reached its expiry date. Precedence Order = 13. Comparable FHIR and v.3 status codes: superseded. """
    
    revoked = "revoked", """A Contract that is rescinded.  May be required prior to replacing with an updated Contract. Comparable FHIR and v.3 status codes: nullified. """
    
    resolved = "resolved", """Contract is reactivated after being pended because of faulty execution. *E.g., competency of the signer(s), or where the policy is substantially different from and did not accompany the application/form so that the applicant could not compare them. Aka - ''reactivated''. Usage: Optional stage where a pended contract is reactivated. Precedence Order = 8. Comparable FHIR and v.3 status codes: reactivated. """
    
    terminated = "terminated", """Contract reaches its expiry date. It might or might not be renewed or renegotiated. Usage: Normal end of contract period. Precedence Order = 12. Comparable FHIR and v.3 status codes: Obsoleted. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractScopeCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/contract-scope
    """
    
    policy = "policy", """To be completed """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractSecurityCategoryCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/contract-security-category
    """
    
    policy = "policy", """To be completed """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractSecurityClassificationCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/contract-security-classification
    """
    
    policy = "policy", """To be completed """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractSignerTypeCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/contractsignertypecodes
    """
    
    AMENDER = "AMENDER", """A person who has corrected, edited, or amended pre-existing information. """
    
    AUTHN = "AUTHN", """A person in the role of verifier who attests to the accuracy of an act, but who does not have privileges to legally authenticate information content. An example would be a resident physician who sees a patient and dictates a note, then later signs it. The resident's signature constitutes an authentication. """
    
    AUT = "AUT", """An entity that authored specific content. There can be multiple authors of content, which may take such forms as a contract, a healthcare record entry or document, a policy, or a consent directive. """
    
    AFFL = "AFFL", """An entity that has a business or professional relationship with another entity in accordance with an agreement. """
    
    AGNT = "AGNT", """An entity that acts or is authorized to act on behalf of another entity in accordance with an agreement. """
    
    ASSIGNED = "ASSIGNED", """An agent role in which the agent is an Entity acting in the employ of an organization. The focus is on functional role on behalf of the organization, unlike the Employee role where the focus is on the 'Human Resources' relationship between the employee and the organization. """
    
    CIT = "CIT", """The member of a jurisdiction afforded certain rights and encumbered with certain obligation in accordance with jurisdictional policy. """
    
    CLAIMANT = "CLAIMANT", """A party that makes a claim for coverage under a policy. """
    
    COAUTH = "COAUTH", """The entity that co-authored content. There can be multiple co-authors of content, which may take such forms as a contract, a healthcare record entry or document, a policy, or a consent directive. """
    
    CONSENTER = "CONSENTER", """A patient or patient representative who is the grantee in a healthcare related agreement such as a consent for healthcare services, advanced directive, or a privacy consent directive in accordance with jurisdictional, organizational, or patient policy. """
    
    CONSWIT = "CONSWIT", """A person who has witnessed and attests to observing a patient being counseled about a healthcare related agreement such as a consent for healthcare services, advanced directive, or a privacy consent directive. """
    
    CONT = "CONT", """A person or an organization that provides or receives information regarding another entity. Examples; patient NOK and emergency contacts; guarantor contact; employer contact. """
    
    COPART = "COPART", """A person who participates in the generation of and attest to veracity of content but is not an author or co-author. For example, a surgeon who is required by institutional, regulatory, or legal rules to sign an operative report, but who was not involved in the authorship of that report. """
    
    COVPTY = "COVPTY", """An entity, which is the insured, that receives benefits such as healthcare services, reimbursement for out-of-pocket expenses, or compensation for losses through coverage under the terms of an insurance policy. The underwriter of that policy is the scoping entity. The covered party receives coverage because of some contractual or other relationship with the holder of that policy. Note that a particular policy may cover several individuals one of whom may be, but need not be, the policy holder. Thus the notion of covered party is a role that is distinct from that of the policy holder. """
    
    DELEGATEE = "DELEGATEE", """A party to whom some right or authority is delegated by a delegator. """
    
    delegator = "delegator", """A party that delegates a right or authority to another party. """
    
    DEPEND = "DEPEND", """A person covered under an insurance policy or program based on an association with a subscriber, which is recognized by the policy holder. The dependent has an association with the subscriber such as a financial dependency or personal relationship such as that of a spouse, or a natural or adopted child. The policy holder may be required by law to recognize certain associations or may have discretion about the associations. For example, a policy holder may dictate the criteria for the dependent status of adult children who are students, such as requiring full time enrollment, or may recognize domestic partners as dependents. Under certain circumstances, the dependent may be under the indirect authority of a responsible party acting as a surrogate for the subscriber, for example, if the subscriber is differently-abled or deceased, a guardian ad lidem or estate executor may be appointed to assume the subscriber's legal standing in the relationship with the dependent. """
    
    DPOWATT = "DPOWATT", """A person who has been granted the authority to represent or act on another's behalf generally in a manner which is a legally binding upon the person giving such authority as if he or she personally were to do the acts. Unlike ordinary powers of attorney, durable powers can survive for long periods of time, and again, unlike standard powers of attorney, durable powers can continue after incompetency. """
    
    EMGCON = "EMGCON", """An entity to be contacted in the event of an emergency """
    
    EVTWIT = "EVTWIT", """A person who attests to observing an occurrence.  For example, the witness has observed a procedure and is attesting to this fact. """
    
    EXCEST = "EXCEST", """A person who has been granted the authority to act as an estate executor for a deceased person who was the responsible party. """
    
    GRANTEE = "GRANTEE", """A person who grants to another person the authority to represent or act on that person's behalf.  Examples include (1) exercising specific rights belonging to the grantee; (2) performing specific duties on behalf of a grantee; and (3) making specific decisions concerning a grantee. """
    
    GRANTOR = "GRANTOR", """A person who has been granted the authority to represent or act on another's behalf. Examples include (1) exercising specific rights belonging to the grantee; (2) performing specific duties on behalf of a grantee; and (3) making specific decisions concerning a grantee. """
    
    GUAR = "GUAR", """A person or organization contractually recognized by the issuer as an entity that has assumed fiscal responsibility (e.g., by making or giving a promise, assurance, or pledge) for another entity's financial obligations by guaranteeing to pay for amounts owed to a particular account.  In a healthcare context, the account may be a patient's billing account for services rendered by a provider or a health plan premium account. """
    
    GUARD = "GUARD", """A person or organization legally empowered with responsibility for the care of a ward. """
    
    GUADLTM = "GUADLTM", """A person appointed by the court to look out for the best interests of a minor child during the course of legal proceedings. """
    
    INF = "INF", """An entity that is the source of reported information (e.g., a next of kin who answers questions about the patient's history). For history questions, the patient is logically an informant, yet the informant of history questions is implicitly the subject. """
    
    INTPRT = "INTPRT", """A person who converts spoken or written language into the language of key participants in an event such as when a provider is obtaining a patient's consent to treatment or permission to disclose information. """
    
    INSBJ = "INSBJ", """An entity that is the subject of an investigation. This role is scoped by the party responsible for the investigation. """
    
    HPOWATT = "HPOWATT", """A person who has been granted the authority to represent or act on another's behalf for healthcare related matters in a manner which is a legally binding upon the person giving such authority as if he or she personally were to do the acts. Examples include (1) exercising specific healthcare legal rights belonging to the grantee such as signing a consent directive; (2) performing specific healthcare related legal duties on behalf of a grantee such as claims payment; and (3) making specific healthcare legal decisions concerning a grantee such as consenting to healthcare services. """
    
    HPROV = "HPROV", """An entity that is authorized to provide health care services by an authorizing organization or jurisdiction. """
    
    LEGAUTHN = "LEGAUTHN", """A person in the role of verifier who attests to the accuracy of information content, and who has privileges to certify the legal authenticity of that content with a signature that constitutes a legal authentication.  For example, a licensed physician who signs a consult authored by a resident physician who authenticated it. """
    
    NMDINS = "NMDINS", """A party to an insurance policy under which the insurer agrees to indemnify for losses, provides benefits for, or renders services. A named insured may be either a person, non-person living subject, or an organization, or a group of persons, non-person living subject that is the named insured under a comprehensive automobile, disability, or property and casualty policy.  The named insured and might or might not be the policy holder. """
    
    NOK = "NOK", """A person, who is a type of contact, designated to receive notifications on behalf of another person who is a relative. """
    
    NOTARY = "NOTARY", """The party credentialed to legally attest to the contract binding by verifying the identity and capacity of the grantor and grantee, and witnessing their signing of the contract or agreement such as a real estate transaction, pre-nuptial agreement, or a will. """
    
    PAT = "PAT", """A person, animal, or other living subject that is the actual or potential recipient of health care services. """
    
    POWATT = "POWATT", """A person who has been granted the authority to represent or act on another's behalf generally in a manner which is a legally binding upon the person giving such authority as if he or she personally were to do the acts. Examples include (1) exercising specific legal rights belonging to the grantee such as signing a contract; (2) performing specific legal duties on behalf of a grantee such as making loan payments; and (3) making specific legal decisions concerning a grantee such as financial investment decisions. """
    
    PRIMAUTH = "PRIMAUTH", """An entity that is the primary or sole author of information content.  In the healthcare context, there can be only one primary author of health information content in a record entry or document. """
    
    PRIRECIP = "PRIRECIP", """An entity that may, should receive, or has received information or an object to which it was primarily addressed. """
    
    RECIP = "RECIP", """An entity that may, should receive, or has received information or an object, which might not have been primarily addressed to it. For example, the staff of a provider, a clearinghouse, or other intermediary. """
    
    RESPRSN = "RESPRSN", """An entity that has legal responsibility for another party. """
    
    REVIEWER = "REVIEWER", """A person, device, or algorithm that has used approved criteria for filtered data for inclusion into the patient record.  Examples: (1) a medical records clerk who scans a document for inclusion in the medical record, enters header information, or catalogues and classifies the data, or a combination thereof; (2) a gateway that receives data from another computer system and interprets that data or changes its format, or both, before entering it into the patient record. """
    
    TRANS = "TRANS", """An entity entering the data into the originating system. This includes the transcriptionist for dictated text transcribed into electronic form. """
    
    SOURCE = "SOURCE", """An automated data source that generates a signature along with content. Examples: (1) the signature for an image that is generated by a device for inclusion in the patient record; (2) the signature for an ECG derived by an ECG system for inclusion in the patient record; (3) the data from a biomedical monitoring device or system that is for inclusion in the patient record. """
    
    SPOWATT = "SPOWATT", """A person who has been granted the authority to represent or act on another's behalf for a limited set of specific matters in a manner which is a legally binding upon the person giving such authority as if he or she personally were to do the acts. Examples include (1) exercising specific legal rights belonging to the grantee such as drafting a will; (2) performing specific legal duties on behalf of a grantee such as making a reversible mortgage to pay for end of life expenses; and (3) making specific legal decisions concerning a grantee such as managing a trust. """
    
    VALID = "VALID", """A person who validates a health information document for inclusion in the patient record. For example, a medical student or resident is credentialed to perform history or physical examinations and to write progress notes. The attending physician signs the history and physical examination to validate the entry for inclusion in the patient's medical record. """
    
    VERF = "VERF", """A person who asserts the correctness and appropriateness of an act or the recording of the act, and is accountable for the assertion that the act or the recording of the act complies with jurisdictional or organizational policy. For example, a physician is required to countersign a verbal order that has previously been recorded in the medical record by a registered nurse who has carried out the verbal order. """
    
    WIT = "WIT", """A person witnessing the signature of another party. A witness is not knowledgeable about the content being signed, much less approves of anything stated in the content. For example, an advanced directive witness or a witness that a party to a contract signed that certain demographic or financial information is truthful. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractSubtypeCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/contractsubtypecodes
    """
    
    disclosureCa = "disclosure-ca", """Canadian health information disclosure policy. """
    
    disclosureUs = "disclosure-us", """United States health information disclosure policy. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractTermSubtypeCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/contracttermsubtypecodes
    """
    
    condition = "condition", """Terms that go to the very root of a contract. """
    
    warranty = "warranty", """Less imperative than a condition, so the contract will survive a breach """
    
    innominate = "innominate", """Breach of which might or might not go to the root of the contract depending upon the nature of the breach """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractTermTypeCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/contracttermtypecodes
    """
    
    statutory = "statutory", """Based on specialized statutes that deal with particular subjects. """
    
    subjectTo = "subject-to", """Execution of the term in the contract is conditional on the execution of other actions. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContractTypeCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/contract-type
    """
    
    privacy = "privacy", """Privacy policy. """
    
    disclosure = "disclosure", """Information disclosure policy. """
    
    healthinsurance = "healthinsurance", """Health Insurance policy. """
    
    supply = "supply", """Contract to supply goods or services. """
    
    consent = "consent", """Consent Directive. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ContributorType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/contributor-type
    """
    
    author = "author", """An author of the content of the module. """
    
    editor = "editor", """An editor of the content of the module. """
    
    reviewer = "reviewer", """A reviewer of the content of the module. """
    
    endorser = "endorser", """An endorser of the content of the module. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CopyNumberEvent(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/copy-number-event
    """
    
    amp = "amp", """amplification. """
    
    del_ = "del", """deletion. """
    
    lof = "lof", """loss of function. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CoverageClassCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/coverage-class
    """
    
    group = "group", """An employee group """
    
    subgroup = "subgroup", """A sub-group of an employee group """
    
    plan = "plan", """A specific suite of benefits. """
    
    subplan = "subplan", """A subset of a specific suite of benefits. """
    
    class_ = "class", """A class of benefits. """
    
    subclass = "subclass", """A subset of a class of benefits. """
    
    sequence = "sequence", """A sequence number associated with a short-term continuance of the coverage. """
    
    rxbin = "rxbin", """Pharmacy benefit manager's Business Identification Number. """
    
    rxpcn = "rxpcn", """A Pharmacy Benefit Manager specified Processor Control Number. """
    
    rxid = "rxid", """A Pharmacy Benefit Manager specified Member ID. """
    
    rxgroup = "rxgroup", """A Pharmacy Benefit Manager specified Group number. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CoverageCopayTypeCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/coverage-copay-type
    """
    
    gpvisit = "gpvisit", """An office visit for a general practitioner of a discipline. """
    
    spvisit = "spvisit", """An office visit for a specialist practitioner of a discipline """
    
    emergency = "emergency", """An episode in an emergency department. """
    
    inpthosp = "inpthosp", """An episode of an Inpatient hospital stay. """
    
    televisit = "televisit", """A visit held where the patient is remote relative to the practitioner, e.g. by phone, computer or video conference. """
    
    urgentcare = "urgentcare", """A visit to an urgent care facility - typically a community care clinic. """
    
    copaypct = "copaypct", """A standard percentage applied to all classes or service or product not otherwise specified. """
    
    copay = "copay", """A standard fixed currency amount applied to all classes or service or product not otherwise specified. """
    
    deductible = "deductible", """The accumulated amount of patient payment before the coverage begins to pay for services. """
    
    maxoutofpocket = "maxoutofpocket", """The maximum amout of payment for services which a patient, or family, is expected to incur - typically annually. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CoverageEligibilityResponseAuthSupportCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/coverageeligibilityresponse-ex-auth-support
    """
    
    laborder = "laborder", """A request or authorization for laboratory diagnostic tests. """
    
    labreport = "labreport", """A report on laboratory diagnostic test(s). """
    
    diagnosticimageorder = "diagnosticimageorder", """A request or authorization for diagnostic imaging. """
    
    diagnosticimagereport = "diagnosticimagereport", """A report on diagnostic image(s). """
    
    professionalreport = "professionalreport", """A report from a licensed professional regarding the siutation, condition or proposed treatment. """
    
    accidentreport = "accidentreport", """A formal accident report as would be filed with police or a simlar official body. """
    
    model = "model", """A physical model of the affected area. """
    
    picture = "picture", """A photograph of the affected area. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class CoverageSelfPayCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/coverage-selfpay
    """
    
    pay = "pay", """An individual or organization is paying directly for goods and services. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class DataAbsentReason(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/data-absent-reason
    """
    
    unknown = "unknown", """The value is expected to exist but is not known. """
    
    askedUnknown = "asked-unknown", """The source was asked but does not know the value. """
    
    tempUnknown = "temp-unknown", """There is reason to expect (from the workflow) that the value may become known. """
    
    notAsked = "not-asked", """The workflow didn't lead to this value being known. """
    
    askedDeclined = "asked-declined", """The source was asked but declined to answer. """
    
    masked = "masked", """The information is not available due to security, privacy or related reasons. """
    
    notApplicable = "not-applicable", """There is no proper value for this element (e.g. last menstrual period for a male). """
    
    unsupported = "unsupported", """The source system wasn't capable of supporting this element. """
    
    asText = "as-text", """The content of the data is represented in the resource narrative. """
    
    error = "error", """Some system or workflow process error means that the information is not available. """
    
    notANumber = "not-a-number", """The numeric value is undefined or unrepresentable due to a floating point processing error. """
    
    negativeInfinity = "negative-infinity", """The numeric value is excessively low and unrepresentable due to a floating point processing error. """
    
    positiveInfinity = "positive-infinity", """The numeric value is excessively high and unrepresentable due to a floating point processing error. """
    
    notPerformed = "not-performed", """The value is not available because the observation procedure (test, etc.) was not performed. """
    
    notPermitted = "not-permitted", """The value is not permitted in this context (e.g. due to profiles, or the base data types). """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class DataType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/data-types
    """
    
    address = "Address", """An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world. """
    
    age = "Age", """A duration of time during which an organism (or a process) has existed. """
    
    annotation = "Annotation", """A  text note which also  contains information about who made the statement and when. """
    
    attachment = "Attachment", """For referring to data content defined in other formats. """
    
    backboneElement = "BackboneElement", """Base definition for all elements that are defined inside a resource - but not those in a data type. """
    
    codeableConcept = "CodeableConcept", """A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text. """
    
    coding = "Coding", """A reference to a code defined by a terminology system. """
    
    contactDetail = "ContactDetail", """Specifies contact information for a person or organization. """
    
    contactPoint = "ContactPoint", """Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc. """
    
    contributor = "Contributor", """A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers. """
    
    count = "Count", """A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies. """
    
    dataRequirement = "DataRequirement", """Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data. """
    
    distance = "Distance", """A length - a value with a unit that is a physical distance. """
    
    dosage = "Dosage", """Indicates how the medication is/was taken or should be taken by the patient. """
    
    duration = "Duration", """A length of time. """
    
    element = "Element", """Base definition for all elements in a resource. """
    
    elementDefinition = "ElementDefinition", """Captures constraints on each element within the resource, profile, or extension. """
    
    expression = "Expression", """A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used. """
    
    extension = "Extension", """Optional Extension Element - found in all resources. """
    
    humanName = "HumanName", """A human's name with the ability to identify parts and usage. """
    
    identifier = "Identifier", """An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers. """
    
    marketingStatus = "MarketingStatus", """The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available. """
    
    meta = "Meta", """The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. """
    
    money = "Money", """An amount of economic utility in some recognized currency. """
    
    moneyQuantity = "MoneyQuantity", """moneyQuantity """
    
    narrative = "Narrative", """A human-readable summary of the resource conveying the essential clinical and business information for the resource. """
    
    parameterDefinition = "ParameterDefinition", """The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse. """
    
    period = "Period", """A time period defined by a start and end date and optionally time. """
    
    population = "Population", """A populatioof people with some set of grouping criteria. """
    
    prodCharacteristic = "ProdCharacteristic", """The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available. """
    
    productShelfLife = "ProductShelfLife", """The shelf-life and storage information for a medicinal product item or container can be described using this class. """
    
    quantity = "Quantity", """A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies. """
    
    range = "Range", """A set of ordered Quantities defined by a low and high limit. """
    
    ratio = "Ratio", """A relationship of two Quantity values - expressed as a numerator and a denominator. """
    
    reference = "Reference", """A reference from one resource to another. """
    
    relatedArtifact = "RelatedArtifact", """Related artifacts such as additional documentation, justification, or bibliographic references. """
    
    sampledData = "SampledData", """A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data. """
    
    signature = "Signature", """A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities. """
    
    simpleQuantity = "SimpleQuantity", """simpleQuantity """
    
    substanceAmount = "SubstanceAmount", """Chemical substances are a single substance type whose primary defining element is the molecular structure. Chemical substances shall be defined on the basis of their complete covalent molecular structure; the presence of a salt (counter-ion) and/or solvates (water, alcohols) is also captured. Purity, grade, physical form or particle size are not taken into account in the definition of a chemical substance or in the assignment of a Substance ID. """
    
    timing = "Timing", """Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out. """
    
    triggerDefinition = "TriggerDefinition", """A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element. """
    
    usageContext = "UsageContext", """Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care). """
    
    base64Binary = "base64Binary", """A stream of bytes """
    
    boolean = "boolean", """Value of "true" or "false" """
    
    canonical = "canonical", """A URI that is a reference to a canonical URL on a FHIR resource """
    
    code = "code", """A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents """
    
    date = "date", """A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates. """
    
    dateTime = "dateTime", """A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates. """
    
    decimal = "decimal", """A rational number with implicit precision """
    
    id = "id", """Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive. """
    
    instant = "instant", """An instant in time - known at least to the second """
    
    integer = "integer", """A whole number """
    
    markdown = "markdown", """A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine """
    
    oid = "oid", """An OID represented as a URI """
    
    positiveInt = "positiveInt", """An integer with a value that is positive (e.g. >0) """
    
    string = "string", """A sequence of Unicode characters """
    
    time = "time", """A time during the day, with no date specified """
    
    unsignedInt = "unsignedInt", """An integer with a value that is not negative (e.g. >= 0) """
    
    uri = "uri", """String of characters used to identify a name or a resource """
    
    url = "url", """A URI that is a literal reference """
    
    uuid = "uuid", """A UUID, represented as a URI """
    
    xhtml = "xhtml", """XHTML format, as defined by W3C, but restricted usage (mainly, no active content) """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class DaysOfWeek(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/days-of-week
    """
    
    mon = "mon", """Monday. """
    
    tue = "tue", """Tuesday. """
    
    wed = "wed", """Wednesday. """
    
    thu = "thu", """Thursday. """
    
    fri = "fri", """Friday. """
    
    sat = "sat", """Saturday. """
    
    sun = "sun", """Sunday. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class DefinitionResourceType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/definition-resource-types
    """
    
    activityDefinition = "ActivityDefinition", """This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context. """
    
    eventDefinition = "EventDefinition", """The EventDefinition resource provides a reusable description of when a particular event can occur. """
    
    measure = "Measure", """The Measure resource provides the definition of a quality measure. """
    
    operationDefinition = "OperationDefinition", """A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction). """
    
    planDefinition = "PlanDefinition", """This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols. """
    
    questionnaire = "Questionnaire", """A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class DefinitionStatus(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/definition-status
    """
    
    draft = "draft", """The definition is in the design stage and is not yet considered to be "ready for use". """
    
    active = "active", """The definition is considered ready for use. """
    
    withdrawn = "withdrawn", """The definition should no longer be used. """
    
    unknown = "unknown", """The authoring/source system does not know which of the status values currently applies for this resource.  Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply,  but the authoring/source system does not know which. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class DefinitionTopic(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/definition-topic
    """
    
    treatment = "treatment", """The definition is related to treatment of the patient. """
    
    education = "education", """The definition is related to education of the patient. """
    
    assessment = "assessment", """The definition is related to assessment of the patient. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class DefinitionUseCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/definition-use
    """
    
    fhirStructure = "fhir-structure", """This structure is defined as part of the base FHIR Specification """
    
    customResource = "custom-resource", """This structure is intended to be treated like a FHIR resource (e.g. on the FHIR API) """
    
    dam = "dam", """This structure captures an analysis of a domain """
    
    wireFormat = "wire-format", """This structure represents and existing structure (e.g. CDA, HL7 v2) """
    
    archetype = "archetype", """This structure captures an analysis of a domain """
    
    template = "template", """This structure is a template (n.b: 'template' has many meanings) """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class DetectedIssueSeverity(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/detectedissue-severity
    """
    
    high = "high", """Indicates the issue may be life-threatening or has the potential to cause permanent injury. """
    
    moderate = "moderate", """Indicates the issue may result in noticeable adverse consequences but is unlikely to be life-threatening or cause permanent injury. """
    
    low = "low", """Indicates the issue may result in some adverse consequences but is unlikely to substantially affect the situation of the subject. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class DeviceDefinitionParameterGroup(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/parameter-group
    """
    
    haemodynamic = "haemodynamic", """Haemodynamic Parameter Group - MDC_PGRP_HEMO. """
    
    ecg = "ecg", """ECG Parameter Group - MDC_PGRP_ECG. """
    
    respiratory = "respiratory", """Respiratory Parameter Group - MDC_PGRP_RESP. """
    
    ventilation = "ventilation", """Ventilation Parameter Group - MDC_PGRP_VENT. """
    
    neurological = "neurological", """Neurological Parameter Group - MDC_PGRP_NEURO. """
    
    drugDelivery = "drug-delivery", """Drug Delivery Parameter Group - MDC_PGRP_DRUG. """
    
    fluidChemistry = "fluid-chemistry", """Fluid Chemistry Parameter Group - MDC_PGRP_FLUID. """
    
    bloodChemistry = "blood-chemistry", """Blood Chemistry Parameter Group - MDC_PGRP_BLOOD_CHEM. """
    
    miscellaneous = "miscellaneous", """Miscellaneous Parameter Group - MDC_PGRP_MISC. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class DeviceMetricCalibrationState(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/metric-calibration-state
    """
    
    notCalibrated = "not-calibrated", """The metric has not been calibrated. """
    
    calibrationRequired = "calibration-required", """The metric needs to be calibrated. """
    
    calibrated = "calibrated", """The metric has been calibrated. """
    
    unspecified = "unspecified", """The state of calibration of this metric is unspecified. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class DeviceMetricCalibrationType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/metric-calibration-type
    """
    
    unspecified = "unspecified", """Metric calibration method has not been identified. """
    
    offset = "offset", """Offset metric calibration method. """
    
    gain = "gain", """Gain metric calibration method. """
    
    twoPoint = "two-point", """Two-point metric calibration method. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class DeviceMetricCategory(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/metric-category
    """
    
    measurement = "measurement", """DeviceObservations generated for this DeviceMetric are measured. """
    
    setting = "setting", """DeviceObservations generated for this DeviceMetric is a setting that will influence the behavior of the Device. """
    
    calculation = "calculation", """DeviceObservations generated for this DeviceMetric are calculated. """
    
    unspecified = "unspecified", """The category of this DeviceMetric is unspecified. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class DeviceMetricColor(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/metric-color
    """
    
    black = "black", """Color for representation - black. """
    
    red = "red", """Color for representation - red. """
    
    green = "green", """Color for representation - green. """
    
    yellow = "yellow", """Color for representation - yellow. """
    
    blue = "blue", """Color for representation - blue. """
    
    magenta = "magenta", """Color for representation - magenta. """
    
    cyan = "cyan", """Color for representation - cyan. """
    
    white = "white", """Color for representation - white. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class DeviceMetricOperationalStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/metric-operational-status
    """
    
    on = "on", """The DeviceMetric is operating and will generate DeviceObservations. """
    
    off = "off", """The DeviceMetric is not operating. """
    
    standby = "standby", """The DeviceMetric is operating, but will not generate any DeviceObservations. """
    
    enteredInError = "entered-in-error", """The DeviceMetric was entered in error. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class DeviceNameType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/device-nametype
    """
    
    udiLabelName = "udi-label-name", """UDI Label name. """
    
    userFriendlyName = "user-friendly-name", """User Friendly name. """
    
    patientReportedName = "patient-reported-name", """Patient Reported name. """
    
    manufacturerName = "manufacturer-name", """Manufacturer name. """
    
    modelName = "model-name", """Model name. """
    
    other = "other", """other. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class DeviceUseStatementStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/device-statement-status
    """
    
    active = "active", """The device is still being used. """
    
    completed = "completed", """The device is no longer being used. """
    
    enteredInError = "entered-in-error", """The statement was recorded incorrectly. """
    
    intended = "intended", """The device may be used at some time in the future. """
    
    stopped = "stopped", """Actions implied by the statement have been permanently halted, before all of them occurred. """
    
    onHold = "on-hold", """Actions implied by the statement have been temporarily halted, but are expected to continue later. May also be called "suspended". """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class DiagnosisRole(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/diagnosis-role
    """
    
    AD = "AD", """AD """
    
    DD = "DD", """DD """
    
    CC = "CC", """CC """
    
    CM = "CM", """CM """
    
    preOp = "pre-op", """preOp """
    
    postOp = "post-op", """postOp """
    
    billing = "billing", """billing """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class DiagnosticReportStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/diagnostic-report-status
    """
    
    registered = "registered", """The existence of the report is registered, but there is nothing yet available. """
    
    partial = "partial", """This is a partial (e.g. initial, interim or preliminary) report: data in the report may be incomplete or unverified. """
    
    preliminary = "preliminary", """Verified early results are available, but not all  results are final. """
    
    final = "final", """The report is complete and verified by an authorized person. """
    
    amended = "amended", """Subsequent to being final, the report has been modified.  This includes any change in the results, diagnosis, narrative text, or other content of a report that has been issued. """
    
    corrected = "corrected", """Subsequent to being final, the report has been modified  to correct an error in the report or referenced results. """
    
    appended = "appended", """Subsequent to being final, the report has been modified by adding new content. The existing content is unchanged. """
    
    cancelled = "cancelled", """The report is unavailable because the measurement was not started or not completed (also sometimes called "aborted"). """
    
    enteredInError = "entered-in-error", """The report has been withdrawn following a previous final release.  This electronic record should never have existed, though it is possible that real-world decisions were based on it. (If real-world activity has occurred, the status should be "cancelled" rather than "entered-in-error".). """
    
    unknown = "unknown", """The authoring/source system does not know which of the status values currently applies for this observation. Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, but the authoring/source system does not know which. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class Diet(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/diet
    """
    
    vegetarian = "vegetarian", """Food without meat, poultry or seafood. """
    
    dairyFree = "dairy-free", """Excludes dairy products. """
    
    nutFree = "nut-free", """Excludes ingredients containing nuts. """
    
    glutenFree = "gluten-free", """Excludes ingredients containing gluten. """
    
    vegan = "vegan", """Food without meat, poultry, seafood, eggs, dairy products and other animal-derived substances. """
    
    halal = "halal", """Foods that conform to Islamic law. """
    
    kosher = "kosher", """Foods that conform to Jewish dietary law. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class DischargeDisposition(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/discharge-disposition
    """
    
    home = "home", """The patient was dicharged and has indicated that they are going to return home afterwards. """
    
    altHome = "alt-home", """The patient was discharged and has indicated that they are going to return home afterwards, but not the patient's home - e.g. a family member's home. """
    
    otherHcf = "other-hcf", """The patient was transferred to another healthcare facility. """
    
    hosp = "hosp", """The patient has been discharged into palliative care. """
    
    long = "long", """The patient has been discharged into long-term care where is likely to be monitored through an ongoing episode-of-care. """
    
    aadvice = "aadvice", """The patient self discharged against medical advice. """
    
    exp = "exp", """The patient has deceased during this encounter. """
    
    psy = "psy", """The patient has been transferred to a psychiatric facility. """
    
    rehab = "rehab", """The patient was discharged and is to receive post acute care rehabilitation services. """
    
    snf = "snf", """The patient has been discharged to a skilled nursing facility for the patient to receive additional care. """
    
    oth = "oth", """The discharge disposition has not otherwise defined. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class DiscriminatorType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/discriminator-type
    """
    
    value = "value", """The slices have different values in the nominated element. """
    
    exists = "exists", """The slices are differentiated by the presence or absence of the nominated element. """
    
    pattern = "pattern", """The slices have different values in the nominated element, as determined by testing them against the applicable ElementDefinition.pattern[x]. """
    
    type = "type", """The slices are differentiated by type of the nominated element. """
    
    profile = "profile", """The slices are differentiated by conformance of the nominated element to a specified profile. Note that if the path specifies .resolve() then the profile is the target profile on the reference. In this case, validation by the possible profiles is required to differentiate the slices. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class DocumentMode(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/document-mode
    """
    
    producer = "producer", """The application produces documents of the specified type. """
    
    consumer = "consumer", """The application consumes documents of the specified type. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class DocumentReferenceStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/document-reference-status
    """
    
    current = "current", """This is the current reference for this document. """
    
    superseded = "superseded", """This reference has been superseded by another reference. """
    
    enteredInError = "entered-in-error", """This reference was created in error. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class DocumentRelationshipType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/document-relationship-type
    """
    
    replaces = "replaces", """This document logically replaces or supersedes the target document. """
    
    transforms = "transforms", """This document was generated by transforming the target document (e.g. format or language conversion). """
    
    signs = "signs", """This document is a signature of the target document. """
    
    appends = "appends", """This document adds additional information to the target document. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class DoseAndRateType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/dose-rate-type
    """
    
    calculated = "calculated", """The dose specified is calculated by the prescriber or the system. """
    
    ordered = "ordered", """The dose specified is as ordered by the prescriber. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class EffectEstimateType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/effect-estimate-type
    """
    
    relativeRR = "relative-RR", """relative risk (a type of relative effect estimate). """
    
    relativeOR = "relative-OR", """odds ratio (a type of relative effect estimate). """
    
    relativeHR = "relative-HR", """hazard ratio (a type of relative effect estimate). """
    
    absoluteARD = "absolute-ARD", """absolute risk difference (a type of absolute effect estimate). """
    
    absoluteMeanDiff = "absolute-MeanDiff", """mean difference (a type of absolute effect estimate). """
    
    absoluteSMD = "absolute-SMD", """standardized mean difference (a type of absolute effect estimate). """
    
    absoluteMedianDiff = "absolute-MedianDiff", """median difference (a type of absolute effect estimate). """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class EligibilityRequestPurpose(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/eligibilityrequest-purpose
    """
    
    authRequirements = "auth-requirements", """The prior authorization requirements for the listed, or discovered if specified, converages for the categories of service and/or specifed biling codes are requested. """
    
    benefits = "benefits", """The plan benefits and optionally benefits consumed  for the listed, or discovered if specified, converages are requested. """
    
    discovery = "discovery", """The insurer is requested to report on any coverages which they are aware of in addition to any specifed. """
    
    validation = "validation", """A check that the specified coverages are in-force is requested. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class EligibilityResponsePurpose(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/eligibilityresponse-purpose
    """
    
    authRequirements = "auth-requirements", """The prior authorization requirements for the listed, or discovered if specified, converages for the categories of service and/or specifed biling codes are requested. """
    
    benefits = "benefits", """The plan benefits and optionally benefits consumed  for the listed, or discovered if specified, converages are requested. """
    
    discovery = "discovery", """The insurer is requested to report on any coverages which they are aware of in addition to any specifed. """
    
    validation = "validation", """A check that the specified coverages are in-force is requested. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class EnableWhenBehavior(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/questionnaire-enable-behavior
    """
    
    all = "all", """Enable the question when all the enableWhen criteria are satisfied. """
    
    any = "any", """Enable the question when any of the enableWhen criteria are satisfied. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class EncounterLocationStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/encounter-location-status
    """
    
    planned = "planned", """The patient is planned to be moved to this location at some point in the future. """
    
    active = "active", """The patient is currently at this location, or was between the period specified.A system may update these records when the patient leaves the location to either reserved, or completed. """
    
    reserved = "reserved", """This location is held empty for this patient. """
    
    completed = "completed", """The patient was at this location during the period specified.Not to be used when the patient is currently at the location. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class EncounterStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/encounter-status
    """
    
    planned = "planned", """The Encounter has not yet started. """
    
    arrived = "arrived", """The Patient is present for the encounter, however is not currently meeting with a practitioner. """
    
    triaged = "triaged", """The patient has been assessed for the priority of their treatment based on the severity of their condition. """
    
    inProgress = "in-progress", """The Encounter has begun and the patient is present / the practitioner and the patient are meeting. """
    
    onleave = "onleave", """The Encounter has begun, but the patient is temporarily on leave. """
    
    finished = "finished", """The Encounter has ended. """
    
    cancelled = "cancelled", """The Encounter has ended before it has begun. """
    
    enteredInError = "entered-in-error", """This instance should not have been part of this patient's medical record. """
    
    unknown = "unknown", """The encounter status is unknown. Note that "unknown" is a value of last resort and every attempt should be made to provide a meaningful value other than "unknown". """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class EncounterType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/encounter-type
    """
    
    ADMS = "ADMS", """ADMS """
    
    bDBMClin = "BD/BM-clin", """bDBMClin """
    
    CCS60 = "CCS60", """CCS60 """
    
    OKI = "OKI", """OKI """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class EndpointConnectionType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/endpoint-connection-type
    """
    
    iheXcpd = "ihe-xcpd", """IHE Cross Community Patient Discovery Profile (XCPD) - http://wiki.ihe.net/index.php/Cross-Community_Patient_Discovery """
    
    iheXca = "ihe-xca", """IHE Cross Community Access Profile (XCA) - http://wiki.ihe.net/index.php/Cross-Community_Access """
    
    iheXdr = "ihe-xdr", """IHE Cross-Enterprise Document Reliable Exchange (XDR) - http://wiki.ihe.net/index.php/Cross-enterprise_Document_Reliable_Interchange """
    
    iheXds = "ihe-xds", """IHE Cross-Enterprise Document Sharing (XDS) - http://wiki.ihe.net/index.php/Cross-Enterprise_Document_Sharing """
    
    iheIid = "ihe-iid", """IHE Invoke Image Display (IID) - http://wiki.ihe.net/index.php/Invoke_Image_Display """
    
    dicomWadoRs = "dicom-wado-rs", """DICOMweb RESTful Image Retrieve - http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.5.html """
    
    dicomQidoRs = "dicom-qido-rs", """DICOMweb RESTful Image query - http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html """
    
    dicomStowRs = "dicom-stow-rs", """DICOMweb RESTful image sending and storage - http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.6.html """
    
    dicomWadoUri = "dicom-wado-uri", """DICOMweb Image Retrieve - http://dicom.nema.org/dicom/2013/output/chtml/part18/sect_6.3.html """
    
    hl7FhirRest = "hl7-fhir-rest", """Interact with the server interface using FHIR's RESTful interface. For details on its version/capabilities you should connect the value in Endpoint.address and retrieve the FHIR CapabilityStatement. """
    
    hl7FhirMsg = "hl7-fhir-msg", """Use the servers FHIR Messaging interface. Details can be found on the messaging.html page in the FHIR Specification. The FHIR server's base address is specified in the Endpoint.address property. """
    
    hl7v2Mllp = "hl7v2-mllp", """HL7v2 messages over an LLP TCP connection """
    
    secureEmail = "secure-email", """Email delivery using a digital certificate to encrypt the content using the public key, receiver must have the private key to decrypt the content """
    
    directProject = "direct-project", """Direct Project information - http://wiki.directproject.org/ """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class EndpointPayloadType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/endpoint-payload-type
    """
    
    any = "any", """Any payload type can be used with this endpoint, it is either a payload agnostic infrastructure (such as a storage repository), or some other type of endpoint where payload considerations are internally handled, and not available """
    
    none = "none", """This endpoint does not require any content to be sent; simply connecting to the endpoint is enough notification. This can be used as a 'ping' to wakeup a service to retrieve content, which could be to ensure security considerations are correctly handled """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class EndpointStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/endpoint-status
    """
    
    active = "active", """This endpoint is expected to be active and can be used. """
    
    suspended = "suspended", """This endpoint is temporarily unavailable. """
    
    error = "error", """This endpoint has exceeded connectivity thresholds and is considered in an error state and should no longer be attempted to connect to until corrective action is taken. """
    
    off = "off", """This endpoint is no longer to be used. """
    
    enteredInError = "entered-in-error", """This instance should not have been part of this patient's medical record. """
    
    test = "test", """This endpoint is not intended for production usage. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class EnteralFormulaAdditiveTypeCode(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/entformula-additive
    """
    
    lipid = "lipid", """Modular lipid enteral formula component """
    
    protein = "protein", """Modular protein enteral formula component """
    
    carbohydrate = "carbohydrate", """Modular carbohydrate enteral formula component """
    
    fiber = "fiber", """Modular fiber enteral formula component """
    
    water = "water", """Added water """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class EpisodeOfCareStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/episode-of-care-status
    """
    
    planned = "planned", """This episode of care is planned to start at the date specified in the period.start. During this status, an organization may perform assessments to determine if the patient is eligible to receive services, or be organizing to make resources available to provide care services. """
    
    waitlist = "waitlist", """This episode has been placed on a waitlist, pending the episode being made active (or cancelled). """
    
    active = "active", """This episode of care is current. """
    
    onhold = "onhold", """This episode of care is on hold; the organization has limited responsibility for the patient (such as while on respite). """
    
    finished = "finished", """This episode of care is finished and the organization is not expecting to be providing further care to the patient. Can also be known as "closed", "completed" or other similar terms. """
    
    cancelled = "cancelled", """The episode of care was cancelled, or withdrawn from service, often selected during the planned stage as the patient may have gone elsewhere, or the circumstances have changed and the organization is unable to provide the care. It indicates that services terminated outside the planned/expected workflow. """
    
    enteredInError = "entered-in-error", """This instance should not have been part of this patient's medical record. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class EpisodeOfCareType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/episodeofcare-type
    """
    
    hacc = "hacc", """hacc """
    
    pac = "pac", """pac """
    
    diab = "diab", """diab """
    
    da = "da", """da """
    
    cacp = "cacp", """cacp """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class EventCapabilityMode(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/event-capability-mode
    """
    
    sender = "sender", """The application sends requests and receives responses. """
    
    receiver = "receiver", """The application receives requests and sends responses. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class EventResourceType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/event-resource-types
    """
    
    chargeItem = "ChargeItem", """Item containing charge code(s) associated with the provision of healthcare provider products. """
    
    claimResponse = "ClaimResponse", """Remittance resource. """
    
    clinicalImpression = "ClinicalImpression", """A clinical assessment performed when planning treatments and management strategies for a patient. """
    
    communication = "Communication", """A record of information transmitted from a sender to a receiver. """
    
    composition = "Composition", """A set of resources composed into a single coherent clinical statement with clinical attestation. """
    
    condition = "Condition", """Detailed information about conditions, problems or diagnoses. """
    
    consent = "Consent", """A healthcare consumer's policy choices to permits or denies recipients or roles to perform actions for specific purposes and periods of time. """
    
    coverage = "Coverage", """Insurance or medical plan or a payment agreement. """
    
    deviceUseStatement = "DeviceUseStatement", """Record of use of a device. """
    
    diagnosticReport = "DiagnosticReport", """A Diagnostic report - a combination of request information, atomic results, images, interpretation, as well as formatted reports. """
    
    documentManifest = "DocumentManifest", """A list that defines a set of documents. """
    
    documentReference = "DocumentReference", """A reference to a document. """
    
    encounter = "Encounter", """An interaction during which services are provided to the patient. """
    
    enrollmentResponse = "EnrollmentResponse", """EnrollmentResponse resource. """
    
    episodeOfCare = "EpisodeOfCare", """An association of a Patient with an Organization and  Healthcare Provider(s) for a period of time that the Organization assumes some level of responsibility. """
    
    explanationOfBenefit = "ExplanationOfBenefit", """Explanation of Benefit resource. """
    
    familyMemberHistory = "FamilyMemberHistory", """Information about patient's relatives, relevant for patient. """
    
    guidanceResponse = "GuidanceResponse", """The formal response to a guidance request. """
    
    imagingStudy = "ImagingStudy", """A set of images produced in single study (one or more series of references images). """
    
    immunization = "Immunization", """Immunization event information. """
    
    measureReport = "MeasureReport", """Results of a measure evaluation. """
    
    media = "Media", """A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference. """
    
    medicationAdministration = "MedicationAdministration", """Administration of medication to a patient. """
    
    medicationDispense = "MedicationDispense", """Dispensing a medication to a named patient. """
    
    medicationStatement = "MedicationStatement", """Record of medication being taken by a patient. """
    
    observation = "Observation", """Measurements and simple assertions. """
    
    paymentNotice = "PaymentNotice", """PaymentNotice request. """
    
    paymentReconciliation = "PaymentReconciliation", """PaymentReconciliation resource. """
    
    procedure = "Procedure", """An action that is being or was performed on a patient. """
    
    processResponse = "ProcessResponse", """ProcessResponse resource. """
    
    questionnaireResponse = "QuestionnaireResponse", """A structured set of questions and their answers. """
    
    riskAssessment = "RiskAssessment", """Potential outcomes for a subject with likelihood. """
    
    supplyDelivery = "SupplyDelivery", """Delivery of bulk Supplies. """
    
    task = "Task", """A task to be performed. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class EventStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/event-status
    """
    
    preparation = "preparation", """The core event has not started yet, but some staging activities have begun (e.g. surgical suite preparation).  Preparation stages may be tracked for billing purposes. """
    
    inProgress = "in-progress", """The event is currently occurring. """
    
    notDone = "not-done", """The event was terminated prior to any activity beyond preparation.  I.e. The 'main' activity has not yet begun.  The boundary between preparatory and the 'main' activity is context-specific. """
    
    onHold = "on-hold", """The event has been temporarily stopped but is expected to resume in the future. """
    
    stopped = "stopped", """The event was terminated prior to the full completion of the intended activity but after at least some of the 'main' activity (beyond preparation) has occurred. """
    
    completed = "completed", """The event has now concluded. """
    
    enteredInError = "entered-in-error", """This electronic record should never have existed, though it is possible that real-world decisions were based on it.  (If real-world activity has occurred, the status should be "stopped" rather than "entered-in-error".). """
    
    unknown = "unknown", """The authoring/source system does not know which of the status values currently applies for this event.  Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply,  but the authoring/source system does not know which. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class EventTiming(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/event-timing
    """
    
    MORN = "MORN", """Event occurs during the morning. The exact time is unspecified and established by institution convention or patient interpretation. """
    
    mORNEarly = "MORN.early", """Event occurs during the early morning. The exact time is unspecified and established by institution convention or patient interpretation. """
    
    mORNLate = "MORN.late", """Event occurs during the late morning. The exact time is unspecified and established by institution convention or patient interpretation. """
    
    NOON = "NOON", """Event occurs around 12:00pm. The exact time is unspecified and established by institution convention or patient interpretation. """
    
    AFT = "AFT", """Event occurs during the afternoon. The exact time is unspecified and established by institution convention or patient interpretation. """
    
    aFTEarly = "AFT.early", """Event occurs during the early afternoon. The exact time is unspecified and established by institution convention or patient interpretation. """
    
    aFTLate = "AFT.late", """Event occurs during the late afternoon. The exact time is unspecified and established by institution convention or patient interpretation. """
    
    EVE = "EVE", """Event occurs during the evening. The exact time is unspecified and established by institution convention or patient interpretation. """
    
    eVEEarly = "EVE.early", """Event occurs during the early evening. The exact time is unspecified and established by institution convention or patient interpretation. """
    
    eVELate = "EVE.late", """Event occurs during the late evening. The exact time is unspecified and established by institution convention or patient interpretation. """
    
    NIGHT = "NIGHT", """Event occurs during the night. The exact time is unspecified and established by institution convention or patient interpretation. """
    
    PHS = "PHS", """Event occurs [offset] after subject goes to sleep. The exact time is unspecified and established by institution convention or patient interpretation. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class EvidenceVariableType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/variable-type
    """
    
    dichotomous = "dichotomous", """The variable is dichotomous, such as present or absent. """
    
    continuous = "continuous", """The variable is a continuous result such as a quantity. """
    
    descriptive = "descriptive", """The variable is described narratively rather than quantitatively. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class EvidenceVariantState(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/evidence-variant-state
    """
    
    lowRisk = "low-risk", """low risk estimate. """
    
    mediumRisk = "medium-risk", """medium risk estimate. """
    
    highRisk = "high-risk", """high risk estimate. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ExampleClaimSubTypeCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/ex-claimsubtype
    """
    
    ortho = "ortho", """A claim for Orthodontic Services. """
    
    emergency = "emergency", """A claim for emergency services. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ExampleCoverageFinancialExceptionCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/ex-coverage-financial-exception
    """
    
    retired = "retired", """Retired persons have all copays and deductibles reduced. """
    
    foster = "foster", """Children in the foster care have all copays and deductibles waived. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ExampleDiagnosisOnAdmissionCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/ex-diagnosis-on-admission
    """
    
    Y = "y", """Diagnosis was present at time of inpatient admission. """
    
    N = "n", """Diagnosis was not present at time of inpatient admission. """
    
    U = "u", """Documentation insufficient to determine if condition was present at the time of inpatient admission. """
    
    W = "w", """Clinically undetermined. Provider unable to clinically determine whether the condition was present at the time of inpatient admission. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ExampleDiagnosisTypeCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/ex-diagnosistype
    """
    
    admitting = "admitting", """The diagnosis given as the reason why the patient was admitted to the hospital. """
    
    clinical = "clinical", """A diagnosis made on the basis of medical signs and patient-reported symptoms, rather than diagnostic tests. """
    
    differential = "differential", """One of a set of the possible diagnoses that could be connected to the signs, symptoms, and lab findings. """
    
    discharge = "discharge", """The diagnosis given when the patient is discharged from the hospital. """
    
    laboratory = "laboratory", """A diagnosis based significantly on laboratory reports or test results, rather than the physical examination of the patient. """
    
    nursing = "nursing", """A diagnosis which identifies people's responses to situations in their lives, such as a readiness to change or a willingness to accept assistance. """
    
    prenatal = "prenatal", """A diagnosis determined prior to birth. """
    
    principal = "principal", """The single medical diagnosis that is most relevant to the patient's chief complaint or need for treatment. """
    
    radiology = "radiology", """A diagnosis based primarily on the results from medical imaging studies. """
    
    remote = "remote", """A diagnosis determined using telemedicine techniques. """
    
    retrospective = "retrospective", """The labeling of an illness in a specific historical event using modern knowledge, methods and disease classifications. """
    
    self = "self", """A diagnosis determined by the patient. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ExampleMessageReasonCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/message-reasons-encounter
    """
    
    admit = "admit", """The patient has been admitted. """
    
    discharge = "discharge", """The patient has been discharged. """
    
    absent = "absent", """The patient has temporarily left the institution. """
    
    return_ = "return", """The patient has returned from a temporary absence. """
    
    moved = "moved", """The patient has been moved to a new location. """
    
    edit = "edit", """Encounter details have been updated (e.g. to correct a coding error). """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ExampleOnsetTypeReasonCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/ex-onsettype
    """
    
    lxm = "lxm", """Date of last examination. """
    
    sym = "sym", """Date when symptoms were first noticed. """
    
    lmn = "lmn", """Start date of last menstruation. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ExamplePaymentTypeCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/ex-paymenttype
    """
    
    complete = "complete", """Complete (final) payment of the benefit under the Claim less any adjustments. """
    
    partial = "partial", """Partial payment of the benefit under the Claim less any adjustments. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ExamplePharmacyServiceCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/ex-pharmaservice
    """
    
    smokecess = "smokecess", """Smoking cessation """
    
    flushot = "flushot", """Flu Shot """
    
    drugcost = "drugcost", """The wholesale price of the medication. """
    
    markup = "markup", """The additional cost assessed on the drug. """
    
    dispensefee = "dispensefee", """The professional fee charged for dispensing the product or service. """
    
    compoundfee = "compoundfee", """The professional fee charged for compounding the medication. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ExampleProcedureTypeCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/ex-procedure-type
    """
    
    primary = "primary", """The first procedure in a series required to produce and overall patient outcome. """
    
    secondary = "secondary", """The second procedure in a series required to produce and overall patient outcome. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ExampleProgramReasonCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/ex-programcode
    """
    
    as_ = "as", """Child Asthma Program """
    
    hd = "hd", """Hemodialysis Program. """
    
    auscr = "auscr", """Autism Screening Program. """
    
    none = "none", """No program code applies. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ExampleRelatedClaimRelationshipCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/ex-relatedclaimrelationship
    """
    
    prior = "prior", """A prior claim instance for the same intended suite of services. """
    
    associated = "associated", """A claim for a different suite of services which is related the suite claimed here. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ExampleScenarioActorType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/examplescenario-actor-type
    """
    
    person = "person", """A person. """
    
    entity = "entity", """A system. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ExampleServiceModifierCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/ex-servicemodifier
    """
    
    sr = "sr", """Services provided on the side of the road or such other non-conventional setting. """
    
    ah = "ah", """Services provided outside or normal business hours. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ExampleServiceProductCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/ex-serviceproduct
    """
    
    exam = "exam", """Exam """
    
    flushot = "flushot", """Flu shot """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ExampleUseCodesForList(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/list-example-use-codes
    """
    
    alerts = "alerts", """A list of alerts for the patient. """
    
    adverserxns = "adverserxns", """A list of part adverse reactions. """
    
    allergies = "allergies", """A list of Allergies for the patient. """
    
    medications = "medications", """A list of medication statements for the patient. """
    
    problems = "problems", """A list of problems that the patient is known of have (or have had in the past). """
    
    worklist = "worklist", """A list of items that constitute a set of work to be performed (typically this code would be specialized for more specific uses, such as a ward round list). """
    
    waiting = "waiting", """A list of items waiting for an event (perhaps a surgical patient waiting list). """
    
    protocols = "protocols", """A set of protocols to be followed. """
    
    plans = "plans", """A set of care plans that apply in a particular context of care. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ExampleVisionPrescriptionProductCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/ex-visionprescriptionproduct
    """
    
    lens = "lens", """A lens to be fitted to a frame to comprise a pair of glasses. """
    
    contact = "contact", """A lens to be fitted for wearing directly on an eye. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ExceptionCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/claim-exception
    """
    
    student = "student", """Fulltime Student """
    
    disabled = "disabled", """Disabled """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ExpansionParameterSource(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/expansion-parameter-source
    """
    
    input = "input", """The parameter was supplied by the client in the $expand request. """
    
    server = "server", """The parameter was added by the expansion engine on the server. """
    
    codesystem = "codesystem", """The parameter was added from one the code systems used in the $expand operation. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ExpansionProcessingRule(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/expansion-processing-rule
    """
    
    allCodes = "all-codes", """The expansion (when in UI mode) includes all codes *and* any defined groups (in extensions). """
    
    ungrouped = "ungrouped", """The expanion (when in UI mode) lists the groups, and then any codes that have not been included in a group. """
    
    groupsOnly = "groups-only", """The expansion (when in UI mode) only includes the defined groups. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ExplanationOfBenefitStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/explanationofbenefit-status
    """
    
    active = "active", """The resource instance is currently in-force. """
    
    cancelled = "cancelled", """The resource instance is withdrawn, rescinded or reversed. """
    
    draft = "draft", """A new resource instance the contents of which is not complete. """
    
    enteredInError = "entered-in-error", """The resource instance was entered in error. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ExposureState(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/exposure-state
    """
    
    exposure = "exposure", """used when the results by exposure is describing the results for the primary exposure of interest. """
    
    exposureAlternative = "exposure-alternative", """used when the results by exposure is describing the results for the alternative exposure state, control state or comparator state. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ExpressionLanguage(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/expression-language
    """
    
    textCql = "text/cql", """Clinical Quality Language. """
    
    textFhirpath = "text/fhirpath", """FHIRPath. """
    
    applicationXFhirQuery = "application/x-fhir-query", """FHIR's RESTful query syntax - typically independent of base URL. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ExtensionContextType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/extension-context-type
    """
    
    fhirpath = "fhirpath", """The context is all elements that match the FHIRPath query found in the expression. """
    
    element = "element", """The context is any element that has an ElementDefinition.id that matches that found in the expression. This includes ElementDefinition Ids that have slicing identifiers. The full path for the element is [url]#[elementid]. If there is no #, the Element id is one defined in the base specification. """
    
    extension = "extension", """The context is a particular extension from a particular StructureDefinition, and the expression is just a uri that identifies the extension. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class FHIRDefinedConceptProperties(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/concept-properties
    """
    
    inactive = "inactive", """True if the concept is not considered active - e.g. not a valid concept any more. Property type is boolean, default value is false """
    
    deprecated = "deprecated", """The date at which a concept was deprecated. Concepts that are deprecated but not inactive can still be used, but their use is discouraged, and they should be expected to be made inactive in a future release. Property type is dateTime """
    
    notSelectable = "notSelectable", """The concept is not intended to be chosen by the user - only intended to be used as a selector for other concepts. Note, though, that the interpretation of this is highly contextual; all concepts are selectable in some context. Property type is boolean """
    
    parent = "parent", """The concept identified in this property is a parent of the concept on which it is a property. The property type will be 'code'. The meaning of 'parent' is defined by the hierarchyMeaning attribute """
    
    child = "child", """The concept identified in this property is a child of the concept on which it is a property. The property type will be 'code'. The meaning of 'child' is defined by the hierarchyMeaning attribute """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class FHIRDeviceDefinitionStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/device-definition-status
    """
    
    active = "active", """The device is available for use.  Note: For *implanted devices*  this means that the device is implanted in the patient. """
    
    inactive = "inactive", """The device is no longer available for use (e.g. lost, expired, damaged).  Note: For *implanted devices*  this means that the device has been removed from the patient. """
    
    enteredInError = "entered-in-error", """The device was entered in error and voided. """
    
    unknown = "unknown", """The status of the device has not been determined. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class FHIRDeviceStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/device-status
    """
    
    active = "active", """The device is available for use.  Note: For *implanted devices*  this means that the device is implanted in the patient. """
    
    inactive = "inactive", """The device is no longer available for use (e.g. lost, expired, damaged).  Note: For *implanted devices*  this means that the device has been removed from the patient. """
    
    enteredInError = "entered-in-error", """The device was entered in error and voided. """
    
    unknown = "unknown", """The status of the device has not been determined. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class FHIRDeviceStatusReason(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/device-status-reason
    """
    
    online = "online", """The device is off. """
    
    paused = "paused", """The device is paused. """
    
    standby = "standby", """The device is ready but not actively operating. """
    
    offline = "offline", """The device is offline. """
    
    notReady = "not-ready", """The device is not ready. """
    
    transducDiscon = "transduc-discon", """The device transducer is disconnected. """
    
    hwDiscon = "hw-discon", """The device hardware is disconnected. """
    
    off = "off", """The device is off. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class FHIRRestfulInteractions(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/restful-interaction
    """
    
    read = "read", """Read the current state of the resource. """
    
    vread = "vread", """Read the state of a specific version of the resource. """
    
    update = "update", """Update an existing resource by its id (or create it if it is new). """
    
    patch = "patch", """Update an existing resource by posting a set of changes to it. """
    
    delete = "delete", """Delete a resource. """
    
    history = "history", """Retrieve the change history for a particular resource, type of resource, or the entire system. """
    
    historyInstance = "history-instance", """Retrieve the change history for a particular resource. """
    
    historyType = "history-type", """Retrieve the change history for all resources of a particular type. """
    
    historySystem = "history-system", """Retrieve the change history for all resources on a system. """
    
    create = "create", """Create a new resource with a server assigned id. """
    
    search = "search", """Search a resource type or all resources based on some filter criteria. """
    
    searchType = "search-type", """Search all resources of the specified type based on some filter criteria. """
    
    searchSystem = "search-system", """Search all resources based on some filter criteria. """
    
    capabilities = "capabilities", """Get a Capability Statement for the system. """
    
    transaction = "transaction", """Update, create or delete a set of resources as a single transaction. """
    
    batch = "batch", """perform a set of a separate interactions in a single http operation """
    
    operation = "operation", """Perform an operation as defined by an OperationDefinition. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class FHIRSubstanceStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/substance-status
    """
    
    active = "active", """The substance is considered for use or reference. """
    
    inactive = "inactive", """The substance is considered for reference, but not for use. """
    
    enteredInError = "entered-in-error", """The substance was entered in error. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class FailureAction(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/failure-action
    """
    
    fatal = "fatal", """fatal """
    
    warn = "warn", """warn """
    
    recOnly = "rec-only", """recOnly """
    
    none = "none", """none """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class FamilyHistoryAbsentReason(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/history-absent-reason
    """
    
    subjectUnknown = "subject-unknown", """Patient does not know the subject, e.g. the biological parent of an adopted patient. """
    
    withheld = "withheld", """The patient withheld or refused to share the information. """
    
    unableToObtain = "unable-to-obtain", """Information cannot be obtained; e.g. unconscious patient. """
    
    deferred = "deferred", """Patient does not have the information now, but can provide the information at a later date. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class FamilyHistoryStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/history-status
    """
    
    partial = "partial", """Some health information is known and captured, but not complete - see notes for details. """
    
    completed = "completed", """All available related health information is captured as of the date (and possibly time) when the family member history was taken. """
    
    enteredInError = "entered-in-error", """This instance should not have been part of this patient's medical record. """
    
    healthUnknown = "health-unknown", """Health information for this family member is unavailable/unknown. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class FeedingDeviceCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/feeding-device
    """
    
    standardNipple = "standard-nipple", """Standard nipple definition: """
    
    preemieNipple = "preemie-nipple", """Preemie nipple definition: """
    
    orthoNipple = "ortho-nipple", """Orthodontic nipple definition: """
    
    slofloNipple = "sloflo-nipple", """Slow flow nipple definition: """
    
    midfloNipple = "midflo-nipple", """Middle flow nipple definition: """
    
    bigcutNipple = "bigcut-nipple", """Enlarged, cross-cut nipple definition: """
    
    habermanBottle = "haberman-bottle", """Haberman bottle definition: """
    
    sippyValve = "sippy-valve", """Sippy cup with valve definition: """
    
    sippyNoValve = "sippy-no-valve", """Sippy cup without valve definition: """
    
    provaleCup = "provale-cup", """Provale Cup definition: """
    
    glassLid = "glass-lid", """Glass with lid/sippy cup definition: """
    
    handholdCup = "handhold-cup", """Double handhold on glass/cup definition: """
    
    rubberMat = "rubber-mat", """Rubber matting under tray definition: """
    
    straw = "straw", """Straw definition: """
    
    noseCup = "nose-cup", """Nose cup definition: """
    
    scoopPlate = "scoop-plate", """Scoop plate definition: """
    
    utensilHolder = "utensil-holder", """Hand wrap utensil holder definition: """
    
    foamHandle = "foam-handle", """Foam handle utensils definition: """
    
    angledUtensil = "angled-utensil", """Angled utensils definition: """
    
    spoutCup = "spout-cup", """Spout cup definition: """
    
    autofeedingDevice = "autofeeding-device", """Automated feeding devices definition: """
    
    rockerKnife = "rocker-knife", """Rocker knife definition: """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class FilterOperator(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/filter-operator
    """
    
    eq = "=", """The specified property of the code equals the provided value. """
    
    isA = "is-a", """Includes all concept ids that have a transitive is-a relationship with the concept Id provided as the value, including the provided concept itself (include descendant codes and self). """
    
    descendentOf = "descendent-of", """Includes all concept ids that have a transitive is-a relationship with the concept Id provided as the value, excluding the provided concept itself i.e. include descendant codes only). """
    
    isNotA = "is-not-a", """The specified property of the code does not have an is-a relationship with the provided value. """
    
    regex = "regex", """The specified property of the code  matches the regex specified in the provided value. """
    
    in_ = "in", """The specified property of the code is in the set of codes or concepts specified in the provided value (comma separated list). """
    
    notIn = "not-in", """The specified property of the code is not in the set of codes or concepts specified in the provided value (comma separated list). """
    
    generalizes = "generalizes", """Includes all concept ids that have a transitive is-a relationship from the concept Id provided as the value, including the provided concept itself (i.e. include ancestor codes and self). """
    
    exists = "exists", """The specified property of the code has at least one value (if the specified value is true; if the specified value is false, then matches when the specified property of the code has no values). """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class FinancialResourceStatusCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/fm-status
    """
    
    active = "active", """The instance is currently in-force. """
    
    cancelled = "cancelled", """The instance is withdrawn, rescinded or reversed. """
    
    draft = "draft", """A new instance the contents of which is not complete. """
    
    enteredInError = "entered-in-error", """The instance was entered in error. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class FinancialTaskCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/financialtaskcode
    """
    
    cancel = "cancel", """Cancel or reverse a resource, such as a claim or preauthorization, which is in-process or complete. """
    
    poll = "poll", """Retrieve selected or all queued resources or messages. """
    
    release = "release", """Release any reserved funds or material obligations associated with a resource. For example, any unused but reserved funds or treatment allowance associated with a preauthorization once treatment is complete. """
    
    reprocess = "reprocess", """Indication that the processing of a resource, such as a claim, for some or all of the required work is now being requested. """
    
    status = "status", """Check on the processing status of a resource such as the adjudication of a claim. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class FinancialTaskInputTypeCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/financialtaskinputtype
    """
    
    include = "include", """The name of a resource to include in a selection. """
    
    exclude = "exclude", """The name of a resource to not include in a selection. """
    
    origresponse = "origresponse", """A reference to the response resource to the original processing of a resource. """
    
    reference = "reference", """A reference value which must be quoted to authorize an action. """
    
    item = "item", """The sequence number associated with an item for reprocessing. """
    
    period = "period", """The reference period for the action being requested. """
    
    status = "status", """The processing status from a check on the processing status of a resource such as the adjudication of a claim. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class FlagCategory(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/flag-category
    """
    
    diet = "diet", """Flags related to the subject's dietary needs. """
    
    drug = "drug", """Flags related to the subject's medications. """
    
    lab = "lab", """Flags related to performing laboratory tests and related processes (e.g. phlebotomy). """
    
    admin = "admin", """Flags related to administrative and financial processes. """
    
    contact = "contact", """Flags related to coming into contact with the patient. """
    
    clinical = "clinical", """Flags related to the subject's clinical data. """
    
    behavioral = "behavioral", """Flags related to behavior. """
    
    research = "research", """Flags related to research. """
    
    advanceDirective = "advance-directive", """Flags related to subject's advance directives. """
    
    safety = "safety", """Flags related to safety precautions. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class FlagPriorityCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/flag-priority-code
    """
    
    PN = "PN", """No alarm. """
    
    PL = "PL", """Low priority. """
    
    PM = "PM", """Medium priority. """
    
    PH = "PH", """High priority. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class FlagStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/flag-status
    """
    
    active = "active", """A current flag that should be displayed to a user. A system may use the category to determine which user roles should view the flag. """
    
    inactive = "inactive", """The flag no longer needs to be displayed. """
    
    enteredInError = "entered-in-error", """The flag was added in error and should no longer be displayed. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class GenderIdentity(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/gender-identity
    """
    
    transgenderFemale = "transgender-female", """the patient identifies as transgender male-to-female """
    
    transgenderMale = "transgender-male", """the patient identifies as transgender female-to-male """
    
    nonBinary = "non-binary", """the patient identifies with neither/both female and male """
    
    male = "male", """the patient identifies as male """
    
    female = "female", """the patient identifies as female """
    
    other = "other", """other gender identity """
    
    nonDisclose = "non-disclose", """the patient does not wish to disclose his gender identity """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class GenderStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/animal-genderstatus
    """
    
    neutered = "neutered", """The animal has been sterilized, castrated or otherwise made infertile. """
    
    intact = "intact", """The animal's reproductive organs are intact. """
    
    unknown = "unknown", """Unable to determine whether the animal has been neutered. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class GoalAcceptanceStatus(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/goal-acceptance-status
    """
    
    agree = "agree", """Stakeholder supports pursuit of the goal. """
    
    disagree = "disagree", """Stakeholder is not in support of the pursuit of the goal. """
    
    pending = "pending", """Stakeholder has not yet made a decision on whether they support the goal. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class GoalAchievementStatus(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/goal-achievement
    """
    
    inProgress = "in-progress", """The goal is being sought but has not yet been reached. (Also applies if the goal was reached in the past but there has been regression and the goal is again being sought). """
    
    improving = "improving", """The goal is being sought, and is progressing. """
    
    worsening = "worsening", """The goal is being sought, but is regressing. """
    
    noChange = "no-change", """The goal is being sought, but the trend is flat. """
    
    achieved = "achieved", """The goal has been met. """
    
    sustaining = "sustaining", """The goal has been met, but ongoing activity is needed to sustain the goal objective. """
    
    notAchieved = "not-achieved", """The goal has not been met and there might or might not have been progress towards target. """
    
    noProgress = "no-progress", """The goal has not been met and little to no progress towards target. """
    
    notAttainable = "not-attainable", """The goal is not possible to be met. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class GoalCategory(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/goal-category
    """
    
    dietary = "dietary", """Goals related to the consumption of food and/or beverages. """
    
    safety = "safety", """Goals related to the personal protection of the subject. """
    
    behavioral = "behavioral", """Goals related to the manner in which the subject acts. """
    
    nursing = "nursing", """Goals related to the practice of nursing or established by nurses. """
    
    physiotherapy = "physiotherapy", """Goals related to the mobility and/or motor capability of the subject. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class GoalLifecycleStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/goal-status
    """
    
    proposed = "proposed", """A goal is proposed for this patient. """
    
    planned = "planned", """A goal is planned for this patient. """
    
    accepted = "accepted", """A proposed goal was accepted or acknowledged. """
    
    active = "active", """The goal is being sought actively. """
    
    onHold = "on-hold", """The goal remains a long term objective but is no longer being actively pursued for a temporary period of time. """
    
    completed = "completed", """The goal is no longer being sought. """
    
    cancelled = "cancelled", """The goal has been abandoned. """
    
    enteredInError = "entered-in-error", """The goal was entered in error and voided. """
    
    rejected = "rejected", """A proposed goal was rejected. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class GoalPriority(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/goal-priority
    """
    
    highPriority = "high-priority", """Indicates that the goal is of considerable importance and should be a primary focus of care delivery. """
    
    mediumPriority = "medium-priority", """Indicates that the goal has a reasonable degree of importance and that concrete action should be taken towards the goal.  Attainment is not as critical as high-priority goals. """
    
    lowPriority = "low-priority", """The goal is desirable but is not sufficiently important to devote significant resources to.  Achievement of the goal may be sought when incidental to achieving other goals. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class GoalRelationshipType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/goal-relationship-type
    """
    
    predecessor = "predecessor", """Indicates that the target goal is one which must be met before striving for the current goal. """
    
    successor = "successor", """Indicates that the target goal is a desired objective once the current goal is met. """
    
    replacement = "replacement", """Indicates that this goal has been replaced by the target goal. """
    
    milestone = "milestone", """Indicates that the target goal is considered to be a "piece" of attaining this goal. """
    
    other = "other", """Indicates that the relationship is not covered by one of the pre-defined codes.  (An extension may convey more information about the meaning of the relationship.). """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class GoalStatusReason(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/goal-status-reason
    """
    
    surgery = "surgery", """Goal suspended or ended because of a surgical procedure. """
    
    lifeEvent = "life-event", """Goal suspended or ended because of a significant life event (marital change, bereavement, etc.). """
    
    replaced = "replaced", """Goal has been superseded by a new goal. """
    
    patientRequest = "patient-request", """Patient wishes the goal to be set aside, at least temporarily. """
    
    tempNotAttainable = "temp-not-attainable", """Goal cannot be reached temporarily. """
    
    permanentNotAttainable = "permanent-not-attainable", """Goal cannot be reached permanently. """
    
    financialBarrier = "financial-barrier", """Goal cannot be reached due to financial barrier or reason. """
    
    lackOfTransportation = "lack-of-transportation", """Goal cannot be reached due to a lack of transportation. """
    
    lackOfSocialSupport = "lack-of-social-support", """Goal cannot be reached due to a lack of social support. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class GraphCompartmentRule(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/graph-compartment-rule
    """
    
    identical = "identical", """The compartment must be identical (the same literal reference). """
    
    matching = "matching", """The compartment must be the same - the record must be about the same patient, but the reference may be different. """
    
    different = "different", """The compartment must be different. """
    
    custom = "custom", """The compartment rule is defined in the accompanying FHIRPath expression. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class GraphCompartmentUse(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/graph-compartment-use
    """
    
    condition = "condition", """This compartment rule is a condition for whether the rule applies. """
    
    requirement = "requirement", """This compartment rule is enforced on any relationships that meet the conditions. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class GroupMeasure(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/group-measure
    """
    
    mean = "mean", """Aggregated using Mean of participant values. """
    
    median = "median", """Aggregated using Median of participant values. """
    
    meanOfMean = "mean-of-mean", """Aggregated using Mean of study mean values. """
    
    meanOfMedian = "mean-of-median", """Aggregated using Mean of study median values. """
    
    medianOfMean = "median-of-mean", """Aggregated using Median of study mean values. """
    
    medianOfMedian = "median-of-median", """Aggregated using Median of study median values. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class GroupType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/group-type
    """
    
    person = "person", """Group contains "person" Patient resources. """
    
    animal = "animal", """Group contains "animal" Patient resources. """
    
    practitioner = "practitioner", """Group contains healthcare practitioner resources (Practitioner or PractitionerRole). """
    
    device = "device", """Group contains Device resources. """
    
    medication = "medication", """Group contains Medication resources. """
    
    substance = "substance", """Group contains Substance resources. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class GuidanceResponseStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/guidance-response-status
    """
    
    success = "success", """The request was processed successfully. """
    
    dataRequested = "data-requested", """The request was processed successfully, but more data may result in a more complete evaluation. """
    
    dataRequired = "data-required", """The request was processed, but more data is required to complete the evaluation. """
    
    inProgress = "in-progress", """The request is currently being processed. """
    
    failure = "failure", """The request was not processed successfully. """
    
    enteredInError = "entered-in-error", """The response was entered in error. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class GuidePageGeneration(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/guide-page-generation
    """
    
    html = "html", """Page is proper xhtml with no templating.  Will be brought across unchanged for standard post-processing. """
    
    markdown = "markdown", """Page is markdown with templating.  Will use the template to create a file that imports the markdown file prior to post-processing. """
    
    xml = "xml", """Page is xml with templating.  Will use the template to create a file that imports the source file and run the nominated XSLT transform (see parameters) if present prior to post-processing. """
    
    generated = "generated", """Page will be generated by the publication process - no source to bring across. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class GuideParameterCode(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/guide-parameter-code
    """
    
    apply = "apply", """If the value of this string 0..* parameter is one of the metadata fields then all conformance resources will have any specified [Resource].[field] overwritten with the ImplementationGuide.[field], where field is one of: version, date, status, publisher, contact, copyright, experimental, jurisdiction, useContext. """
    
    pathResource = "path-resource", """The value of this string 0..* parameter is a subfolder of the build context's location that is to be scanned to load resources. Scope is (if present) a particular resource type. """
    
    pathPages = "path-pages", """The value of this string 0..1 parameter is a subfolder of the build context's location that contains files that are part of the html content processed by the builder. """
    
    pathTxCache = "path-tx-cache", """The value of this string 0..1 parameter is a subfolder of the build context's location that is used as the terminology cache. If this is not present, the terminology cache is on the local system, not under version control. """
    
    expansionParameter = "expansion-parameter", """The value of this string 0..* parameter is a parameter (name=value) when expanding value sets for this implementation guide. This is particularly used to specify the versions of published terminologies such as SNOMED CT. """
    
    ruleBrokenLinks = "rule-broken-links", """The value of this string 0..1 parameter is either "warning" or "error" (default = "error"). If the value is "warning" then IG build tools allow the IG to be considered successfully build even when there is no internal broken links. """
    
    generateXml = "generate-xml", """The value of this boolean 0..1 parameter specifies whether the IG publisher creates examples in XML format. If not present, the Publication Tool decides whether to generate XML. """
    
    generateJson = "generate-json", """The value of this boolean 0..1 parameter specifies whether the IG publisher creates examples in JSON format. If not present, the Publication Tool decides whether to generate JSON. """
    
    generateTurtle = "generate-turtle", """The value of this boolean 0..1 parameter specifies whether the IG publisher creates examples in Turtle format. If not present, the Publication Tool decides whether to generate Turtle. """
    
    htmlTemplate = "html-template", """The value of this string singleton parameter is the name of the file to use as the builder template for each generated page (see templating). """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class HL7Workgroup(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/hl7-work-group
    """
    
    cbcc = "cbcc", """Community Based Collaborative Care (http://www.hl7.org/Special/committees/cbcc/index.cfm). """
    
    cds = "cds", """Clinical Decision Support (http://www.hl7.org/Special/committees/dss/index.cfm). """
    
    cqi = "cqi", """Clinical Quality Information (http://www.hl7.org/Special/committees/cqi/index.cfm). """
    
    cg = "cg", """Clinical Genomics (http://www.hl7.org/Special/committees/clingenomics/index.cfm). """
    
    dev = "dev", """Health Care Devices (http://www.hl7.org/Special/committees/healthcaredevices/index.cfm). """
    
    ehr = "ehr", """Electronic Health Records (http://www.hl7.org/special/committees/ehr/index.cfm). """
    
    fhir = "fhir", """FHIR Infrastructure (http://www.hl7.org/Special/committees/fiwg/index.cfm). """
    
    fm = "fm", """Financial Management (http://www.hl7.org/Special/committees/fm/index.cfm). """
    
    hsi = "hsi", """Health Standards Integration (http://www.hl7.org/Special/committees/hsi/index.cfm). """
    
    ii = "ii", """Imaging Integration (http://www.hl7.org/Special/committees/imagemgt/index.cfm). """
    
    inm = "inm", """Infrastructure And Messaging (http://www.hl7.org/special/committees/inm/index.cfm). """
    
    its = "its", """Implementable Technology Specifications (http://www.hl7.org/special/committees/xml/index.cfm). """
    
    mnm = "mnm", """Modeling and Methodology (http://www.hl7.org/Special/committees/mnm/index.cfm). """
    
    oo = "oo", """Orders and Observations (http://www.hl7.org/Special/committees/orders/index.cfm). """
    
    pa = "pa", """Patient Administration (http://www.hl7.org/Special/committees/pafm/index.cfm). """
    
    pc = "pc", """Patient Care (http://www.hl7.org/Special/committees/patientcare/index.cfm). """
    
    pher = "pher", """Public Health and Emergency Response (http://www.hl7.org/Special/committees/pher/index.cfm). """
    
    phx = "phx", """Pharmacy (http://www.hl7.org/Special/committees/medication/index.cfm). """
    
    brr = "brr", """Biomedical Research and Regulation (http://www.hl7.org/Special/committees/rcrim/index.cfm). """
    
    sd = "sd", """Structured Documents (http://www.hl7.org/Special/committees/structure/index.cfm). """
    
    sec = "sec", """Security (http://www.hl7.org/Special/committees/secure/index.cfm). """
    
    us = "us", """US Realm Taskforce (http://www.hl7.org/Special/committees/usrealm/index.cfm). """
    
    vocab = "vocab", """Vocabulary (http://www.hl7.org/Special/committees/Vocab/index.cfm). """
    
    aid = "aid", """Application Implementation and Design (http://www.hl7.org/Special/committees/java/index.cfm). """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class HTTPVerb(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/http-verb
    """
    
    GET = "GET", """HTTP GET Command. """
    
    HEAD = "HEAD", """HTTP HEAD Command. """
    
    POST = "POST", """HTTP POST Command. """
    
    PUT = "PUT", """HTTP PUT Command. """
    
    DELETE = "DELETE", """HTTP DELETE Command. """
    
    PATCH = "PATCH", """HTTP PATCH Command. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class HandlingConditionSet(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/handling-condition
    """
    
    room = "room", """room temperature. """
    
    refrigerated = "refrigerated", """refrigerated temperature. """
    
    frozen = "frozen", """frozen temperature. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class HumanNameAssemblyOrder(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/name-assembly-order
    """
    
    NL1 = "NL1", """NL1 """
    
    NL2 = "NL2", """NL2 """
    
    NL3 = "NL3", """NL3 """
    
    NL4 = "NL4", """NL4 """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ISO210892017HealthRecordLifecycleEvents(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle
    """
    
    access = "access", """Occurs when an agent causes the system to obtain and open a record entry for inspection or review. """
    
    hold = "hold", """Occurs when an agent causes the system to tag or otherwise indicate special access management and suspension of record entry deletion/destruction, if deemed relevant to a lawsuit or which are reasonably anticipated to be relevant or to fulfill organizational policy under the legal doctrine of “duty to preserve”. """
    
    amend = "amend", """Occurs when an agent makes any change to record entry content currently residing in storage considered permanent (persistent). """
    
    archive = "archive", """Occurs when an agent causes the system to create and move archive artifacts containing record entry content, typically to long-term offline storage. """
    
    attest = "attest", """Occurs when an agent causes the system to capture the agent’s digital signature (or equivalent indication) during formal validation of record entry content. """
    
    decrypt = "decrypt", """Occurs when an agent causes the system to decode record entry content from a cipher. """
    
    deidentify = "deidentify", """Occurs when an agent causes the system to scrub record entry content to reduce the association between a set of identifying data and the data subject in a way that might or might not be reversible. """
    
    deprecate = "deprecate", """Occurs when an agent causes the system to tag record entry(ies) as obsolete, erroneous or untrustworthy, to warn against its future use. """
    
    destroy = "destroy", """Occurs when an agent causes the system to permanently erase record entry content from the system. """
    
    disclose = "disclose", """Occurs when an agent causes the system to release, transfer, provision access to, or otherwise divulge record entry content. """
    
    encrypt = "encrypt", """Occurs when an agent causes the system to encode record entry content in a cipher. """
    
    extract = "extract", """Occurs when an agent causes the system to selectively pull out a subset of record entry content, based on explicit criteria. """
    
    link = "link", """Occurs when an agent causes the system to connect related record entries. """
    
    merge = "merge", """Occurs when an agent causes the system to combine or join content from two or more record entries, resulting in a single logical record entry. """
    
    originate = "originate", """Occurs when an agent causes the system to: a) initiate capture of potential record content, and b) incorporate that content into the storage considered a permanent part of the health record. """
    
    pseudonymize = "pseudonymize", """Occurs when an agent causes the system to remove record entry content to reduce the association between a set of identifying data and the data subject in a way that may be reversible. """
    
    reactivate = "reactivate", """Occurs when an agent causes the system to recreate or restore full status to record entries previously deleted or deprecated. """
    
    receive = "receive", """Occurs when an agent causes the system to a) initiate capture of data content from elsewhere, and b) incorporate that content into the storage considered a permanent part of the health record. """
    
    reidentify = "reidentify", """Occurs when an agent causes the system to restore information to data that allows identification of information source and/or information subject. """
    
    unhold = "unhold", """Occurs when an agent causes the system to remove a tag or other cues for special access management had required to fulfill organizational policy under the legal doctrine of “duty to preserve”. """
    
    report = "report", """Occurs when an agent causes the system to produce and deliver record entry content in a particular form and manner. """
    
    restore = "restore", """Occurs when an agent causes the system to recreate record entries and their content from a previous created archive artefact. """
    
    transform = "transform", """Occurs when an agent causes the system to change the form, language or code system used to represent record entry content. """
    
    transmit = "transmit", """Occurs when an agent causes the system to send record entry content from one (EHR/PHR/other) system to another. """
    
    unlink = "unlink", """Occurs when an agent causes the system to disconnect two or more record entries previously connected, rendering them separate (disconnected) again. """
    
    unmerge = "unmerge", """Occurs when an agent causes the system to reverse a previous record entry merge operation, rendering them separate again. """
    
    verify = "verify", """Occurs when an agent causes the system to confirm compliance of data or data objects with regulations, requirements, specifications, or other imposed conditions based on organizational policy. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class IdentifierUse(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/identifier-use
    """
    
    usual = "usual", """The identifier recommended for display and use in real-world interactions. """
    
    official = "official", """The identifier considered to be most trusted for the identification of this item. Sometimes also known as "primary" and "main". The determination of "official" is subjective and implementation guides often provide additional guidelines for use. """
    
    temp = "temp", """A temporary identifier. """
    
    secondary = "secondary", """An identifier that was assigned in secondary use - it serves to identify the object in a relative context, but cannot be consistently assigned to the same object again in a different context. """
    
    old = "old", """The identifier id no longer considered valid, but may be relevant for search purposes.  E.g. Changes to identifier schemes, account merges, etc. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class IdentityAssuranceLevel(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/identity-assuranceLevel
    """
    
    level1 = "level1", """Little or no confidence in the asserted identity's accuracy. """
    
    level2 = "level2", """Some confidence in the asserted identity's accuracy. """
    
    level3 = "level3", """High confidence in the asserted identity's accuracy. """
    
    level4 = "level4", """Very high confidence in the asserted identity's accuracy. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ImagingStudyStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/imagingstudy-status
    """
    
    registered = "registered", """The existence of the imaging study is registered, but there is nothing yet available. """
    
    available = "available", """At least one instance has been associated with this imaging study. """
    
    cancelled = "cancelled", """The imaging study is unavailable because the imaging study was not started or not completed (also sometimes called "aborted"). """
    
    enteredInError = "entered-in-error", """The imaging study has been withdrawn following a previous final release.  This electronic record should never have existed, though it is possible that real-world decisions were based on it. (If real-world activity has occurred, the status should be "cancelled" rather than "entered-in-error".). """
    
    unknown = "unknown", """The system does not know which of the status values currently applies for this request. Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, it's just not known which one. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ImmunizationEvaluationDoseStatusCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/immunization-evaluation-dose-status
    """
    
    valid = "valid", """The dose counts toward fulfilling a path to immunity for a patient, providing protection against the target disease. """
    
    notvalid = "notvalid", """The dose does not count toward fulfilling a path to immunity for a patient. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ImmunizationEvaluationDoseStatusReasonCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/immunization-evaluation-dose-status-reason
    """
    
    advstorage = "advstorage", """The product was stored in a manner inconsistent with manufacturer guidelines potentially reducing the effectiveness of the product. """
    
    coldchbrk = "coldchbrk", """The product was stored at a temperature inconsistent with manufacturer guidelines potentially reducing the effectiveness of the product. """
    
    explot = "explot", """The product was administered after the expiration date associated with lot of vaccine. """
    
    outsidesched = "outsidesched", """The product was administered at a time inconsistent with the documented schedule. """
    
    prodrecall = "prodrecall", """The product administered has been recalled by the manufacturer. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ImmunizationFundingSource(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/immunization-funding-source
    """
    
    private = "private", """The vaccine was purchased with private funds. """
    
    public = "public", """The vaccine was purchased with public funds. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ImmunizationOriginCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/immunization-origin
    """
    
    provider = "provider", """The data for the immunization event originated with another provider. """
    
    record = "record", """The data for the immunization event originated with a written record for the patient. """
    
    recall = "recall", """The data for the immunization event originated from the recollection of the patient or parent/guardian of the patient. """
    
    school = "school", """The data for the immunization event originated with a school record for the patient. """
    
    jurisdiction = "jurisdiction", """The data for the immunization event originated with an immunization information system (IIS) or registry operating within the jurisdiction. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ImmunizationProgramEligibility(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/immunization-program-eligibility
    """
    
    ineligible = "ineligible", """The patient is not eligible for the funding program. """
    
    uninsured = "uninsured", """The patient is eligible for the funding program because they are uninsured. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ImmunizationRecommendationStatusCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/immunization-recommendation-status
    """
    
    due = "due", """The patient is due for their next vaccination. """
    
    overdue = "overdue", """The patient is considered overdue for their next vaccination. """
    
    immune = "immune", """The patient is immune to the target disease and further immunization against the disease is not likely to provide benefit. """
    
    contraindicated = "contraindicated", """The patient is contraindicated for futher doses. """
    
    complete = "complete", """The patient is fully protected and no further doses are recommended. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ImmunizationSubpotentReason(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/immunization-subpotent-reason
    """
    
    partial = "partial", """The full volume of the dose was not administered to the patient. """
    
    coldchainbreak = "coldchainbreak", """The vaccine experienced a cold chain break. """
    
    recall = "recall", """The vaccine was recalled by the manufacturer. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ImplantStatus(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/implantStatus
    """
    
    functional = "functional", """The implanted device is working normally. """
    
    nonFunctional = "non-functional", """The implanted device is not working. """
    
    disabled = "disabled", """The implanted device has been turned off. """
    
    unknown = "unknown", """the functional status of the implant has not been determined. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class Indicator(str, DocEnum):
    """ Defining URL : http://cds-hooks.hl7.org/CodeSystem/indicator
    """
    
    info = "info", """info """
    
    warning = "warning", """warning """
    
    critical = "critical", """critical """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class InterventionCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/intervention
    """
    
    unknown = "unknown", """Unknown """
    
    other = "other", """Other """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class InvoicePriceComponentType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/invoice-priceComponentType
    """
    
    base = "base", """the amount is the base price used for calculating the total price before applying surcharges, discount or taxes. """
    
    surcharge = "surcharge", """the amount is a surcharge applied on the base price. """
    
    deduction = "deduction", """the amount is a deduction applied on the base price. """
    
    discount = "discount", """the amount is a discount applied on the base price. """
    
    tax = "tax", """the amount is the tax component of the total price. """
    
    informational = "informational", """the amount is of informational character, it has not been applied in the calculation of the total price. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class InvoiceStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/invoice-status
    """
    
    draft = "draft", """the invoice has been prepared but not yet finalized. """
    
    issued = "issued", """the invoice has been finalized and sent to the recipient. """
    
    balanced = "balanced", """the invoice has been balaced / completely paid. """
    
    cancelled = "cancelled", """the invoice was cancelled. """
    
    enteredInError = "entered-in-error", """the invoice was determined as entered in error before it was issued. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class IssueSeverity(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/issue-severity
    """
    
    fatal = "fatal", """The issue caused the action to fail and no further checking could be performed. """
    
    error = "error", """The issue is sufficiently important to cause the action to fail. """
    
    warning = "warning", """The issue is not important enough to cause the action to fail but may cause it to be performed suboptimally or in a way that is not as desired. """
    
    information = "information", """The issue has no relation to the degree of success of the action. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class IssueType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/issue-type
    """
    
    invalid = "invalid", """Content invalid against the specification or a profile. """
    
    structure = "structure", """A structural issue in the content such as wrong namespace, unable to parse the content completely, invalid syntax, etc. """
    
    required = "required", """A required element is missing. """
    
    value = "value", """An element or header value is invalid. """
    
    invariant = "invariant", """A content validation rule failed - e.g. a schematron rule. """
    
    security = "security", """An authentication/authorization/permissions issue of some kind. """
    
    login = "login", """The client needs to initiate an authentication process. """
    
    unknown = "unknown", """The user or system was not able to be authenticated (either there is no process, or the proferred token is unacceptable). """
    
    expired = "expired", """User session expired; a login may be required. """
    
    forbidden = "forbidden", """The user does not have the rights to perform this action. """
    
    suppressed = "suppressed", """Some information was not or might not have been returned due to business rules, consent or privacy rules, or access permission constraints.  This information may be accessible through alternate processes. """
    
    processing = "processing", """Processing issues. These are expected to be final e.g. there is no point resubmitting the same content unchanged. """
    
    notSupported = "not-supported", """The interaction, operation, resource or profile is not supported. """
    
    duplicate = "duplicate", """An attempt was made to create a duplicate record. """
    
    multipleMatches = "multiple-matches", """Multiple matching records were found when the operation required only one match. """
    
    notFound = "not-found", """The reference provided was not found. In a pure RESTful environment, this would be an HTTP 404 error, but this code may be used where the content is not found further into the application architecture. """
    
    deleted = "deleted", """The reference pointed to content (usually a resource) that has been deleted. """
    
    tooLong = "too-long", """Provided content is too long (typically, this is a denial of service protection type of error). """
    
    codeInvalid = "code-invalid", """The code or system could not be understood, or it was not valid in the context of a particular ValueSet.code. """
    
    extension = "extension", """An extension was found that was not acceptable, could not be resolved, or a modifierExtension was not recognized. """
    
    tooCostly = "too-costly", """The operation was stopped to protect server resources; e.g. a request for a value set expansion on all of SNOMED CT. """
    
    businessRule = "business-rule", """The content/operation failed to pass some business rule and so could not proceed. """
    
    conflict = "conflict", """Content could not be accepted because of an edit conflict (i.e. version aware updates). (In a pure RESTful environment, this would be an HTTP 409 error, but this code may be used where the conflict is discovered further into the application architecture.). """
    
    transient = "transient", """Transient processing issues. The system receiving the message may be able to resubmit the same content once an underlying issue is resolved. """
    
    lockError = "lock-error", """A resource/record locking failure (usually in an underlying database). """
    
    noStore = "no-store", """The persistent store is unavailable; e.g. the database is down for maintenance or similar action, and the interaction or operation cannot be processed. """
    
    exception = "exception", """An unexpected internal error has occurred. """
    
    timeout = "timeout", """An internal timeout has occurred. """
    
    incomplete = "incomplete", """Not all data sources typically accessed could be reached or responded in time, so the returned information might not be complete (applies to search interactions and some operations). """
    
    throttled = "throttled", """The system is not prepared to handle this request due to load management. """
    
    informational = "informational", """A message unrelated to the processing success of the completed operation (examples of the latter include things like reminders of password expiry, system maintenance times, etc.). """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class KnowledgeResourceType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/knowledge-resource-types
    """
    
    activityDefinition = "ActivityDefinition", """The definition of a specific activity to be taken, independent of any particular patient or context. """
    
    codeSystem = "CodeSystem", """A set of codes drawn from one or more code systems. """
    
    conceptMap = "ConceptMap", """A map from one set of concepts to one or more other concepts. """
    
    library = "Library", """Represents a library of quality improvement components. """
    
    measure = "Measure", """A quality measure definition. """
    
    planDefinition = "PlanDefinition", """The definition of a plan for a series of actions, independent of any specific patient or context. """
    
    structureDefinition = "StructureDefinition", """Structural Definition. """
    
    structureMap = "StructureMap", """A Map of relationships between 2 structures that can be used to transform data. """
    
    valueSet = "ValueSet", """A set of codes drawn from one or more code systems. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class LanguagePreferenceType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/language-preference-type
    """
    
    verbal = "verbal", """The patient prefers to verbally communicate with the associated language. """
    
    written = "written", """The patient prefers to communicate in writing with the associated language. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class LibraryType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/library-type
    """
    
    logicLibrary = "logic-library", """The resource is a shareable library of formalized knowledge. """
    
    modelDefinition = "model-definition", """The resource is a definition of an information model. """
    
    assetCollection = "asset-collection", """The resource is a collection of knowledge assets. """
    
    moduleDefinition = "module-definition", """The resource defines the dependencies, parameters, and data requirements for a particular module or evaluation context. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class LinkType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/link-type
    """
    
    replacedBy = "replaced-by", """The patient resource containing this link must no longer be used. The link points forward to another patient resource that must be used in lieu of the patient resource that contains this link. """
    
    replaces = "replaces", """The patient resource containing this link is the current active patient record. The link points back to an inactive patient resource that has been merged into this resource, and should be consulted to retrieve additional referenced information. """
    
    refer = "refer", """The patient resource containing this link is in use and valid but not considered the main source of information about a patient. The link points forward to another patient resource that should be consulted to retrieve additional patient information. """
    
    seealso = "seealso", """The patient resource containing this link is in use and valid, but points to another patient resource that is known to contain data about the same person. Data in this resource might overlap or contradict information found in the other patient resource. This link does not indicate any relative importance of the resources concerned, and both should be regarded as equally valid. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class LinkageType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/linkage-type
    """
    
    source = "source", """The resource represents the "source of truth" (from the perspective of this Linkage resource) for the underlying event/condition/etc. """
    
    alternate = "alternate", """The resource represents an alternative view of the underlying event/condition/etc.  The resource may still be actively maintained, even though it is not considered to be the source of truth. """
    
    historical = "historical", """The resource represents an obsolete record of the underlying event/condition/etc.  It is not expected to be actively maintained. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ListEmptyReasons(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/list-empty-reason
    """
    
    nilknown = "nilknown", """Clinical judgment that there are no known items for this list after reasonable investigation. Note that this a positive statement by a clinical user, and not a default position asserted by a computer system in the lack of other information. Example uses:  * For allergies: the patient or patient's agent/guardian has asserted that he/she is not aware of any allergies (NKA - nil known allergies)  * For medications: the patient or patient's agent/guardian has asserted that the patient is known to be taking no medications  * For diagnoses, problems and procedures: the patient or patient's agent/guardian has asserted that there is no known event to record. """
    
    notasked = "notasked", """The investigation to find out whether there are items for this list has not occurred. """
    
    withheld = "withheld", """The content of the list was not provided due to privacy or confidentiality concerns. Note that it should not be assumed that this means that the particular information in question was withheld due to its contents - it can also be a policy decision. """
    
    unavailable = "unavailable", """Information to populate this list cannot be obtained; e.g. unconscious patient. """
    
    notstarted = "notstarted", """The work to populate this list has not yet begun. """
    
    closed = "closed", """This list has now closed or has ceased to be relevant or useful. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ListMode(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/list-mode
    """
    
    working = "working", """This list is the master list, maintained in an ongoing fashion with regular updates as the real world list it is tracking changes. """
    
    snapshot = "snapshot", """This list was prepared as a snapshot. It should not be assumed to be current. """
    
    changes = "changes", """A point-in-time list that shows what changes have been made or recommended.  E.g. a discharge medication list showing what was added and removed during an encounter. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ListOrderCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/list-order
    """
    
    user = "user", """The list was sorted by a user. The criteria the user used are not specified. """
    
    system = "system", """The list was sorted by the system. The criteria the user used are not specified; define additional codes to specify a particular order (or use other defined codes). """
    
    eventDate = "event-date", """The list is sorted by the data of the event. This can be used when the list has items which are dates with past or future events. """
    
    entryDate = "entry-date", """The list is sorted by the date the item was added to the list. Note that the date added to the list is not explicit in the list itself. """
    
    priority = "priority", """The list is sorted by priority. The exact method in which priority has been determined is not specified. """
    
    alphabetic = "alphabetic", """The list is sorted alphabetically by an unspecified property of the items in the list. """
    
    category = "category", """The list is sorted categorically by an unspecified property of the items in the list. """
    
    patient = "patient", """The list is sorted by patient, with items for each patient grouped together. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ListStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/list-status
    """
    
    current = "current", """The list is considered to be an active part of the patient's record. """
    
    retired = "retired", """The list is "old" and should no longer be considered accurate or relevant. """
    
    enteredInError = "entered-in-error", """The list was never accurate.  It is retained for medico-legal purposes only. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class LocationMode(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/location-mode
    """
    
    instance = "instance", """The Location resource represents a specific instance of a location (e.g. Operating Theatre 1A). """
    
    kind = "kind", """The Location represents a class of locations (e.g. Any Operating Theatre) although this class of locations could be constrained within a specific boundary (such as organization, or parent location, address etc.). """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class LocationStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/location-status
    """
    
    active = "active", """The location is operational. """
    
    suspended = "suspended", """The location is temporarily closed. """
    
    inactive = "inactive", """The location is no longer used. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class LocationType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/location-physical-type
    """
    
    si = "si", """A collection of buildings or other locations such as a site or a campus. """
    
    bu = "bu", """Any Building or structure. This may contain rooms, corridors, wings, etc. It might not have walls, or a roof, but is considered a defined/allocated space. """
    
    wi = "wi", """A Wing within a Building, this often contains levels, rooms and corridors. """
    
    wa = "wa", """A Ward is a section of a medical facility that may contain rooms and other types of location. """
    
    lvl = "lvl", """A Level in a multi-level Building/Structure. """
    
    co = "co", """Any corridor within a Building, that may connect rooms. """
    
    ro = "ro", """A space that is allocated as a room, it may have walls/roof etc., but does not require these. """
    
    bd = "bd", """A space that is allocated for sleeping/laying on. This is not the physical bed/trolley that may be moved about, but the space it may occupy. """
    
    ve = "ve", """A means of transportation. """
    
    ho = "ho", """A residential dwelling. Usually used to reference a location that a person/patient may reside. """
    
    ca = "ca", """A container that can store goods, equipment, medications or other items. """
    
    rd = "rd", """A defined path to travel between 2 points that has a known name. """
    
    area = "area", """A defined physical boundary of something, such as a flood risk zone, region, postcode """
    
    jdn = "jdn", """A wide scope that covers a conceptual domain, such as a Nation (Country wide community or Federal Government - e.g. Ministry of Health),  Province or State (community or Government), Business (throughout the enterprise), Nation with a business scope of an agency (e.g. CDC, FDA etc.) or a Business segment (UK Pharmacy), not just an physical boundary """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MatchGrade(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/match-grade
    """
    
    certain = "certain", """This record meets the matching criteria to be automatically considered as a full match. """
    
    probable = "probable", """This record is a close match, but not a certain match. Additional review (e.g. by a human) may be required before using this as a match. """
    
    possible = "possible", """This record may be a matching one. Additional review (e.g. by a human) SHOULD be performed before using this as a match. """
    
    certainlyNot = "certainly-not", """This record is known not to be a match. Note that usually non-matching records are not returned, but in some cases records previously or likely considered as a match may specifically be negated by the matching engine. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MaxOccurs(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/question-max-occurs
    """
    
    max = "*", """Element can repeat an unlimited number of times. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MeasureDataUsage(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/measure-data-usage
    """
    
    supplementalData = "supplemental-data", """The data is intended to be provided as additional information alongside the measure results. """
    
    riskAdjustmentFactor = "risk-adjustment-factor", """The data is intended to be used to calculate and apply a risk adjustment model for the measure. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MeasureImprovementNotation(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/measure-improvement-notation
    """
    
    increase = "increase", """Improvement is indicated as an increase in the score or measurement (e.g. Higher score indicates better quality). """
    
    decrease = "decrease", """Improvement is indicated as a decrease in the score or measurement (e.g. Lower score indicates better quality). """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MeasurePopulationType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/measure-population
    """
    
    initialPopulation = "initial-population", """The initial population refers to all patients or events to be evaluated by a quality measure involving patients who share a common set of specified characterstics. All patients or events counted (for example, as numerator, as denominator) are drawn from the initial population. """
    
    numerator = "numerator", """The upper portion of a fraction used to calculate a rate, proportion, or ratio. Also called the measure focus, it is the target process, condition, event, or outcome. Numerator criteria are the processes or outcomes expected for each patient, or event defined in the denominator. A numerator statement describes the clinical action that satisfies the conditions of the measure. """
    
    numeratorExclusion = "numerator-exclusion", """Numerator exclusion criteria define patients or events to be removed from the numerator. Numerator exclusions are used in proportion and ratio measures to help narrow the numerator (for inverted measures). """
    
    denominator = "denominator", """The lower portion of a fraction used to calculate a rate, proportion, or ratio. The denominator can be the same as the initial population, or a subset of the initial population to further constrain the population for the purpose of the measure. """
    
    denominatorExclusion = "denominator-exclusion", """Denominator exclusion criteria define patients or events that should be removed from the denominator before determining if numerator criteria are met. Denominator exclusions are used in proportion and ratio measures to help narrow the denominator. For example, patients with bilateral lower extremity amputations would be listed as a denominator exclusion for a measure requiring foot exams. """
    
    denominatorException = "denominator-exception", """Denominator exceptions are conditions that should remove a patient or event from the denominator of a measure only if the numerator criteria are not met. Denominator exception allows for adjustment of the calculated score for those providers with higher risk populations. Denominator exception criteria are only used in proportion measures. """
    
    measurePopulation = "measure-population", """Measure population criteria define the patients or events for which the individual observation for the measure should be taken. Measure populations are used for continuous variable measures rather than numerator and denominator criteria. """
    
    measurePopulationExclusion = "measure-population-exclusion", """Measure population criteria define the patients or events that should be removed from the measure population before determining the outcome of one or more continuous variables defined for the measure observation. Measure population exclusion criteria are used within continuous variable measures to help narrow the measure population. """
    
    measureObservation = "measure-observation", """Defines the individual observation to be performed for each patient or event in the measure population. Measure observations for each case in the population are aggregated to determine the overall measure score for the population. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MeasureReportStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/measure-report-status
    """
    
    complete = "complete", """The report is complete and ready for use. """
    
    pending = "pending", """The report is currently being generated. """
    
    error = "error", """An error occurred attempting to generate the report. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MeasureReportType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/measure-report-type
    """
    
    individual = "individual", """An individual report that provides information on the performance for a given measure with respect to a single subject. """
    
    subjectList = "subject-list", """A subject list report that includes a listing of subjects that satisfied each population criteria in the measure. """
    
    summary = "summary", """A summary report that returns the number of members in each population criteria for the measure. """
    
    dataCollection = "data-collection", """A data collection report that contains data-of-interest for the measure. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MeasureScoring(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/measure-scoring
    """
    
    proportion = "proportion", """The measure score is defined using a proportion. """
    
    ratio = "ratio", """The measure score is defined using a ratio. """
    
    continuousVariable = "continuous-variable", """The score is defined by a calculation of some quantity. """
    
    cohort = "cohort", """The measure is a cohort definition. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MeasureType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/measure-type
    """
    
    process = "process", """A measure which focuses on a process which leads to a certain outcome, meaning that a scientific basis exists for believing that the process, when executed well, will increase the probability of achieving a desired outcome. """
    
    outcome = "outcome", """A measure that indicates the result of the performance (or non-performance) of a function or process. """
    
    structure = "structure", """A measure that focuses on a health care provider's capacity, systems, and processes to provide high-quality care. """
    
    patientReportedOutcome = "patient-reported-outcome", """A measure that focuses on patient-reported information such as patient engagement or patient experience measures. """
    
    composite = "composite", """A measure that combines multiple component measures in to a single quality measure. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MediaModality(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/media-modality
    """
    
    diagram = "diagram", """A diagram. Often used in diagnostic reports """
    
    fax = "fax", """A digital record of a fax document """
    
    scan = "scan", """A digital scan of a document. This is reserved for when there is not enough metadata to create a document reference """
    
    retina = "retina", """A retinal image used for identification purposes """
    
    fingerprint = "fingerprint", """A finger print scan used for identification purposes """
    
    iris = "iris", """An iris scan used for identification purposes """
    
    palm = "palm", """A palm scan used for identification purposes """
    
    face = "face", """A face scan used for identification purposes """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MediaType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/media-type
    """
    
    image = "image", """The media consists of one or more unmoving images, including photographs, computer-generated graphs and charts, and scanned documents """
    
    video = "video", """The media consists of a series of frames that capture a moving image """
    
    audio = "audio", """The media consists of a sound recording """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MedicationAdministrationCategoryCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/medication-admin-category
    """
    
    inpatient = "inpatient", """Includes administrations in an inpatient or acute care setting """
    
    outpatient = "outpatient", """Includes administrations in an outpatient setting (for example, Emergency Department, Outpatient Clinic, Outpatient Surgery, Doctor's office) """
    
    community = "community", """Includes administrations by the patient in their home (this would include long term care or nursing homes, hospices, etc.) """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MedicationAdministrationPerformerFunctionCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/med-admin-perform-function
    """
    
    performer = "performer", """A person, non-person living subject, organization or device that who actually and principally carries out the action """
    
    verifier = "verifier", """A person who verifies the correctness and appropriateness of the service (plan, order, event, etc.) and hence takes on accountability. """
    
    witness = "witness", """A person witnessing the action happening without doing anything. A witness is not necessarily aware, much less approves of anything stated in the service event. Example for a witness is students watching an operation or an advanced directive witness. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MedicationAdministrationStatusCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/medication-admin-status
    """
    
    inProgress = "in-progress", """The administration has started but has not yet completed. """
    
    notDone = "not-done", """The administration was terminated prior to any impact on the subject (though preparatory actions may have been taken) """
    
    onHold = "on-hold", """Actions implied by the administration have been temporarily halted, but are expected to continue later. May also be called 'suspended'. """
    
    completed = "completed", """All actions that are implied by the administration have occurred. """
    
    enteredInError = "entered-in-error", """The administration was entered in error and therefore nullified. """
    
    stopped = "stopped", """Actions implied by the administration have been permanently halted, before all of them occurred. """
    
    unknown = "unknown", """The authoring system does not know which of the status values currently applies for this request. Note: This concept is not to be used for 'other' - one of the listed statuses is presumed to apply, it's just not known which one. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MedicationDispenseCategoryCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/fhir/CodeSystem/medicationdispense-category
    """
    
    inpatient = "inpatient", """Includes dispenses for medications to be administered or consumed in an inpatient or acute care setting. """
    
    outpatient = "outpatient", """Includes dispenses for medications to be administered or consumed in an outpatient setting (for example, Emergency Department, Outpatient Clinic, Outpatient Surgery, Doctor's office). """
    
    community = "community", """Includes dispenses for medications to be administered or consumed by the patient in their home (this would include long term care or nursing homes, hospices, etc.). """
    
    discharge = "discharge", """Includes dispenses for medications created when the patient is being released from a facility. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MedicationDispensePerformerFunctionCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/medicationdispense-performer-function
    """
    
    dataenterer = "dataenterer", """Recorded the details of the request """
    
    packager = "packager", """Prepared the medication. """
    
    checker = "checker", """Performed initial quality assurance on the prepared medication """
    
    finalchecker = "finalchecker", """Performed the final quality assurance on the prepared medication against the request. Typically, this is a pharmacist function. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MedicationDispenseStatusCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/medicationdispense-status
    """
    
    preparation = "preparation", """The core event has not started yet, but some staging activities have begun (e.g. initial compounding or packaging of medication). Preparation stages may be tracked for billing purposes. """
    
    inProgress = "in-progress", """The dispensed product is ready for pickup. """
    
    cancelled = "cancelled", """The dispensed product was not and will never be picked up by the patient. """
    
    onHold = "on-hold", """The dispense process is paused while waiting for an external event to reactivate the dispense.  For example, new stock has arrived or the prescriber has called. """
    
    completed = "completed", """The dispensed product has been picked up. """
    
    enteredInError = "entered-in-error", """The dispense was entered in error and therefore nullified. """
    
    stopped = "stopped", """Actions implied by the dispense have been permanently halted, before all of them occurred. """
    
    declined = "declined", """The dispense was declined and not performed. """
    
    unknown = "unknown", """The authoring system does not know which of the status values applies for this medication dispense.  Note: this concept is not to be used for other - one of the listed statuses is presumed to apply, it's just now known which one. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MedicationDispenseStatusReasonCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/fhir/CodeSystem/medicationdispense-status-reason
    """
    
    frr01 = "frr01", """The order has been stopped by the prescriber but this fact has not necessarily captured electronically. Example: A verbal stop, a fax, etc. """
    
    frr02 = "frr02", """Order has not been fulfilled within a reasonable amount of time, and might not be current. """
    
    frr03 = "frr03", """Data needed to safely act on the order which was expected to become available independent of the order is not yet available. Example: Lab results, diagnostic imaging, etc. """
    
    frr04 = "frr04", """Product not available or manufactured. Cannot supply. """
    
    frr05 = "frr05", """The dispenser has ethical, religious or moral objections to fulfilling the order/dispensing the product. """
    
    frr06 = "frr06", """Fulfiller not able to provide appropriate care associated with fulfilling the order. Example: Therapy requires ongoing monitoring by fulfiller and fulfiller will be ending practice, leaving town, unable to schedule necessary time, etc. """
    
    altchoice = "altchoice", """This therapy has been ordered as a backup to a preferred therapy. This order will be released when and if the preferred therapy is unsuccessful. """
    
    clarif = "clarif", """Clarification is required before the order can be acted upon. """
    
    drughigh = "drughigh", """The current level of the medication in the patient's system is too high. The medication is suspended to allow the level to subside to a safer level. """
    
    hospadm = "hospadm", """The patient has been admitted to a care facility and their community medications are suspended until hospital discharge. """
    
    labint = "labint", """The therapy would interfere with a planned lab test and the therapy is being withdrawn until the test is completed. """
    
    nonAvail = "non-avail", """Patient not available for a period of time due to a scheduled therapy, leave of absence or other reason. """
    
    preg = "preg", """The patient is pregnant or breast feeding. The therapy will be resumed when the pregnancy is complete and the patient is no longer breastfeeding. """
    
    saig = "saig", """The patient is believed to be allergic to a substance that is part of the therapy and the therapy is being temporarily withdrawn to confirm. """
    
    sddi = "sddi", """The drug interacts with a short-term treatment that is more urgently required. This order will be resumed when the short-term treatment is complete. """
    
    sdupther = "sdupther", """Another short-term co-occurring therapy fulfills the same purpose as this therapy. This therapy will be resumed when the co-occuring therapy is complete. """
    
    sintol = "sintol", """The patient is believed to have an intolerance to a substance that is part of the therapy and the therapy is being temporarily withdrawn to confirm. """
    
    surg = "surg", """The drug is contraindicated for patients receiving surgery and the patient is scheduled to be admitted for surgery in the near future. The drug will be resumed when the patient has sufficiently recovered from the surgery. """
    
    washout = "washout", """The patient was previously receiving a medication contraindicated with the current medication. The current medication will remain on hold until the prior medication has been cleansed from their system. """
    
    outofstock = "outofstock", """Drug out of stock. Cannot supply. """
    
    offmarket = "offmarket", """Drug no longer marketed Cannot supply. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MedicationKnowledgeCharacteristicCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/medicationknowledge-characteristic
    """
    
    imprintcd = "imprintcd", """Identyifying marks on product """
    
    size = "size", """Description of size of the product """
    
    shape = "shape", """Description of the shape of the product """
    
    color = "color", """Description of the color of the product """
    
    coating = "coating", """Description of the coating of the product """
    
    scoring = "scoring", """Description of the scoring of the product """
    
    logo = "logo", """Description of the Logo of the product """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MedicationKnowledgePackageTypeCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/medicationknowledge-package-type
    """
    
    amp = "amp", """amp """
    
    bag = "bag", """bag """
    
    blstrpk = "blstrpk", """blstrpk """
    
    bot = "bot", """bot """
    
    box = "box", """box """
    
    can = "can", """can """
    
    cart = "cart", """cart """
    
    disk = "disk", """disk """
    
    doset = "doset", """doset """
    
    jar = "jar", """jar """
    
    jug = "jug", """jug """
    
    minim = "minim", """minim """
    
    nebamp = "nebamp", """nebamp """
    
    ovul = "ovul", """ovul """
    
    pch = "pch", """pch """
    
    pkt = "pkt", """pkt """
    
    sash = "sash", """sash """
    
    strip = "strip", """strip """
    
    tin = "tin", """tin """
    
    tub = "tub", """tub """
    
    tube = "tube", """tube """
    
    vial = "vial", """vial """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MedicationKnowledgeStatusCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/medicationknowledge-status
    """
    
    active = "active", """The medication is available for use. """
    
    inactive = "inactive", """The medication is not available for use. """
    
    enteredInError = "entered-in-error", """The medication was entered in error. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MedicationRequestCategoryCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/medicationrequest-category
    """
    
    inpatient = "inpatient", """Includes requests for medications to be administered or consumed in an inpatient or acute care setting """
    
    outpatient = "outpatient", """Includes requests for medications to be administered or consumed in an outpatient setting (for example, Emergency Department, Outpatient Clinic, Outpatient Surgery, Doctor's office) """
    
    community = "community", """Includes requests for medications to be administered or consumed by the patient in their home (this would include long term care or nursing homes, hospices, etc.) """
    
    discharge = "discharge", """Includes requests for medications created when the patient is being released from a facility """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MedicationRequestCourseOfTherapyCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/medicationrequest-course-of-therapy
    """
    
    continuous = "continuous", """A medication which is expected to be continued beyond the present order and which the patient should be assumed to be taking unless explicitly stopped. """
    
    acute = "acute", """A medication which the patient is only expected to consume for the duration of the current order and which is not expected to be renewed. """
    
    seasonal = "seasonal", """A medication which is expected to be used on a part time basis at certain times of the year """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MedicationRequestIntent(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/CodeSystem/medicationrequest-intent
    """
    
    proposal = "proposal", """The request is a suggestion made by someone/something that doesn't have an intention to ensure it occurs and without providing an authorization to act """
    
    plan = "plan", """The request represents an intention to ensure something occurs without providing an authorization for others to act. """
    
    order = "order", """The request represents a request/demand and authorization for action """
    
    originalOrder = "original-order", """The request represents the original authorization for the medication request. """
    
    reflexOrder = "reflex-order", """The request represents an automatically generated supplemental authorization for action based on a parent authorization together with initial results of the action taken against that parent authorization.. """
    
    fillerOrder = "filler-order", """The request represents the view of an authorization instantiated by a fulfilling system representing the details of the fulfiller's intention to act upon a submitted order. """
    
    instanceOrder = "instance-order", """The request represents an instance for the particular order, for example a medication administration record. """
    
    option = "option", """The request represents a component or option for a RequestGroup that establishes timing, conditionality and/or  other constraints among a set of requests. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MedicationRequestStatusReasonCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/medicationrequest-status-reason
    """
    
    altchoice = "altchoice", """This therapy has been ordered as a backup to a preferred therapy. This order will be released when and if the preferred therapy is unsuccessful. """
    
    clarif = "clarif", """Clarification is required before the order can be acted upon. """
    
    drughigh = "drughigh", """The current level of the medication in the patient's system is too high. The medication is suspended to allow the level to subside to a safer level. """
    
    hospadm = "hospadm", """The patient has been admitted to a care facility and their community medications are suspended until hospital discharge. """
    
    labint = "labint", """The therapy would interfere with a planned lab test and the therapy is being withdrawn until the test is completed. """
    
    nonAvail = "non-avail", """Patient not available for a period of time due to a scheduled therapy, leave of absence or other reason. """
    
    preg = "preg", """The patient is pregnant or breast feeding. The therapy will be resumed when the pregnancy is complete and the patient is no longer breastfeeding. """
    
    salg = "salg", """The patient is believed to be allergic to a substance that is part of the therapy and the therapy is being temporarily withdrawn to confirm. """
    
    sddi = "sddi", """The drug interacts with a short-term treatment that is more urgently required. This order will be resumed when the short-term treatment is complete. """
    
    sdupther = "sdupther", """The drug interacts with a short-term treatment that is more urgently required. This order will be resumed when the short-term treatment is complete. """
    
    sintol = "sintol", """The drug interacts with a short-term treatment that is more urgently required. This order will be resumed when the short-term treatment is complete. """
    
    surg = "surg", """The drug is contraindicated for patients receiving surgery and the patient is scheduled to be admitted for surgery in the near future. The drug will be resumed when the patient has sufficiently recovered from the surgery. """
    
    washout = "washout", """The patient was previously receiving a medication contraindicated with the current medication. The current medication will remain on hold until the prior medication has been cleansed from their system. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MedicationStatementStatusCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/CodeSystem/medication-statement-status
    """
    
    active = "active", """The medication is still being taken. """
    
    completed = "completed", """The medication is no longer being taken. """
    
    enteredInError = "entered-in-error", """Some of the actions that are implied by the medication statement may have occurred.  For example, the patient may have taken some of the medication.  Clinical decision support systems should take this status into account. """
    
    intended = "intended", """The medication may be taken at some time in the future. """
    
    stopped = "stopped", """Actions implied by the statement have been permanently halted, before all of them occurred. This should not be used if the statement was entered in error. """
    
    onHold = "on-hold", """Actions implied by the statement have been temporarily halted, but are expected to continue later. May also be called 'suspended'. """
    
    unknown = "unknown", """The state of the medication use is not currently known. """
    
    notTaken = "not-taken", """The medication was not consumed by the patient """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MedicationStatusCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/CodeSystem/medication-status
    """
    
    active = "active", """The medication is available for use. """
    
    inactive = "inactive", """The medication is not available for use. """
    
    enteredInError = "entered-in-error", """The medication was entered in error. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MedicationUsageCategoryCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/medication-statement-category
    """
    
    inpatient = "inpatient", """Includes orders for medications to be administered or consumed in an inpatient or acute care setting """
    
    outpatient = "outpatient", """Includes orders for medications to be administered or consumed in an outpatient setting (for example, Emergency Department, Outpatient Clinic, Outpatient Surgery, Doctor's office) """
    
    community = "community", """Includes orders for medications to be administered or consumed by the patient in their home (this would include long term care or nursing homes, hospices, etc.). """
    
    patientspecified = "patientspecified", """Includes statements about medication use, including over the counter medication, provided by the patient, agent or another provider """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MedicationrequestStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/CodeSystem/medicationrequest-status
    """
    
    active = "active", """The prescription is 'actionable', but not all actions that are implied by it have occurred yet. """
    
    onHold = "on-hold", """Actions implied by the prescription are to be temporarily halted, but are expected to continue later.  May also be called 'suspended'. """
    
    cancelled = "cancelled", """The prescription has been withdrawn before any administrations have occurred """
    
    completed = "completed", """All actions that are implied by the prescription have occurred. """
    
    enteredInError = "entered-in-error", """Some of the actions that are implied by the medication request may have occurred.  For example, the medication may have been dispensed and the patient may have taken some of the medication.  Clinical decision support systems should take this status into account """
    
    stopped = "stopped", """Actions implied by the prescription are to be permanently halted, before all of the administrations occurred. This should not be used if the original order was entered in error """
    
    draft = "draft", """The prescription is not yet 'actionable', e.g. it is a work in progress, requires sign-off, verification or needs to be run through decision support process. """
    
    unknown = "unknown", """The authoring/source system does not know which of the status values currently applies for this observation. Note: This concept is not to be used for 'other' - one of the listed statuses is presumed to apply, but the authoring/source system does not know which. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MessageSignificanceCategory(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/message-significance-category
    """
    
    consequence = "consequence", """The message represents/requests a change that should not be processed more than once; e.g., making a booking for an appointment. """
    
    currency = "currency", """The message represents a response to query for current information. Retrospective processing is wrong and/or wasteful. """
    
    notification = "notification", """The content is not necessarily intended to be current, and it can be reprocessed, though there may be version issues created by processing old notifications. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MessageTransport(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/message-transport
    """
    
    http = "http", """The application sends or receives messages using HTTP POST (may be over http: or https:). """
    
    ftp = "ftp", """The application sends or receives messages using File Transfer Protocol. """
    
    mllp = "mllp", """The application sends or receives messages using HL7's Minimal Lower Level Protocol. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MessageheaderResponseRequest(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/messageheader-response-request
    """
    
    always = "always", """initiator expects a response for this message. """
    
    onError = "on-error", """initiator expects a response only if in error. """
    
    never = "never", """initiator does not expect a response. """
    
    onSuccess = "on-success", """initiator expects a response only if successful. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class MissingToothReasonCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/missingtoothreason
    """
    
    E = "e", """Extraction """
    
    C = "c", """Congenital """
    
    U = "u", """Unknown """
    
    O = "o", """Other """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ModifierTypeCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/modifiers
    """
    
    A = "a", """Repair of prior service or installation. """
    
    B = "b", """Temporary service or installation. """
    
    C = "c", """Treatment associated with TMJ. """
    
    E = "e", """Implant or associated with an implant. """
    
    rooh = "rooh", """A Rush service or service performed outside of normal office hours. """
    
    X = "x", """None. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class NHINPurposeOfUse(str, DocEnum):
    """ Defining URL : http://healthit.gov/nhin/purposeofuse
    """
    
    TREATMENT = "TREATMENT", """Treatment """
    
    PAYMENT = "PAYMENT", """Payment """
    
    OPERATIONS = "OPERATIONS", """Healthcare Operations """
    
    SYSADMIN = "SYSADMIN", """System Administration """
    
    FRAUD = "FRAUD", """Fraud detection """
    
    PSYCHOTHERAPY = "PSYCHOTHERAPY", """Use or disclosure of Psychotherapy Notes """
    
    TRAINING = "TRAINING", """Use or disclosure by the covered entity for its own training programs """
    
    LEGAL = "LEGAL", """Use or disclosure by the covered entity to defend itself in a legal action """
    
    MARKETING = "MARKETING", """Marketing """
    
    DIRECTORY = "DIRECTORY", """Use and disclosure for facility directories """
    
    FAMILY = "FAMILY", """Disclose to a family member, other relative, or a close personal friend of the individual """
    
    PRESENT = "PRESENT", """Uses and disclosures with the individual present. """
    
    EMERGENCY = "EMERGENCY", """Permission cannot practicably be provided because of the individual's incapacity or an emergency. """
    
    DISASTER = "DISASTER", """Use and disclosures for disaster relief purposes. """
    
    PUBLICHEALTH = "PUBLICHEALTH", """Uses and disclosures for public health activities. """
    
    ABUSE = "ABUSE", """Disclosures about victims of abuse, neglect or domestic violence. """
    
    OVERSIGHT = "OVERSIGHT", """Uses and disclosures for health oversight activities. """
    
    JUDICIAL = "JUDICIAL", """Disclosures for judicial and administrative proceedings. """
    
    LAW = "LAW", """Disclosures for law enforcement purposes. """
    
    DECEASED = "DECEASED", """Uses and disclosures about decedents. """
    
    DONATION = "DONATION", """Uses and disclosures for cadaveric organ,  eye or tissue donation purposes """
    
    RESEARCH = "RESEARCH", """Uses and disclosures for research purposes. """
    
    THREAT = "THREAT", """Uses and disclosures to avert a serious threat to health or safety. """
    
    GOVERNMENT = "GOVERNMENT", """Uses and disclosures for specialized government functions. """
    
    WORKERSCOMP = "WORKERSCOMP", """Disclosures for workers' compensation. """
    
    COVERAGE = "COVERAGE", """Disclosures for insurance or disability coverage determination """
    
    REQUEST = "REQUEST", """Request of the Individual """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class NameUse(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/name-use
    """
    
    usual = "usual", """Known as/conventional/the one you normally use. """
    
    official = "official", """The formal name as registered in an official (government) registry, but which name might not be commonly used. May be called "legal name". """
    
    temp = "temp", """A temporary name. Name.period can provide more detailed information. This may also be used for temporary names assigned at birth or in emergency situations. """
    
    nickname = "nickname", """A name that is used to address the person in an informal manner, but is not part of their formal or usual name. """
    
    anonymous = "anonymous", """Anonymous assigned name, alias, or pseudonym (used to protect a person's identity for privacy reasons). """
    
    old = "old", """This name is no longer in use (or was never correct, but retained for records). """
    
    maiden = "maiden", """A name used prior to changing name because of marriage. This name use is for use by applications that collect and store names that were used prior to a marriage. Marriage naming customs vary greatly around the world, and are constantly changing. This term is not gender specific. The use of this term does not imply any particular history for a person's name. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class NamingSystemIdentifierType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/namingsystem-identifier-type
    """
    
    oid = "oid", """An ISO object identifier; e.g. 1.2.3.4.5. """
    
    uuid = "uuid", """A universally unique identifier of the form a5afddf4-e880-459b-876e-e4591b0acc11. """
    
    uri = "uri", """A uniform resource identifier (ideally a URL - uniform resource locator); e.g. http://unitsofmeasure.org. """
    
    other = "other", """Some other type of unique identifier; e.g. HL7-assigned reserved string such as LN for LOINC. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class NamingSystemType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/namingsystem-type
    """
    
    codesystem = "codesystem", """The naming system is used to define concepts and symbols to represent those concepts; e.g. UCUM, LOINC, NDC code, local lab codes, etc. """
    
    identifier = "identifier", """The naming system is used to manage identifiers (e.g. license numbers, order numbers, etc.). """
    
    root = "root", """The naming system is used as the root for other identifiers and naming systems. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class NarrativeStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/narrative-status
    """
    
    generated = "generated", """The contents of the narrative are entirely generated from the core elements in the content. """
    
    extensions = "extensions", """The contents of the narrative are entirely generated from the core elements in the content and some of the content is generated from extensions. The narrative SHALL reflect the impact of all modifier extensions. """
    
    additional = "additional", """The contents of the narrative may contain additional information not found in the structured data. Note that there is no computable way to determine what the extra information is, other than by human inspection. """
    
    empty = "empty", """The contents of the narrative are some equivalent of "No human-readable text provided in this case". """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class Need(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/need
    """
    
    none = "none", """***TODO*** """
    
    initial = "initial", """***TODO*** """
    
    periodic = "periodic", """***TODO*** """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class NetworkTypeCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/benefit-network
    """
    
    in_ = "in", """Services rendered by a Network provider """
    
    out = "out", """Services rendered by a provider who is not in the Network """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class NoteType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/note-type
    """
    
    display = "display", """Display the note. """
    
    print = "print", """Print the note on the form. """
    
    printoper = "printoper", """Print the note for the operator. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ObservationCategoryCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/observation-category
    """
    
    socialHistory = "social-history", """Social History Observations define the patient's occupational, personal (e.g., lifestyle), social, familial, and environmental history and health risk factors that may impact the patient's health. """
    
    vitalSigns = "vital-signs", """ Clinical observations measure the body's basic functions such as blood pressure, heart rate, respiratory rate, height, weight, body mass index, head circumference, pulse oximetry, temperature, and body surface area. """
    
    imaging = "imaging", """Observations generated by imaging. The scope includes observations regarding plain x-ray, ultrasound, CT, MRI, angiography, echocardiography, and nuclear medicine. """
    
    laboratory = "laboratory", """The results of observations generated by laboratories.  Laboratory results are typically generated by laboratories providing analytic services in areas such as chemistry, hematology, serology, histology, cytology, anatomic pathology (including digital pathology), microbiology, and/or virology. These observations are based on analysis of specimens obtained from the patient and submitted to the laboratory. """
    
    procedure = "procedure", """Observations generated by other procedures.  This category includes observations resulting from interventional and non-interventional procedures excluding laboratory and imaging (e.g., cardiology catheterization, endoscopy, electrodiagnostics, etc.).  Procedure results are typically generated by a clinician to provide more granular information about component observations made during a procedure.  An example would be when a gastroenterologist reports the size of a polyp observed during a colonoscopy. """
    
    survey = "survey", """Assessment tool/survey instrument observations (e.g., Apgar Scores, Montreal Cognitive Assessment (MoCA)). """
    
    exam = "exam", """Observations generated by physical exam findings including direct observations made by a clinician and use of simple instruments and the result of simple maneuvers performed directly on the patient's body. """
    
    therapy = "therapy", """Observations generated by non-interventional treatment protocols (e.g. occupational, physical, radiation, nutritional and medication therapy) """
    
    activity = "activity", """Observations that measure or record any bodily activity that enhances or maintains physical fitness and overall health and wellness.  Not under direct supervision of practitioner such as a physical therapist. (e.g., laps swum, steps, sleep data) """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ObservationDataType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/permitted-data-type
    """
    
    quantity = "Quantity", """A measured amount. """
    
    codeableConcept = "CodeableConcept", """A coded concept from a reference terminology and/or text. """
    
    string = "string", """A sequence of Unicode characters. """
    
    boolean = "boolean", """true or false. """
    
    integer = "integer", """A signed integer. """
    
    range = "Range", """A set of values bounded by low and high. """
    
    ratio = "Ratio", """A ratio of two Quantity values - a numerator and a denominator. """
    
    sampledData = "SampledData", """A series of measurements taken by a device. """
    
    time = "time", """A time during the day, in the format hh:mm:ss. """
    
    dateTime = "dateTime", """A date, date-time or partial date (e.g. just year or year + month) as used in human communication. """
    
    period = "Period", """A time range defined by start and end date/time. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ObservationRangeCategory(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/observation-range-category
    """
    
    reference = "reference", """Reference (Normal) Range for Ordinal and Continuous Observations. """
    
    critical = "critical", """Critical Range for Ordinal and Continuous Observations. """
    
    absolute = "absolute", """Absolute Range for Ordinal and Continuous Observations. Results outside this range are not possible. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ObservationReferenceRangeMeaningCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/referencerange-meaning
    """
    
    type = "type", """General types of reference range. """
    
    normal = "normal", """Values expected for a normal member of the relevant control population being measured. Typically each results producer such as a laboratory has specific normal ranges and they are usually defined as within two standard deviations from the mean and account for 95.45% of this population. """
    
    recommended = "recommended", """The range that is recommended by a relevant professional body. """
    
    treatment = "treatment", """The range at which treatment would/should be considered. """
    
    therapeutic = "therapeutic", """The optimal range for best therapeutic outcomes. """
    
    pre = "pre", """The optimal range for best therapeutic outcomes for a specimen taken immediately before administration. """
    
    post = "post", """The optimal range for best therapeutic outcomes for a specimen taken immediately after administration. """
    
    endocrine = "endocrine", """Endocrine related states that change the expected value. """
    
    prePuberty = "pre-puberty", """An expected range in an individual prior to puberty. """
    
    follicular = "follicular", """An expected range in an individual during the follicular stage of the cycle. """
    
    midcycle = "midcycle", """An expected range in an individual during the midcycle stage of the cycle. """
    
    luteal = "luteal", """An expected range in an individual during the luteal stage of the cycle. """
    
    postmenopausal = "postmenopausal", """An expected range in an individual post-menopause. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ObservationStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/observation-status
    """
    
    registered = "registered", """The existence of the observation is registered, but there is no result yet available. """
    
    preliminary = "preliminary", """This is an initial or interim observation: data may be incomplete or unverified. """
    
    final = "final", """The observation is complete and there are no further actions needed. Additional information such "released", "signed", etc would be represented using [Provenance](provenance.html) which provides not only the act but also the actors and dates and other related data. These act states would be associated with an observation status of `preliminary` until they are all completed and then a status of `final` would be applied. """
    
    amended = "amended", """Subsequent to being Final, the observation has been modified subsequent.  This includes updates/new information and corrections. """
    
    corrected = "corrected", """Subsequent to being Final, the observation has been modified to correct an error in the test result. """
    
    cancelled = "cancelled", """The observation is unavailable because the measurement was not started or not completed (also sometimes called "aborted"). """
    
    enteredInError = "entered-in-error", """The observation has been withdrawn following previous final release.  This electronic record should never have existed, though it is possible that real-world decisions were based on it. (If real-world activity has occurred, the status should be "cancelled" rather than "entered-in-error".). """
    
    unknown = "unknown", """The authoring/source system does not know which of the status values currently applies for this observation. Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, but the authoring/source system does not know which. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class OperationKind(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/operation-kind
    """
    
    operation = "operation", """This operation is invoked as an operation. """
    
    query = "query", """This operation is a named query, invoked using the search mechanism. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class OperationOutcomeCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/operation-outcome
    """
    
    DELETEMULTIPLEMATCHES = "DELETE_MULTIPLE_MATCHES", """DELETEMULTIPLEMATCHES """
    
    MSGAUTHREQUIRED = "MSG_AUTH_REQUIRED", """MSGAUTHREQUIRED """
    
    MSGBADFORMAT = "MSG_BAD_FORMAT", """MSGBADFORMAT """
    
    MSGBADSYNTAX = "MSG_BAD_SYNTAX", """MSGBADSYNTAX """
    
    MSGCANTPARSECONTENT = "MSG_CANT_PARSE_CONTENT", """MSGCANTPARSECONTENT """
    
    MSGCANTPARSEROOT = "MSG_CANT_PARSE_ROOT", """MSGCANTPARSEROOT """
    
    MSGCREATED = "MSG_CREATED", """MSGCREATED """
    
    MSGDATEFORMAT = "MSG_DATE_FORMAT", """MSGDATEFORMAT """
    
    MSGDELETED = "MSG_DELETED", """MSGDELETED """
    
    MSGDELETEDDONE = "MSG_DELETED_DONE", """MSGDELETEDDONE """
    
    MSGDELETEDID = "MSG_DELETED_ID", """MSGDELETEDID """
    
    MSGDUPLICATEID = "MSG_DUPLICATE_ID", """MSGDUPLICATEID """
    
    MSGERRORPARSING = "MSG_ERROR_PARSING", """MSGERRORPARSING """
    
    MSGIDINVALID = "MSG_ID_INVALID", """MSGIDINVALID """
    
    MSGIDTOOLONG = "MSG_ID_TOO_LONG", """MSGIDTOOLONG """
    
    MSGINVALIDID = "MSG_INVALID_ID", """MSGINVALIDID """
    
    MSGJSONOBJECT = "MSG_JSON_OBJECT", """MSGJSONOBJECT """
    
    MSGLOCALFAIL = "MSG_LOCAL_FAIL", """MSGLOCALFAIL """
    
    MSGNOEXIST = "MSG_NO_EXIST", """MSGNOEXIST """
    
    MSGNOMATCH = "MSG_NO_MATCH", """MSGNOMATCH """
    
    MSGNOMODULE = "MSG_NO_MODULE", """MSGNOMODULE """
    
    MSGNOSUMMARY = "MSG_NO_SUMMARY", """MSGNOSUMMARY """
    
    MSGOPNOTALLOWED = "MSG_OP_NOT_ALLOWED", """MSGOPNOTALLOWED """
    
    MSGPARAMCHAINED = "MSG_PARAM_CHAINED", """MSGPARAMCHAINED """
    
    MSGPARAMINVALID = "MSG_PARAM_INVALID", """MSGPARAMINVALID """
    
    MSGPARAMMODIFIERINVALID = "MSG_PARAM_MODIFIER_INVALID", """MSGPARAMMODIFIERINVALID """
    
    MSGPARAMNOREPEAT = "MSG_PARAM_NO_REPEAT", """MSGPARAMNOREPEAT """
    
    MSGPARAMUNKNOWN = "MSG_PARAM_UNKNOWN", """MSGPARAMUNKNOWN """
    
    MSGRESOURCEEXAMPLEPROTECTED = "MSG_RESOURCE_EXAMPLE_PROTECTED", """MSGRESOURCEEXAMPLEPROTECTED """
    
    MSGRESOURCEIDFAIL = "MSG_RESOURCE_ID_FAIL", """MSGRESOURCEIDFAIL """
    
    MSGRESOURCEIDMISMATCH = "MSG_RESOURCE_ID_MISMATCH", """MSGRESOURCEIDMISMATCH """
    
    MSGRESOURCEIDMISSING = "MSG_RESOURCE_ID_MISSING", """MSGRESOURCEIDMISSING """
    
    MSGRESOURCENOTALLOWED = "MSG_RESOURCE_NOT_ALLOWED", """MSGRESOURCENOTALLOWED """
    
    MSGRESOURCEREQUIRED = "MSG_RESOURCE_REQUIRED", """MSGRESOURCEREQUIRED """
    
    MSGRESOURCETYPEMISMATCH = "MSG_RESOURCE_TYPE_MISMATCH", """MSGRESOURCETYPEMISMATCH """
    
    MSGSORTUNKNOWN = "MSG_SORT_UNKNOWN", """MSGSORTUNKNOWN """
    
    MSGTRANSACTIONDUPLICATEID = "MSG_TRANSACTION_DUPLICATE_ID", """MSGTRANSACTIONDUPLICATEID """
    
    MSGTRANSACTIONMISSINGID = "MSG_TRANSACTION_MISSING_ID", """MSGTRANSACTIONMISSINGID """
    
    MSGUNHANDLEDNODETYPE = "MSG_UNHANDLED_NODE_TYPE", """MSGUNHANDLEDNODETYPE """
    
    MSGUNKNOWNCONTENT = "MSG_UNKNOWN_CONTENT", """MSGUNKNOWNCONTENT """
    
    MSGUNKNOWNOPERATION = "MSG_UNKNOWN_OPERATION", """MSGUNKNOWNOPERATION """
    
    MSGUNKNOWNTYPE = "MSG_UNKNOWN_TYPE", """MSGUNKNOWNTYPE """
    
    MSGUPDATED = "MSG_UPDATED", """MSGUPDATED """
    
    MSGVERSIONAWARE = "MSG_VERSION_AWARE", """MSGVERSIONAWARE """
    
    MSGVERSIONAWARECONFLICT = "MSG_VERSION_AWARE_CONFLICT", """MSGVERSIONAWARECONFLICT """
    
    MSGVERSIONAWAREURL = "MSG_VERSION_AWARE_URL", """MSGVERSIONAWAREURL """
    
    MSGWRONGNS = "MSG_WRONG_NS", """MSGWRONGNS """
    
    SEARCHMULTIPLE = "SEARCH_MULTIPLE", """SEARCHMULTIPLE """
    
    SEARCHNONE = "SEARCH_NONE", """SEARCHNONE """
    
    UPDATEMULTIPLEMATCHES = "UPDATE_MULTIPLE_MATCHES", """UPDATEMULTIPLEMATCHES """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class OperationParameterUse(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/operation-parameter-use
    """
    
    in_ = "in", """This is an input parameter. """
    
    out = "out", """This is an output parameter. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class OrganizationAffiliationRole(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/organization-role
    """
    
    provider = "provider", """provider """
    
    agency = "agency", """An organization such as a public health agency, community/social services provider, etc. """
    
    research = "research", """An organization providing research-related services such as conducting research, recruiting research participants, analyzing data, etc. """
    
    payer = "payer", """An organization providing reimbursement, payment, or related services """
    
    diagnostics = "diagnostics", """An organization providing diagnostic testing/laboratory services """
    
    supplier = "supplier", """An organization that provides medical supplies (e.g. medical devices, equipment, pharmaceutical products, etc.) """
    
    HIEHIO = "HIE/HIO", """An organization that facilitates electronic clinical data exchange between entities """
    
    member = "member", """A type of non-ownership relationship between entities (encompasses partnerships, collaboration, joint ventures, etc.) """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class OrganizationType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/organization-type
    """
    
    prov = "prov", """An organization that provides healthcare services. """
    
    dept = "dept", """A department or ward within a hospital (Generally is not applicable to top level organizations) """
    
    team = "team", """An organizational team is usually a grouping of practitioners that perform a specific function within an organization (which could be a top level organization, or a department). """
    
    govt = "govt", """A political body, often used when including organization records for government bodies such as a Federal Government, State or Local Government. """
    
    ins = "ins", """A company that provides insurance to its subscribers that may include healthcare related policies. """
    
    pay = "pay", """A company, charity, or governmental organization, which processes claims and/or issues payments to providers on behalf of patients or groups of patients. """
    
    edu = "edu", """An educational institution that provides education or research facilities. """
    
    reli = "reli", """An organization that is identified as a part of a religious institution. """
    
    crs = "crs", """An organization that is identified as a Pharmaceutical/Clinical Research Sponsor. """
    
    cg = "cg", """An un-incorporated community group. """
    
    bus = "bus", """An organization that is a registered business or corporation but not identified by other types. """
    
    other = "other", """Other type of organization not already specified. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class OrientationType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/orientation-type
    """
    
    sense = "sense", """Sense orientation of reference sequence. """
    
    antisense = "antisense", """Antisense orientation of reference sequence. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ParticipantRequired(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/participantrequired
    """
    
    required = "required", """The participant is required to attend the appointment. """
    
    optional = "optional", """The participant may optionally attend the appointment. """
    
    informationOnly = "information-only", """The participant is excluded from the appointment, and might not be informed of the appointment taking place. (Appointment is about them, not for them - such as 2 doctors discussing results about a patient's test). """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ParticipantType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/participant-type
    """
    
    translator = "translator", """A translator who is facilitating communication with the patient during the encounter. """
    
    emergency = "emergency", """A person to be contacted in case of an emergency during the encounter. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ParticipationStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/participationstatus
    """
    
    accepted = "accepted", """The participant has accepted the appointment. """
    
    declined = "declined", """The participant has declined the appointment and will not participate in the appointment. """
    
    tentative = "tentative", """The participant has  tentatively accepted the appointment. This could be automatically created by a system and requires further processing before it can be accepted. There is no commitment that attendance will occur. """
    
    needsAction = "needs-action", """The participant needs to indicate if they accept the appointment by changing this status to one of the other statuses. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class PayeeResourceType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/resource-type-link
    """
    
    organization = "organization", """Organization resource. """
    
    patient = "patient", """Patient resource. """
    
    practitioner = "practitioner", """Practitioner resource. """
    
    relatedperson = "relatedperson", """RelatedPerson resource. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class PaymentAdjustmentReasonCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/payment-adjustment-reason
    """
    
    A001 = "a001", """Prior Payment Reversal """
    
    A002 = "a002", """Prior Overpayment """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class PaymentStatusCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/paymentstatus
    """
    
    paid = "paid", """The payment has been sent physically or electronically. """
    
    cleared = "cleared", """The payment has been received by the payee. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class PaymentTypeCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/payment-type
    """
    
    payment = "payment", """The amount is partial or complete settlement of the amounts due. """
    
    adjustment = "adjustment", """The amount is an adjustment regarding claims already paid. """
    
    advance = "advance", """The amount is an advance against future claims. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class PerformerRoleCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/consentperformer
    """
    
    consenter = "consenter", """An entity or an entity's delegatee who is the grantee in an agreement such as a consent for services, advanced directive, or a privacy consent directive in accordance with jurisdictional, organizational, or patient policy. """
    
    grantee = "grantee", """An entity which accepts certain rights or authority from a grantor. """
    
    grantor = "grantor", """An entity which agrees to confer certain rights or authority to a grantee. """
    
    delegatee = "delegatee", """A party to whom some right or authority is granted by a delegator. """
    
    delegator = "delegator", """A party that grants all or some portion its right or authority to another party. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class PlanDefinitionType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/plan-definition-type
    """
    
    orderSet = "order-set", """A pre-defined and approved group of orders related to a particular clinical condition (e.g. hypertension treatment and monitoring) or stage of care (e.g. hospital admission to Coronary Care Unit). An order set is used as a checklist for the clinician when managing a patient with a specific condition. It is a structured collection of orders relevant to that condition and presented to the clinician in a computerized provider order entry (CPOE) system. """
    
    clinicalProtocol = "clinical-protocol", """Defines a desired/typical sequence of clinical activities including preconditions, triggers and temporal relationships. """
    
    ecaRule = "eca-rule", """A decision support rule of the form [on Event] if Condition then Action. It is intended to be a shareable, computable definition of actions that should be taken whenever some condition is met in response to a particular event or events. """
    
    workflowDefinition = "workflow-definition", """Defines the steps for a group of one or more systems in an event flow process along with the step constraints, sequence, pre-conditions and decision points to complete a particular objective. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class PractitionerRoleCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/practitioner-role
    """
    
    doctor = "doctor", """A qualified/registered medical practitioner """
    
    nurse = "nurse", """A practitioner with nursing experience that may be qualified/registered """
    
    pharmacist = "pharmacist", """A qualified/registered/licensed pharmacist """
    
    researcher = "researcher", """A practitioner that may perform research """
    
    teacher = "teacher", """Someone who is able to provide educational services """
    
    ict = "ict", """Someone who is qualified in Information and Communication Technologies """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class PractitionerSpecialty(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/practitioner-specialty
    """
    
    cardio = "cardio", """cardio """
    
    dent = "dent", """dent """
    
    dietary = "dietary", """dietary """
    
    midw = "midw", """midw """
    
    sysarch = "sysarch", """sysarch """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class PrecisionEstimateType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/precision-estimate-type
    """
    
    CI = "CI", """confidence interval. """
    
    IQR = "IQR", """interquartile range. """
    
    SD = "SD", """standard deviation. """
    
    SE = "SE", """standard error. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class PrimarySourceType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/primary-source-type
    """
    
    licBoard = "lic-board", """licBoard """
    
    prim = "prim", """prim """
    
    contEd = "cont-ed", """contEd """
    
    postServ = "post-serv", """postServ """
    
    relOwn = "rel-own", """relOwn """
    
    regAuth = "reg-auth", """regAuth """
    
    legal = "legal", """legal """
    
    issuer = "issuer", """issuer """
    
    authSource = "auth-source", """authSource """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ProcedureDeviceActionCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/device-action
    """
    
    implanted = "implanted", """The device was implanted in the patient during the procedure. """
    
    explanted = "explanted", """The device was explanted from the patient during the procedure. """
    
    manipulated = "manipulated", """The device remains in the patient, but its location, settings, or functionality was changed. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ProcedureProgressStatusCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/procedure-progress-status-code
    """
    
    inOperatingRoom = "in-operating-room", """A patient is in the Operating Room. """
    
    prepared = "prepared", """The patient is prepared for a procedure. """
    
    anesthesiaInduced = "anesthesia-induced", """The patient is under anesthesia. """
    
    openIncision = "open-incision", """The patient has open incision(s). """
    
    closedIncision = "closed-incision", """The patient has incision(s) closed. """
    
    inRecoveryRoom = "in-recovery-room", """The patient is in the recovery room. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ProcessPriorityCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/processpriority
    """
    
    stat = "stat", """Immediately in real time. """
    
    normal = "normal", """With best effort. """
    
    deferred = "deferred", """Later, when possible. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class PropertyRepresentation(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/property-representation
    """
    
    xmlAttr = "xmlAttr", """In XML, this property is represented as an attribute not an element. """
    
    xmlText = "xmlText", """This element is represented using the XML text attribute (primitives only). """
    
    typeAttr = "typeAttr", """The type of this element is indicated using xsi:type. """
    
    cdaText = "cdaText", """Use CDA narrative instead of XHTML. """
    
    xhtml = "xhtml", """The property is represented using XHTML. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class PropertyType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/concept-property-type
    """
    
    code = "code", """The property value is a code that identifies a concept defined in the code system. """
    
    coding = "Coding", """The property  value is a code defined in an external code system. This may be used for translations, but is not the intent. """
    
    string = "string", """The property value is a string. """
    
    integer = "integer", """The property value is a string (often used to assign ranking values to concepts for supporting score assessments). """
    
    boolean = "boolean", """The property value is a boolean true | false. """
    
    dateTime = "dateTime", """The property is a date or a date + time. """
    
    decimal = "decimal", """The property value is a decimal number. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ProvenanceEntityRole(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/provenance-entity-role
    """
    
    derivation = "derivation", """A transformation of an entity into another, an update of an entity resulting in a new one, or the construction of a new entity based on a pre-existing entity. """
    
    revision = "revision", """A derivation for which the resulting entity is a revised version of some original. """
    
    quotation = "quotation", """The repeat of (some or all of) an entity, such as text or image, by someone who might or might not be its original author. """
    
    source = "source", """A primary source for a topic refers to something produced by some agent with direct experience and knowledge about the topic, at the time of the topic's study, without benefit from hindsight. """
    
    removal = "removal", """A derivation for which the entity is removed from accessibility usually through the use of the Delete operation. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ProvenanceParticipantRole(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/provenance-participant-role
    """
    
    enterer = "enterer", """A person entering the data into the originating system """
    
    performer = "performer", """A person, animal, organization or device that who actually and principally carries out the activity """
    
    author = "author", """A party that originates the resource and therefore has responsibility for the information given in the resource and ownership of this resource """
    
    verifier = "verifier", """A person who verifies the correctness and appropriateness of activity """
    
    legal = "legal", """The person authenticated the content and accepted legal responsibility for its content """
    
    attester = "attester", """A verifier who attests to the accuracy of the resource """
    
    informant = "informant", """A person who reported information that contributed to the resource """
    
    custodian = "custodian", """The entity that is accountable for maintaining a true an accurate copy of the original record """
    
    assembler = "assembler", """A device that operates independently of an author on custodian's algorithms for data extraction of existing information for purpose of generating a new artifact. """
    
    composer = "composer", """A device used by an author to record new information, which may also be used by the author to select existing information for aggregation with newly recorded information for the purpose of generating a new artifact. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ProvenanceParticipantType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/provenance-participant-type
    """
    
    enterer = "enterer", """A person entering the data into the originating system """
    
    performer = "performer", """A person, animal, organization or device that who actually and principally carries out the activity """
    
    author = "author", """A party that originates the resource and therefore has responsibility for the information given in the resource and ownership of this resource """
    
    verifier = "verifier", """A person who verifies the correctness and appropriateness of activity """
    
    legal = "legal", """The person authenticated the content and accepted legal responsibility for its content """
    
    attester = "attester", """A verifier who attests to the accuracy of the resource """
    
    informant = "informant", """A person who reported information that contributed to the resource """
    
    custodian = "custodian", """The entity that is accountable for maintaining a true an accurate copy of the original record """
    
    assembler = "assembler", """A device that operates independently of an author on custodian's algorithms for data extraction of existing information for purpose of generating a new artifact. """
    
    composer = "composer", """A device used by an author to record new information, which may also be used by the author to select existing information for aggregation with newly recorded information for the purpose of generating a new artifact. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class PublicationStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/publication-status
    """
    
    draft = "draft", """This resource is still under development and is not yet considered to be ready for normal use. """
    
    active = "active", """This resource is ready for normal use. """
    
    retired = "retired", """This resource has been withdrawn or superseded and should no longer be used. """
    
    unknown = "unknown", """The authoring system does not know which of the status values currently applies for this resource.  Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, it's just not known which one. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class PushTypeAvailable(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/push-type-available
    """
    
    specific = "specific", """specific """
    
    any = "any", """any """
    
    source = "source", """source """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class QualityOfEvidenceRating(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/evidence-quality
    """
    
    high = "high", """High quality evidence. """
    
    moderate = "moderate", """Moderate quality evidence. """
    
    low = "low", """Low quality evidence. """
    
    veryLow = "very-low", """Very low quality evidence. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class QualityType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/quality-type
    """
    
    indel = "indel", """INDEL Comparison. """
    
    snp = "snp", """SNP Comparison. """
    
    unknown = "unknown", """UNKNOWN Comparison. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class QuantityComparator(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/quantity-comparator
    """
    
    lt = "<", """The actual value is less than the given value. """
    
    lte = "<=", """The actual value is less than or equal to the given value. """
    
    gte = ">=", """The actual value is greater than or equal to the given value. """
    
    gt = ">", """The actual value is greater than the given value. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class QuestionnaireItemOperator(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/questionnaire-enable-operator
    """
    
    exists = "exists", """True if whether an answer exists is equal to the enableWhen answer (which must be a boolean). """
    
    eq = "=", """True if whether at least one answer has a value that is equal to the enableWhen answer. """
    
    ne = "!=", """True if whether at least no answer has a value that is equal to the enableWhen answer. """
    
    gt = ">", """True if whether at least no answer has a value that is greater than the enableWhen answer. """
    
    lt = "<", """True if whether at least no answer has a value that is less than the enableWhen answer. """
    
    gte = ">=", """True if whether at least no answer has a value that is greater or equal to the enableWhen answer. """
    
    lte = "<=", """True if whether at least no answer has a value that is less or equal to the enableWhen answer. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class QuestionnaireItemType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/item-type
    """
    
    group = "group", """An item with no direct answer but should have at least one child item. """
    
    display = "display", """Text for display that will not capture an answer or have child items. """
    
    question = "question", """An item that defines a specific answer to be captured, and which may have child items. (the answer provided in the QuestionnaireResponse should be of the defined datatype). """
    
    boolean = "boolean", """Question with a yes/no answer (valueBoolean). """
    
    decimal = "decimal", """Question with is a real number answer (valueDecimal). """
    
    integer = "integer", """Question with an integer answer (valueInteger). """
    
    date = "date", """Question with a date answer (valueDate). """
    
    dateTime = "dateTime", """Question with a date and time answer (valueDateTime). """
    
    time = "time", """Question with a time (hour:minute:second) answer independent of date. (valueTime). """
    
    string = "string", """Question with a short (few words to short sentence) free-text entry answer (valueString). """
    
    text = "text", """Question with a long (potentially multi-paragraph) free-text entry answer (valueString). """
    
    url = "url", """Question with a URL (website, FTP site, etc.) answer (valueUri). """
    
    choice = "choice", """Question with a Coding drawn from a list of possible answers (specified in either the answerOption property, or via the valueset referenced in the answerValueSet property) as an answer (valueCoding). """
    
    openChoice = "open-choice", """Answer is a Coding drawn from a list of possible answers (as with the choice type) or a free-text entry in a string (valueCoding or valueString). """
    
    attachment = "attachment", """Question with binary content such as an image, PDF, etc. as an answer (valueAttachment). """
    
    reference = "reference", """Question with a reference to another resource (practitioner, organization, etc.) as an answer (valueReference). """
    
    quantity = "quantity", """Question with a combination of a numeric value and unit, potentially with a comparator (<, >, etc.) as an answer. (valueQuantity) There is an extension 'http://hl7.org/fhir/StructureDefinition/questionnaire-unit' that can be used to define what unit should be captured (or the unit that has a ucum conversion from the provided unit). """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class QuestionnaireItemUIControlCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/questionnaire-item-control
    """
    
    group = "group", """UI controls relevant to organizing groups of questions """
    
    list = "list", """Questions within the group should be listed sequentially """
    
    table = "table", """Questions within the group are rows in the table with possible answers as columns.  Used for 'choice' questions. """
    
    htable = "htable", """Questions within the group are columns in the table with possible answers as rows.  Used for 'choice' questions. """
    
    gtable = "gtable", """Questions within the group are columns in the table with each group repetition as a row.  Used for single-answer questions. """
    
    atable = "atable", """This table has one row - for the question.  Permitted answers are columns.  Used for choice questions. """
    
    header = "header", """The group is to be continuously visible at the top of the questionnaire """
    
    footer = "footer", """The group is to be continuously visible at the bottom of the questionnaire """
    
    text = "text", """UI controls relevant to rendering questionnaire text items """
    
    inline = "inline", """Text is displayed as a paragraph in a sequential position between sibling items (default behavior) """
    
    prompt = "prompt", """Text is displayed immediately below or within the answer-entry area of the containing question item (typically as a guide for what to enter) """
    
    unit = "unit", """Text is displayed adjacent (horizontally or vertically) to the answer space for the parent question, typically to indicate a unit of measure """
    
    lower = "lower", """Text is displayed to the left of the set of answer choices or a scaling control for the parent question item to indicate the meaning of the 'lower' bound.  E.g. 'Strongly disagree' """
    
    upper = "upper", """Text is displayed to the right of the set of answer choices or a scaling control for the parent question item to indicate the meaning of the 'upper' bound.  E.g. 'Strongly agree' """
    
    flyover = "flyover", """Text is temporarily visible over top of an item if the mouse is positioned over top of the text for the containing item """
    
    help = "help", """Text is displayed in a dialog box or similar control if invoked by pushing a button or some other UI-appropriate action to request 'help' for a question, group or the questionnaire as a whole (depending what the text is nested within) """
    
    question = "question", """UI controls relevant to capturing question data """
    
    autocomplete = "autocomplete", """A control which provides a list of potential matches based on text entered into a control.  Used for large choice sets where text-matching is an appropriate discovery mechanism. """
    
    dropDown = "drop-down", """A control where an item (or multiple items) can be selected from a list that is only displayed when the user is editing the field. """
    
    checkBox = "check-box", """A control where choices are listed with a box beside them.  The box can be toggled to select or de-select a given choice.  Multiple selections may be possible. """
    
    lookup = "lookup", """A control where editing an item spawns a separate dialog box or screen permitting a user to navigate, filter or otherwise discover an appropriate match.  Useful for large choice sets where text matching is not an appropriate discovery mechanism.  Such screens must generally be tuned for the specific choice list structure. """
    
    radioButton = "radio-button", """A control where choices are listed with a button beside them.  The button can be toggled to select or de-select a given choice.  Selecting one item deselects all others. """
    
    slider = "slider", """A control where an axis is displayed between the high and low values and the control can be visually manipulated to select a value anywhere on the axis. """
    
    spinner = "spinner", """A control where a list of numeric or other ordered values can be scrolled through via arrows. """
    
    textBox = "text-box", """A control where a user can type in their answer freely. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class QuestionnaireItemUsageMode(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/questionnaire-usage-mode
    """
    
    captureDisplay = "capture-display", """Render the item regardless of usage mode. """
    
    capture = "capture", """Render the item only when capturing data. """
    
    display = "display", """Render the item only when displaying a completed form. """
    
    displayNonEmpty = "display-non-empty", """Render the item only when displaying a completed form and the item has been answered (or has child items that have been answered). """
    
    captureDisplayNonEmpty = "capture-display-non-empty", """Render the item when capturing data or when displaying a completed form and the item has been answered (or has child items that have been answered). """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class QuestionnaireResponseStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/questionnaire-answers-status
    """
    
    inProgress = "in-progress", """This QuestionnaireResponse has been partially filled out with answers but changes or additions are still expected to be made to it. """
    
    completed = "completed", """This QuestionnaireResponse has been filled out with answers and the current content is regarded as definitive. """
    
    amended = "amended", """This QuestionnaireResponse has been filled out with answers, then marked as complete, yet changes or additions have been made to it afterwards. """
    
    enteredInError = "entered-in-error", """This QuestionnaireResponse was entered in error and voided. """
    
    stopped = "stopped", """This QuestionnaireResponse has been partially filled out with answers but has been abandoned. It is unknown whether changes or additions are expected to be made to it. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class QuestionnaireTextCategories(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/questionnaire-display-category
    """
    
    instructions = "instructions", """The text provides guidance on how to populate or use a portion of the questionnaire (or the questionnaire as a whole). """
    
    security = "security", """The text provides guidance on how the information should be or will be handled from a security/confidentiality/access control perspective when completed """
    
    help = "help", """The text provides additional guidance on populating the containing item.  Help text isn't necessarily expected to be rendered as part of the form, but may instead be made available through fly-over, pop-up button, link to a "help" page, etc. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ReasonMedicationGivenCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/reason-medication-given
    """
    
    A = "a", """No reason known. """
    
    B = "b", """The administration was following an ordered protocol. """
    
    C = "c", """The administration was needed to treat an emergency. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ReferenceHandlingPolicy(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/reference-handling-policy
    """
    
    literal = "literal", """The server supports and populates Literal references (i.e. using Reference.reference) where they are known (this code does not guarantee that all references are literal; see 'enforced'). """
    
    logical = "logical", """The server allows logical references (i.e. using Reference.identifier). """
    
    resolves = "resolves", """The server will attempt to resolve logical references to literal references - i.e. converting Reference.identifier to Reference.reference (if resolution fails, the server may still accept resources; see logical). """
    
    enforced = "enforced", """The server enforces that references have integrity - e.g. it ensures that references can always be resolved. This is typically the case for clinical record systems, but often not the case for middleware/proxy systems. """
    
    local = "local", """The server does not support references that point to other servers. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ReferenceVersionRules(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/reference-version-rules
    """
    
    either = "either", """The reference may be either version independent or version specific. """
    
    independent = "independent", """The reference must be version independent. """
    
    specific = "specific", """The reference must be version specific. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ReferralMethod(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/service-referral-method
    """
    
    fax = "fax", """Referrals may be accepted by fax. """
    
    phone = "phone", """Referrals may be accepted over the phone from a practitioner. """
    
    elec = "elec", """Referrals may be accepted via a secure messaging system. To determine the types of secure messaging systems supported, refer to the identifiers collection. Callers will need to understand the specific identifier system used to know that they are able to transmit messages. """
    
    semail = "semail", """Referrals may be accepted via a secure email. To send please encrypt with the services public key. """
    
    mail = "mail", """Referrals may be accepted via regular postage (or hand delivered). """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class RejectionCriterion(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/rejection-criteria
    """
    
    hemolized = "hemolized", """blood specimen hemolized. """
    
    insufficient = "insufficient", """insufficient quantity of specimen. """
    
    broken = "broken", """specimen container broken. """
    
    clotted = "clotted", """specimen clotted. """
    
    wrongTemperature = "wrong-temperature", """specimen temperature inappropriate. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class RelatedArtifactType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/related-artifact-type
    """
    
    documentation = "documentation", """Additional documentation for the knowledge resource. This would include additional instructions on usage as well as additional information on clinical context or appropriateness. """
    
    justification = "justification", """A summary of the justification for the knowledge resource including supporting evidence, relevant guidelines, or other clinically important information. This information is intended to provide a way to make the justification for the knowledge resource available to the consumer of interventions or results produced by the knowledge resource. """
    
    citation = "citation", """Bibliographic citation for papers, references, or other relevant material for the knowledge resource. This is intended to allow for citation of related material, but that was not necessarily specifically prepared in connection with this knowledge resource. """
    
    predecessor = "predecessor", """The previous version of the knowledge resource. """
    
    successor = "successor", """The next version of the knowledge resource. """
    
    derivedFrom = "derived-from", """The knowledge resource is derived from the related artifact. This is intended to capture the relationship in which a particular knowledge resource is based on the content of another artifact, but is modified to capture either a different set of overall requirements, or a more specific set of requirements such as those involved in a particular institution or clinical setting. """
    
    dependsOn = "depends-on", """The knowledge resource depends on the given related artifact. """
    
    composedOf = "composed-of", """The knowledge resource is composed of the given related artifact. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class RepositoryType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/repository-type
    """
    
    directlink = "directlink", """When URL is clicked, the resource can be seen directly (by webpage or by download link format). """
    
    openapi = "openapi", """When the API method (e.g. [base_url]/[parameter]) related with the URL of the website is executed, the resource can be seen directly (usually in JSON or XML format). """
    
    login = "login", """When logged into the website, the resource can be seen. """
    
    oauth = "oauth", """When logged in and  follow the API in the website related with URL, the resource can be seen. """
    
    other = "other", """Some other complicated or particular way to get resource from URL. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class RequestIntent(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/request-intent
    """
    
    proposal = "proposal", """The request is a suggestion made by someone/something that does not have an intention to ensure it occurs and without providing an authorization to act. """
    
    plan = "plan", """The request represents an intention to ensure something occurs without providing an authorization for others to act. """
    
    directive = "directive", """The request represents a legally binding instruction authored by a Patient or RelatedPerson. """
    
    order = "order", """The request represents a request/demand and authorization for action by a Practitioner. """
    
    originalOrder = "original-order", """The request represents an original authorization for action. """
    
    reflexOrder = "reflex-order", """The request represents an automatically generated supplemental authorization for action based on a parent authorization together with initial results of the action taken against that parent authorization. """
    
    fillerOrder = "filler-order", """The request represents the view of an authorization instantiated by a fulfilling system representing the details of the fulfiller's intention to act upon a submitted order. """
    
    instanceOrder = "instance-order", """An order created in fulfillment of a broader order that represents the authorization for a single activity occurrence.  E.g. The administration of a single dose of a drug. """
    
    option = "option", """The request represents a component or option for a RequestGroup that establishes timing, conditionality and/or other constraints among a set of requests.  Refer to [[[RequestGroup]]] for additional information on how this status is used. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class RequestPriority(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/request-priority
    """
    
    routine = "routine", """The request has normal priority. """
    
    urgent = "urgent", """The request should be actioned promptly - higher priority than routine. """
    
    asap = "asap", """The request should be actioned as soon as possible - higher priority than urgent. """
    
    stat = "stat", """The request should be actioned immediately - highest possible priority.  E.g. an emergency. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class RequestResourceType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/request-resource-types
    """
    
    appointment = "Appointment", """A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s). """
    
    appointmentResponse = "AppointmentResponse", """A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection. """
    
    carePlan = "CarePlan", """Healthcare plan for patient or group. """
    
    claim = "Claim", """Claim, Pre-determination or Pre-authorization. """
    
    communicationRequest = "CommunicationRequest", """A request for information to be sent to a receiver. """
    
    contract = "Contract", """Legal Agreement. """
    
    deviceRequest = "DeviceRequest", """Medical device request. """
    
    enrollmentRequest = "EnrollmentRequest", """Enrollment request. """
    
    immunizationRecommendation = "ImmunizationRecommendation", """Guidance or advice relating to an immunization. """
    
    medicationRequest = "MedicationRequest", """Ordering of medication for patient or group. """
    
    nutritionOrder = "NutritionOrder", """Diet, formula or nutritional supplement request. """
    
    serviceRequest = "ServiceRequest", """A record of a request for service such as diagnostic investigations, treatments, or operations to be performed. """
    
    supplyRequest = "SupplyRequest", """Request for a medication, substance or device. """
    
    task = "Task", """A task to be performed. """
    
    visionPrescription = "VisionPrescription", """Prescription for vision correction products for a patient. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class RequestStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/request-status
    """
    
    draft = "draft", """The request has been created but is not yet complete or ready for action. """
    
    active = "active", """The request is in force and ready to be acted upon. """
    
    onHold = "on-hold", """The request (and any implicit authorization to act) has been temporarily withdrawn but is expected to resume in the future. """
    
    revoked = "revoked", """The request (and any implicit authorization to act) has been terminated prior to the known full completion of the intended actions.  No further activity should occur. """
    
    completed = "completed", """The activity described by the request has been fully performed.  No further activity will occur. """
    
    enteredInError = "entered-in-error", """This request should never have existed and should be considered 'void'.  (It is possible that real-world decisions were based on it.  If real-world activity has occurred, the status should be "revoked" rather than "entered-in-error".). """
    
    unknown = "unknown", """The authoring/source system does not know which of the status values currently applies for this request.  Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply,  but the authoring/source system does not know which. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ResearchElementType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/research-element-type
    """
    
    population = "population", """The element defines the population that forms the basis for research. """
    
    exposure = "exposure", """The element defines an exposure within the population that is being researched. """
    
    outcome = "outcome", """The element defines an outcome within the population that is being researched. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ResearchStudyObjectiveType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/research-study-objective-type
    """
    
    primary = "primary", """The main question to be answered, and the one that drives any statistical planning for the study—e.g., calculation of the sample size to provide the appropriate power for statistical testing. """
    
    secondary = "secondary", """Question to be answered in the study that is of lesser importance than the primary objective. """
    
    exploratory = "exploratory", """Exploratory questions to be answered in the study. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ResearchStudyPhase(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/research-study-phase
    """
    
    NA = "n-a", """Trials without phases (for example, studies of devices or behavioral interventions). """
    
    earlyPhase1 = "early-phase-1", """Designation for optional exploratory trials conducted in accordance with the United States Food and Drug Administration's (FDA) 2006 Guidance on Exploratory Investigational New Drug (IND) Studies. Formerly called Phase 0. """
    
    phase1 = "phase-1", """Includes initial studies to determine the metabolism and pharmacologic actions of drugs in humans, the side effects associated with increasing doses, and to gain early evidence of effectiveness; may include healthy participants and/or patients. """
    
    phase1Phase2 = "phase-1-phase-2", """Trials that are a combination of phases 1 and 2. """
    
    phase2 = "phase-2", """Includes controlled clinical studies conducted to evaluate the effectiveness of the drug for a particular indication or indications in participants with the disease or condition under study and to determine the common short-term side effects and risks. """
    
    phase2Phase3 = "phase-2-phase-3", """Trials that are a combination of phases 2 and 3. """
    
    phase3 = "phase-3", """Includes trials conducted after preliminary evidence suggesting effectiveness of the drug has been obtained, and are intended to gather additional information to evaluate the overall benefit-risk relationship of the drug. """
    
    phase4 = "phase-4", """Studies of FDA-approved drugs to delineate additional information including the drug's risks, benefits, and optimal use. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ResearchStudyPrimaryPurposeType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/research-study-prim-purp-type
    """
    
    treatment = "treatment", """One or more interventions are being evaluated for treating a disease, syndrome, or condition. """
    
    prevention = "prevention", """One or more interventions are being assessed for preventing the development of a specific disease or health condition. """
    
    diagnostic = "diagnostic", """One or more interventions are being evaluated for identifying a disease or health condition. """
    
    supportiveCare = "supportive-care", """One or more interventions are evaluated for maximizing comfort, minimizing side effects, or mitigating against a decline in the participant's health or function. """
    
    screening = "screening", """One or more interventions are assessed or examined for identifying a condition, or risk factors for a condition, in people who are not yet known to have the condition or risk factor. """
    
    healthServicesResearch = "health-services-research", """One or more interventions for evaluating the delivery, processes, management, organization, or financing of healthcare. """
    
    basicScience = "basic-science", """One or more interventions for examining the basic mechanism of action (for example, physiology or biomechanics of an intervention). """
    
    deviceFeasibility = "device-feasibility", """An intervention of a device product is being evaluated to determine the feasibility of the product or to test a prototype device and not health outcomes. Such studies are conducted to confirm the design and operating specifications of a device before beginning a full clinical trial. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ResearchStudyReasonStopped(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/research-study-reason-stopped
    """
    
    accrualGoalMet = "accrual-goal-met", """The study prematurely ended because the accrual goal was met. """
    
    closedDueToToxicity = "closed-due-to-toxicity", """The study prematurely ended due to toxicity. """
    
    closedDueToLackOfStudyProgress = "closed-due-to-lack-of-study-progress", """The study prematurely ended due to lack of study progress. """
    
    temporarilyClosedPerStudyDesign = "temporarily-closed-per-study-design", """The study prematurely ended temporarily per study design. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ResearchStudyStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/research-study-status
    """
    
    active = "active", """Study is opened for accrual. """
    
    administrativelyCompleted = "administratively-completed", """Study is completed prematurely and will not resume; patients are no longer examined nor treated. """
    
    approved = "approved", """Protocol is approved by the review board. """
    
    closedToAccrual = "closed-to-accrual", """Study is closed for accrual; patients can be examined and treated. """
    
    closedToAccrualAndIntervention = "closed-to-accrual-and-intervention", """Study is closed to accrual and intervention, i.e. the study is closed to enrollment, all study subjects have completed treatment or intervention but are still being followed according to the primary objective of the study. """
    
    completed = "completed", """Study is closed to accrual and intervention, i.e. the study is closed to enrollment, all study subjects have completed treatment
or intervention but are still being followed according to the primary objective of the study. """
    
    disapproved = "disapproved", """Protocol was disapproved by the review board. """
    
    inReview = "in-review", """Protocol is submitted to the review board for approval. """
    
    temporarilyClosedToAccrual = "temporarily-closed-to-accrual", """Study is temporarily closed for accrual; can be potentially resumed in the future; patients can be examined and treated. """
    
    temporarilyClosedToAccrualAndIntervention = "temporarily-closed-to-accrual-and-intervention", """Study is temporarily closed for accrual and intervention and potentially can be resumed in the future. """
    
    withdrawn = "withdrawn", """Protocol was withdrawn by the lead organization. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ResearchSubjectStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/research-subject-status
    """
    
    candidate = "candidate", """An identified person that can be considered for inclusion in a study. """
    
    eligible = "eligible", """A person that has met the eligibility criteria for inclusion in a study. """
    
    followUp = "follow-up", """A person is no longer receiving study intervention and/or being evaluated with tests and procedures according to the protocol, but they are being monitored on a protocol-prescribed schedule. """
    
    ineligible = "ineligible", """A person who did not meet one or more criteria required for participation in a study is considered to have failed screening or
is ineligible for the study. """
    
    notRegistered = "not-registered", """A person for whom registration was not completed. """
    
    offStudy = "off-study", """A person that has ended their participation on a study either because their treatment/observation is complete or through not
responding, withdrawal, non-compliance and/or adverse event. """
    
    onStudy = "on-study", """A person that is enrolled or registered on a study. """
    
    onStudyIntervention = "on-study-intervention", """The person is receiving the treatment or participating in an activity (e.g. yoga, diet, etc.) that the study is evaluating. """
    
    onStudyObservation = "on-study-observation", """The subject is being evaluated via tests and assessments according to the study calendar, but is not receiving any intervention. Note that this state is study-dependent and might not exist in all studies.  A synonym for this is "short-term follow-up". """
    
    pendingOnStudy = "pending-on-study", """A person is pre-registered for a study. """
    
    potentialCandidate = "potential-candidate", """A person that is potentially eligible for participation in the study. """
    
    screening = "screening", """A person who is being evaluated for eligibility for a study. """
    
    withdrawn = "withdrawn", """The person has withdrawn their participation in the study before registration. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ResourceSecurityCategory(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/resource-security-category
    """
    
    anonymous = "anonymous", """These resources tend to not contain any individual data, or business sensitive data. Most often these Resources will be available for anonymous access, meaning there is no access control based on the user or system requesting. However these Resources do tend to contain important information that must be authenticated back to the source publishing them, and protected from integrity failures in communication. For this reason server authenticated https (TLS) is recommended to provide authentication of the server and integrity protection in transit. This is normal web-server use of https. """
    
    business = "business", """These Resources tend to not contain any individual data, but do have data that describe business or service sensitive data. The use of the term Business is not intended to only mean an incorporated business, but rather the more broad concept of an organization, location, or other group that is not identifable as individuals. Often these resources will require some for of client authentication to assure that only authorized access is given. The client access control may be to individuals, or may be to system identity. For this purpose possible client authentication methods such as: mutual-authenticated-TLS, APIKey, App signed JWT, or App OAuth client-id JWT For example: a App that uses a Business protected Provider Directory to determine other business endpoint details. """
    
    individual = "individual", """These Resources do NOT contain Patient data, but do contain individual information about other participants. These other individuals are Practitioners, PractionerRole, CareTeam, or other users. These identities are needed to enable the practice of healthcare. These identities are identities under general privacy regulations, and thus must consider Privacy risk. Often access to these other identities are covered by business relationships. For this purpose access to these Resources will tend to be Role specific using methods such as RBAC or ABAC. """
    
    patient = "patient", """These Resources make up the bulk of FHIR and therefore are the most commonly understood. These Resources contain highly sesitive health information, or are closely linked to highly sensitive health information. These Resources will often use the security labels to differentiate various confidentiality levels within this broad group of Patient Sensitive data. Access to these Resources often requires a declared Purpose Of Use. Access to these Resources is often controlled by a Privacy Consent. """
    
    notClassified = "not-classified", """Some Resources can be used for a wide scope of use-cases that span very sensitive to very non-sensitive. These Resources do not fall into any of the above classifications, as their sensitivity is highly variable. These Resources will need special handling. These Resources often contain metadata that describes the content in a way that can be used for Access Control decisions. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ResourceType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/resource-types
    """
    
    account = "Account", """A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc. """
    
    activityDefinition = "ActivityDefinition", """This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context. """
    
    adverseEvent = "AdverseEvent", """Actual or  potential/avoided event causing unintended physical injury resulting from or contributed to by medical care, a research study or other healthcare setting factors that requires additional monitoring, treatment, or hospitalization, or that results in death. """
    
    allergyIntolerance = "AllergyIntolerance", """Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance. """
    
    appointment = "Appointment", """A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s). """
    
    appointmentResponse = "AppointmentResponse", """A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection. """
    
    auditEvent = "AuditEvent", """A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage. """
    
    basic = "Basic", """Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification. """
    
    binary = "Binary", """A resource that represents the data of a single raw artifact as digital content accessible in its native format.  A Binary resource can contain any content, whether text, image, pdf, zip archive, etc. """
    
    biologicallyDerivedProduct = "BiologicallyDerivedProduct", """A material substance originating from a biological entity intended to be transplanted or infused
into another (possibly the same) biological entity. """
    
    bodyStructure = "BodyStructure", """Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case. """
    
    bundle = "Bundle", """A container for a collection of resources. """
    
    capabilityStatement = "CapabilityStatement", """A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation. """
    
    carePlan = "CarePlan", """Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions. """
    
    careTeam = "CareTeam", """The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care for a patient. """
    
    catalogEntry = "CatalogEntry", """Catalog entries are wrappers that contextualize items included in a catalog. """
    
    chargeItem = "ChargeItem", """The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation. """
    
    chargeItemDefinition = "ChargeItemDefinition", """The ChargeItemDefinition resource provides the properties that apply to the (billing) codes necessary to calculate costs and prices. The properties may differ largely depending on type and realm, therefore this resource gives only a rough structure and requires profiling for each type of billing code system. """
    
    claim = "Claim", """A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement. """
    
    claimResponse = "ClaimResponse", """This resource provides the adjudication details from the processing of a Claim resource. """
    
    clinicalImpression = "ClinicalImpression", """A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score. """
    
    codeSystem = "CodeSystem", """The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content. """
    
    communication = "Communication", """An occurrence of information being transmitted; e.g. an alert that was sent to a responsible provider, a public health agency that was notified about a reportable condition. """
    
    communicationRequest = "CommunicationRequest", """A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition. """
    
    compartmentDefinition = "CompartmentDefinition", """A compartment definition that defines how resources are accessed on a server. """
    
    composition = "Composition", """A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.). """
    
    conceptMap = "ConceptMap", """A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models. """
    
    condition = "Condition", """A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern. """
    
    consent = "Consent", """A record of a healthcare consumer’s  choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time. """
    
    contract = "Contract", """Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement. """
    
    coverage = "Coverage", """Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment. """
    
    coverageEligibilityRequest = "CoverageEligibilityRequest", """The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy. """
    
    coverageEligibilityResponse = "CoverageEligibilityResponse", """This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource. """
    
    detectedIssue = "DetectedIssue", """Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc. """
    
    device = "Device", """A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device. """
    
    deviceDefinition = "DeviceDefinition", """The characteristics, operational status and capabilities of a medical-related component of a medical device. """
    
    deviceMetric = "DeviceMetric", """Describes a measurement, calculation or setting capability of a medical device. """
    
    deviceRequest = "DeviceRequest", """Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker. """
    
    deviceUseStatement = "DeviceUseStatement", """A record of a device being used by a patient where the record is the result of a report from the patient or another clinician. """
    
    diagnosticReport = "DiagnosticReport", """The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports. """
    
    documentManifest = "DocumentManifest", """A collection of documents compiled for a purpose together with metadata that applies to the collection. """
    
    documentReference = "DocumentReference", """A reference to a document of any kind for any purpose. Provides metadata about the document so that the document can be discovered and managed. The scope of a document is any seralized object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, scanned paper, and non-patient specific documents like policy text. """
    
    domainResource = "DomainResource", """A resource that includes narrative, extensions, and contained resources. """
    
    effectEvidenceSynthesis = "EffectEvidenceSynthesis", """The EffectEvidenceSynthesis resource describes the difference in an outcome between exposures states in a population where the effect estimate is derived from a combination of research studies. """
    
    encounter = "Encounter", """An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient. """
    
    endpoint = "Endpoint", """The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b or a REST endpoint for another FHIR server. This may include any security context information. """
    
    enrollmentRequest = "EnrollmentRequest", """This resource provides the insurance enrollment details to the insurer regarding a specified coverage. """
    
    enrollmentResponse = "EnrollmentResponse", """This resource provides enrollment and plan details from the processing of an EnrollmentRequest resource. """
    
    episodeOfCare = "EpisodeOfCare", """An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time. """
    
    eventDefinition = "EventDefinition", """The EventDefinition resource provides a reusable description of when a particular event can occur. """
    
    evidence = "Evidence", """The Evidence resource describes the conditional state (population and any exposures being compared within the population) and outcome (if specified) that the knowledge (evidence, assertion, recommendation) is about. """
    
    evidenceVariable = "EvidenceVariable", """The EvidenceVariable resource describes a "PICO" element that knowledge (evidence, assertion, recommendation) is about. """
    
    exampleScenario = "ExampleScenario", """Example of workflow instance. """
    
    explanationOfBenefit = "ExplanationOfBenefit", """This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. """
    
    familyMemberHistory = "FamilyMemberHistory", """Significant health conditions for a person related to the patient relevant in the context of care for the patient. """
    
    flag = "Flag", """Prospective warnings of potential issues when providing care to the patient. """
    
    goal = "Goal", """Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc. """
    
    graphDefinition = "GraphDefinition", """A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set. """
    
    group = "Group", """Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization. """
    
    guidanceResponse = "GuidanceResponse", """A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken. """
    
    healthcareService = "HealthcareService", """The details of a healthcare service available at a location. """
    
    imagingStudy = "ImagingStudy", """Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities. """
    
    immunization = "Immunization", """Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party. """
    
    immunizationEvaluation = "ImmunizationEvaluation", """Describes a comparison of an immunization event against published recommendations to determine if the administration is "valid" in relation to those  recommendations. """
    
    immunizationRecommendation = "ImmunizationRecommendation", """A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification. """
    
    implementationGuide = "ImplementationGuide", """A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts. """
    
    insurancePlan = "InsurancePlan", """Details of a Health Insurance product/plan provided by an organization. """
    
    invoice = "Invoice", """Invoice containing collected ChargeItems from an Account with calculated individual and total price for Billing purpose. """
    
    library = "Library", """The Library resource is a general-purpose container for knowledge asset definitions. It can be used to describe and expose existing knowledge assets such as logic libraries and information model descriptions, as well as to describe a collection of knowledge assets. """
    
    linkage = "Linkage", """Identifies two or more records (resource instances) that refer to the same real-world "occurrence". """
    
    list = "List", """A list is a curated collection of resources. """
    
    location = "Location", """Details and position information for a physical place where services are provided and resources and participants may be stored, found, contained, or accommodated. """
    
    measure = "Measure", """The Measure resource provides the definition of a quality measure. """
    
    measureReport = "MeasureReport", """The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation. """
    
    media = "Media", """A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference. """
    
    medication = "Medication", """This resource is primarily used for the identification and definition of a medication for the purposes of prescribing, dispensing, and administering a medication as well as for making statements about medication use. """
    
    medicationAdministration = "MedicationAdministration", """Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner. """
    
    medicationDispense = "MedicationDispense", """Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order. """
    
    medicationKnowledge = "MedicationKnowledge", """Information about a medication that is used to support knowledge. """
    
    medicationRequest = "MedicationRequest", """An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns. """
    
    medicationStatement = "MedicationStatement", """A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from sources such as the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains. 

The primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information. """
    
    medicinalProduct = "MedicinalProduct", """Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use). """
    
    medicinalProductAuthorization = "MedicinalProductAuthorization", """The regulatory authorization of a medicinal product. """
    
    medicinalProductContraindication = "MedicinalProductContraindication", """The clinical particulars - indications, contraindications etc. of a medicinal product, including for regulatory purposes. """
    
    medicinalProductIndication = "MedicinalProductIndication", """Indication for the Medicinal Product. """
    
    medicinalProductIngredient = "MedicinalProductIngredient", """An ingredient of a manufactured item or pharmaceutical product. """
    
    medicinalProductInteraction = "MedicinalProductInteraction", """The interactions of the medicinal product with other medicinal products, or other forms of interactions. """
    
    medicinalProductManufactured = "MedicinalProductManufactured", """The manufactured item as contained in the packaged medicinal product. """
    
    medicinalProductPackaged = "MedicinalProductPackaged", """A medicinal product in a container or package. """
    
    medicinalProductPharmaceutical = "MedicinalProductPharmaceutical", """A pharmaceutical product described in terms of its composition and dose form. """
    
    medicinalProductUndesirableEffect = "MedicinalProductUndesirableEffect", """Describe the undesirable effects of the medicinal product. """
    
    messageDefinition = "MessageDefinition", """Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted. """
    
    messageHeader = "MessageHeader", """The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle. """
    
    molecularSequence = "MolecularSequence", """Raw data describing a biological sequence. """
    
    namingSystem = "NamingSystem", """A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types. """
    
    nutritionOrder = "NutritionOrder", """A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident. """
    
    observation = "Observation", """Measurements and simple assertions made about a patient, device or other subject. """
    
    observationDefinition = "ObservationDefinition", """Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service. """
    
    operationDefinition = "OperationDefinition", """A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction). """
    
    operationOutcome = "OperationOutcome", """A collection of error, warning, or information messages that result from a system action. """
    
    organization = "Organization", """A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, payer/insurer, etc. """
    
    organizationAffiliation = "OrganizationAffiliation", """Defines an affiliation/assotiation/relationship between 2 distinct oganizations, that is not a part-of relationship/sub-division relationship. """
    
    parameters = "Parameters", """This resource is a non-persisted resource used to pass information into and back from an [operation](operations.html). It has no other use, and there is no RESTful endpoint associated with it. """
    
    patient = "Patient", """Demographics and other administrative information about an individual or animal receiving care or other health-related services. """
    
    paymentNotice = "PaymentNotice", """This resource provides the status of the payment for goods and services rendered, and the request and response resource references. """
    
    paymentReconciliation = "PaymentReconciliation", """This resource provides the details including amount of a payment and allocates the payment items being paid. """
    
    person = "Person", """Demographics and administrative information about a person independent of a specific health-related context. """
    
    planDefinition = "PlanDefinition", """This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols. """
    
    practitioner = "Practitioner", """A person who is directly or indirectly involved in the provisioning of healthcare. """
    
    practitionerRole = "PractitionerRole", """A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time. """
    
    procedure = "Procedure", """An action that is or was performed on or for a patient. This can be a physical intervention like an operation, or less invasive like long term services, counseling, or hypnotherapy. """
    
    provenance = "Provenance", """Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies. """
    
    questionnaire = "Questionnaire", """A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection. """
    
    questionnaireResponse = "QuestionnaireResponse", """A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to. """
    
    relatedPerson = "RelatedPerson", """Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process. """
    
    requestGroup = "RequestGroup", """A group of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one". """
    
    researchDefinition = "ResearchDefinition", """The ResearchDefinition resource describes the conditional state (population and any exposures being compared within the population) and outcome (if specified) that the knowledge (evidence, assertion, recommendation) is about. """
    
    researchElementDefinition = "ResearchElementDefinition", """The ResearchElementDefinition resource describes a "PICO" element that knowledge (evidence, assertion, recommendation) is about. """
    
    researchStudy = "ResearchStudy", """A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects. """
    
    researchSubject = "ResearchSubject", """A physical entity which is the primary unit of operational and/or administrative interest in a study. """
    
    resource = "Resource", """This is the base resource type for everything. """
    
    riskAssessment = "RiskAssessment", """An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome. """
    
    riskEvidenceSynthesis = "RiskEvidenceSynthesis", """The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a population plus exposure state where the risk estimate is derived from a combination of research studies. """
    
    schedule = "Schedule", """A container for slots of time that may be available for booking appointments. """
    
    searchParameter = "SearchParameter", """A search parameter that defines a named search item that can be used to search/filter on a resource. """
    
    serviceRequest = "ServiceRequest", """A record of a request for service such as diagnostic investigations, treatments, or operations to be performed. """
    
    slot = "Slot", """A slot of time on a schedule that may be available for booking appointments. """
    
    specimen = "Specimen", """A sample to be used for analysis. """
    
    specimenDefinition = "SpecimenDefinition", """A kind of specimen with associated set of requirements. """
    
    structureDefinition = "StructureDefinition", """A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types. """
    
    structureMap = "StructureMap", """A Map of relationships between 2 structures that can be used to transform data. """
    
    subscription = "Subscription", """The subscription resource is used to define a push-based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system can take an appropriate action. """
    
    substance = "Substance", """A homogeneous material with a definite composition. """
    
    substanceNucleicAcid = "SubstanceNucleicAcid", """Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction. """
    
    substancePolymer = "SubstancePolymer", """Todo. """
    
    substanceProtein = "SubstanceProtein", """A SubstanceProtein is defined as a single unit of a linear amino acid sequence, or a combination of subunits that are either covalently linked or have a defined invariant stoichiometric relationship. This includes all synthetic, recombinant and purified SubstanceProteins of defined sequence, whether the use is therapeutic or prophylactic. This set of elements will be used to describe albumins, coagulation factors, cytokines, growth factors, peptide/SubstanceProtein hormones, enzymes, toxins, toxoids, recombinant vaccines, and immunomodulators. """
    
    substanceReferenceInformation = "SubstanceReferenceInformation", """Todo. """
    
    substanceSourceMaterial = "SubstanceSourceMaterial", """Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex. """
    
    substanceSpecification = "SubstanceSpecification", """The detailed description of a substance, typically at a level beyond what is used for prescribing. """
    
    supplyDelivery = "SupplyDelivery", """Record of delivery of what is supplied. """
    
    supplyRequest = "SupplyRequest", """A record of a request for a medication, substance or device used in the healthcare setting. """
    
    task = "Task", """A task to be performed. """
    
    terminologyCapabilities = "TerminologyCapabilities", """A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. """
    
    testReport = "TestReport", """A summary of information based on the results of executing a TestScript. """
    
    testScript = "TestScript", """A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification. """
    
    valueSet = "ValueSet", """A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html). """
    
    verificationResult = "VerificationResult", """Describes validation requirements, source(s), status and dates for one or more elements. """
    
    visionPrescription = "VisionPrescription", """An authorization for the provision of glasses and/or contact lenses to a patient. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ResourceValidationMode(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/resource-validation-mode
    """
    
    create = "create", """The server checks the content, and then checks that the content would be acceptable as a create (e.g. that the content would not violate any uniqueness constraints). """
    
    update = "update", """The server checks the content, and then checks that it would accept it as an update against the nominated specific resource (e.g. that there are no changes to immutable fields the server does not allow to change and checking version integrity if appropriate). """
    
    delete = "delete", """The server ignores the content and checks that the nominated resource is allowed to be deleted (e.g. checking referential integrity rules). """
    
    profile = "profile", """The server checks an existing resource (must be nominated by id, not provided as a parameter) as valid against the nominated profile. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ResourceVersionPolicy(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/versioning-policy
    """
    
    noVersion = "no-version", """VersionId meta-property is not supported (server) or used (client). """
    
    versioned = "versioned", """VersionId meta-property is supported (server) or used (client). """
    
    versionedUpdate = "versioned-update", """VersionId must be correct for updates (server) or will be specified (If-match header) for updates (client). """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ResponseType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/response-code
    """
    
    ok = "ok", """The message was accepted and processed without error. """
    
    transientError = "transient-error", """Some internal unexpected error occurred - wait and try again. Note - this is usually used for things like database unavailable, which may be expected to resolve, though human intervention may be required. """
    
    fatalError = "fatal-error", """The message was rejected because of a problem with the content. There is no point in re-sending without change. The response narrative SHALL describe the issue. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class RestfulCapabilityMode(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/restful-capability-mode
    """
    
    client = "client", """The application acts as a client for this resource. """
    
    server = "server", """The application acts as a server for this resource. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class RestfulSecurityService(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/restful-security-service
    """
    
    oAuth = "OAuth", """OAuth (unspecified version see oauth.net). """
    
    sMARTOnFHIR = "SMART-on-FHIR", """OAuth2 using SMART-on-FHIR profile (see http://docs.smarthealthit.org/). """
    
    NTLM = "NTLM", """Microsoft NTLM Authentication. """
    
    basic = "Basic", """Basic authentication defined in HTTP specification. """
    
    kerberos = "Kerberos", """see http://www.ietf.org/rfc/rfc4120.txt. """
    
    certificates = "Certificates", """SSL where client must have a certificate registered with the server. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class RiskEstimateType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/risk-estimate-type
    """
    
    proportion = "proportion", """dichotomous measure (present or absent) reported as a ratio compared to the denominator of 1 (A percentage is a proportion with denominator of 100). """
    
    derivedProportion = "derivedProportion", """A special use case where the proportion is derived from a formula rather than derived from summary evidence. """
    
    mean = "mean", """continuous numerical measure reported as an average. """
    
    median = "median", """continuous numerical measure reported as the middle of the range. """
    
    count = "count", """descriptive measure reported as total number of items. """
    
    descriptive = "descriptive", """descriptive measure reported as narrative. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class RiskProbability(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/risk-probability
    """
    
    negligible = "negligible", """The specified outcome is exceptionally unlikely. """
    
    low = "low", """The specified outcome is possible but unlikely. """
    
    moderate = "moderate", """The specified outcome has a reasonable likelihood of occurrence. """
    
    high = "high", """The specified outcome is more likely to occur than not. """
    
    certain = "certain", """The specified outcome is effectively guaranteed. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SNOMEDCTReasonMedicationNotGivenCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/reason-medication-not-given
    """
    
    A = "a", """No reason known. """
    
    B = "b", """The patient was not available when the dose was scheduled. """
    
    C = "c", """The patient was asleep when the dose was scheduled. """
    
    D = "d", """The patient was given the medication and immediately vomited it back. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SearchComparator(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/search-comparator
    """
    
    eq = "eq", """the value for the parameter in the resource is equal to the provided value. """
    
    ne = "ne", """the value for the parameter in the resource is not equal to the provided value. """
    
    gt = "gt", """the value for the parameter in the resource is greater than the provided value. """
    
    lt = "lt", """the value for the parameter in the resource is less than the provided value. """
    
    ge = "ge", """the value for the parameter in the resource is greater or equal to the provided value. """
    
    le = "le", """the value for the parameter in the resource is less or equal to the provided value. """
    
    sa = "sa", """the value for the parameter in the resource starts after the provided value. """
    
    eb = "eb", """the value for the parameter in the resource ends before the provided value. """
    
    ap = "ap", """the value for the parameter in the resource is approximately the same to the provided value. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SearchEntryMode(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/search-entry-mode
    """
    
    match = "match", """This resource matched the search specification. """
    
    include = "include", """This resource is returned because it is referred to from another resource in the search set. """
    
    outcome = "outcome", """An OperationOutcome that provides additional information about the processing of a search. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SearchModifierCode(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/search-modifier-code
    """
    
    missing = "missing", """The search parameter returns resources that have a value or not. """
    
    exact = "exact", """The search parameter returns resources that have a value that exactly matches the supplied parameter (the whole string, including casing and accents). """
    
    contains = "contains", """The search parameter returns resources that include the supplied parameter value anywhere within the field being searched. """
    
    not_ = "not", """The search parameter returns resources that do not contain a match. """
    
    text = "text", """The search parameter is processed as a string that searches text associated with the code/value - either CodeableConcept.text, Coding.display, or Identifier.type.text. """
    
    in_ = "in", """The search parameter is a URI (relative or absolute) that identifies a value set, and the search parameter tests whether the coding is in the specified value set. """
    
    notIn = "not-in", """The search parameter is a URI (relative or absolute) that identifies a value set, and the search parameter tests whether the coding is not in the specified value set. """
    
    below = "below", """The search parameter tests whether the value in a resource is subsumed by the specified value (is-a, or hierarchical relationships). """
    
    above = "above", """The search parameter tests whether the value in a resource subsumes the specified value (is-a, or hierarchical relationships). """
    
    type = "type", """The search parameter only applies to the Resource Type specified as a modifier (e.g. the modifier is not actually :type, but :Patient etc.). """
    
    identifier = "identifier", """The search parameter applies to the identifier on the resource, not the reference. """
    
    ofType = "ofType", """The search parameter has the format system|code|value, where the system and code refer to an Identifier.type.coding.system and .code, and match if any of the type codes match. All 3 parts must be present. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SearchParamType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/search-param-type
    """
    
    number = "number", """Search parameter SHALL be a number (a whole number, or a decimal). """
    
    date = "date", """Search parameter is on a date/time. The date format is the standard XML format, though other formats may be supported. """
    
    string = "string", """Search parameter is a simple string, like a name part. Search is case-insensitive and accent-insensitive. May match just the start of a string. String parameters may contain spaces. """
    
    token = "token", """Search parameter on a coded element or identifier. May be used to search through the text, display, code and code/codesystem (for codes) and label, system and key (for identifier). Its value is either a string or a pair of namespace and value, separated by a "|", depending on the modifier used. """
    
    reference = "reference", """A reference to another resource (Reference or canonical). """
    
    composite = "composite", """A composite search parameter that combines a search on two values together. """
    
    quantity = "quantity", """A search parameter that searches on a quantity. """
    
    uri = "uri", """A search parameter that searches on a URI (RFC 3986). """
    
    special = "special", """Special logic applies to this parameter per the description of the search parameter. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SecondaryFindingCodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/secondary-finding
    """
    
    acmgVersion1 = "acmg-version1", """First release (2013): ACMG Recommendations for Reporting of Incidental Findings in Clinical Exome and Genome Sequencing.  https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3727274/ """
    
    acmgVersion2 = "acmg-version2", """Second release (2016): Recommendations for reporting of secondary findings in clinical exome and genome sequencing, 2016 update (ACMG SF v2.0): a policy statement of the American College of Medical Genetics and Genomics. https://www.ncbi.nlm.nih.gov/pubmed/27854360 """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SequenceStatus(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/variant-state
    """
    
    positive = "positive", """the variant is detected. """
    
    negative = "negative", """no variant is detected. """
    
    absent = "absent", """result of the variant is missing. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SequenceType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/sequence-type
    """
    
    aa = "aa", """Amino acid sequence. """
    
    dna = "dna", """DNA Sequence. """
    
    rna = "rna", """RNA Sequence. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ServiceProvisionConditions(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/service-provision-conditions
    """
    
    free = "free", """This service is available for no patient cost. """
    
    disc = "disc", """There are discounts available on this service for qualifying patients. """
    
    cost = "cost", """Fees apply for this service. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SlicingRules(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/resource-slicing-rules
    """
    
    closed = "closed", """No additional content is allowed other than that described by the slices in this profile. """
    
    open = "open", """Additional content is allowed anywhere in the list. """
    
    openAtEnd = "openAtEnd", """Additional content is allowed, but only at the end of the list. Note that using this requires that the slices be ordered, which makes it hard to share uses. This should only be done where absolutely required. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SlotStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/slotstatus
    """
    
    busy = "busy", """Indicates that the time interval is busy because one  or more events have been scheduled for that interval. """
    
    free = "free", """Indicates that the time interval is free for scheduling. """
    
    busyUnavailable = "busy-unavailable", """Indicates that the time interval is busy and that the interval cannot be scheduled. """
    
    busyTentative = "busy-tentative", """Indicates that the time interval is busy because one or more events have been tentatively scheduled for that interval. """
    
    enteredInError = "entered-in-error", """This instance should not have been part of this patient's medical record. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SmartCapabilities(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/smart-capabilities
    """
    
    launchEhr = "launch-ehr", """support for SMART’s EHR Launch mode. """
    
    launchStandalone = "launch-standalone", """support for SMART’s Standalone Launch mode. """
    
    clientPublic = "client-public", """support for SMART’s public client profile (no client authentication). """
    
    clientConfidentialSymmetric = "client-confidential-symmetric", """support for SMART’s confidential client profile (symmetric client secret authentication). """
    
    ssoOpenidConnect = "sso-openid-connect", """support for SMART’s OpenID Connect profile. """
    
    contextPassthroughBanner = "context-passthrough-banner", """support for “need patient banner” launch context (conveyed via need_patient_banner token parameter). """
    
    contextPassthroughStyle = "context-passthrough-style", """support for “SMART style URL” launch context (conveyed via smart_style_url token parameter). """
    
    contextEhrPatient = "context-ehr-patient", """support for patient-level launch context (requested by launch/patient scope, conveyed via patient token parameter). """
    
    contextEhrEncounter = "context-ehr-encounter", """support for encounter-level launch context (requested by launch/encounter scope, conveyed via encounter token parameter). """
    
    contextStandalonePatient = "context-standalone-patient", """support for patient-level launch context (requested by launch/patient scope, conveyed via patient token parameter). """
    
    contextStandaloneEncounter = "context-standalone-encounter", """support for encounter-level launch context (requested by launch/encounter scope, conveyed via encounter token parameter). """
    
    permissionOffline = "permission-offline", """support for refresh tokens (requested by offline_access scope). """
    
    permissionPatient = "permission-patient", """support for patient-level scopes (e.g. patient/Observation.read). """
    
    permissionUser = "permission-user", """support for user-level scopes (e.g. user/Appointment.read). """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SortDirection(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/sort-direction
    """
    
    ascending = "ascending", """Sort by the value ascending, so that lower values appear first. """
    
    descending = "descending", """Sort by the value descending, so that lower values appear last. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SpecialArrangements(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/encounter-special-arrangements
    """
    
    wheel = "wheel", """The patient requires a wheelchair to be made available for the encounter. """
    
    addBed = "add-bed", """An additional bed made available for a person accompanying the patient, for example a parent accompanying a child. """
    
    int = "int", """The patient is not fluent in the local language and requires an interpreter to be available. Refer to the Patient.Language property for the type of interpreter required. """
    
    att = "att", """A person who accompanies a patient to provide assistive services necessary for the patient's care during the encounter. """
    
    dog = "dog", """The patient has a guide dog and the location used for the encounter should be able to support the presence of the service animal. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SpecialValues(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/special-values
    """
    
    true = "true", """Boolean true. """
    
    false = "false", """Boolean false. """
    
    trace = "trace", """The content is greater than zero, but too small to be quantified. """
    
    sufficient = "sufficient", """The specific quantity is not known, but is known to be non-zero and is not specified because it makes up the bulk of the material. """
    
    withdrawn = "withdrawn", """The value is no longer available. """
    
    nilKnown = "nil-known", """The are no known applicable values in this context. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SpecimenContainedPreference(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/specimen-contained-preference
    """
    
    preferred = "preferred", """This type of contained specimen is preferred to collect this kind of specimen. """
    
    alternate = "alternate", """This type of conditioned specimen is an alternate. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SpecimenStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/specimen-status
    """
    
    available = "available", """The physical specimen is present and in good condition. """
    
    unavailable = "unavailable", """There is no physical specimen because it is either lost, destroyed or consumed. """
    
    unsatisfactory = "unsatisfactory", """The specimen cannot be used because of a quality issue such as a broken container, contamination, or too old. """
    
    enteredInError = "entered-in-error", """The specimen was entered in error and therefore nullified. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class StandardsStatus(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/standards-status
    """
    
    draft = "draft", """This portion of the specification is not considered to be complete enough or sufficiently reviewed to be safe for implementation. It may have known issues or still be in the "in development" stage. It is included in the publication as a place-holder, to solicit feedback from the implementation community and/or to give implementers some insight as to functionality likely to be included in future versions of the specification. Content at this level should only be implemented by the brave or desperate and is very much "use at your own risk". The content that is Draft that will usually be elevated to Trial Use once review and correction is complete after it has been subjected to ballot. """
    
    normative = "normative", """This content has been subject to review and production implementation in a wide variety of environments. The content is considered to be stable and has been 'locked', subjecting it to FHIR Inter-version Compatibility Rules. While changes are possible, they are expected to be infrequent and are tightly constrained. Compatibility Rules. """
    
    trialUse = "trial-use", """This content has been well reviewed and is considered by the authors to be ready for use in production systems. It has been subjected to ballot and approved as an official standard. However, it has not yet seen widespread use in production across the full spectrum of environments it is intended to be used in. In some cases, there may be documented known issues that require implementation experience to determine appropriate resolutions for.

Future versions of FHIR may make significant changes to Trial Use content that are not compatible with previously published content. """
    
    informative = "informative", """This portion of the specification is provided for implementer assistance, and does not make rules that implementers are required to follow. Typical examples of this content in the FHIR specification are tables of contents, registries, examples, and implementer advice. """
    
    deprecated = "deprecated", """This portion of the specification is provided for implementer assistance, and does not make rules that implementers are required to follow. Typical examples of this content in the FHIR specification are tables of contents, registries, examples, and implementer advice. """
    
    external = "external", """This is content that is managed outside the FHIR Specification, but included for implementer convenience. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class Status(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/CodeSystem/status
    """
    
    attested = "attested", """***TODO*** """
    
    validated = "validated", """***TODO*** """
    
    inProcess = "in-process", """***TODO*** """
    
    reqRevalid = "req-revalid", """***TODO*** """
    
    valFail = "val-fail", """***TODO*** """
    
    revalFail = "reval-fail", """***TODO*** """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class StrandType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/strand-type
    """
    
    watson = "watson", """Watson strand of reference sequence. """
    
    crick = "crick", """Crick strand of reference sequence. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class StrengthOfRecommendationRating(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/recommendation-strength
    """
    
    strong = "strong", """Strong recommendation. """
    
    weak = "weak", """Weak recommendation. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class StructureDefinitionKind(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/structure-definition-kind
    """
    
    primitiveType = "primitive-type", """A primitive type that has a value and an extension. These can be used throughout complex datatype, Resource and extension definitions. Only the base specification can define primitive types. """
    
    complexType = "complex-type", """A  complex structure that defines a set of data elements that is suitable for use in 'resources'. The base specification defines a number of complex types, and other specifications can define additional types. These structures do not have a maintained identity. """
    
    resource = "resource", """A 'resource' - a directed acyclic graph of elements that aggregrates other types into an identifiable entity. The base FHIR resources are defined by the FHIR specification itself but other 'resources' can be defined in additional specifications (though these will not be recognised as 'resources' by the FHIR specification (i.e. they do not get end-points etc, or act as the targets of references in FHIR defined resources - though other specificatiosn can treat them this way). """
    
    logical = "logical", """A pattern or a template that is not intended to be a real resource or complex type. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class StructureMapContextType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/map-context-type
    """
    
    type = "type", """The context specifies a type. """
    
    variable = "variable", """The context specifies a variable. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class StructureMapGroupTypeMode(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/map-group-type-mode
    """
    
    none = "none", """This group is not a default group for the types. """
    
    types = "types", """This group is a default mapping group for the specified types and for the primary source type. """
    
    typeAndTypes = "type-and-types", """This group is a default mapping group for the specified types. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class StructureMapInputMode(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/map-input-mode
    """
    
    source = "source", """Names an input instance used a source for mapping. """
    
    target = "target", """Names an instance that is being populated. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class StructureMapModelMode(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/map-model-mode
    """
    
    source = "source", """This structure describes an instance passed to the mapping engine that is used a source of data. """
    
    queried = "queried", """This structure describes an instance that the mapping engine may ask for that is used a source of data. """
    
    target = "target", """This structure describes an instance passed to the mapping engine that is used a target of data. """
    
    produced = "produced", """This structure describes an instance that the mapping engine may ask to create that is used a target of data. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class StructureMapSourceListMode(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/map-source-list-mode
    """
    
    first = "first", """Only process this rule for the first in the list. """
    
    notFirst = "not_first", """Process this rule for all but the first. """
    
    last = "last", """Only process this rule for the last in the list. """
    
    notLast = "not_last", """Process this rule for all but the last. """
    
    onlyOne = "only_one", """Only process this rule is there is only item. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class StructureMapTargetListMode(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/map-target-list-mode
    """
    
    first = "first", """when the target list is being assembled, the items for this rule go first. If more than one rule defines a first item (for a given instance of mapping) then this is an error. """
    
    share = "share", """the target instance is shared with the target instances generated by another rule (up to the first common n items, then create new ones). """
    
    last = "last", """when the target list is being assembled, the items for this rule go last. If more than one rule defines a last item (for a given instance of mapping) then this is an error. """
    
    collate = "collate", """re-use the first item in the list, and keep adding content to it. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class StructureMapTransform(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/map-transform
    """
    
    create = "create", """create(type : string) - type is passed through to the application on the standard API, and must be known by it. """
    
    copy = "copy", """copy(source). """
    
    truncate = "truncate", """truncate(source, length) - source must be stringy type. """
    
    escape = "escape", """escape(source, fmt1, fmt2) - change source from one kind of escaping to another (plain, java, xml, json). note that this is for when the string itself is escaped. """
    
    cast = "cast", """cast(source, type?) - case source from one type to another. target type can be left as implicit if there is one and only one target type known. """
    
    append = "append", """append(source...) - source is element or string. """
    
    translate = "translate", """translate(source, uri_of_map) - use the translate operation. """
    
    reference = "reference", """reference(source : object) - return a string that references the provided tree properly. """
    
    dateOp = "dateOp", """Perform a date operation. *Parameters to be documented*. """
    
    uuid = "uuid", """Generate a random UUID (in lowercase). No Parameters. """
    
    pointer = "pointer", """Return the appropriate string to put in a reference that refers to the resource provided as a parameter. """
    
    evaluate = "evaluate", """Execute the supplied FHIRPath expression and use the value returned by that. """
    
    cc = "cc", """Create a CodeableConcept. Parameters = (text) or (system. Code[, display]). """
    
    C = "c", """Create a Coding. Parameters = (system. Code[, display]). """
    
    qty = "qty", """Create a quantity. Parameters = (text) or (value, unit, [system, code]) where text is the natural representation e.g. [comparator]value[space]unit. """
    
    id = "id", """Create an identifier. Parameters = (system, value[, type]) where type is a code from the identifier type value set. """
    
    cp = "cp", """Create a contact details. Parameters = (value) or (system, value). If no system is provided, the system should be inferred from the content of the value. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class StudyType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/study-type
    """
    
    RCT = "RCT", """randomized controlled trial. """
    
    CCT = "CCT", """controlled (but not randomized) trial. """
    
    cohort = "cohort", """observational study comparing cohorts. """
    
    caseControl = "case-control", """case-control study. """
    
    series = "series", """uncontrolled cohort or case series. """
    
    caseReport = "case-report", """a single case report. """
    
    mixed = "mixed", """a combination of 1 or more types of studies. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SubscriberRelationshipCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/subscriber-relationship
    """
    
    child = "child", """The Beneficiary is a child of the Subscriber """
    
    parent = "parent", """The Beneficiary is a parent of the Subscriber """
    
    spouse = "spouse", """The Beneficiary is a spouse or equivalent of the Subscriber """
    
    common = "common", """The Beneficiary is a common law spouse or equivalent of the Subscriber """
    
    other = "other", """The Beneficiary has some other relationship the Subscriber """
    
    self = "self", """The Beneficiary is the Subscriber """
    
    injured = "injured", """The Beneficiary is covered under insurance of the subscriber due to an injury. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SubscriptionChannelType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/subscription-channel-type
    """
    
    restHook = "rest-hook", """The channel is executed by making a post to the URI. If a payload is included, the URL is interpreted as the service base, and an update (PUT) is made. """
    
    websocket = "websocket", """The channel is executed by sending a packet across a web socket connection maintained by the client. The URL identifies the websocket, and the client binds to this URL. """
    
    email = "email", """The channel is executed by sending an email to the email addressed in the URI (which must be a mailto:). """
    
    sms = "sms", """The channel is executed by sending an SMS message to the phone number identified in the URL (tel:). """
    
    message = "message", """The channel is executed by sending a message (e.g. a Bundle with a MessageHeader resource etc.) to the application identified in the URI. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SubscriptionStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/subscription-status
    """
    
    requested = "requested", """The client has requested the subscription, and the server has not yet set it up. """
    
    active = "active", """The subscription is active. """
    
    error = "error", """The server has an error executing the notification. """
    
    off = "off", """Too many errors have occurred or the subscription has expired. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SubscriptionTag(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/subscription-tag
    """
    
    queued = "queued", """The message has been queued for processing on a destination systems. """
    
    delivered = "delivered", """The message has been delivered to its intended recipient. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SubstanceCategoryCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/substance-category
    """
    
    allergen = "allergen", """A substance that causes an allergic reaction. """
    
    biological = "biological", """A substance that is produced by or extracted from a biological source. """
    
    body = "body", """A substance that comes directly from a human or an animal (e.g. blood, urine, feces, tears, etc.). """
    
    chemical = "chemical", """Any organic or inorganic substance of a particular molecular identity, including -- (i) any combination of such substances occurring in whole or in part as a result of a chemical reaction or occurring in nature and (ii) any element or uncombined radical (http://www.epa.gov/opptintr/import-export/pubs/importguide.pdf). """
    
    food = "food", """A food, dietary ingredient, or dietary supplement for human or animal. """
    
    drug = "drug", """A substance intended for use in the diagnosis, cure, mitigation, treatment, or prevention of disease in man or other animals (Federal Food Drug and Cosmetic Act). """
    
    material = "material", """A finished product which is not normally ingested, absorbed or injected (e.g. steel, iron, wood, plastic and paper). """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SupplyDeliveryStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/supplydelivery-status
    """
    
    inProgress = "in-progress", """Supply has been requested, but not delivered. """
    
    completed = "completed", """Supply has been delivered ("completed"). """
    
    abandoned = "abandoned", """Delivery was not completed. """
    
    enteredInError = "entered-in-error", """This electronic record should never have existed, though it is possible that real-world decisions were based on it. (If real-world activity has occurred, the status should be "abandoned" rather than "entered-in-error".). """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SupplyItemType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/supply-item-type
    """
    
    medication = "medication", """Supply is a kind of medication. """
    
    device = "device", """What is supplied (or requested) is a device. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SupplyRequestReason(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/supplyrequest-reason
    """
    
    patientCare = "patient-care", """The supply has been requested for use in direct patient care. """
    
    wardStock = "ward-stock", """The supply has been requested for creating or replenishing ward stock. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SupplyRequestStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/supplyrequest-status
    """
    
    draft = "draft", """The request has been created but is not yet complete or ready for action. """
    
    active = "active", """The request is ready to be acted upon. """
    
    suspended = "suspended", """The authorization/request to act has been temporarily withdrawn but is expected to resume in the future. """
    
    cancelled = "cancelled", """The authorization/request to act has been terminated prior to the full completion of the intended actions.  No further activity should occur. """
    
    completed = "completed", """Activity against the request has been sufficiently completed to the satisfaction of the requester. """
    
    enteredInError = "entered-in-error", """This electronic record should never have existed, though it is possible that real-world decisions were based on it.  (If real-world activity has occurred, the status should be "cancelled" rather than "entered-in-error".). """
    
    unknown = "unknown", """The authoring/source system does not know which of the status values currently applies for this observation. Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, but the authoring/source system does not know which. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SupplyType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/supply-kind
    """
    
    central = "central", """Supply is stored and requested from central supply. """
    
    nonstock = "nonstock", """Supply is not onsite and must be requested from an outside vendor using a non-stock requisition. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SurfaceCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/FDI-surface
    """
    
    M = "M", """The surface of a tooth that is closest to the midline (middle) of the face. """
    
    O = "O", """The chewing surface of posterior teeth. """
    
    I = "I", """The biting edge of anterior teeth. """
    
    D = "D", """The surface of a tooth that faces away from the midline of the face. """
    
    B = "B", """The surface of a posterior tooth facing the cheeks. """
    
    V = "V", """The surface of a tooth facing the lips. """
    
    L = "L", """The surface of a tooth facing the tongue. """
    
    MO = "MO", """The Mesioclusal surfaces of a tooth. """
    
    DO = "DO", """The Distoclusal surfaces of a tooth. """
    
    DI = "DI", """The Distoincisal surfaces of a tooth. """
    
    MOD = "MOD", """The Mesioclusodistal surfaces of a tooth. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class SynthesisType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/synthesis-type
    """
    
    stdMA = "std-MA", """A meta-analysis of the summary data of estimates from individual studies or data sets. """
    
    IPDMA = "IPD-MA", """A meta-analysis of the individual participant data from individual studies or data sets. """
    
    indirectNMA = "indirect-NMA", """An indirect meta-analysis derived from 2 or more direct comparisons in a network meta-analysis. """
    
    combinedNMA = "combined-NMA", """An composite meta-analysis derived from direct comparisons and indirect comparisons in a network meta-analysis. """
    
    range = "range", """A range of results across a body of evidence. """
    
    classification = "classification", """An approach describing a body of evidence by categorically classifying individual studies (eg 3 studies showed beneft and 2 studied found no effect). """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class TaskCode(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/CodeSystem/task-code
    """
    
    approve = "approve", """Take what actions are needed to transition the focus resource from 'draft' to 'active' or 'in-progress', as appropriate for the resource type.  This may involve additing additional content, approval, validation, etc. """
    
    fulfill = "fulfill", """Act to perform the actions defined in the focus request.  This might result in a 'more assertive' request (order for a plan or proposal, filler order for a placer order), but is intend to eventually result in events.  The degree of fulfillment requested might be limited by Task.restriction. """
    
    abort = "abort", """Abort, cancel or withdraw the focal resource, as appropriate for the type of resource. """
    
    replace = "replace", """Replace the focal resource with the specified input resource """
    
    change = "change", """Update the focal resource of the owning system to reflect the content specified as the Task.focus """
    
    suspend = "suspend", """Transition the focal resource from 'active' or 'in-progress' to 'suspended' """
    
    resume = "resume", """Transition the focal resource from 'suspended' to 'active' or 'in-progress' as appropriate for the resource type. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class TaskIntent(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/task-intent
    """
    
    unknown = "unknown", """The intent is not known.  When dealing with Task, it's not always known (or relevant) how the task was initiated - i.e. whether it was proposed, planned, ordered or just done spontaneously. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class TaskStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/task-status
    """
    
    draft = "draft", """The task is not yet ready to be acted upon. """
    
    requested = "requested", """The task is ready to be acted upon and action is sought. """
    
    received = "received", """A potential performer has claimed ownership of the task and is evaluating whether to perform it. """
    
    accepted = "accepted", """The potential performer has agreed to execute the task but has not yet started work. """
    
    rejected = "rejected", """The potential performer who claimed ownership of the task has decided not to execute it prior to performing any action. """
    
    ready = "ready", """The task is ready to be performed, but no action has yet been taken.  Used in place of requested/received/accepted/rejected when request assignment and acceptance is a given. """
    
    cancelled = "cancelled", """The task was not completed. """
    
    inProgress = "in-progress", """The task has been started but is not yet complete. """
    
    onHold = "on-hold", """The task has been started but work has been paused. """
    
    failed = "failed", """The task was attempted but could not be completed due to some error. """
    
    completed = "completed", """The task has been completed. """
    
    enteredInError = "entered-in-error", """The task should never have existed and is retained only because of the possibility it may have used. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class TemplateStatusCodeLifeCycle(str, DocEnum):
    """ Defining URL : urn:oid:2.16.840.1.113883.3.1937.98.5.8
    """
    
    draft = "draft", """Design is under development (nascent). """
    
    pending = "pending", """Design is completed and is being reviewed. """
    
    active = "active", """Design has been deemed fit for the intended purpose and is published by the governance group. """
    
    review = "review", """Design is active, but is under review. The review may result in a change to the design. The change may necessitate a new version to be created. This in turn may result in the prior version of the template to be retired. Alternatively, the review may result in a change to the design that does not require a new version to be created, or it may result in no change to the design at all. """
    
    cancelled = "cancelled", """A drafted design is determined to be erroneous or not fit for intended purpose and is discontinued before ever being published in an active state. """
    
    rejected = "rejected", """A previously drafted design is determined to be erroneous or not fit for intended purpose and is discontinued before ever being published for consideration in a pending state. """
    
    retired = "retired", """A previously active design is discontinued from use. It should no longer be used for future designs, but for historical purposes may be used to process data previously recorded using this design. A newer design may or may not exist. The design is published in the retired state. """
    
    terminated = "terminated", """A design is determined to be erroneous or not fit for the intended purpose and should no longer be used, even for historical purposes. No new designs can be developed for this template. The associated template no longer needs to be published, but if published, is shown in the terminated state. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class TestReportActionResult(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/report-action-result-codes
    """
    
    pass_ = "pass", """The action was successful. """
    
    skip = "skip", """The action was skipped. """
    
    fail = "fail", """The action failed. """
    
    warning = "warning", """The action passed but with warnings. """
    
    error = "error", """The action encountered a fatal error and the engine was unable to process. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class TestReportParticipantType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/report-participant-type
    """
    
    testEngine = "test-engine", """The test execution engine. """
    
    client = "client", """A FHIR Client. """
    
    server = "server", """A FHIR Server. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class TestReportResult(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/report-result-codes
    """
    
    pass_ = "pass", """All test operations successfully passed all asserts. """
    
    fail = "fail", """One or more test operations failed one or more asserts. """
    
    pending = "pending", """One or more test operations is pending execution completion. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class TestReportStatus(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/report-status-codes
    """
    
    completed = "completed", """All test operations have completed. """
    
    inProgress = "in-progress", """A test operations is currently executing. """
    
    waiting = "waiting", """A test operation is waiting for an external client request. """
    
    stopped = "stopped", """The test script execution was manually stopped. """
    
    enteredInError = "entered-in-error", """This test report was entered or created in error. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class TestScriptOperationCode(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/testscript-operation-codes
    """
    
    read = "read", """Read the current state of the resource. """
    
    vread = "vread", """Read the state of a specific version of the resource. """
    
    update = "update", """Update an existing resource by its id. """
    
    updateCreate = "updateCreate", """Update an existing resource by its id (or create it if it is new). """
    
    patch = "patch", """Patch an existing resource by its id. """
    
    delete = "delete", """Delete a resource. """
    
    deleteCondSingle = "deleteCondSingle", """Conditionally delete a single resource based on search parameters. """
    
    deleteCondMultiple = "deleteCondMultiple", """Conditionally delete one or more resources based on search parameters. """
    
    history = "history", """Retrieve the change history for a particular resource or resource type. """
    
    create = "create", """Create a new resource with a server assigned id. """
    
    search = "search", """Search based on some filter criteria. """
    
    batch = "batch", """Update, create or delete a set of resources as independent actions. """
    
    transaction = "transaction", """Update, create or delete a set of resources as a single transaction. """
    
    capabilities = "capabilities", """Get a capability statement for the system. """
    
    apply = "apply", """Realizes an ActivityDefinition in a specific context """
    
    closure = "closure", """Closure Table Maintenance """
    
    findMatches = "find-matches", """Finding Codes based on supplied properties """
    
    conforms = "conforms", """Compare two systems CapabilityStatements """
    
    dataRequirements = "data-requirements", """Aggregates and returns the parameters and data requirements for a resource and all its dependencies as a single module definition """
    
    document = "document", """Generate a Document """
    
    evaluate = "evaluate", """Request clinical decision support guidance based on a specific decision support module """
    
    evaluateMeasure = "evaluate-measure", """Invoke an eMeasure and obtain the results """
    
    everything = "everything", """Return all the related information as described in the Encounter or Patient """
    
    expand = "expand", """Value Set Expansion """
    
    find = "find", """Find a functional list """
    
    graphql = "graphql", """Invoke a GraphQL query """
    
    implements = "implements", """Test if a server implements a client's required operations """
    
    lastn = "lastn", """Last N Observations Query """
    
    lookup = "lookup", """Concept Look Up and Decomposition """
    
    match = "match", """Find patient matches using MPI based logic """
    
    meta = "meta", """Access a list of profiles, tags, and security labels """
    
    metaAdd = "meta-add", """Add profiles, tags, and security labels to a resource """
    
    metaDelete = "meta-delete", """Delete profiles, tags, and security labels for a resource """
    
    populate = "populate", """Populate Questionnaire """
    
    populatehtml = "populatehtml", """Generate HTML for Questionnaire """
    
    populatelink = "populatelink", """Generate a link to a Questionnaire completion webpage """
    
    processMessage = "process-message", """Process a message according to the defined event """
    
    questionnaire = "questionnaire", """Build Questionnaire """
    
    stats = "stats", """Observation Statistics """
    
    subset = "subset", """Fetch a subset of the CapabilityStatement resource """
    
    subsumes = "subsumes", """CodeSystem Subsumption Testing """
    
    transform = "transform", """Model Instance Transformation """
    
    translate = "translate", """Concept Translation """
    
    validate = "validate", """Validate a resource """
    
    validateCode = "validate-code", """ValueSet based Validation """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class TestScriptProfileDestinationType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/testscript-profile-destination-types
    """
    
    fHIRServer = "FHIR-Server", """General FHIR server used to respond to operations sent from a FHIR client. """
    
    fHIRSDCFormManager = "FHIR-SDC-FormManager", """A FHIR server acting as a Structured Data Capture Form Manager. """
    
    fHIRSDCFormProcessor = "FHIR-SDC-FormProcessor", """A FHIR server acting as a Structured Data Capture Form Processor. """
    
    fHIRSDCFormReceiver = "FHIR-SDC-FormReceiver", """A FHIR server acting as a Structured Data Capture Form Receiver. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class TestScriptProfileOriginType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/testscript-profile-origin-types
    """
    
    fHIRClient = "FHIR-Client", """General FHIR client used to initiate operations against a FHIR server. """
    
    fHIRSDCFormFiller = "FHIR-SDC-FormFiller", """A FHIR client acting as a Structured Data Capture Form Filler. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class TestScriptRequestMethodCode(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/http-operations
    """
    
    delete = "delete", """HTTP DELETE operation. """
    
    get = "get", """HTTP GET operation. """
    
    options = "options", """HTTP OPTIONS operation. """
    
    patch = "patch", """HTTP PATCH operation. """
    
    post = "post", """HTTP POST operation. """
    
    put = "put", """HTTP PUT operation. """
    
    head = "head", """HTTP HEAD operation. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class TransactionMode(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/transaction-mode
    """
    
    notSupported = "not-supported", """Neither batch or transaction is supported. """
    
    batch = "batch", """Batches are  supported. """
    
    transaction = "transaction", """Transactions are supported. """
    
    both = "both", """Both batches and transactions are supported. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class TriggerType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/trigger-type
    """
    
    namedEvent = "named-event", """The trigger occurs in response to a specific named event, and no other information about the trigger is specified. Named events are completely pre-coordinated, and the formal semantics of the trigger are not provided. """
    
    periodic = "periodic", """The trigger occurs at a specific time or periodically as described by a timing or schedule. A periodic event cannot have any data elements, but may have a name assigned as a shorthand for the event. """
    
    dataChanged = "data-changed", """The trigger occurs whenever data of a particular type is changed in any way, either added, modified, or removed. """
    
    dataAdded = "data-added", """The trigger occurs whenever data of a particular type is added. """
    
    dataModified = "data-modified", """The trigger occurs whenever data of a particular type is modified. """
    
    dataRemoved = "data-removed", """The trigger occurs whenever data of a particular type is removed. """
    
    dataAccessed = "data-accessed", """The trigger occurs whenever data of a particular type is accessed. """
    
    dataAccessEnded = "data-access-ended", """The trigger occurs whenever access to data of a particular type is completed. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class TypeDerivationRule(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/type-derivation-rule
    """
    
    specialization = "specialization", """This definition defines a new type that adds additional elements to the base type. """
    
    constraint = "constraint", """This definition adds additional rules to an existing concrete type. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class UDICodes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/ex-udi
    """
    
    gudid = "gudid", """GUDID (FDA) US Repository """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class UDIEntryType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/udi-entry-type
    """
    
    barcode = "barcode", """a barcodescanner captured the data from the device label. """
    
    rfid = "rfid", """An RFID chip reader captured the data from the device label. """
    
    manual = "manual", """The data was read from the label by a person and manually entered. (e.g.  via a keyboard). """
    
    card = "card", """The data originated from a patient's implant card and was read by an operator. """
    
    selfReported = "self-reported", """The data originated from a patient source and was not directly scanned or read from a label or card. """
    
    unknown = "unknown", """The method of data capture has not been determined. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class UnitTypeCodes(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/benefit-unit
    """
    
    individual = "individual", """A single individual """
    
    family = "family", """A family, typically includes self, spouse(s) and children to a defined age """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class UnknownContentCode(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/unknown-content-code
    """
    
    no = "no", """The application does not accept either unknown elements or extensions. """
    
    extensions = "extensions", """The application accepts unknown extensions, but not unknown elements. """
    
    elements = "elements", """The application accepts unknown elements, but not unknown extensions. """
    
    both = "both", """The application accepts unknown elements and extensions. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class UsageContextType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/usage-context-type
    """
    
    gender = "gender", """The gender of the patient. For this context type, appropriate values can be found in the http://hl7.org/fhir/ValueSet/administrative-gender value set. """
    
    age = "age", """The age of the patient. For this context type, the value could be a range that specifies the applicable ages or a code from an appropriate value set such as the MeSH value set http://terminology.hl7.org/ValueSet/v3-AgeGroupObservationValue. """
    
    focus = "focus", """The clinical concept(s) addressed by the artifact. For example, disease, diagnostic test interpretation, medication ordering as in http://hl7.org/fhir/ValueSet/condition-code. """
    
    user = "user", """The clinical specialty of the context in which the patient is being treated - For example, PCP, Patient, Cardiologist, Behavioral Professional, Oral Health Professional, Prescriber, etc... taken from a specialty value set such as the NUCC Health Care provider taxonomy value set http://hl7.org/fhir/ValueSet/provider-taxonomy. """
    
    workflow = "workflow", """The settings in which the artifact is intended for use. For example, admission, pre-op, etc. For example, the ActEncounterCode value set http://terminology.hl7.org/ValueSet/v3-ActEncounterCode. """
    
    task = "task", """The context for the clinical task(s) represented by this artifact. For example, this could be any task context represented by the HL7 ActTaskCode value set http://terminology.hl7.org/ValueSet/v3-ActTaskCode. General categories include: order entry, patient documentation and patient information review. """
    
    venue = "venue", """The venue in which an artifact could be used. For example, Outpatient, Inpatient, Home, Nursing home. The code value may originate from the HL7 ServiceDeliveryLocationRoleType value set (http://terminology.hl7.org/ValueSet/v3-ServiceDeliveryLocationRoleType). """
    
    species = "species", """The species to which an artifact applies. For example, SNOMED - 387961004 | Kingdom Animalia (organism). """
    
    program = "program", """A program/project of work for which this artifact is applicable. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class Use(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/claim-use
    """
    
    claim = "claim", """The treatment is complete and this represents a Claim for the services. """
    
    preauthorization = "preauthorization", """The treatment is proposed and this represents a Pre-authorization for the services. """
    
    predetermination = "predetermination", """The treatment is proposed and this represents a Pre-determination for the services. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ValidationProcess(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/validation-process
    """
    
    editCheck = "edit-check", """editCheck """
    
    valueset = "valueset", """valueset """
    
    primary = "primary", """primary """
    
    multi = "multi", """multi """
    
    standalone = "standalone", """standalone """
    
    inContext = "in-context", """inContext """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ValidationStatus(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/validation-status
    """
    
    successful = "successful", """successful """
    
    failed = "failed", """failed """
    
    unknown = "unknown", """The validations status has not been determined yet """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class ValidationType(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/validation-type
    """
    
    nothing = "nothing", """nothing """
    
    primary = "primary", """primary """
    
    multiple = "multiple", """multiple """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class VerificationresultCommunicationMethod(str, DocEnum):
    """ Defining URL : http://terminology.hl7.org/CodeSystem/verificationresult-communication-method
    """
    
    manual = "manual", """The information is submitted/retrieved manually (e.g. by phone, fax, paper-based) """
    
    portal = "portal", """The information is submitted/retrieved via a portal """
    
    pull = "pull", """The information is retrieved (i.e. pulled) from a source (e.g. over an API) """
    
    push = "push", """The information is sent (i.e. pushed) from a source (e.g. over an API, asynchronously, secure messaging) """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class VisionBase(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/vision-base-codes
    """
    
    up = "up", """top. """
    
    down = "down", """bottom. """
    
    in_ = "in", """inner edge. """
    
    out = "out", """outer edge. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class VisionEyes(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/vision-eye-codes
    """
    
    right = "right", """Right Eye. """
    
    left = "left", """Left Eye. """
    
# this inherits from string as well so we can serialize it correctly with pydantic
class XPathUsageType(str, DocEnum):
    """ Defining URL : http://hl7.org/fhir/search-xpath-usage
    """
    
    normal = "normal", """The search parameter is derived directly from the selected nodes based on the type definitions. """
    
    phonetic = "phonetic", """The search parameter is derived by a phonetic transform from the selected nodes. """
    
    nearby = "nearby", """The search parameter is based on a spatial transform of the selected nodes. """
    
    distance = "distance", """The search parameter is based on a spatial transform of the selected nodes, using physical distance from the middle. """
    
    other = "other", """The interpretation of the xpath statement is unknown (and can't be automated). """
    # Empty comment to avoid bad concatenation


class FHIRAbstractResource(FHIRAbstractBase):

    resource_type: typing.Literal["FHIRAbstractResource"] = "FHIRAbstractResource"


# Empty comment to avoid bad concatenation
import re
import pydantic


def exact_regex(regex):
    return r"\A" + regex.lstrip(r"\A").rstrip(r"\Z") + r"\Z"


def exact_regex_constr(**kwargs):
    if kwargs.get("regex") is not None:
        kwargs["regex"] = exact_regex(kwargs["regex"])
    return pydantic.constr(**kwargs)


FHIRString = pydantic.constr(strip_whitespace=True)
FHIRRequiredString = pydantic.constr(min_length=1, strip_whitespace=True)

FHIRDateTime = exact_regex_constr(
    regex=r"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
)
FHIRDate = exact_regex_constr(
    regex=r"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?"
)
FHIRInstant = exact_regex_constr(
    regex=r"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))"
)
FHIRTime = exact_regex_constr(
    regex=r"([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?"
)
FHIRCode = exact_regex_constr(regex=r"[^\s]+(\s[^\s]+)*")

FHIROid = exact_regex_constr(regex=r"urn:oid:[0-2](\.(0|[1-9][0-9]*))+")

FHIRId = exact_regex_constr(regex=r"[A-Za-z0-9\-\.]{1,64}")

FHIRBase64Binary = exact_regex_constr(regex=r"(\s*([0-9a-zA-Z\+/=]){4}\s*)+")


def validate_factory(cls):
    def validate_int_string(v):
        """Validate a string given a FHIR regex."""
        if isinstance(v, str):
            if re.match(exact_regex(cls.REGEX), v) is None:
                msg = f"String does not match {cls.__name__} pattern : {cls.REGEX}"
                raise ValueError(msg)
            return int(v)
        return v

    return validate_int_string


class FHIRInt(pydantic.conint(strict=True)):
    """Integer field following FHIR specs.

    https://www.hl7.org/fhir/datatypes.html#integer
    """

    REGEX = "[0]|[-+]?[1-9][0-9]*"

    @classmethod
    def __get_validators__(cls):
        yield validate_factory(cls)
        yield from super(FHIRInt, cls).__get_validators__()


class FHIRUnsignedInt(pydantic.conint(strict=True, ge=0)):
    """Unsigned integer field following FHIR specs.

    https://www.hl7.org/fhir/datatypes.html#unsignedInt
    """

    REGEX = "[0]|([1-9][0-9]*)"

    @classmethod
    def __get_validators__(cls):
        yield validate_factory(cls)
        yield from super(FHIRUnsignedInt, cls).__get_validators__()


class FHIRPositiveInt(pydantic.conint(strict=True, gt=0)):
    """Positive integer field following FHIR specs.

    Warning : FHIR Spec regex : "+?[1-9][0-9]*" seems invalid
              I think that intended use is "[+]?[1-9][0-9]*"

    https://www.hl7.org/fhir/datatypes.html#positiveInt
    """

    REGEX = "[+]?[1-9][0-9]*"

    @classmethod
    def __get_validators__(cls):
        yield validate_factory(cls)
        yield from super(FHIRPositiveInt, cls).__get_validators__()
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Create FHIR search params from NoSQL-like query structures.
#  2014, SMART Health IT.

try:
    from urllib import quote_plus
except Exception as e:
    from urllib.parse import quote_plus


class FHIRSearch(object):
    """ Create a FHIR search from NoSQL-like query structures.
    """

    def __init__(self, resource_type, struct=None):
        self.resource_type = resource_type
        """ The resource type class. """

        self.params = []
        """ FHIRSearchParam instances. """

        self.wants_expand = False
        """ Used internally; whether or not `params` must be expanded first. """

        if struct is not None:
            if dict != type(struct):
                raise Exception(
                    "Must pass a Python dictionary, but got a {}".format(type(struct))
                )
            self.wants_expand = True
            for key, val in struct.items():
                self.params.append(FHIRSearchParam(key, val))

    # MARK: Execution

    def construct(self):
        """ Constructs the URL with query string from the receiver's params.
        """
        if self.resource_type is None:
            raise Exception("Need resource_type set to construct a search query")

        parts = []
        if self.params is not None:
            for param in self.params:
                if self.wants_expand:
                    for expanded in param.handle():
                        parts.append(expanded.as_parameter())
                else:
                    parts.append(param.as_parameter())

        return "{}?{}".format(self.resource_type.resource_type, "&".join(parts))

    def perform(self, server):
        """ Construct the search URL and execute it against the given server.
        
        :param server: The server against which to perform the search
        :returns: A Bundle resource
        """
        if server is None:
            raise Exception("Need a server to perform search")

        from . import bundle

        res = server.request_json(self.construct())
        bundle = bundle.Bundle(res)
        bundle.origin_server = server
        return bundle

    def perform_resources(self, server):
        """ Performs the search by calling `perform`, then extracts all Bundle
        entries and returns a list of Resource instances.
        
        :param server: The server against which to perform the search
        :returns: A list of Resource instances
        """
        bundle = self.perform(server)
        resources = []
        if bundle is not None and bundle.entry is not None:
            for entry in bundle.entry:
                resources.append(entry.resource)

        return resources


class FHIRSearchParam(object):
    """ Holds one search parameter.
    
    The instance's `value` can either be a string value or a search construct
    dictionary. In the latter case the class's `handle` method must be called
    to arrive at search parameter instances that can be converted into a URL
    query.
    """

    def __init__(self, name, value):
        self.name = name
        self.value = value

    def copy(self):
        clone = object.__new__(self.__class__)
        clone.__dict__ = self.__dict__.copy()
        return clone

    def handle(self):
        """ Parses the receiver's value and returns a list of FHIRSearchParam
        instances. Needs only be called if the param needs to be handled, i.e.
        its value is a query structure.
        
        :returns: A list with one or more FHIRSearchParam instances, not
        altering the receiver
        """
        handler = FHIRSearchParamHandler.handler_for(self.name)(None, self.value)
        return handler.handle(self.copy())

    def as_parameter(self):
        """ Return a string that represents the reciever as "key=value".
        """
        return "{}={}".format(self.name, quote_plus(self.value, safe=",<=>"))


class FHIRSearchParamHandler(object):
    handles = None
    handlers = []

    @classmethod
    def announce_handler(cls, handler):
        cls.handlers.append(handler)

    @classmethod
    def handler_for(cls, key):
        for handler in cls.handlers:
            if handler.can_handle(key):
                return handler
        return cls

    @classmethod
    def can_handle(cls, key):
        if cls.handles is not None:
            return key in cls.handles
        return True  # base class handles everything else, so be sure to test it last!

    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.modifier = []
        self.multiplier = []

    def handle(self, param):
        """ Applies all handlers to the given search parameter.
        :returns: A list of one or more new `FHIRSearchParam` instances
        """
        self.prepare()
        return self.expand(param)

    def prepare(self, parent=None):
        """ Creates sub-handlers as needed, then prepares the receiver.
        """
        if dict == type(self.value):
            for key, val in self.value.items():
                handler = FHIRSearchParamHandler.handler_for(key)(key, val)
                handler.prepare(self)

        if parent is not None:
            parent.multiplier.append(self)

    def expand(self, param):
        """ Executes the receiver's modifier and multiplier on itself, applying
        changes to the given search param instance.
        
        :returns: A list of one or more FHIRSearchParam instances
        """
        for handler in self.modifier:
            handler.expand(param)

        self.apply(param)

        # if we have multiplier, expand sequentially
        if len(self.multiplier) > 0:
            expanded = []
            for handler in self.multiplier:
                clone = param.copy()
                expanded.extend(handler.expand(clone))

            return expanded

        # no multiplier, just return the passed-in paramater
        return [param]

    def apply(self, param):
        if self.key is not None:
            param.name = "{}.{}".format(param.name, self.key)
        if 0 == len(self.multiplier):
            param.value = self.value


class FHIRSearchParamModifierHandler(FHIRSearchParamHandler):
    modifiers = {
        "$asc": ":asc",
        "$desc": ":desc",
        "$exact": ":exact",
        "$missing": ":missing",
        "$null": ":missing",
        "$text": ":text",
    }
    handles = modifiers.keys()

    def apply(self, param):
        if self.key not in self.__class__.modifiers:
            raise Exception(
                'Unknown modifier "{}" for "{}"'.format(self.key, param.name)
            )
        param.name += self.__class__.modifiers[self.key]
        param.value = self.value


class FHIRSearchParamOperatorHandler(FHIRSearchParamHandler):
    operators = {
        "$gt": ">",
        "$lt": "<",
        "$lte": "<=",
        "$gte": ">=",
    }
    handles = operators.keys()

    def apply(self, param):
        if self.key not in self.__class__.operators:
            raise Exception(
                'Unknown operator "{}" for "{}"'.format(self.key, parent.name)
            )
        param.value = self.__class__.operators[self.key] + self.value


class FHIRSearchParamMultiHandler(FHIRSearchParamHandler):
    handles = ["$and", "$or"]

    def prepare(self, parent):
        if list != type(self.value):
            raise Exception(
                'Expecting a list argument for "{}" but got {}'.format(
                    parent.key, self.value
                )
            )

        handlers = []
        for val in self.value:
            if dict == type(val):
                for kkey, vval in val.items():
                    handlers.append(
                        FHIRSearchParamHandler.handler_for(kkey)(kkey, vval)
                    )
            else:
                handlers.append(
                    FHIRSearchParamHandler.handler_for(parent.key)(None, val)
                )

        if "$and" == self.key:
            for handler in handlers:
                handler.prepare(parent)
        elif "$or" == self.key:
            ors = [h.value for h in handlers]
            handler = FHIRSearchParamHandler.handler_for(parent.key)(
                None, ",".join(ors)
            )
            handler.prepare(parent)
        else:
            raise Exception('I cannot handle "{}"'.format(self.key))


class FHIRSearchParamTypeHandler(FHIRSearchParamHandler):
    handles = ["$type"]

    def prepare(self, parent):
        parent.modifier.append(self)

    def apply(self, param):
        param.name = "{}:{}".format(param.name, self.value)


# announce all handlers
FHIRSearchParamHandler.announce_handler(FHIRSearchParamModifierHandler)
FHIRSearchParamHandler.announce_handler(FHIRSearchParamOperatorHandler)
FHIRSearchParamHandler.announce_handler(FHIRSearchParamMultiHandler)
FHIRSearchParamHandler.announce_handler(FHIRSearchParamTypeHandler)


class Resource(FHIRAbstractResource):
    """ Base Resource.

    This is the base resource type for everything.
    """
    resource_type: typing.Literal["Resource"] = "Resource"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Resource",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    id: typing.Optional[FHIRString]

    """ Logical id of this artifact.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    meta: typing.Optional["Meta"]

    """ Metadata about the resource.
    Type `Meta` (represented as `dict` in JSON).
    """

    implicit_rules: typing.Optional[FHIRString]

    """ A set of rules under which this content was created.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    implicit_rules__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_implicit_rules`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    language: typing.Optional[FHIRCode]

    """ Language of the resource content.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    language__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_language`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_id = get_primitive_field_root_validator("id")
    
    _validate_primitive_implicit_rules = get_primitive_field_root_validator("implicit_rules")
    
    _validate_primitive_language = get_primitive_field_root_validator("language")
    


class Binary(Resource):
    """ Pure binary content defined by a format other than FHIR.

    A resource that represents the data of a single raw artifact as digital
    content accessible in its native format.  A Binary resource can contain any
    content, whether text, image, pdf, zip archive, etc.
    """
    resource_type: typing.Literal["Binary"] = "Binary"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Binary",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    
    
    content_type: "FHIRCode"

    """ MimeType of the binary content.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    content_type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_content_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    security_context: typing.Optional["Reference"]

    """ Identifies another resource to use as proxy when enforcing access
        control.
    Type `Reference` (represented as `dict` in JSON).
    """

    data: typing.Optional[FHIRBase64Binary]

    """ The actual content.
    Type `FHIRBase64Binary` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    data__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_data`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_content_type = get_primitive_field_root_validator("content_type")
    
    _validate_primitive_data = get_primitive_field_root_validator("data")
    


class Bundle(Resource):
    """ Contains a collection of resources.

    A container for a collection of resources.
    """
    resource_type: typing.Literal["Bundle"] = "Bundle"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Bundle",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional["Identifier"]

    """ Persistent identifier for the bundle.
    Type `Identifier` (represented as `dict` in JSON).
    """

            
    
    
    type: "BundleType"

    """ document | message | transaction | transaction-response | batch |
        batch-response | history | searchset | collection.
    Type `BundleType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    timestamp: typing.Optional[FHIRInstant]

    """ When the bundle was assembled.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    timestamp__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_timestamp`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    total: typing.Optional[FHIRUnsignedInt]

    """ If search, the total number of matches.
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    total__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_total`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    link: typing.Optional[typing.List["BundleLink"]]

    """ Links related to this Bundle.
    List of `BundleLink` items (represented as `dict` in JSON).
    """

    entry: typing.Optional[typing.List["BundleEntry"]]

    """ Entry in the bundle - will have a resource or information.
    List of `BundleEntry` items (represented as `dict` in JSON).
    """

    signature: typing.Optional["Signature"]

    """ Digital Signature.
    Type `Signature` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in BundleType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_timestamp = get_primitive_field_root_validator("timestamp")
    
    _validate_primitive_total = get_primitive_field_root_validator("total")
    


class DomainResource(Resource):
    """ A resource with narrative, extensions, and contained resources.

    A resource that includes narrative, extensions, and contained resources.
    """
    resource_type: typing.Literal["DomainResource"] = "DomainResource"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DomainResource",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    text: typing.Optional["Narrative"]

    """ Text summary of the resource, for human interpretation.
    Type `Narrative` (represented as `dict` in JSON).
    """

    contained: typing.Optional[typing.List["Resource"]]

    """ Contained, inline Resources.
    List of `Resource` items (represented as `dict` in JSON).
    """
    @pydantic.validator("contained", pre=True,  each_item=True)
    def resource_factory(cls, value):
        if isinstance(value, Resource):
            return value
        return from_dict(value)

    extension: typing.Optional[typing.List["Extension"]]

    """ Additional content defined by implementations.
    List of `Extension` items (represented as `dict` in JSON).
    """

    modifier_extension: typing.Optional[typing.List["Extension"]]

    """ Extensions that cannot be ignored.
    List of `Extension` items (represented as `dict` in JSON).
    """




class Parameters(Resource):
    """ Operation Request or Response.

    This resource is a non-persisted resource used to pass information into and
    back from an [operation](operations.html). It has no other use, and there
    is no RESTful endpoint associated with it.
    """
    resource_type: typing.Literal["Parameters"] = "Parameters"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Parameters",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    parameter: typing.Optional[typing.List["ParametersParameter"]]

    """ Operation Parameter.
    List of `ParametersParameter` items (represented as `dict` in JSON).
    """




class Account(DomainResource):
    """ Tracks balance, charges, for patient or cost center.

    A financial tool for tracking value accrued for a particular purpose.  In
    the healthcare field, used to track charges for a patient, cost centers,
    etc.
    """
    resource_type: typing.Literal["Account"] = "Account"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Account",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Account number.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "AccountStatus"

    """ active | inactive | entered-in-error | on-hold | unknown.
    Type `AccountStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional["CodeableConcept"]

    """ E.g. patient, expense, depreciation.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    name: typing.Optional[FHIRString]

    """ Human-readable label.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subject: typing.Optional[typing.List["Reference"]]

    """ The entity that caused the expenses.
    List of `Reference` items (represented as `dict` in JSON).
    """

    service_period: typing.Optional["Period"]

    """ Transaction window.
    Type `Period` (represented as `dict` in JSON).
    """

    coverage: typing.Optional[typing.List["AccountCoverage"]]

    """ The party(s) that are responsible for covering the payment of this
        account, and what order should they be applied to the account.
    List of `AccountCoverage` items (represented as `dict` in JSON).
    """

    owner: typing.Optional["Reference"]

    """ Entity managing the Account.
    Type `Reference` (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Explanation of purpose/use.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    guarantor: typing.Optional[typing.List["AccountGuarantor"]]

    """ The parties ultimately responsible for balancing the Account.
    List of `AccountGuarantor` items (represented as `dict` in JSON).
    """

    part_of: typing.Optional["Reference"]

    """ Reference to a parent Account.
    Type `Reference` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in AccountStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class ActivityDefinition(DomainResource):
    """ The definition of a specific activity to be taken, independent of any
    particular patient or context.

    This resource allows for the definition of some activity to be performed,
    independent of a particular patient, practitioner, or other performance
    context.
    """
    resource_type: typing.Literal["ActivityDefinition"] = "ActivityDefinition"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ActivityDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: typing.Optional[FHIRString]

    """ Canonical identifier for this activity definition, represented as a
        URI (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    identifier: typing.Optional[typing.List["Identifier"]]

    """ Additional identifier for the activity definition.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    version: typing.Optional[FHIRString]

    """ Business version of the activity definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Name for this activity definition (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Name for this activity definition (human friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subtitle: typing.Optional[FHIRString]

    """ Subordinate title of the activity definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    subtitle__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_subtitle`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    experimental: typing.Optional[bool]

    """ For testing purposes, not real usage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    experimental__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_experimental`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subject_codeable_concept: typing.Optional["CodeableConcept"]

    """ Type of individual the activity definition is intended for.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject_reference: typing.Optional["Reference"]

    """ Type of individual the activity definition is intended for.
    Type `Reference` (represented as `dict` in JSON).
    """

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the activity definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for activity definition (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    purpose: typing.Optional[FHIRString]

    """ Why this activity definition is defined.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    purpose__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_purpose`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    usage: typing.Optional[FHIRString]

    """ Describes the clinical usage of the activity definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    usage__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_usage`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    copyright: typing.Optional[FHIRString]

    """ Use and/or publishing restrictions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    copyright__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_copyright`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    approval_date: typing.Optional[FHIRDate]

    """ When the activity definition was approved by publisher.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    approval_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_approval_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    last_review_date: typing.Optional[FHIRDate]

    """ When the activity definition was last reviewed.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    last_review_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_last_review_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    effective_period: typing.Optional["Period"]

    """ When the activity definition is expected to be used.
    Type `Period` (represented as `dict` in JSON).
    """

    topic: typing.Optional[typing.List["CodeableConcept"]]

    """ E.g. Education, Treatment, Assessment, etc..
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    author: typing.Optional[typing.List["ContactDetail"]]

    """ Who authored the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    editor: typing.Optional[typing.List["ContactDetail"]]

    """ Who edited the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    reviewer: typing.Optional[typing.List["ContactDetail"]]

    """ Who reviewed the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    endorser: typing.Optional[typing.List["ContactDetail"]]

    """ Who endorsed the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    related_artifact: typing.Optional[typing.List["RelatedArtifact"]]

    """ Additional documentation, citations, etc..
    List of `RelatedArtifact` items (represented as `dict` in JSON).
    """

    library: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Logic used by the activity definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    library__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_library`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    kind: typing.Optional["RequestResourceType"]

    """ Kind of resource.
    Type `RequestResourceType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    kind__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_kind`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    profile: typing.Optional[FHIRString]

    """ What profile the resource needs to conform to.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    profile__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_profile`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code: typing.Optional["CodeableConcept"]

    """ Detail type of activity.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

            
    
    
    intent: typing.Optional["RequestIntent"]

    """ proposal | plan | directive | order | original-order | reflex-order
        | filler-order | instance-order | option.
    Type `RequestIntent` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    intent__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_intent`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    priority: typing.Optional["RequestPriority"]

    """ routine | urgent | asap | stat.
    Type `RequestPriority` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    priority__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_priority`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    do_not_perform: typing.Optional[bool]

    """ True if the activity should not be performed.
    Type `bool`. Is a JSON Primitive element.
    """
    

    do_not_perform__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_do_not_perform`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    timing_timing: typing.Optional["Timing"]

    """ When activity is to occur.
    Type `Timing` (represented as `dict` in JSON).
    """

    timing_date_time: typing.Optional[FHIRDateTime]

    """ When activity is to occur.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    timing_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_timing_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    timing_age: typing.Optional["Age"]

    """ When activity is to occur.
    Type `Age` (represented as `dict` in JSON).
    """

    timing_period: typing.Optional["Period"]

    """ When activity is to occur.
    Type `Period` (represented as `dict` in JSON).
    """

    timing_range: typing.Optional["Range"]

    """ When activity is to occur.
    Type `Range` (represented as `dict` in JSON).
    """

    timing_duration: typing.Optional["Duration"]

    """ When activity is to occur.
    Type `Duration` (represented as `dict` in JSON).
    """

    location: typing.Optional["Reference"]

    """ Where it should happen.
    Type `Reference` (represented as `dict` in JSON).
    """

    participant: typing.Optional[typing.List["ActivityDefinitionParticipant"]]

    """ Who should participate in the action.
    List of `ActivityDefinitionParticipant` items (represented as `dict` in JSON).
    """

    product_reference: typing.Optional["Reference"]

    """ What's administered/supplied.
    Type `Reference` (represented as `dict` in JSON).
    """

    product_codeable_concept: typing.Optional["CodeableConcept"]

    """ What's administered/supplied.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    quantity: typing.Optional["Quantity"]

    """ How much is administered/consumed/supplied.
    Type `Quantity` (represented as `dict` in JSON).
    """

    dosage: typing.Optional[typing.List["Dosage"]]

    """ Detailed dosage instructions.
    List of `Dosage` items (represented as `dict` in JSON).
    """

    body_site: typing.Optional[typing.List["CodeableConcept"]]

    """ What part of body to perform on.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    specimen_requirement: typing.Optional[typing.List["Reference"]]

    """ What specimens are required to perform this action.
    List of `Reference` items (represented as `dict` in JSON).
    """

    observation_requirement: typing.Optional[typing.List["Reference"]]

    """ What observations are required to perform this action.
    List of `Reference` items (represented as `dict` in JSON).
    """

    observation_result_requirement: typing.Optional[typing.List["Reference"]]

    """ What observations must be produced by this action.
    List of `Reference` items (represented as `dict` in JSON).
    """

    transform: typing.Optional[FHIRString]

    """ Transform to apply the template.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    transform__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_transform`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    dynamic_value: typing.Optional[typing.List["ActivityDefinitionDynamicValue"]]

    """ Dynamic aspects of the definition.
    List of `ActivityDefinitionDynamicValue` items (represented as `dict` in JSON).
    """



#   {'path': 'ActivityDefinition.subject[x]', 'choice_of_type': 'subject', 'orig_name': 'subjectCodeableConcept', 'name': 'subjectCodeableConcept', 'parent_name': 'ActivityDefinition', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Type of individual the activity definition is intended for', 'formal': 'A code or group definition that describes the intended subject of the activity being defined.', 'representation': None}
    _subject_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['subject_codeable_concept', 'subject_reference']), True))

#   {'path': 'ActivityDefinition.timing[x]', 'choice_of_type': 'timing', 'orig_name': 'timingTiming', 'name': 'timingTiming', 'parent_name': 'ActivityDefinition', 'class_name': 'Timing', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'When activity is to occur', 'formal': 'The period, timing or frequency upon which the described activity is to occur.', 'representation': None}
    _timing_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['timing_timing', 'timing_date_time', 'timing_age', 'timing_period', 'timing_range', 'timing_duration']), True))

#   {'path': 'ActivityDefinition.product[x]', 'choice_of_type': 'product', 'orig_name': 'productReference', 'name': 'productReference', 'parent_name': 'ActivityDefinition', 'class_name': 'Reference', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': "What's administered/supplied", 'formal': 'Identifies the food, drug or other product being consumed or supplied in the activity.', 'representation': None}
    _product_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['product_reference', 'product_codeable_concept']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["kind"]["enum"]
            enums.clear()
            for item in RequestResourceType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["intent"]["enum"]
            enums.clear()
            for item in RequestIntent:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["priority"]["enum"]
            enums.clear()
            for item in RequestPriority:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_subtitle = get_primitive_field_root_validator("subtitle")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_experimental = get_primitive_field_root_validator("experimental")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_purpose = get_primitive_field_root_validator("purpose")
    
    _validate_primitive_usage = get_primitive_field_root_validator("usage")
    
    _validate_primitive_copyright = get_primitive_field_root_validator("copyright")
    
    _validate_primitive_approval_date = get_primitive_field_root_validator("approval_date")
    
    _validate_primitive_last_review_date = get_primitive_field_root_validator("last_review_date")
    
    _validate_primitive_library = get_primitive_field_root_validator("library")
    
    _validate_primitive_kind = get_primitive_field_root_validator("kind")
    
    _validate_primitive_profile = get_primitive_field_root_validator("profile")
    
    _validate_primitive_intent = get_primitive_field_root_validator("intent")
    
    _validate_primitive_priority = get_primitive_field_root_validator("priority")
    
    _validate_primitive_do_not_perform = get_primitive_field_root_validator("do_not_perform")
    
    _validate_primitive_timing_date_time = get_primitive_field_root_validator("timing_date_time")
    
    _validate_primitive_transform = get_primitive_field_root_validator("transform")
    


class AdverseEvent(DomainResource):
    """ Medical care, research study or other healthcare event causing physical
    injury.

    Actual or  potential/avoided event causing unintended physical injury
    resulting from or contributed to by medical care, a research study or other
    healthcare setting factors that requires additional monitoring, treatment,
    or hospitalization, or that results in death.
    """
    resource_type: typing.Literal["AdverseEvent"] = "AdverseEvent"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/AdverseEvent",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional["Identifier"]

    """ Business identifier for the event.
    Type `Identifier` (represented as `dict` in JSON).
    """

            
    
    
    actuality: "AdverseEventActuality"

    """ actual | potential.
    Type `AdverseEventActuality` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    actuality__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_actuality`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    category: typing.Optional[typing.List["CodeableConcept"]]

    """ product-problem | product-quality | product-use-error | wrong-dose
        | incorrect-prescribing-information | wrong-technique | wrong-
        route-of-administration | wrong-rate | wrong-duration | wrong-time
        | expired-drug | medical-device-use-error | problem-different-
        manufacturer | unsafe-physical-environment.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    event: typing.Optional["CodeableConcept"]

    """ Type of the event itself in relation to the subject.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject: "Reference"

    """ Subject impacted by event.
    Type `Reference` (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Encounter created as part of.
    Type `Reference` (represented as `dict` in JSON).
    """

    date: typing.Optional[FHIRDateTime]

    """ When the event occurred.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    detected: typing.Optional[FHIRDateTime]

    """ When the event was detected.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    detected__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_detected`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    recorded_date: typing.Optional[FHIRDateTime]

    """ When the event was recorded.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    recorded_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_recorded_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    resulting_condition: typing.Optional[typing.List["Reference"]]

    """ Effect on the subject due to this event.
    List of `Reference` items (represented as `dict` in JSON).
    """

    location: typing.Optional["Reference"]

    """ Location where adverse event occurred.
    Type `Reference` (represented as `dict` in JSON).
    """

    seriousness: typing.Optional["CodeableConcept"]

    """ Seriousness of the event.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    severity: typing.Optional["CodeableConcept"]

    """ mild | moderate | severe.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    outcome: typing.Optional["CodeableConcept"]

    """ resolved | recovering | ongoing | resolvedWithSequelae | fatal |
        unknown.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    recorder: typing.Optional["Reference"]

    """ Who recorded the adverse event.
    Type `Reference` (represented as `dict` in JSON).
    """

    contributor: typing.Optional[typing.List["Reference"]]

    """ Who  was involved in the adverse event or the potential adverse
        event.
    List of `Reference` items (represented as `dict` in JSON).
    """

    suspect_entity: typing.Optional[typing.List["AdverseEventSuspectEntity"]]

    """ The suspected agent causing the adverse event.
    List of `AdverseEventSuspectEntity` items (represented as `dict` in JSON).
    """

    subject_medical_history: typing.Optional[typing.List["Reference"]]

    """ AdverseEvent.subjectMedicalHistory.
    List of `Reference` items (represented as `dict` in JSON).
    """

    reference_document: typing.Optional[typing.List["Reference"]]

    """ AdverseEvent.referenceDocument.
    List of `Reference` items (represented as `dict` in JSON).
    """

    study: typing.Optional[typing.List["Reference"]]

    """ AdverseEvent.study.
    List of `Reference` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["actuality"]["enum"]
            enums.clear()
            for item in AdverseEventActuality:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_actuality = get_primitive_field_root_validator("actuality")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_detected = get_primitive_field_root_validator("detected")
    
    _validate_primitive_recorded_date = get_primitive_field_root_validator("recorded_date")
    


class AllergyIntolerance(DomainResource):
    """ Allergy or Intolerance (generally: Risk of adverse reaction to a substance).

    Risk of harmful or undesirable, physiological response which is unique to
    an individual and associated with exposure to a substance.
    """
    resource_type: typing.Literal["AllergyIntolerance"] = "AllergyIntolerance"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/AllergyIntolerance",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ External ids for this item.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    clinical_status: typing.Optional["CodeableConcept"]

    """ active | inactive | resolved.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    verification_status: typing.Optional["CodeableConcept"]

    """ unconfirmed | confirmed | refuted | entered-in-error.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

            
    
    
    type: typing.Optional["AllergyIntoleranceType"]

    """ allergy | intolerance - Underlying mechanism (if known).
    Type `AllergyIntoleranceType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    category: typing.Optional[typing.List[typing.Optional["AllergyIntoleranceCategory"]]]

    """ food | medication | environment | biologic.
    List of `AllergyIntoleranceCategory` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    category__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_category`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    criticality: typing.Optional["AllergyIntoleranceCriticality"]

    """ low | high | unable-to-assess.
    Type `AllergyIntoleranceCriticality` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    criticality__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_criticality`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code: typing.Optional["CodeableConcept"]

    """ Code that identifies the allergy or intolerance.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    patient: "Reference"

    """ Who the sensitivity is for.
    Type `Reference` (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Encounter when the allergy or intolerance was asserted.
    Type `Reference` (represented as `dict` in JSON).
    """

    onset_date_time: typing.Optional[FHIRDateTime]

    """ When allergy or intolerance was identified.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    onset_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_onset_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    onset_age: typing.Optional["Age"]

    """ When allergy or intolerance was identified.
    Type `Age` (represented as `dict` in JSON).
    """

    onset_period: typing.Optional["Period"]

    """ When allergy or intolerance was identified.
    Type `Period` (represented as `dict` in JSON).
    """

    onset_range: typing.Optional["Range"]

    """ When allergy or intolerance was identified.
    Type `Range` (represented as `dict` in JSON).
    """

    onset_string: typing.Optional[FHIRString]

    """ When allergy or intolerance was identified.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    onset_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_onset_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    recorded_date: typing.Optional[FHIRDateTime]

    """ Date first version of the resource instance was recorded.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    recorded_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_recorded_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    recorder: typing.Optional["Reference"]

    """ Who recorded the sensitivity.
    Type `Reference` (represented as `dict` in JSON).
    """

    asserter: typing.Optional["Reference"]

    """ Source of the information about the allergy.
    Type `Reference` (represented as `dict` in JSON).
    """

    last_occurrence: typing.Optional[FHIRDateTime]

    """ Date(/time) of last known occurrence of a reaction.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    last_occurrence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_last_occurrence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    note: typing.Optional[typing.List["Annotation"]]

    """ Additional text not captured in other fields.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    reaction: typing.Optional[typing.List["AllergyIntoleranceReaction"]]

    """ Adverse Reaction Events linked to exposure to substance.
    List of `AllergyIntoleranceReaction` items (represented as `dict` in JSON).
    """



#   {'path': 'AllergyIntolerance.onset[x]', 'choice_of_type': 'onset', 'orig_name': 'onsetDateTime', 'name': 'onsetDateTime', 'parent_name': 'AllergyIntolerance', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'When allergy or intolerance was identified', 'formal': 'Estimated or actual date,  date-time, or age when allergy or intolerance was identified.', 'representation': None}
    _onset_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['onset_date_time', 'onset_age', 'onset_period', 'onset_range', 'onset_string']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in AllergyIntoleranceType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["category"]["enum"]
            enums.clear()
            for item in AllergyIntoleranceCategory:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["criticality"]["enum"]
            enums.clear()
            for item in AllergyIntoleranceCriticality:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_category = get_primitive_field_root_validator("category")
    
    _validate_primitive_criticality = get_primitive_field_root_validator("criticality")
    
    _validate_primitive_onset_date_time = get_primitive_field_root_validator("onset_date_time")
    
    _validate_primitive_onset_string = get_primitive_field_root_validator("onset_string")
    
    _validate_primitive_recorded_date = get_primitive_field_root_validator("recorded_date")
    
    _validate_primitive_last_occurrence = get_primitive_field_root_validator("last_occurrence")
    


class Appointment(DomainResource):
    """ A booking of a healthcare event among patient(s), practitioner(s), related
    person(s) and/or device(s) for a specific date/time. This may result in one
    or more Encounter(s).
    """
    resource_type: typing.Literal["Appointment"] = "Appointment"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Appointment",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ External Ids for this item.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "AppointmentStatus"

    """ proposed | pending | booked | arrived | fulfilled | cancelled |
        noshow | entered-in-error | checked-in | waitlist.
    Type `AppointmentStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    cancelation_reason: typing.Optional["CodeableConcept"]

    """ The coded reason for the appointment being cancelled.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    service_category: typing.Optional[typing.List["CodeableConcept"]]

    """ A broad categorization of the service that is to be performed
        during this appointment.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    service_type: typing.Optional[typing.List["CodeableConcept"]]

    """ The specific service that is to be performed during this
        appointment.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    specialty: typing.Optional[typing.List["CodeableConcept"]]

    """ The specialty of a practitioner that would be required to perform
        the service requested in this appointment.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    appointment_type: typing.Optional["CodeableConcept"]

    """ The style of appointment or patient that has been booked in the
        slot (not service type).
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    reason_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Coded reason this appointment is scheduled.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    reason_reference: typing.Optional[typing.List["Reference"]]

    """ Reason the appointment is to take place (resource).
    List of `Reference` items (represented as `dict` in JSON).
    """

    priority: typing.Optional[FHIRUnsignedInt]

    """ Used to make informed decisions if needing to re-prioritize.
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    priority__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_priority`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ Shown on a subject line in a meeting request, or appointment list.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    supporting_information: typing.Optional[typing.List["Reference"]]

    """ Additional information to support the appointment.
    List of `Reference` items (represented as `dict` in JSON).
    """

    start: typing.Optional[FHIRInstant]

    """ When appointment is to take place.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    start__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_start`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    end: typing.Optional[FHIRInstant]

    """ When appointment is to conclude.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    end__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_end`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    minutes_duration: typing.Optional[FHIRPositiveInt]

    """ Can be less than start/end (e.g. estimate).
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    minutes_duration__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_minutes_duration`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    slot: typing.Optional[typing.List["Reference"]]

    """ The slots that this appointment is filling.
    List of `Reference` items (represented as `dict` in JSON).
    """

    created: typing.Optional[FHIRDateTime]

    """ The date that this appointment was initially created.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    created__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_created`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    comment: typing.Optional[FHIRString]

    """ Additional comments.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    comment__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_comment`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    patient_instruction: typing.Optional[FHIRString]

    """ Detailed information and instructions for the patient.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    patient_instruction__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_patient_instruction`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    based_on: typing.Optional[typing.List["Reference"]]

    """ The service request this appointment is allocated to assess.
    List of `Reference` items (represented as `dict` in JSON).
    """

    participant: typing.List["AppointmentParticipant"]

    """ Participants involved in appointment.
    List of `AppointmentParticipant` items (represented as `dict` in JSON).
    """

    requested_period: typing.Optional[typing.List["Period"]]

    """ Potential date/time interval(s) requested to allocate the
        appointment within.
    List of `Period` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in AppointmentStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_priority = get_primitive_field_root_validator("priority")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_start = get_primitive_field_root_validator("start")
    
    _validate_primitive_end = get_primitive_field_root_validator("end")
    
    _validate_primitive_minutes_duration = get_primitive_field_root_validator("minutes_duration")
    
    _validate_primitive_created = get_primitive_field_root_validator("created")
    
    _validate_primitive_comment = get_primitive_field_root_validator("comment")
    
    _validate_primitive_patient_instruction = get_primitive_field_root_validator("patient_instruction")
    


class AppointmentResponse(DomainResource):
    """ A reply to an appointment request for a patient and/or practitioner(s),
    such as a confirmation or rejection.
    """
    resource_type: typing.Literal["AppointmentResponse"] = "AppointmentResponse"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/AppointmentResponse",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ External Ids for this item.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    appointment: "Reference"

    """ Appointment this response relates to.
    Type `Reference` (represented as `dict` in JSON).
    """

    start: typing.Optional[FHIRInstant]

    """ Time from appointment, or requested new start time.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    start__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_start`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    end: typing.Optional[FHIRInstant]

    """ Time from appointment, or requested new end time.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    end__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_end`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    participant_type: typing.Optional[typing.List["CodeableConcept"]]

    """ Role of participant in the appointment.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    actor: typing.Optional["Reference"]

    """ Person, Location, HealthcareService, or Device.
    Type `Reference` (represented as `dict` in JSON).
    """

            
    
    
    participant_status: "ParticipationStatus"

    """ accepted | declined | tentative | needs-action.
    Type `ParticipationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    participant_status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_participant_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    comment: typing.Optional[FHIRString]

    """ Additional comments.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    comment__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_comment`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["participantStatus"]["enum"]
            enums.clear()
            for item in ParticipationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_start = get_primitive_field_root_validator("start")
    
    _validate_primitive_end = get_primitive_field_root_validator("end")
    
    _validate_primitive_participant_status = get_primitive_field_root_validator("participant_status")
    
    _validate_primitive_comment = get_primitive_field_root_validator("comment")
    


class AuditEvent(DomainResource):
    """ Event record kept for security purposes.

    A record of an event made for purposes of maintaining a security log.
    Typical uses include detection of intrusion attempts and monitoring for
    inappropriate usage.
    """
    resource_type: typing.Literal["AuditEvent"] = "AuditEvent"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/AuditEvent",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: "Coding"

    """ Type/identifier of event.
    Type `Coding` (represented as `dict` in JSON).
    """

    subtype: typing.Optional[typing.List["Coding"]]

    """ More specific type/id for the event.
    List of `Coding` items (represented as `dict` in JSON).
    """

            
    
    
    action: typing.Optional["AuditEventAction"]

    """ Type of action performed during the event.
    Type `AuditEventAction` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    action__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_action`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    period: typing.Optional["Period"]

    """ When the activity occurred.
    Type `Period` (represented as `dict` in JSON).
    """

    recorded: FHIRInstant

    """ Time when the event was recorded.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    recorded__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_recorded`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    
    
    outcome: typing.Optional["FHIRCode"]

    """ Whether the event succeeded or failed.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    outcome__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_outcome`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    outcome_desc: typing.Optional[FHIRString]

    """ Description of the event outcome.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    outcome_desc__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_outcome_desc`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    purpose_of_event: typing.Optional[typing.List["CodeableConcept"]]

    """ The purposeOfUse of the event.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    agent: typing.List["AuditEventAgent"]

    """ Actor involved in the event.
    List of `AuditEventAgent` items (represented as `dict` in JSON).
    """

    source: "AuditEventSource"

    """ Audit Event Reporter.
    Type `AuditEventSource` (represented as `dict` in JSON).
    """

    entity: typing.Optional[typing.List["AuditEventEntity"]]

    """ Data or objects used.
    List of `AuditEventEntity` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["action"]["enum"]
            enums.clear()
            for item in AuditEventAction:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_action = get_primitive_field_root_validator("action")
    
    _validate_primitive_recorded = get_primitive_field_root_validator("recorded")
    
    _validate_primitive_outcome = get_primitive_field_root_validator("outcome")
    
    _validate_primitive_outcome_desc = get_primitive_field_root_validator("outcome_desc")
    


class Basic(DomainResource):
    """ Resource for non-supported content.

    Basic is used for handling concepts not yet defined in FHIR, narrative-only
    resources that don't map to an existing resource, and custom resources not
    appropriate for inclusion in the FHIR specification.
    """
    resource_type: typing.Literal["Basic"] = "Basic"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Basic",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    code: "CodeableConcept"

    """ Kind of Resource.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject: typing.Optional["Reference"]

    """ Identifies the focus of this resource.
    Type `Reference` (represented as `dict` in JSON).
    """

    created: typing.Optional[FHIRDate]

    """ When created.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    created__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_created`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    author: typing.Optional["Reference"]

    """ Who created.
    Type `Reference` (represented as `dict` in JSON).
    """



    _validate_primitive_created = get_primitive_field_root_validator("created")
    


class BiologicallyDerivedProduct(DomainResource):
    """ A material substance originating from a biological entity.

    A material substance originating from a biological entity intended to be
    transplanted or infused
    into another (possibly the same) biological entity.
    """
    resource_type: typing.Literal["BiologicallyDerivedProduct"] = "BiologicallyDerivedProduct"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/BiologicallyDerivedProduct",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ External ids for this item.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    product_category: typing.Optional["BiologicallyDerivedProductCategory"]

    """ organ | tissue | fluid | cells | biologicalAgent.
    Type `BiologicallyDerivedProductCategory` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    product_category__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_product_category`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    product_code: typing.Optional["CodeableConcept"]

    """ What this biologically derived product is.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

            
    
    
    status: typing.Optional["BiologicallyDerivedProductStatus"]

    """ available | unavailable.
    Type `BiologicallyDerivedProductStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    request: typing.Optional[typing.List["Reference"]]

    """ Procedure request.
    List of `Reference` items (represented as `dict` in JSON).
    """

    quantity: typing.Optional[FHIRInt]

    """ The amount of this biologically derived product.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    quantity__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_quantity`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    parent: typing.Optional[typing.List["Reference"]]

    """ BiologicallyDerivedProduct parent.
    List of `Reference` items (represented as `dict` in JSON).
    """

    collection: typing.Optional["BiologicallyDerivedProductCollection"]

    """ How this product was collected.
    Type `BiologicallyDerivedProductCollection` (represented as `dict` in JSON).
    """

    processing: typing.Optional[typing.List["BiologicallyDerivedProductProcessing"]]

    """ Any processing of the product during collection.
    List of `BiologicallyDerivedProductProcessing` items (represented as `dict` in JSON).
    """

    manipulation: typing.Optional["BiologicallyDerivedProductManipulation"]

    """ Any manipulation of product post-collection.
    Type `BiologicallyDerivedProductManipulation` (represented as `dict` in JSON).
    """

    storage: typing.Optional[typing.List["BiologicallyDerivedProductStorage"]]

    """ Product storage.
    List of `BiologicallyDerivedProductStorage` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["productCategory"]["enum"]
            enums.clear()
            for item in BiologicallyDerivedProductCategory:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in BiologicallyDerivedProductStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_product_category = get_primitive_field_root_validator("product_category")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_quantity = get_primitive_field_root_validator("quantity")
    


class BodyStructure(DomainResource):
    """ Specific and identified anatomical structure.

    Record details about an anatomical structure.  This resource may be used
    when a coded concept does not provide the necessary detail needed for the
    use case.
    """
    resource_type: typing.Literal["BodyStructure"] = "BodyStructure"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/BodyStructure",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Bodystructure identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    active: typing.Optional[bool]

    """ Whether this record is in active use.
    Type `bool`. Is a JSON Primitive element.
    """
    

    active__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_active`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    morphology: typing.Optional["CodeableConcept"]

    """ Kind of Structure.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    location: typing.Optional["CodeableConcept"]

    """ Body site.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    location_qualifier: typing.Optional[typing.List["CodeableConcept"]]

    """ Body site modifier.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Text description.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    image: typing.Optional[typing.List["Attachment"]]

    """ Attached images.
    List of `Attachment` items (represented as `dict` in JSON).
    """

    patient: "Reference"

    """ Who this is about.
    Type `Reference` (represented as `dict` in JSON).
    """



    _validate_primitive_active = get_primitive_field_root_validator("active")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class CapabilityStatement(DomainResource):
    """ A statement of system capabilities.

    A Capability Statement documents a set of capabilities (behaviors) of a
    FHIR Server for a particular version of FHIR that may be used as a
    statement of actual server functionality or a statement of required or
    desired server implementation.
    """
    resource_type: typing.Literal["CapabilityStatement"] = "CapabilityStatement"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CapabilityStatement",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: typing.Optional[FHIRString]

    """ Canonical identifier for this capability statement, represented as
        a URI (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    version: typing.Optional[FHIRString]

    """ Business version of the capability statement.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Name for this capability statement (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Name for this capability statement (human friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    experimental: typing.Optional[bool]

    """ For testing purposes, not real usage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    experimental__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_experimental`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    date: FHIRDateTime

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the capability statement.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for capability statement (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    purpose: typing.Optional[FHIRString]

    """ Why this capability statement is defined.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    purpose__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_purpose`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    copyright: typing.Optional[FHIRString]

    """ Use and/or publishing restrictions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    copyright__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_copyright`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    kind: "CapabilityStatementKind"

    """ instance | capability | requirements.
    Type `CapabilityStatementKind` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    kind__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_kind`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    instantiates: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Canonical URL of another capability statement this implements.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    imports: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Canonical URL of another capability statement this adds to.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    imports__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_imports`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    software: typing.Optional["CapabilityStatementSoftware"]

    """ Software that is covered by this capability statement.
    Type `CapabilityStatementSoftware` (represented as `dict` in JSON).
    """

    implementation: typing.Optional["CapabilityStatementImplementation"]

    """ If this describes a specific instance.
    Type `CapabilityStatementImplementation` (represented as `dict` in JSON).
    """

    
    
    fhir_version: "FHIRCode"

    """ FHIR Version the system supports.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    fhir_version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_fhir_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    
    
    format: typing.List[typing.Optional["FHIRCode"]]

    """ formats supported (xml | json | ttl | mime type).
    List of `FHIRCode` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    format__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_format`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    
    
    patch_format: typing.Optional[typing.List[typing.Optional["FHIRCode"]]]

    """ Patch formats supported.
    List of `FHIRCode` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    patch_format__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_patch_format`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    implementation_guide: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Implementation guides supported.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    implementation_guide__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_implementation_guide`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    rest: typing.Optional[typing.List["CapabilityStatementRest"]]

    """ If the endpoint is a RESTful one.
    List of `CapabilityStatementRest` items (represented as `dict` in JSON).
    """

    messaging: typing.Optional[typing.List["CapabilityStatementMessaging"]]

    """ If messaging is supported.
    List of `CapabilityStatementMessaging` items (represented as `dict` in JSON).
    """

    document: typing.Optional[typing.List["CapabilityStatementDocument"]]

    """ Document definition.
    List of `CapabilityStatementDocument` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["kind"]["enum"]
            enums.clear()
            for item in CapabilityStatementKind:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_experimental = get_primitive_field_root_validator("experimental")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_purpose = get_primitive_field_root_validator("purpose")
    
    _validate_primitive_copyright = get_primitive_field_root_validator("copyright")
    
    _validate_primitive_kind = get_primitive_field_root_validator("kind")
    
    _validate_primitive_instantiates = get_primitive_field_root_validator("instantiates")
    
    _validate_primitive_imports = get_primitive_field_root_validator("imports")
    
    _validate_primitive_fhir_version = get_primitive_field_root_validator("fhir_version")
    
    _validate_primitive_format = get_primitive_field_root_validator("format")
    
    _validate_primitive_patch_format = get_primitive_field_root_validator("patch_format")
    
    _validate_primitive_implementation_guide = get_primitive_field_root_validator("implementation_guide")
    


class CarePlan(DomainResource):
    """ Healthcare plan for patient or group.

    Describes the intention of how one or more practitioners intend to deliver
    care for a particular patient, group or community for a period of time,
    possibly limited to care for a specific condition or set of conditions.
    """
    resource_type: typing.Literal["CarePlan"] = "CarePlan"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CarePlan",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ External Ids for this plan.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    instantiates_canonical: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Instantiates FHIR protocol or definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates_canonical__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    instantiates_uri: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Instantiates external protocol or definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates_uri__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    based_on: typing.Optional[typing.List["Reference"]]

    """ Fulfills CarePlan.
    List of `Reference` items (represented as `dict` in JSON).
    """

    replaces: typing.Optional[typing.List["Reference"]]

    """ CarePlan replaced by this CarePlan.
    List of `Reference` items (represented as `dict` in JSON).
    """

    part_of: typing.Optional[typing.List["Reference"]]

    """ Part of referenced CarePlan.
    List of `Reference` items (represented as `dict` in JSON).
    """

            
    
    
    status: "RequestStatus"

    """ draft | active | on-hold | revoked | completed | entered-in-error |
        unknown.
    Type `RequestStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    intent: "RequestIntent"

    """ proposal | plan | order | option.
    Type `RequestIntent` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    intent__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_intent`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    category: typing.Optional[typing.List["CodeableConcept"]]

    """ Type of plan.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    title: typing.Optional[FHIRString]

    """ Human-friendly name for the care plan.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ Summary of nature of plan.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subject: "Reference"

    """ Who the care plan is for.
    Type `Reference` (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Encounter created as part of.
    Type `Reference` (represented as `dict` in JSON).
    """

    period: typing.Optional["Period"]

    """ Time period plan covers.
    Type `Period` (represented as `dict` in JSON).
    """

    created: typing.Optional[FHIRDateTime]

    """ Date record was first recorded.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    created__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_created`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    author: typing.Optional["Reference"]

    """ Who is the designated responsible party.
    Type `Reference` (represented as `dict` in JSON).
    """

    contributor: typing.Optional[typing.List["Reference"]]

    """ Who provided the content of the care plan.
    List of `Reference` items (represented as `dict` in JSON).
    """

    care_team: typing.Optional[typing.List["Reference"]]

    """ Who's involved in plan?.
    List of `Reference` items (represented as `dict` in JSON).
    """

    addresses: typing.Optional[typing.List["Reference"]]

    """ Health issues this plan addresses.
    List of `Reference` items (represented as `dict` in JSON).
    """

    supporting_info: typing.Optional[typing.List["Reference"]]

    """ Information considered as part of plan.
    List of `Reference` items (represented as `dict` in JSON).
    """

    goal: typing.Optional[typing.List["Reference"]]

    """ Desired outcome of plan.
    List of `Reference` items (represented as `dict` in JSON).
    """

    activity: typing.Optional[typing.List["CarePlanActivity"]]

    """ Action to occur as part of plan.
    List of `CarePlanActivity` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Comments about the plan.
    List of `Annotation` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in RequestStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["intent"]["enum"]
            enums.clear()
            for item in RequestIntent:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_instantiates_canonical = get_primitive_field_root_validator("instantiates_canonical")
    
    _validate_primitive_instantiates_uri = get_primitive_field_root_validator("instantiates_uri")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_intent = get_primitive_field_root_validator("intent")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_created = get_primitive_field_root_validator("created")
    


class CareTeam(DomainResource):
    """ Planned participants in the coordination and delivery of care for a patient
    or group.

    The Care Team includes all the people and organizations who plan to
    participate in the coordination and delivery of care for a patient.
    """
    resource_type: typing.Literal["CareTeam"] = "CareTeam"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CareTeam",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ External Ids for this team.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: typing.Optional["CareTeamStatus"]

    """ proposed | active | suspended | inactive | entered-in-error.
    Type `CareTeamStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    category: typing.Optional[typing.List["CodeableConcept"]]

    """ Type of team.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    name: typing.Optional[FHIRString]

    """ Name of the team, such as crisis assessment team.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subject: typing.Optional["Reference"]

    """ Who care team is for.
    Type `Reference` (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Encounter created as part of.
    Type `Reference` (represented as `dict` in JSON).
    """

    period: typing.Optional["Period"]

    """ Time period team covers.
    Type `Period` (represented as `dict` in JSON).
    """

    participant: typing.Optional[typing.List["CareTeamParticipant"]]

    """ Members of the team.
    List of `CareTeamParticipant` items (represented as `dict` in JSON).
    """

    reason_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Why the care team exists.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    reason_reference: typing.Optional[typing.List["Reference"]]

    """ Why the care team exists.
    List of `Reference` items (represented as `dict` in JSON).
    """

    managing_organization: typing.Optional[typing.List["Reference"]]

    """ Organization responsible for the care team.
    List of `Reference` items (represented as `dict` in JSON).
    """

    telecom: typing.Optional[typing.List["ContactPoint"]]

    """ A contact detail for the care team (that applies to all members).
    List of `ContactPoint` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Comments made about the CareTeam.
    List of `Annotation` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in CareTeamStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    


class CatalogEntry(DomainResource):
    """ An entry in a catalog.

    Catalog entries are wrappers that contextualize items included in a
    catalog.
    """
    resource_type: typing.Literal["CatalogEntry"] = "CatalogEntry"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CatalogEntry",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Unique identifier of the catalog item.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    type: typing.Optional["CodeableConcept"]

    """ The type of item - medication, device, service, protocol or other.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    orderable: bool

    """ Whether the entry represents an orderable item.
    Type `bool`. Is a JSON Primitive element.
    """
    

    orderable__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_orderable`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    referenced_item: "Reference"

    """ The item that is being defined.
    Type `Reference` (represented as `dict` in JSON).
    """

    additional_identifier: typing.Optional[typing.List["Identifier"]]

    """ Any additional identifier(s) for the catalog item, in the same
        granularity or concept.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    classification: typing.Optional[typing.List["CodeableConcept"]]

    """ Classification (category or class) of the item entry.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

            
    
    
    status: typing.Optional["PublicationStatus"]

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    validity_period: typing.Optional["Period"]

    """ The time period in which this catalog entry is expected to be
        active.
    Type `Period` (represented as `dict` in JSON).
    """

    valid_to: typing.Optional[FHIRDateTime]

    """ The date until which this catalog entry is expected to be active.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    valid_to__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_valid_to`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    last_updated: typing.Optional[FHIRDateTime]

    """ When was this catalog last updated.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    last_updated__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_last_updated`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    additional_characteristic: typing.Optional[typing.List["CodeableConcept"]]

    """ Additional characteristics of the catalog entry.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    additional_classification: typing.Optional[typing.List["CodeableConcept"]]

    """ Additional classification of the catalog entry.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    related_entry: typing.Optional[typing.List["CatalogEntryRelatedEntry"]]

    """ An item that this catalog entry is related to.
    List of `CatalogEntryRelatedEntry` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_orderable = get_primitive_field_root_validator("orderable")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_valid_to = get_primitive_field_root_validator("valid_to")
    
    _validate_primitive_last_updated = get_primitive_field_root_validator("last_updated")
    


class ChargeItem(DomainResource):
    """ Item containing charge code(s) associated with the provision of healthcare
    provider products.

    The resource ChargeItem describes the provision of healthcare provider
    products for a certain patient, therefore referring not only to the
    product, but containing in addition details of the provision, like date,
    time, amounts and participating organizations and persons. Main Usage of
    the ChargeItem is to enable the billing process and internal cost
    allocation.
    """
    resource_type: typing.Literal["ChargeItem"] = "ChargeItem"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ChargeItem",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business Identifier for item.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    definition_uri: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Defining information about the code of this charge item.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    definition_uri__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_definition_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    definition_canonical: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Resource defining the code of this ChargeItem.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    definition_canonical__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_definition_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "ChargeItemStatus"

    """ planned | billable | not-billable | aborted | billed | entered-in-
        error | unknown.
    Type `ChargeItemStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    part_of: typing.Optional[typing.List["Reference"]]

    """ Part of referenced ChargeItem.
    List of `Reference` items (represented as `dict` in JSON).
    """

    code: "CodeableConcept"

    """ A code that identifies the charge, like a billing code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject: "Reference"

    """ Individual service was done for/to.
    Type `Reference` (represented as `dict` in JSON).
    """

    context: typing.Optional["Reference"]

    """ Encounter / Episode associated with event.
    Type `Reference` (represented as `dict` in JSON).
    """

    occurrence_date_time: typing.Optional[FHIRDateTime]

    """ When the charged service was applied.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    occurrence_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_occurrence_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    occurrence_period: typing.Optional["Period"]

    """ When the charged service was applied.
    Type `Period` (represented as `dict` in JSON).
    """

    occurrence_timing: typing.Optional["Timing"]

    """ When the charged service was applied.
    Type `Timing` (represented as `dict` in JSON).
    """

    performer: typing.Optional[typing.List["ChargeItemPerformer"]]

    """ Who performed charged service.
    List of `ChargeItemPerformer` items (represented as `dict` in JSON).
    """

    performing_organization: typing.Optional["Reference"]

    """ Organization providing the charged service.
    Type `Reference` (represented as `dict` in JSON).
    """

    requesting_organization: typing.Optional["Reference"]

    """ Organization requesting the charged service.
    Type `Reference` (represented as `dict` in JSON).
    """

    cost_center: typing.Optional["Reference"]

    """ Organization that has ownership of the (potential, future) revenue.
    Type `Reference` (represented as `dict` in JSON).
    """

    quantity: typing.Optional["Quantity"]

    """ Quantity of which the charge item has been serviced.
    Type `Quantity` (represented as `dict` in JSON).
    """

    bodysite: typing.Optional[typing.List["CodeableConcept"]]

    """ Anatomical location, if relevant.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    factor_override: typing.Optional[decimal.Decimal]

    """ Factor overriding the associated rules.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    factor_override__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_factor_override`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    price_override: typing.Optional["Money"]

    """ Price overriding the associated rules.
    Type `Money` (represented as `dict` in JSON).
    """

    override_reason: typing.Optional[FHIRString]

    """ Reason for overriding the list price/factor.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    override_reason__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_override_reason`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    enterer: typing.Optional["Reference"]

    """ Individual who was entering.
    Type `Reference` (represented as `dict` in JSON).
    """

    entered_date: typing.Optional[FHIRDateTime]

    """ Date the charge item was entered.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    entered_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_entered_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    reason: typing.Optional[typing.List["CodeableConcept"]]

    """ Why was the charged  service rendered?.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    service: typing.Optional[typing.List["Reference"]]

    """ Which rendered service is being charged?.
    List of `Reference` items (represented as `dict` in JSON).
    """

    product_reference: typing.Optional["Reference"]

    """ Product charged.
    Type `Reference` (represented as `dict` in JSON).
    """

    product_codeable_concept: typing.Optional["CodeableConcept"]

    """ Product charged.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    account: typing.Optional[typing.List["Reference"]]

    """ Account to place this charge.
    List of `Reference` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Comments made about the ChargeItem.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    supporting_information: typing.Optional[typing.List["Reference"]]

    """ Further information supporting this charge.
    List of `Reference` items (represented as `dict` in JSON).
    """



#   {'path': 'ChargeItem.occurrence[x]', 'choice_of_type': 'occurrence', 'orig_name': 'occurrenceDateTime', 'name': 'occurrenceDateTime', 'parent_name': 'ChargeItem', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'When the charged service was applied', 'formal': 'Date/time(s) or duration when the charged service was applied.', 'representation': None}
    _occurrence_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['occurrence_date_time', 'occurrence_period', 'occurrence_timing']), True))

#   {'path': 'ChargeItem.product[x]', 'choice_of_type': 'product', 'orig_name': 'productReference', 'name': 'productReference', 'parent_name': 'ChargeItem', 'class_name': 'Reference', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': False, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Product charged', 'formal': 'Identifies the device, food, drug or other product being charged either by type code or reference to an instance.', 'representation': None}
    _product_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['product_reference', 'product_codeable_concept']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in ChargeItemStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_definition_uri = get_primitive_field_root_validator("definition_uri")
    
    _validate_primitive_definition_canonical = get_primitive_field_root_validator("definition_canonical")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_occurrence_date_time = get_primitive_field_root_validator("occurrence_date_time")
    
    _validate_primitive_factor_override = get_primitive_field_root_validator("factor_override")
    
    _validate_primitive_override_reason = get_primitive_field_root_validator("override_reason")
    
    _validate_primitive_entered_date = get_primitive_field_root_validator("entered_date")
    


class ChargeItemDefinition(DomainResource):
    """ Definition of properties and rules about how the price and the
    applicability of a ChargeItem can be determined.

    The ChargeItemDefinition resource provides the properties that apply to the
    (billing) codes necessary to calculate costs and prices. The properties may
    differ largely depending on type and realm, therefore this resource gives
    only a rough structure and requires profiling for each type of billing code
    system.
    """
    resource_type: typing.Literal["ChargeItemDefinition"] = "ChargeItemDefinition"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ChargeItemDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: FHIRRequiredString

    """ Canonical identifier for this charge item definition, represented
        as a URI (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    identifier: typing.Optional[typing.List["Identifier"]]

    """ Additional identifier for the charge item definition.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    version: typing.Optional[FHIRString]

    """ Business version of the charge item definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Name for this charge item definition (human friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    derived_from_uri: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Underlying externally-defined charge item definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    derived_from_uri__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_derived_from_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    part_of: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ A larger definition of which this particular definition is a
        component or step.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    part_of__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_part_of`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    replaces: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Completed or terminated request(s) whose function is taken by this
        new request.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    replaces__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_replaces`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    experimental: typing.Optional[bool]

    """ For testing purposes, not real usage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    experimental__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_experimental`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the charge item definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for charge item definition (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    copyright: typing.Optional[FHIRString]

    """ Use and/or publishing restrictions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    copyright__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_copyright`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    approval_date: typing.Optional[FHIRDate]

    """ When the charge item definition was approved by publisher.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    approval_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_approval_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    last_review_date: typing.Optional[FHIRDate]

    """ When the charge item definition was last reviewed.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    last_review_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_last_review_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    effective_period: typing.Optional["Period"]

    """ When the charge item definition is expected to be used.
    Type `Period` (represented as `dict` in JSON).
    """

    code: typing.Optional["CodeableConcept"]

    """ Billing codes or product types this definition applies to.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    instance: typing.Optional[typing.List["Reference"]]

    """ Instances this definition applies to.
    List of `Reference` items (represented as `dict` in JSON).
    """

    applicability: typing.Optional[typing.List["ChargeItemDefinitionApplicability"]]

    """ Whether or not the billing code is applicable.
    List of `ChargeItemDefinitionApplicability` items (represented as `dict` in JSON).
    """

    property_group: typing.Optional[typing.List["ChargeItemDefinitionPropertyGroup"]]

    """ Group of properties which are applicable under the same conditions.
    List of `ChargeItemDefinitionPropertyGroup` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_derived_from_uri = get_primitive_field_root_validator("derived_from_uri")
    
    _validate_primitive_part_of = get_primitive_field_root_validator("part_of")
    
    _validate_primitive_replaces = get_primitive_field_root_validator("replaces")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_experimental = get_primitive_field_root_validator("experimental")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_copyright = get_primitive_field_root_validator("copyright")
    
    _validate_primitive_approval_date = get_primitive_field_root_validator("approval_date")
    
    _validate_primitive_last_review_date = get_primitive_field_root_validator("last_review_date")
    


class Claim(DomainResource):
    """ Claim, Pre-determination or Pre-authorization.

    A provider issued list of professional services and products which have
    been provided, or are to be provided, to a patient which is sent to an
    insurer for reimbursement.
    """
    resource_type: typing.Literal["Claim"] = "Claim"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Claim",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business Identifier for claim.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "FinancialResourceStatusCodes"

    """ active | cancelled | draft | entered-in-error.
    Type `FinancialResourceStatusCodes` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: "CodeableConcept"

    """ Category or discipline.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    sub_type: typing.Optional["CodeableConcept"]

    """ More granular claim type.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

            
    
    
    use: "Use"

    """ claim | preauthorization | predetermination.
    Type `Use` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    use__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_use`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    patient: "Reference"

    """ The recipient of the products and services.
    Type `Reference` (represented as `dict` in JSON).
    """

    billable_period: typing.Optional["Period"]

    """ Relevant time frame for the claim.
    Type `Period` (represented as `dict` in JSON).
    """

    created: FHIRDateTime

    """ Resource creation date.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    created__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_created`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    enterer: typing.Optional["Reference"]

    """ Author of the claim.
    Type `Reference` (represented as `dict` in JSON).
    """

    insurer: typing.Optional["Reference"]

    """ Target.
    Type `Reference` (represented as `dict` in JSON).
    """

    provider: "Reference"

    """ Party responsible for the claim.
    Type `Reference` (represented as `dict` in JSON).
    """

    priority: "CodeableConcept"

    """ Desired processing ugency.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    funds_reserve: typing.Optional["CodeableConcept"]

    """ For whom to reserve funds.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    related: typing.Optional[typing.List["ClaimRelated"]]

    """ Prior or corollary claims.
    List of `ClaimRelated` items (represented as `dict` in JSON).
    """

    prescription: typing.Optional["Reference"]

    """ Prescription authorizing services and products.
    Type `Reference` (represented as `dict` in JSON).
    """

    original_prescription: typing.Optional["Reference"]

    """ Original prescription if superseded by fulfiller.
    Type `Reference` (represented as `dict` in JSON).
    """

    payee: typing.Optional["ClaimPayee"]

    """ Recipient of benefits payable.
    Type `ClaimPayee` (represented as `dict` in JSON).
    """

    referral: typing.Optional["Reference"]

    """ Treatment referral.
    Type `Reference` (represented as `dict` in JSON).
    """

    facility: typing.Optional["Reference"]

    """ Servicing facility.
    Type `Reference` (represented as `dict` in JSON).
    """

    care_team: typing.Optional[typing.List["ClaimCareTeam"]]

    """ Members of the care team.
    List of `ClaimCareTeam` items (represented as `dict` in JSON).
    """

    supporting_info: typing.Optional[typing.List["ClaimSupportingInfo"]]

    """ Supporting information.
    List of `ClaimSupportingInfo` items (represented as `dict` in JSON).
    """

    diagnosis: typing.Optional[typing.List["ClaimDiagnosis"]]

    """ Pertinent diagnosis information.
    List of `ClaimDiagnosis` items (represented as `dict` in JSON).
    """

    procedure: typing.Optional[typing.List["ClaimProcedure"]]

    """ Clinical procedures performed.
    List of `ClaimProcedure` items (represented as `dict` in JSON).
    """

    insurance: typing.List["ClaimInsurance"]

    """ Patient insurance information.
    List of `ClaimInsurance` items (represented as `dict` in JSON).
    """

    accident: typing.Optional["ClaimAccident"]

    """ Details of the event.
    Type `ClaimAccident` (represented as `dict` in JSON).
    """

    item: typing.Optional[typing.List["ClaimItem"]]

    """ Product or service provided.
    List of `ClaimItem` items (represented as `dict` in JSON).
    """

    total: typing.Optional["Money"]

    """ Total claim cost.
    Type `Money` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in FinancialResourceStatusCodes:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["use"]["enum"]
            enums.clear()
            for item in Use:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_use = get_primitive_field_root_validator("use")
    
    _validate_primitive_created = get_primitive_field_root_validator("created")
    


class ClaimResponse(DomainResource):
    """ Response to a claim predetermination or preauthorization.

    This resource provides the adjudication details from the processing of a
    Claim resource.
    """
    resource_type: typing.Literal["ClaimResponse"] = "ClaimResponse"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ClaimResponse",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business Identifier for a claim response.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "FinancialResourceStatusCodes"

    """ active | cancelled | draft | entered-in-error.
    Type `FinancialResourceStatusCodes` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: "CodeableConcept"

    """ More granular claim type.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    sub_type: typing.Optional["CodeableConcept"]

    """ More granular claim type.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

            
    
    
    use: "Use"

    """ claim | preauthorization | predetermination.
    Type `Use` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    use__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_use`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    patient: "Reference"

    """ The recipient of the products and services.
    Type `Reference` (represented as `dict` in JSON).
    """

    created: FHIRDateTime

    """ Response creation date.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    created__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_created`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    insurer: "Reference"

    """ Party responsible for reimbursement.
    Type `Reference` (represented as `dict` in JSON).
    """

    requestor: typing.Optional["Reference"]

    """ Party responsible for the claim.
    Type `Reference` (represented as `dict` in JSON).
    """

    request: typing.Optional["Reference"]

    """ Id of resource triggering adjudication.
    Type `Reference` (represented as `dict` in JSON).
    """

            
    
    
    outcome: "ClaimProcessingCodes"

    """ queued | complete | error | partial.
    Type `ClaimProcessingCodes` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    outcome__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_outcome`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    disposition: typing.Optional[FHIRString]

    """ Disposition Message.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    disposition__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_disposition`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    pre_auth_ref: typing.Optional[FHIRString]

    """ Preauthorization reference.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    pre_auth_ref__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pre_auth_ref`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    pre_auth_period: typing.Optional["Period"]

    """ Preauthorization reference effective period.
    Type `Period` (represented as `dict` in JSON).
    """

    payee_type: typing.Optional["CodeableConcept"]

    """ Party to be paid any benefits payable.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    item: typing.Optional[typing.List["ClaimResponseItem"]]

    """ Adjudication for claim line items.
    List of `ClaimResponseItem` items (represented as `dict` in JSON).
    """

    add_item: typing.Optional[typing.List["ClaimResponseAddItem"]]

    """ Insurer added line items.
    List of `ClaimResponseAddItem` items (represented as `dict` in JSON).
    """

    adjudication: typing.Optional[typing.List["ClaimResponseItemAdjudication"]]

    """ Header-level adjudication.
    List of `ClaimResponseItemAdjudication` items (represented as `dict` in JSON).
    """

    total: typing.Optional[typing.List["ClaimResponseTotal"]]

    """ Adjudication totals.
    List of `ClaimResponseTotal` items (represented as `dict` in JSON).
    """

    payment: typing.Optional["ClaimResponsePayment"]

    """ Payment Details.
    Type `ClaimResponsePayment` (represented as `dict` in JSON).
    """

    funds_reserve: typing.Optional["CodeableConcept"]

    """ Funds reserved status.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    form_code: typing.Optional["CodeableConcept"]

    """ Printed form identifier.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    form: typing.Optional["Attachment"]

    """ Printed reference or actual form.
    Type `Attachment` (represented as `dict` in JSON).
    """

    process_note: typing.Optional[typing.List["ClaimResponseProcessNote"]]

    """ Note concerning adjudication.
    List of `ClaimResponseProcessNote` items (represented as `dict` in JSON).
    """

    communication_request: typing.Optional[typing.List["Reference"]]

    """ Request for additional information.
    List of `Reference` items (represented as `dict` in JSON).
    """

    insurance: typing.Optional[typing.List["ClaimResponseInsurance"]]

    """ Patient insurance information.
    List of `ClaimResponseInsurance` items (represented as `dict` in JSON).
    """

    error: typing.Optional[typing.List["ClaimResponseError"]]

    """ Processing errors.
    List of `ClaimResponseError` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in FinancialResourceStatusCodes:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["use"]["enum"]
            enums.clear()
            for item in Use:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["outcome"]["enum"]
            enums.clear()
            for item in ClaimProcessingCodes:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_use = get_primitive_field_root_validator("use")
    
    _validate_primitive_created = get_primitive_field_root_validator("created")
    
    _validate_primitive_outcome = get_primitive_field_root_validator("outcome")
    
    _validate_primitive_disposition = get_primitive_field_root_validator("disposition")
    
    _validate_primitive_pre_auth_ref = get_primitive_field_root_validator("pre_auth_ref")
    


class ClinicalImpression(DomainResource):
    """ A clinical assessment performed when planning treatments and management
    strategies for a patient.

    A record of a clinical assessment performed to determine what problem(s)
    may affect the patient and before planning the treatments or management
    strategies that are best to manage a patient's condition. Assessments are
    often 1:1 with a clinical consultation / encounter,  but this varies
    greatly depending on the clinical workflow. This resource is called
    "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion
    with the recording of assessment tools such as Apgar score.
    """
    resource_type: typing.Literal["ClinicalImpression"] = "ClinicalImpression"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ClinicalImpression",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "EventStatus"

    """ in-progress | completed | entered-in-error.
    Type `EventStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    status_reason: typing.Optional["CodeableConcept"]

    """ Reason for current status.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    code: typing.Optional["CodeableConcept"]

    """ Kind of assessment performed.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Why/how the assessment was performed.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subject: "Reference"

    """ Patient or group assessed.
    Type `Reference` (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Encounter created as part of.
    Type `Reference` (represented as `dict` in JSON).
    """

    effective_date_time: typing.Optional[FHIRDateTime]

    """ Time of assessment.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    effective_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_effective_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    effective_period: typing.Optional["Period"]

    """ Time of assessment.
    Type `Period` (represented as `dict` in JSON).
    """

    date: typing.Optional[FHIRDateTime]

    """ When the assessment was documented.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    assessor: typing.Optional["Reference"]

    """ The clinician performing the assessment.
    Type `Reference` (represented as `dict` in JSON).
    """

    previous: typing.Optional["Reference"]

    """ Reference to last assessment.
    Type `Reference` (represented as `dict` in JSON).
    """

    problem: typing.Optional[typing.List["Reference"]]

    """ Relevant impressions of patient state.
    List of `Reference` items (represented as `dict` in JSON).
    """

    investigation: typing.Optional[typing.List["ClinicalImpressionInvestigation"]]

    """ One or more sets of investigations (signs, symptoms, etc.).
    List of `ClinicalImpressionInvestigation` items (represented as `dict` in JSON).
    """

    protocol: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Clinical Protocol followed.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    protocol__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_protocol`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    summary: typing.Optional[FHIRString]

    """ Summary of the assessment.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    summary__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_summary`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    finding: typing.Optional[typing.List["ClinicalImpressionFinding"]]

    """ Possible or likely findings and diagnoses.
    List of `ClinicalImpressionFinding` items (represented as `dict` in JSON).
    """

    prognosis_codeable_concept: typing.Optional[typing.List["CodeableConcept"]]

    """ Estimate of likely outcome.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    prognosis_reference: typing.Optional[typing.List["Reference"]]

    """ RiskAssessment expressing likely outcome.
    List of `Reference` items (represented as `dict` in JSON).
    """

    supporting_info: typing.Optional[typing.List["Reference"]]

    """ Information supporting the clinical impression.
    List of `Reference` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Comments made about the ClinicalImpression.
    List of `Annotation` items (represented as `dict` in JSON).
    """



#   {'path': 'ClinicalImpression.effective[x]', 'choice_of_type': 'effective', 'orig_name': 'effectiveDateTime', 'name': 'effectiveDateTime', 'parent_name': 'ClinicalImpression', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Time of assessment', 'formal': 'The point in time or period over which the subject was assessed.', 'representation': None}
    _effective_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['effective_date_time', 'effective_period']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in EventStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_effective_date_time = get_primitive_field_root_validator("effective_date_time")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_protocol = get_primitive_field_root_validator("protocol")
    
    _validate_primitive_summary = get_primitive_field_root_validator("summary")
    


class CodeSystem(DomainResource):
    """ Declares the existence of and describes a code system or code system
    supplement.

    The CodeSystem resource is used to declare the existence of and describe a
    code system or code system supplement and its key properties, and
    optionally define a part or all of its content.
    """
    resource_type: typing.Literal["CodeSystem"] = "CodeSystem"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CodeSystem",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: typing.Optional[FHIRString]

    """ Canonical identifier for this code system, represented as a URI
        (globally unique) (Coding.system).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    identifier: typing.Optional[typing.List["Identifier"]]

    """ Additional identifier for the code system (business identifier).
    List of `Identifier` items (represented as `dict` in JSON).
    """

    version: typing.Optional[FHIRString]

    """ Business version of the code system (Coding.version).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Name for this code system (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Name for this code system (human friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    experimental: typing.Optional[bool]

    """ For testing purposes, not real usage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    experimental__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_experimental`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the code system.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for code system (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    purpose: typing.Optional[FHIRString]

    """ Why this code system is defined.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    purpose__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_purpose`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    copyright: typing.Optional[FHIRString]

    """ Use and/or publishing restrictions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    copyright__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_copyright`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    case_sensitive: typing.Optional[bool]

    """ If code comparison is case sensitive.
    Type `bool`. Is a JSON Primitive element.
    """
    

    case_sensitive__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_case_sensitive`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_set: typing.Optional[FHIRString]

    """ Canonical reference to the value set with entire code system.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_set__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_set`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    hierarchy_meaning: typing.Optional["CodeSystemHierarchyMeaning"]

    """ grouped-by | is-a | part-of | classified-with.
    Type `CodeSystemHierarchyMeaning` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    hierarchy_meaning__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_hierarchy_meaning`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    compositional: typing.Optional[bool]

    """ If code system defines a compositional grammar.
    Type `bool`. Is a JSON Primitive element.
    """
    

    compositional__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_compositional`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    version_needed: typing.Optional[bool]

    """ If definitions are not stable.
    Type `bool`. Is a JSON Primitive element.
    """
    

    version_needed__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version_needed`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    content: "CodeSystemContentMode"

    """ not-present | example | fragment | complete | supplement.
    Type `CodeSystemContentMode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    content__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_content`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    supplements: typing.Optional[FHIRString]

    """ Canonical URL of Code System this adds designations and properties
        to.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    supplements__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_supplements`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    count: typing.Optional[FHIRUnsignedInt]

    """ Total concepts in the code system.
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    count__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_count`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    filter: typing.Optional[typing.List["CodeSystemFilter"]]

    """ Filter that can be used in a value set.
    List of `CodeSystemFilter` items (represented as `dict` in JSON).
    """

    property: typing.Optional[typing.List["CodeSystemProperty"]]

    """ Additional information supplied about each concept.
    List of `CodeSystemProperty` items (represented as `dict` in JSON).
    """

    concept: typing.Optional[typing.List["CodeSystemConcept"]]

    """ Concepts in the code system.
    List of `CodeSystemConcept` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["hierarchyMeaning"]["enum"]
            enums.clear()
            for item in CodeSystemHierarchyMeaning:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["content"]["enum"]
            enums.clear()
            for item in CodeSystemContentMode:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_experimental = get_primitive_field_root_validator("experimental")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_purpose = get_primitive_field_root_validator("purpose")
    
    _validate_primitive_copyright = get_primitive_field_root_validator("copyright")
    
    _validate_primitive_case_sensitive = get_primitive_field_root_validator("case_sensitive")
    
    _validate_primitive_value_set = get_primitive_field_root_validator("value_set")
    
    _validate_primitive_hierarchy_meaning = get_primitive_field_root_validator("hierarchy_meaning")
    
    _validate_primitive_compositional = get_primitive_field_root_validator("compositional")
    
    _validate_primitive_version_needed = get_primitive_field_root_validator("version_needed")
    
    _validate_primitive_content = get_primitive_field_root_validator("content")
    
    _validate_primitive_supplements = get_primitive_field_root_validator("supplements")
    
    _validate_primitive_count = get_primitive_field_root_validator("count")
    


class Communication(DomainResource):
    """ A record of information transmitted from a sender to a receiver.

    An occurrence of information being transmitted; e.g. an alert that was sent
    to a responsible provider, a public health agency that was notified about a
    reportable condition.
    """
    resource_type: typing.Literal["Communication"] = "Communication"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Communication",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Unique identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    instantiates_canonical: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Instantiates FHIR protocol or definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates_canonical__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    instantiates_uri: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Instantiates external protocol or definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates_uri__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    based_on: typing.Optional[typing.List["Reference"]]

    """ Request fulfilled by this communication.
    List of `Reference` items (represented as `dict` in JSON).
    """

    part_of: typing.Optional[typing.List["Reference"]]

    """ Part of this action.
    List of `Reference` items (represented as `dict` in JSON).
    """

    in_response_to: typing.Optional[typing.List["Reference"]]

    """ Reply to.
    List of `Reference` items (represented as `dict` in JSON).
    """

            
    
    
    status: "EventStatus"

    """ preparation | in-progress | not-done | on-hold | stopped |
        completed | entered-in-error | unknown.
    Type `EventStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    status_reason: typing.Optional["CodeableConcept"]

    """ Reason for current status.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    category: typing.Optional[typing.List["CodeableConcept"]]

    """ Message category.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

            
    
    
    priority: typing.Optional["RequestPriority"]

    """ routine | urgent | asap | stat.
    Type `RequestPriority` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    priority__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_priority`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    medium: typing.Optional[typing.List["CodeableConcept"]]

    """ A channel of communication.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    subject: typing.Optional["Reference"]

    """ Focus of message.
    Type `Reference` (represented as `dict` in JSON).
    """

    topic: typing.Optional["CodeableConcept"]

    """ Description of the purpose/content.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    about: typing.Optional[typing.List["Reference"]]

    """ Resources that pertain to this communication.
    List of `Reference` items (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Encounter created as part of.
    Type `Reference` (represented as `dict` in JSON).
    """

    sent: typing.Optional[FHIRDateTime]

    """ When sent.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    sent__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sent`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    received: typing.Optional[FHIRDateTime]

    """ When received.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    received__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_received`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    recipient: typing.Optional[typing.List["Reference"]]

    """ Message recipient.
    List of `Reference` items (represented as `dict` in JSON).
    """

    sender: typing.Optional["Reference"]

    """ Message sender.
    Type `Reference` (represented as `dict` in JSON).
    """

    reason_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Indication for message.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    reason_reference: typing.Optional[typing.List["Reference"]]

    """ Why was communication done?.
    List of `Reference` items (represented as `dict` in JSON).
    """

    payload: typing.Optional[typing.List["CommunicationPayload"]]

    """ Message payload.
    List of `CommunicationPayload` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Comments made about the communication.
    List of `Annotation` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in EventStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["priority"]["enum"]
            enums.clear()
            for item in RequestPriority:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_instantiates_canonical = get_primitive_field_root_validator("instantiates_canonical")
    
    _validate_primitive_instantiates_uri = get_primitive_field_root_validator("instantiates_uri")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_priority = get_primitive_field_root_validator("priority")
    
    _validate_primitive_sent = get_primitive_field_root_validator("sent")
    
    _validate_primitive_received = get_primitive_field_root_validator("received")
    


class CommunicationRequest(DomainResource):
    """ A request for information to be sent to a receiver.

    A request to convey information; e.g. the CDS system proposes that an alert
    be sent to a responsible provider, the CDS system proposes that the public
    health agency be notified about a reportable condition.
    """
    resource_type: typing.Literal["CommunicationRequest"] = "CommunicationRequest"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CommunicationRequest",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Unique identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    based_on: typing.Optional[typing.List["Reference"]]

    """ Fulfills plan or proposal.
    List of `Reference` items (represented as `dict` in JSON).
    """

    replaces: typing.Optional[typing.List["Reference"]]

    """ Request(s) replaced by this request.
    List of `Reference` items (represented as `dict` in JSON).
    """

    group_identifier: typing.Optional["Identifier"]

    """ Composite request this is part of.
    Type `Identifier` (represented as `dict` in JSON).
    """

            
    
    
    status: "RequestStatus"

    """ draft | active | on-hold | revoked | completed | entered-in-error |
        unknown.
    Type `RequestStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    status_reason: typing.Optional["CodeableConcept"]

    """ Reason for current status.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    category: typing.Optional[typing.List["CodeableConcept"]]

    """ Message category.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

            
    
    
    priority: typing.Optional["RequestPriority"]

    """ routine | urgent | asap | stat.
    Type `RequestPriority` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    priority__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_priority`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    do_not_perform: typing.Optional[bool]

    """ True if request is prohibiting action.
    Type `bool`. Is a JSON Primitive element.
    """
    

    do_not_perform__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_do_not_perform`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    medium: typing.Optional[typing.List["CodeableConcept"]]

    """ A channel of communication.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    subject: typing.Optional["Reference"]

    """ Focus of message.
    Type `Reference` (represented as `dict` in JSON).
    """

    about: typing.Optional[typing.List["Reference"]]

    """ Resources that pertain to this communication request.
    List of `Reference` items (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Encounter created as part of.
    Type `Reference` (represented as `dict` in JSON).
    """

    payload: typing.Optional[typing.List["CommunicationRequestPayload"]]

    """ Message payload.
    List of `CommunicationRequestPayload` items (represented as `dict` in JSON).
    """

    occurrence_date_time: typing.Optional[FHIRDateTime]

    """ When scheduled.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    occurrence_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_occurrence_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    occurrence_period: typing.Optional["Period"]

    """ When scheduled.
    Type `Period` (represented as `dict` in JSON).
    """

    authored_on: typing.Optional[FHIRDateTime]

    """ When request transitioned to being actionable.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    authored_on__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_authored_on`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    requester: typing.Optional["Reference"]

    """ Who/what is requesting service.
    Type `Reference` (represented as `dict` in JSON).
    """

    recipient: typing.Optional[typing.List["Reference"]]

    """ Message recipient.
    List of `Reference` items (represented as `dict` in JSON).
    """

    sender: typing.Optional["Reference"]

    """ Message sender.
    Type `Reference` (represented as `dict` in JSON).
    """

    reason_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Why is communication needed?.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    reason_reference: typing.Optional[typing.List["Reference"]]

    """ Why is communication needed?.
    List of `Reference` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Comments made about communication request.
    List of `Annotation` items (represented as `dict` in JSON).
    """



#   {'path': 'CommunicationRequest.occurrence[x]', 'choice_of_type': 'occurrence', 'orig_name': 'occurrenceDateTime', 'name': 'occurrenceDateTime', 'parent_name': 'CommunicationRequest', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'When scheduled', 'formal': 'The time when this communication is to occur.', 'representation': None}
    _occurrence_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['occurrence_date_time', 'occurrence_period']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in RequestStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["priority"]["enum"]
            enums.clear()
            for item in RequestPriority:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_priority = get_primitive_field_root_validator("priority")
    
    _validate_primitive_do_not_perform = get_primitive_field_root_validator("do_not_perform")
    
    _validate_primitive_occurrence_date_time = get_primitive_field_root_validator("occurrence_date_time")
    
    _validate_primitive_authored_on = get_primitive_field_root_validator("authored_on")
    


class CompartmentDefinition(DomainResource):
    """ Compartment Definition for a resource.

    A compartment definition that defines how resources are accessed on a
    server.
    """
    resource_type: typing.Literal["CompartmentDefinition"] = "CompartmentDefinition"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CompartmentDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: FHIRRequiredString

    """ Canonical identifier for this compartment definition, represented
        as a URI (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    version: typing.Optional[FHIRString]

    """ Business version of the compartment definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: FHIRRequiredString

    """ Name for this compartment definition (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    experimental: typing.Optional[bool]

    """ For testing purposes, not real usage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    experimental__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_experimental`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the compartment definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    purpose: typing.Optional[FHIRString]

    """ Why this compartment definition is defined.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    purpose__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_purpose`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    code: "CompartmentType"

    """ Patient | Encounter | RelatedPerson | Practitioner | Device.
    Type `CompartmentType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    search: bool

    """ Whether the search syntax is supported.
    Type `bool`. Is a JSON Primitive element.
    """
    

    search__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_search`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    resource: typing.Optional[typing.List["CompartmentDefinitionResource"]]

    """ How a resource is related to the compartment.
    List of `CompartmentDefinitionResource` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["code"]["enum"]
            enums.clear()
            for item in CompartmentType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_experimental = get_primitive_field_root_validator("experimental")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_purpose = get_primitive_field_root_validator("purpose")
    
    _validate_primitive_code = get_primitive_field_root_validator("code")
    
    _validate_primitive_search = get_primitive_field_root_validator("search")
    


class Composition(DomainResource):
    """ A set of resources composed into a single coherent clinical statement with
    clinical attestation.

    A set of healthcare-related information that is assembled together into a
    single logical package that provides a single coherent statement of
    meaning, establishes its own context and that has clinical attestation with
    regard to who is making the statement. A Composition defines the structure
    and narrative content necessary for a document. However, a Composition
    alone does not constitute a document. Rather, the Composition must be the
    first entry in a Bundle where Bundle.type=document, and any other resources
    referenced from Composition must be included as subsequent entries in the
    Bundle (for example Patient, Practitioner, Encounter, etc.).
    """
    resource_type: typing.Literal["Composition"] = "Composition"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Composition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional["Identifier"]

    """ Version-independent identifier for the Composition.
    Type `Identifier` (represented as `dict` in JSON).
    """

            
    
    
    status: "CompositionStatus"

    """ preliminary | final | amended | entered-in-error.
    Type `CompositionStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: "CodeableConcept"

    """ Kind of composition (LOINC if possible).
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    category: typing.Optional[typing.List["CodeableConcept"]]

    """ Categorization of Composition.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    subject: typing.Optional["Reference"]

    """ Who and/or what the composition is about.
    Type `Reference` (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Context of the Composition.
    Type `Reference` (represented as `dict` in JSON).
    """

    date: FHIRDateTime

    """ Composition editing time.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    author: typing.List["Reference"]

    """ Who and/or what authored the composition.
    List of `Reference` items (represented as `dict` in JSON).
    """

    title: FHIRRequiredString

    """ Human Readable name/title.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    confidentiality: typing.Optional[FHIRCode]

    """ As defined by affinity domain.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    confidentiality__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_confidentiality`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    attester: typing.Optional[typing.List["CompositionAttester"]]

    """ Attests to accuracy of composition.
    List of `CompositionAttester` items (represented as `dict` in JSON).
    """

    custodian: typing.Optional["Reference"]

    """ Organization which maintains the composition.
    Type `Reference` (represented as `dict` in JSON).
    """

    relates_to: typing.Optional[typing.List["CompositionRelatesTo"]]

    """ Relationships to other compositions/documents.
    List of `CompositionRelatesTo` items (represented as `dict` in JSON).
    """

    event: typing.Optional[typing.List["CompositionEvent"]]

    """ The clinical service(s) being documented.
    List of `CompositionEvent` items (represented as `dict` in JSON).
    """

    section: typing.Optional[typing.List["CompositionSection"]]

    """ Composition is broken into sections.
    List of `CompositionSection` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in CompositionStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_confidentiality = get_primitive_field_root_validator("confidentiality")
    


class ConceptMap(DomainResource):
    """ A map from one set of concepts to one or more other concepts.

    A statement of relationships from one set of concepts to one or more other
    concepts - either concepts in code systems, or data element/data element
    concepts, or classes in class models.
    """
    resource_type: typing.Literal["ConceptMap"] = "ConceptMap"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ConceptMap",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: typing.Optional[FHIRString]

    """ Canonical identifier for this concept map, represented as a URI
        (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    identifier: typing.Optional["Identifier"]

    """ Additional identifier for the concept map.
    Type `Identifier` (represented as `dict` in JSON).
    """

    version: typing.Optional[FHIRString]

    """ Business version of the concept map.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Name for this concept map (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Name for this concept map (human friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    experimental: typing.Optional[bool]

    """ For testing purposes, not real usage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    experimental__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_experimental`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the concept map.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for concept map (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    purpose: typing.Optional[FHIRString]

    """ Why this concept map is defined.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    purpose__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_purpose`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    copyright: typing.Optional[FHIRString]

    """ Use and/or publishing restrictions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    copyright__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_copyright`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    source_uri: typing.Optional[FHIRString]

    """ The source value set that contains the concepts that are being
        mapped.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    source_uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_source_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    source_canonical: typing.Optional[FHIRString]

    """ The source value set that contains the concepts that are being
        mapped.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    source_canonical__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_source_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    target_uri: typing.Optional[FHIRString]

    """ The target value set which provides context for the mappings.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    target_uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_target_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    target_canonical: typing.Optional[FHIRString]

    """ The target value set which provides context for the mappings.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    target_canonical__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_target_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    group: typing.Optional[typing.List["ConceptMapGroup"]]

    """ Same source and target systems.
    List of `ConceptMapGroup` items (represented as `dict` in JSON).
    """



#   {'path': 'ConceptMap.source[x]', 'choice_of_type': 'source', 'orig_name': 'sourceUri', 'name': 'sourceUri', 'parent_name': 'ConceptMap', 'class_name': 'FHIRString', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'The source value set that contains the concepts that are being mapped', 'formal': 'Identifier for the source value set that contains the concepts that are being mapped and provides context for the mappings.', 'representation': None}
    _source_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['source_uri', 'source_canonical']), True))

#   {'path': 'ConceptMap.target[x]', 'choice_of_type': 'target', 'orig_name': 'targetUri', 'name': 'targetUri', 'parent_name': 'ConceptMap', 'class_name': 'FHIRString', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'The target value set which provides context for the mappings', 'formal': 'The target value set provides context for the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.', 'representation': None}
    _target_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['target_uri', 'target_canonical']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_experimental = get_primitive_field_root_validator("experimental")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_purpose = get_primitive_field_root_validator("purpose")
    
    _validate_primitive_copyright = get_primitive_field_root_validator("copyright")
    
    _validate_primitive_source_uri = get_primitive_field_root_validator("source_uri")
    
    _validate_primitive_source_canonical = get_primitive_field_root_validator("source_canonical")
    
    _validate_primitive_target_uri = get_primitive_field_root_validator("target_uri")
    
    _validate_primitive_target_canonical = get_primitive_field_root_validator("target_canonical")
    


class Condition(DomainResource):
    """ Detailed information about conditions, problems or diagnoses.

    A clinical condition, problem, diagnosis, or other event, situation, issue,
    or clinical concept that has risen to a level of concern.
    """
    resource_type: typing.Literal["Condition"] = "Condition"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Condition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ External Ids for this condition.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    clinical_status: typing.Optional["CodeableConcept"]

    """ active | recurrence | relapse | inactive | remission | resolved.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    verification_status: typing.Optional["CodeableConcept"]

    """ unconfirmed | provisional | differential | confirmed | refuted |
        entered-in-error.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    category: typing.Optional[typing.List["CodeableConcept"]]

    """ problem-list-item | encounter-diagnosis.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    severity: typing.Optional["CodeableConcept"]

    """ Subjective severity of condition.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    code: typing.Optional["CodeableConcept"]

    """ Identification of the condition, problem or diagnosis.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    body_site: typing.Optional[typing.List["CodeableConcept"]]

    """ Anatomical location, if relevant.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    subject: "Reference"

    """ Who has the condition?.
    Type `Reference` (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Encounter created as part of.
    Type `Reference` (represented as `dict` in JSON).
    """

    onset_date_time: typing.Optional[FHIRDateTime]

    """ Estimated or actual date,  date-time, or age.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    onset_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_onset_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    onset_age: typing.Optional["Age"]

    """ Estimated or actual date,  date-time, or age.
    Type `Age` (represented as `dict` in JSON).
    """

    onset_period: typing.Optional["Period"]

    """ Estimated or actual date,  date-time, or age.
    Type `Period` (represented as `dict` in JSON).
    """

    onset_range: typing.Optional["Range"]

    """ Estimated or actual date,  date-time, or age.
    Type `Range` (represented as `dict` in JSON).
    """

    onset_string: typing.Optional[FHIRString]

    """ Estimated or actual date,  date-time, or age.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    onset_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_onset_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    abatement_date_time: typing.Optional[FHIRDateTime]

    """ When in resolution/remission.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    abatement_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_abatement_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    abatement_age: typing.Optional["Age"]

    """ When in resolution/remission.
    Type `Age` (represented as `dict` in JSON).
    """

    abatement_period: typing.Optional["Period"]

    """ When in resolution/remission.
    Type `Period` (represented as `dict` in JSON).
    """

    abatement_range: typing.Optional["Range"]

    """ When in resolution/remission.
    Type `Range` (represented as `dict` in JSON).
    """

    abatement_string: typing.Optional[FHIRString]

    """ When in resolution/remission.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    abatement_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_abatement_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    recorded_date: typing.Optional[FHIRDateTime]

    """ Date record was first recorded.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    recorded_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_recorded_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    recorder: typing.Optional["Reference"]

    """ Who recorded the condition.
    Type `Reference` (represented as `dict` in JSON).
    """

    asserter: typing.Optional["Reference"]

    """ Person who asserts this condition.
    Type `Reference` (represented as `dict` in JSON).
    """

    stage: typing.Optional[typing.List["ConditionStage"]]

    """ Stage/grade, usually assessed formally.
    List of `ConditionStage` items (represented as `dict` in JSON).
    """

    evidence: typing.Optional[typing.List["ConditionEvidence"]]

    """ Supporting evidence.
    List of `ConditionEvidence` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Additional information about the Condition.
    List of `Annotation` items (represented as `dict` in JSON).
    """



#   {'path': 'Condition.onset[x]', 'choice_of_type': 'onset', 'orig_name': 'onsetDateTime', 'name': 'onsetDateTime', 'parent_name': 'Condition', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Estimated or actual date,  date-time, or age', 'formal': 'Estimated or actual date or date-time  the condition began, in the opinion of the clinician.', 'representation': None}
    _onset_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['onset_date_time', 'onset_age', 'onset_period', 'onset_range', 'onset_string']), True))

#   {'path': 'Condition.abatement[x]', 'choice_of_type': 'abatement', 'orig_name': 'abatementDateTime', 'name': 'abatementDateTime', 'parent_name': 'Condition', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'When in resolution/remission', 'formal': 'The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.', 'representation': None}
    _abatement_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['abatement_date_time', 'abatement_age', 'abatement_period', 'abatement_range', 'abatement_string']), True))

    _validate_primitive_onset_date_time = get_primitive_field_root_validator("onset_date_time")
    
    _validate_primitive_onset_string = get_primitive_field_root_validator("onset_string")
    
    _validate_primitive_abatement_date_time = get_primitive_field_root_validator("abatement_date_time")
    
    _validate_primitive_abatement_string = get_primitive_field_root_validator("abatement_string")
    
    _validate_primitive_recorded_date = get_primitive_field_root_validator("recorded_date")
    


class Consent(DomainResource):
    """ A healthcare consumer's  choices to permit or deny recipients or roles to
    perform actions for specific purposes and periods of time.

    A record of a healthcare consumer’s  choices, which permits or denies
    identified recipient(s) or recipient role(s) to perform one or more actions
    within a given policy context, for specific purposes and periods of time.
    """
    resource_type: typing.Literal["Consent"] = "Consent"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Consent",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Identifier for this record (external references).
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "ConsentState"

    """ draft | proposed | active | rejected | inactive | entered-in-error.
    Type `ConsentState` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    scope: "CodeableConcept"

    """ Which of the four areas this resource covers (extensible).
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    category: typing.List["CodeableConcept"]

    """ Classification of the consent statement - for indexing/retrieval.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    patient: typing.Optional["Reference"]

    """ Who the consent applies to.
    Type `Reference` (represented as `dict` in JSON).
    """

    date_time: typing.Optional[FHIRDateTime]

    """ When this Consent was created or indexed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    performer: typing.Optional[typing.List["Reference"]]

    """ Who is agreeing to the policy and rules.
    List of `Reference` items (represented as `dict` in JSON).
    """

    organization: typing.Optional[typing.List["Reference"]]

    """ Custodian of the consent.
    List of `Reference` items (represented as `dict` in JSON).
    """

    source_attachment: typing.Optional["Attachment"]

    """ Source from which this consent is taken.
    Type `Attachment` (represented as `dict` in JSON).
    """

    source_reference: typing.Optional["Reference"]

    """ Source from which this consent is taken.
    Type `Reference` (represented as `dict` in JSON).
    """

    policy: typing.Optional[typing.List["ConsentPolicy"]]

    """ Policies covered by this consent.
    List of `ConsentPolicy` items (represented as `dict` in JSON).
    """

    policy_rule: typing.Optional["CodeableConcept"]

    """ Regulation that this consents to.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    verification: typing.Optional[typing.List["ConsentVerification"]]

    """ Consent Verified by patient or family.
    List of `ConsentVerification` items (represented as `dict` in JSON).
    """

    provision: typing.Optional["ConsentProvision"]

    """ Constraints to the base Consent.policyRule.
    Type `ConsentProvision` (represented as `dict` in JSON).
    """



#   {'path': 'Consent.source[x]', 'choice_of_type': 'source', 'orig_name': 'sourceAttachment', 'name': 'sourceAttachment', 'parent_name': 'Consent', 'class_name': 'Attachment', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Source from which this consent is taken', 'formal': 'The source on which this consent statement is based. The source might be a scanned original paper form, or a reference to a consent that links back to such a source, a reference to a document repository (e.g. XDS) that stores the original consent document.', 'representation': None}
    _source_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['source_attachment', 'source_reference']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in ConsentState:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_date_time = get_primitive_field_root_validator("date_time")
    


class Contract(DomainResource):
    """ Legal Agreement.

    Legally enforceable, formally recorded unilateral or bilateral directive
    i.e., a policy or agreement.
    """
    resource_type: typing.Literal["Contract"] = "Contract"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Contract",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Contract number.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    url: typing.Optional[FHIRString]

    """ Basal definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    version: typing.Optional[FHIRString]

    """ Business edition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: typing.Optional["ContractResourceStatusCodes"]

    """ amended | appended | cancelled | disputed | entered-in-error |
        executable | executed | negotiable | offered | policy | rejected |
        renewed | revoked | resolved | terminated.
    Type `ContractResourceStatusCodes` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    legal_state: typing.Optional["CodeableConcept"]

    """ Negotiation status.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    instantiates_canonical: typing.Optional["Reference"]

    """ Source Contract Definition.
    Type `Reference` (represented as `dict` in JSON).
    """

    instantiates_uri: typing.Optional[FHIRString]

    """ External Contract Definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates_uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    content_derivative: typing.Optional["CodeableConcept"]

    """ Content derived from the basal information.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    issued: typing.Optional[FHIRDateTime]

    """ When this Contract was issued.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    issued__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_issued`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    applies: typing.Optional["Period"]

    """ Effective time.
    Type `Period` (represented as `dict` in JSON).
    """

    expiration_type: typing.Optional["CodeableConcept"]

    """ Contract cessation cause.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject: typing.Optional[typing.List["Reference"]]

    """ Contract Target Entity.
    List of `Reference` items (represented as `dict` in JSON).
    """

    authority: typing.Optional[typing.List["Reference"]]

    """ Authority under which this Contract has standing.
    List of `Reference` items (represented as `dict` in JSON).
    """

    domain: typing.Optional[typing.List["Reference"]]

    """ A sphere of control governed by an authoritative jurisdiction,
        organization, or person.
    List of `Reference` items (represented as `dict` in JSON).
    """

    site: typing.Optional[typing.List["Reference"]]

    """ Specific Location.
    List of `Reference` items (represented as `dict` in JSON).
    """

    name: typing.Optional[FHIRString]

    """ Computer friendly designation.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Human Friendly name.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subtitle: typing.Optional[FHIRString]

    """ Subordinate Friendly name.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    subtitle__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_subtitle`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    alias: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Acronym or short name.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    alias__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_alias`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    author: typing.Optional["Reference"]

    """ Source of Contract.
    Type `Reference` (represented as `dict` in JSON).
    """

    scope: typing.Optional["CodeableConcept"]

    """ Range of Legal Concerns.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    topic_codeable_concept: typing.Optional["CodeableConcept"]

    """ Focus of contract interest.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    topic_reference: typing.Optional["Reference"]

    """ Focus of contract interest.
    Type `Reference` (represented as `dict` in JSON).
    """

    type: typing.Optional["CodeableConcept"]

    """ Legal instrument category.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    sub_type: typing.Optional[typing.List["CodeableConcept"]]

    """ Subtype within the context of type.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    content_definition: typing.Optional["ContractContentDefinition"]

    """ Contract precursor content.
    Type `ContractContentDefinition` (represented as `dict` in JSON).
    """

    term: typing.Optional[typing.List["ContractTerm"]]

    """ Contract Term List.
    List of `ContractTerm` items (represented as `dict` in JSON).
    """

    supporting_info: typing.Optional[typing.List["Reference"]]

    """ Extra Information.
    List of `Reference` items (represented as `dict` in JSON).
    """

    relevant_history: typing.Optional[typing.List["Reference"]]

    """ Key event in Contract History.
    List of `Reference` items (represented as `dict` in JSON).
    """

    signer: typing.Optional[typing.List["ContractSigner"]]

    """ Contract Signatory.
    List of `ContractSigner` items (represented as `dict` in JSON).
    """

    friendly: typing.Optional[typing.List["ContractFriendly"]]

    """ Contract Friendly Language.
    List of `ContractFriendly` items (represented as `dict` in JSON).
    """

    legal: typing.Optional[typing.List["ContractLegal"]]

    """ Contract Legal Language.
    List of `ContractLegal` items (represented as `dict` in JSON).
    """

    rule: typing.Optional[typing.List["ContractRule"]]

    """ Computable Contract Language.
    List of `ContractRule` items (represented as `dict` in JSON).
    """

    legally_binding_attachment: typing.Optional["Attachment"]

    """ Binding Contract.
    Type `Attachment` (represented as `dict` in JSON).
    """

    legally_binding_reference: typing.Optional["Reference"]

    """ Binding Contract.
    Type `Reference` (represented as `dict` in JSON).
    """



#   {'path': 'Contract.topic[x]', 'choice_of_type': 'topic', 'orig_name': 'topicCodeableConcept', 'name': 'topicCodeableConcept', 'parent_name': 'Contract', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Focus of contract interest', 'formal': 'Narrows the range of legal concerns to focus on the achievement of specific contractual objectives.', 'representation': None}
    _topic_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['topic_codeable_concept', 'topic_reference']), True))

#   {'path': 'Contract.legallyBinding[x]', 'choice_of_type': 'legallyBinding', 'orig_name': 'legallyBindingAttachment', 'name': 'legallyBindingAttachment', 'parent_name': 'Contract', 'class_name': 'Attachment', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Binding Contract', 'formal': 'Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.', 'representation': None}
    _legally_binding_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['legally_binding_attachment', 'legally_binding_reference']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in ContractResourceStatusCodes:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_instantiates_uri = get_primitive_field_root_validator("instantiates_uri")
    
    _validate_primitive_issued = get_primitive_field_root_validator("issued")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_subtitle = get_primitive_field_root_validator("subtitle")
    
    _validate_primitive_alias = get_primitive_field_root_validator("alias")
    


class Coverage(DomainResource):
    """ Insurance or medical plan or a payment agreement.

    Financial instrument which may be used to reimburse or pay for health care
    products and services. Includes both insurance and self-payment.
    """
    resource_type: typing.Literal["Coverage"] = "Coverage"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Coverage",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business Identifier for the coverage.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "FinancialResourceStatusCodes"

    """ active | cancelled | draft | entered-in-error.
    Type `FinancialResourceStatusCodes` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional["CodeableConcept"]

    """ Coverage category such as medical or accident.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    policy_holder: typing.Optional["Reference"]

    """ Owner of the policy.
    Type `Reference` (represented as `dict` in JSON).
    """

    subscriber: typing.Optional["Reference"]

    """ Subscriber to the policy.
    Type `Reference` (represented as `dict` in JSON).
    """

    subscriber_id: typing.Optional[FHIRString]

    """ ID assigned to the subscriber.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    subscriber_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_subscriber_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    beneficiary: "Reference"

    """ Plan beneficiary.
    Type `Reference` (represented as `dict` in JSON).
    """

    dependent: typing.Optional[FHIRString]

    """ Dependent number.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    dependent__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_dependent`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    relationship: typing.Optional["CodeableConcept"]

    """ Beneficiary relationship to the subscriber.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    period: typing.Optional["Period"]

    """ Coverage start and end dates.
    Type `Period` (represented as `dict` in JSON).
    """

    payor: typing.List["Reference"]

    """ Issuer of the policy.
    List of `Reference` items (represented as `dict` in JSON).
    """

    class_: typing.Optional[typing.List["CoverageClass"]]

    """ Additional coverage classifications.
    List of `CoverageClass` items (represented as `dict` in JSON).
    """

    order: typing.Optional[FHIRPositiveInt]

    """ Relative order of the coverage.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    order__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_order`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    network: typing.Optional[FHIRString]

    """ Insurer network.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    network__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_network`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    cost_to_beneficiary: typing.Optional[typing.List["CoverageCostToBeneficiary"]]

    """ Patient payments for services/products.
    List of `CoverageCostToBeneficiary` items (represented as `dict` in JSON).
    """

    subrogation: typing.Optional[bool]

    """ Reimbursement to insurer.
    Type `bool`. Is a JSON Primitive element.
    """
    

    subrogation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_subrogation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contract: typing.Optional[typing.List["Reference"]]

    """ Contract details.
    List of `Reference` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in FinancialResourceStatusCodes:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_subscriber_id = get_primitive_field_root_validator("subscriber_id")
    
    _validate_primitive_dependent = get_primitive_field_root_validator("dependent")
    
    _validate_primitive_order = get_primitive_field_root_validator("order")
    
    _validate_primitive_network = get_primitive_field_root_validator("network")
    
    _validate_primitive_subrogation = get_primitive_field_root_validator("subrogation")
    


class CoverageEligibilityRequest(DomainResource):
    """ CoverageEligibilityRequest resource.

    The CoverageEligibilityRequest provides patient and insurance coverage
    information to an insurer for them to respond, in the form of an
    CoverageEligibilityResponse, with information regarding whether the stated
    coverage is valid and in-force and optionally to provide the insurance
    details of the policy.
    """
    resource_type: typing.Literal["CoverageEligibilityRequest"] = "CoverageEligibilityRequest"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CoverageEligibilityRequest",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business Identifier for coverage eligiblity request.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "FinancialResourceStatusCodes"

    """ active | cancelled | draft | entered-in-error.
    Type `FinancialResourceStatusCodes` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    priority: typing.Optional["CodeableConcept"]

    """ Desired processing priority.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

            
    
    
    purpose: typing.List[typing.Optional["EligibilityRequestPurpose"]]

    """ auth-requirements | benefits | discovery | validation.
    List of `EligibilityRequestPurpose` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    purpose__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_purpose`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    patient: "Reference"

    """ Intended recipient of products and services.
    Type `Reference` (represented as `dict` in JSON).
    """

    serviced_date: typing.Optional[FHIRDate]

    """ Estimated date or dates of service.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    serviced_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_serviced_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    serviced_period: typing.Optional["Period"]

    """ Estimated date or dates of service.
    Type `Period` (represented as `dict` in JSON).
    """

    created: FHIRDateTime

    """ Creation date.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    created__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_created`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    enterer: typing.Optional["Reference"]

    """ Author.
    Type `Reference` (represented as `dict` in JSON).
    """

    provider: typing.Optional["Reference"]

    """ Party responsible for the request.
    Type `Reference` (represented as `dict` in JSON).
    """

    insurer: "Reference"

    """ Coverage issuer.
    Type `Reference` (represented as `dict` in JSON).
    """

    facility: typing.Optional["Reference"]

    """ Servicing facility.
    Type `Reference` (represented as `dict` in JSON).
    """

    supporting_info: typing.Optional[typing.List["CoverageEligibilityRequestSupportingInfo"]]

    """ Supporting information.
    List of `CoverageEligibilityRequestSupportingInfo` items (represented as `dict` in JSON).
    """

    insurance: typing.Optional[typing.List["CoverageEligibilityRequestInsurance"]]

    """ Patient insurance information.
    List of `CoverageEligibilityRequestInsurance` items (represented as `dict` in JSON).
    """

    item: typing.Optional[typing.List["CoverageEligibilityRequestItem"]]

    """ Item to be evaluated for eligibiity.
    List of `CoverageEligibilityRequestItem` items (represented as `dict` in JSON).
    """



#   {'path': 'CoverageEligibilityRequest.serviced[x]', 'choice_of_type': 'serviced', 'orig_name': 'servicedDate', 'name': 'servicedDate', 'parent_name': 'CoverageEligibilityRequest', 'class_name': 'FHIRDate', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Estimated date or dates of service', 'formal': 'The date or dates when the enclosed suite of services were performed or completed.', 'representation': None}
    _serviced_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['serviced_date', 'serviced_period']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in FinancialResourceStatusCodes:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["purpose"]["enum"]
            enums.clear()
            for item in EligibilityRequestPurpose:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_purpose = get_primitive_field_root_validator("purpose")
    
    _validate_primitive_serviced_date = get_primitive_field_root_validator("serviced_date")
    
    _validate_primitive_created = get_primitive_field_root_validator("created")
    


class CoverageEligibilityResponse(DomainResource):
    """ CoverageEligibilityResponse resource.

    This resource provides eligibility and plan details from the processing of
    an CoverageEligibilityRequest resource.
    """
    resource_type: typing.Literal["CoverageEligibilityResponse"] = "CoverageEligibilityResponse"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CoverageEligibilityResponse",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business Identifier for coverage eligiblity request.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "FinancialResourceStatusCodes"

    """ active | cancelled | draft | entered-in-error.
    Type `FinancialResourceStatusCodes` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    purpose: typing.List[typing.Optional["EligibilityResponsePurpose"]]

    """ auth-requirements | benefits | discovery | validation.
    List of `EligibilityResponsePurpose` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    purpose__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_purpose`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    patient: "Reference"

    """ Intended recipient of products and services.
    Type `Reference` (represented as `dict` in JSON).
    """

    serviced_date: typing.Optional[FHIRDate]

    """ Estimated date or dates of service.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    serviced_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_serviced_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    serviced_period: typing.Optional["Period"]

    """ Estimated date or dates of service.
    Type `Period` (represented as `dict` in JSON).
    """

    created: FHIRDateTime

    """ Response creation date.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    created__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_created`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    requestor: typing.Optional["Reference"]

    """ Party responsible for the request.
    Type `Reference` (represented as `dict` in JSON).
    """

    request: "Reference"

    """ Eligibility request reference.
    Type `Reference` (represented as `dict` in JSON).
    """

            
    
    
    outcome: "ClaimProcessingCodes"

    """ queued | complete | error | partial.
    Type `ClaimProcessingCodes` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    outcome__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_outcome`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    disposition: typing.Optional[FHIRString]

    """ Disposition Message.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    disposition__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_disposition`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    insurer: "Reference"

    """ Coverage issuer.
    Type `Reference` (represented as `dict` in JSON).
    """

    insurance: typing.Optional[typing.List["CoverageEligibilityResponseInsurance"]]

    """ Patient insurance information.
    List of `CoverageEligibilityResponseInsurance` items (represented as `dict` in JSON).
    """

    pre_auth_ref: typing.Optional[FHIRString]

    """ Preauthorization reference.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    pre_auth_ref__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pre_auth_ref`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    form: typing.Optional["CodeableConcept"]

    """ Printed form identifier.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    error: typing.Optional[typing.List["CoverageEligibilityResponseError"]]

    """ Processing errors.
    List of `CoverageEligibilityResponseError` items (represented as `dict` in JSON).
    """



#   {'path': 'CoverageEligibilityResponse.serviced[x]', 'choice_of_type': 'serviced', 'orig_name': 'servicedDate', 'name': 'servicedDate', 'parent_name': 'CoverageEligibilityResponse', 'class_name': 'FHIRDate', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Estimated date or dates of service', 'formal': 'The date or dates when the enclosed suite of services were performed or completed.', 'representation': None}
    _serviced_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['serviced_date', 'serviced_period']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in FinancialResourceStatusCodes:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["purpose"]["enum"]
            enums.clear()
            for item in EligibilityResponsePurpose:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["outcome"]["enum"]
            enums.clear()
            for item in ClaimProcessingCodes:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_purpose = get_primitive_field_root_validator("purpose")
    
    _validate_primitive_serviced_date = get_primitive_field_root_validator("serviced_date")
    
    _validate_primitive_created = get_primitive_field_root_validator("created")
    
    _validate_primitive_outcome = get_primitive_field_root_validator("outcome")
    
    _validate_primitive_disposition = get_primitive_field_root_validator("disposition")
    
    _validate_primitive_pre_auth_ref = get_primitive_field_root_validator("pre_auth_ref")
    


class DetectedIssue(DomainResource):
    """ Clinical issue with action.

    Indicates an actual or potential clinical issue with or between one or more
    active or proposed clinical actions for a patient; e.g. Drug-drug
    interaction, Ineffective treatment frequency, Procedure-condition conflict,
    etc.
    """
    resource_type: typing.Literal["DetectedIssue"] = "DetectedIssue"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DetectedIssue",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Unique id for the detected issue.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "ObservationStatus"

    """ registered | preliminary | final | amended +.
    Type `ObservationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code: typing.Optional["CodeableConcept"]

    """ Issue Category, e.g. drug-drug, duplicate therapy, etc..
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

            
    
    
    severity: typing.Optional["DetectedIssueSeverity"]

    """ high | moderate | low.
    Type `DetectedIssueSeverity` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    severity__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_severity`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    patient: typing.Optional["Reference"]

    """ Associated patient.
    Type `Reference` (represented as `dict` in JSON).
    """

    identified_date_time: typing.Optional[FHIRDateTime]

    """ When identified.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    identified_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_identified_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    identified_period: typing.Optional["Period"]

    """ When identified.
    Type `Period` (represented as `dict` in JSON).
    """

    author: typing.Optional["Reference"]

    """ The provider or device that identified the issue.
    Type `Reference` (represented as `dict` in JSON).
    """

    implicated: typing.Optional[typing.List["Reference"]]

    """ Problem resource.
    List of `Reference` items (represented as `dict` in JSON).
    """

    evidence: typing.Optional[typing.List["DetectedIssueEvidence"]]

    """ Supporting evidence.
    List of `DetectedIssueEvidence` items (represented as `dict` in JSON).
    """

    detail: typing.Optional[FHIRString]

    """ Description and context.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    detail__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_detail`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    reference: typing.Optional[FHIRString]

    """ Authority for issue.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    reference__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_reference`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    mitigation: typing.Optional[typing.List["DetectedIssueMitigation"]]

    """ Step taken to address.
    List of `DetectedIssueMitigation` items (represented as `dict` in JSON).
    """



#   {'path': 'DetectedIssue.identified[x]', 'choice_of_type': 'identified', 'orig_name': 'identifiedDateTime', 'name': 'identifiedDateTime', 'parent_name': 'DetectedIssue', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'When identified', 'formal': 'The date or period when the detected issue was initially identified.', 'representation': None}
    _identified_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['identified_date_time', 'identified_period']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in ObservationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["severity"]["enum"]
            enums.clear()
            for item in DetectedIssueSeverity:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_severity = get_primitive_field_root_validator("severity")
    
    _validate_primitive_identified_date_time = get_primitive_field_root_validator("identified_date_time")
    
    _validate_primitive_detail = get_primitive_field_root_validator("detail")
    
    _validate_primitive_reference = get_primitive_field_root_validator("reference")
    


class Device(DomainResource):
    """ Item used in healthcare.

    A type of a manufactured item that is used in the provision of healthcare
    without being substantially changed through that activity. The device may
    be a medical or non-medical device.
    """
    resource_type: typing.Literal["Device"] = "Device"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Device",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Instance identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    definition: typing.Optional["Reference"]

    """ The reference to the definition for the device.
    Type `Reference` (represented as `dict` in JSON).
    """

    udi_carrier: typing.Optional[typing.List["DeviceUdiCarrier"]]

    """ Unique Device Identifier (UDI) Barcode string.
    List of `DeviceUdiCarrier` items (represented as `dict` in JSON).
    """

            
    
    
    status: typing.Optional["FHIRDeviceStatus"]

    """ active | inactive | entered-in-error | unknown.
    Type `FHIRDeviceStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    status_reason: typing.Optional[typing.List["CodeableConcept"]]

    """ online | paused | standby | offline | not-ready | transduc-discon |
        hw-discon | off.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    distinct_identifier: typing.Optional[FHIRString]

    """ The distinct identification string.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    distinct_identifier__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_distinct_identifier`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    manufacturer: typing.Optional[FHIRString]

    """ Name of device manufacturer.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    manufacturer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_manufacturer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    manufacture_date: typing.Optional[FHIRDateTime]

    """ Date when the device was made.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    manufacture_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_manufacture_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    expiration_date: typing.Optional[FHIRDateTime]

    """ Date and time of expiry of this device (if applicable).
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    expiration_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_expiration_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    lot_number: typing.Optional[FHIRString]

    """ Lot number of manufacture.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    lot_number__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_lot_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    serial_number: typing.Optional[FHIRString]

    """ Serial number assigned by the manufacturer.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    serial_number__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_serial_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    device_name: typing.Optional[typing.List["DeviceDeviceName"]]

    """ The name of the device as given by the manufacturer.
    List of `DeviceDeviceName` items (represented as `dict` in JSON).
    """

    model_number: typing.Optional[FHIRString]

    """ The model number for the device.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    model_number__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_model_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    part_number: typing.Optional[FHIRString]

    """ The part number of the device.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    part_number__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_part_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional["CodeableConcept"]

    """ The kind or type of device.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    specialization: typing.Optional[typing.List["DeviceSpecialization"]]

    """ The capabilities supported on a  device, the standards to which the
        device conforms for a particular purpose, and used for the
        communication.
    List of `DeviceSpecialization` items (represented as `dict` in JSON).
    """

    version: typing.Optional[typing.List["DeviceVersion"]]

    """ The actual design of the device or software version running on the
        device.
    List of `DeviceVersion` items (represented as `dict` in JSON).
    """

    property: typing.Optional[typing.List["DeviceProperty"]]

    """ The actual configuration settings of a device as it actually
        operates, e.g., regulation status, time properties.
    List of `DeviceProperty` items (represented as `dict` in JSON).
    """

    patient: typing.Optional["Reference"]

    """ Patient to whom Device is affixed.
    Type `Reference` (represented as `dict` in JSON).
    """

    owner: typing.Optional["Reference"]

    """ Organization responsible for device.
    Type `Reference` (represented as `dict` in JSON).
    """

    contact: typing.Optional[typing.List["ContactPoint"]]

    """ Details for human/organization for support.
    List of `ContactPoint` items (represented as `dict` in JSON).
    """

    location: typing.Optional["Reference"]

    """ Where the device is found.
    Type `Reference` (represented as `dict` in JSON).
    """

    url: typing.Optional[FHIRString]

    """ Network address to contact device.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    note: typing.Optional[typing.List["Annotation"]]

    """ Device notes and comments.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    safety: typing.Optional[typing.List["CodeableConcept"]]

    """ Safety Characteristics of Device.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    parent: typing.Optional["Reference"]

    """ The parent device.
    Type `Reference` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in FHIRDeviceStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_distinct_identifier = get_primitive_field_root_validator("distinct_identifier")
    
    _validate_primitive_manufacturer = get_primitive_field_root_validator("manufacturer")
    
    _validate_primitive_manufacture_date = get_primitive_field_root_validator("manufacture_date")
    
    _validate_primitive_expiration_date = get_primitive_field_root_validator("expiration_date")
    
    _validate_primitive_lot_number = get_primitive_field_root_validator("lot_number")
    
    _validate_primitive_serial_number = get_primitive_field_root_validator("serial_number")
    
    _validate_primitive_model_number = get_primitive_field_root_validator("model_number")
    
    _validate_primitive_part_number = get_primitive_field_root_validator("part_number")
    
    _validate_primitive_url = get_primitive_field_root_validator("url")
    


class DeviceDefinition(DomainResource):
    """ An instance of a medical-related component of a medical device.

    The characteristics, operational status and capabilities of a medical-
    related component of a medical device.
    """
    resource_type: typing.Literal["DeviceDefinition"] = "DeviceDefinition"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DeviceDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Instance identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    udi_device_identifier: typing.Optional[typing.List["DeviceDefinitionUdiDeviceIdentifier"]]

    """ Unique Device Identifier (UDI) Barcode string.
    List of `DeviceDefinitionUdiDeviceIdentifier` items (represented as `dict` in JSON).
    """

    manufacturer_string: typing.Optional[FHIRString]

    """ Name of device manufacturer.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    manufacturer_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_manufacturer_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    manufacturer_reference: typing.Optional["Reference"]

    """ Name of device manufacturer.
    Type `Reference` (represented as `dict` in JSON).
    """

    device_name: typing.Optional[typing.List["DeviceDefinitionDeviceName"]]

    """ A name given to the device to identify it.
    List of `DeviceDefinitionDeviceName` items (represented as `dict` in JSON).
    """

    model_number: typing.Optional[FHIRString]

    """ The model number for the device.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    model_number__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_model_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional["CodeableConcept"]

    """ What kind of device or device system this is.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    specialization: typing.Optional[typing.List["DeviceDefinitionSpecialization"]]

    """ The capabilities supported on a  device, the standards to which the
        device conforms for a particular purpose, and used for the
        communication.
    List of `DeviceDefinitionSpecialization` items (represented as `dict` in JSON).
    """

    version: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Available versions.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    safety: typing.Optional[typing.List["CodeableConcept"]]

    """ Safety characteristics of the device.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    shelf_life_storage: typing.Optional[typing.List["ProductShelfLife"]]

    """ Shelf Life and storage information.
    List of `ProductShelfLife` items (represented as `dict` in JSON).
    """

    physical_characteristics: typing.Optional["ProdCharacteristic"]

    """ Dimensions, color etc..
    Type `ProdCharacteristic` (represented as `dict` in JSON).
    """

    language_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Language code for the human-readable text strings produced by the
        device (all supported).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    capability: typing.Optional[typing.List["DeviceDefinitionCapability"]]

    """ Device capabilities.
    List of `DeviceDefinitionCapability` items (represented as `dict` in JSON).
    """

    property: typing.Optional[typing.List["DeviceDefinitionProperty"]]

    """ The actual configuration settings of a device as it actually
        operates, e.g., regulation status, time properties.
    List of `DeviceDefinitionProperty` items (represented as `dict` in JSON).
    """

    owner: typing.Optional["Reference"]

    """ Organization responsible for device.
    Type `Reference` (represented as `dict` in JSON).
    """

    contact: typing.Optional[typing.List["ContactPoint"]]

    """ Details for human/organization for support.
    List of `ContactPoint` items (represented as `dict` in JSON).
    """

    url: typing.Optional[FHIRString]

    """ Network address to contact device.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    online_information: typing.Optional[FHIRString]

    """ Access to on-line information.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    online_information__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_online_information`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    note: typing.Optional[typing.List["Annotation"]]

    """ Device notes and comments.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    quantity: typing.Optional["Quantity"]

    """ The quantity of the device present in the packaging (e.g. the
        number of devices present in a pack, or the number of devices in
        the same package of the medicinal product).
    Type `Quantity` (represented as `dict` in JSON).
    """

    parent_device: typing.Optional["Reference"]

    """ The parent device it can be part of.
    Type `Reference` (represented as `dict` in JSON).
    """

    material: typing.Optional[typing.List["DeviceDefinitionMaterial"]]

    """ A substance used to create the material(s) of which the device is
        made.
    List of `DeviceDefinitionMaterial` items (represented as `dict` in JSON).
    """



#   {'path': 'DeviceDefinition.manufacturer[x]', 'choice_of_type': 'manufacturer', 'orig_name': 'manufacturerString', 'name': 'manufacturerString', 'parent_name': 'DeviceDefinition', 'class_name': 'FHIRString', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Name of device manufacturer', 'formal': 'A name of the manufacturer.', 'representation': None}
    _manufacturer_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['manufacturer_string', 'manufacturer_reference']), True))

    _validate_primitive_manufacturer_string = get_primitive_field_root_validator("manufacturer_string")
    
    _validate_primitive_model_number = get_primitive_field_root_validator("model_number")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_online_information = get_primitive_field_root_validator("online_information")
    


class DeviceMetric(DomainResource):
    """ Measurement, calculation or setting capability of a medical device.

    Describes a measurement, calculation or setting capability of a medical
    device.
    """
    resource_type: typing.Literal["DeviceMetric"] = "DeviceMetric"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DeviceMetric",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Instance identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    type: "CodeableConcept"

    """ Identity of metric, for example Heart Rate or PEEP Setting.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    unit: typing.Optional["CodeableConcept"]

    """ Unit of Measure for the Metric.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    source: typing.Optional["Reference"]

    """ Describes the link to the source Device.
    Type `Reference` (represented as `dict` in JSON).
    """

    parent: typing.Optional["Reference"]

    """ Describes the link to the parent Device.
    Type `Reference` (represented as `dict` in JSON).
    """

            
    
    
    operational_status: typing.Optional["DeviceMetricOperationalStatus"]

    """ on | off | standby | entered-in-error.
    Type `DeviceMetricOperationalStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    operational_status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_operational_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    color: typing.Optional["DeviceMetricColor"]

    """ black | red | green | yellow | blue | magenta | cyan | white.
    Type `DeviceMetricColor` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    color__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_color`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    category: "DeviceMetricCategory"

    """ measurement | setting | calculation | unspecified.
    Type `DeviceMetricCategory` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    category__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_category`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    measurement_period: typing.Optional["Timing"]

    """ Describes the measurement repetition time.
    Type `Timing` (represented as `dict` in JSON).
    """

    calibration: typing.Optional[typing.List["DeviceMetricCalibration"]]

    """ Describes the calibrations that have been performed or that are
        required to be performed.
    List of `DeviceMetricCalibration` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["operationalStatus"]["enum"]
            enums.clear()
            for item in DeviceMetricOperationalStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["color"]["enum"]
            enums.clear()
            for item in DeviceMetricColor:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["category"]["enum"]
            enums.clear()
            for item in DeviceMetricCategory:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_operational_status = get_primitive_field_root_validator("operational_status")
    
    _validate_primitive_color = get_primitive_field_root_validator("color")
    
    _validate_primitive_category = get_primitive_field_root_validator("category")
    


class DeviceRequest(DomainResource):
    """ Medical device request.

    Represents a request for a patient to employ a medical device. The device
    may be an implantable device, or an external assistive device, such as a
    walker.
    """
    resource_type: typing.Literal["DeviceRequest"] = "DeviceRequest"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DeviceRequest",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ External Request identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    instantiates_canonical: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Instantiates FHIR protocol or definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates_canonical__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    instantiates_uri: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Instantiates external protocol or definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates_uri__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    based_on: typing.Optional[typing.List["Reference"]]

    """ What request fulfills.
    List of `Reference` items (represented as `dict` in JSON).
    """

    prior_request: typing.Optional[typing.List["Reference"]]

    """ What request replaces.
    List of `Reference` items (represented as `dict` in JSON).
    """

    group_identifier: typing.Optional["Identifier"]

    """ Identifier of composite request.
    Type `Identifier` (represented as `dict` in JSON).
    """

            
    
    
    status: typing.Optional["RequestStatus"]

    """ draft | active | on-hold | revoked | completed | entered-in-error |
        unknown.
    Type `RequestStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    intent: "RequestIntent"

    """ proposal | plan | directive | order | original-order | reflex-order
        | filler-order | instance-order | option.
    Type `RequestIntent` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    intent__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_intent`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    priority: typing.Optional["RequestPriority"]

    """ routine | urgent | asap | stat.
    Type `RequestPriority` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    priority__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_priority`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code_reference: typing.Optional["Reference"]

    """ Device requested.
    Type `Reference` (represented as `dict` in JSON).
    """

    code_codeable_concept: typing.Optional["CodeableConcept"]

    """ Device requested.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    parameter: typing.Optional[typing.List["DeviceRequestParameter"]]

    """ Device details.
    List of `DeviceRequestParameter` items (represented as `dict` in JSON).
    """

    subject: "Reference"

    """ Focus of request.
    Type `Reference` (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Encounter motivating request.
    Type `Reference` (represented as `dict` in JSON).
    """

    occurrence_date_time: typing.Optional[FHIRDateTime]

    """ Desired time or schedule for use.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    occurrence_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_occurrence_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    occurrence_period: typing.Optional["Period"]

    """ Desired time or schedule for use.
    Type `Period` (represented as `dict` in JSON).
    """

    occurrence_timing: typing.Optional["Timing"]

    """ Desired time or schedule for use.
    Type `Timing` (represented as `dict` in JSON).
    """

    authored_on: typing.Optional[FHIRDateTime]

    """ When recorded.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    authored_on__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_authored_on`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    requester: typing.Optional["Reference"]

    """ Who/what is requesting diagnostics.
    Type `Reference` (represented as `dict` in JSON).
    """

    performer_type: typing.Optional["CodeableConcept"]

    """ Filler role.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    performer: typing.Optional["Reference"]

    """ Requested Filler.
    Type `Reference` (represented as `dict` in JSON).
    """

    reason_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Coded Reason for request.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    reason_reference: typing.Optional[typing.List["Reference"]]

    """ Linked Reason for request.
    List of `Reference` items (represented as `dict` in JSON).
    """

    insurance: typing.Optional[typing.List["Reference"]]

    """ Associated insurance coverage.
    List of `Reference` items (represented as `dict` in JSON).
    """

    supporting_info: typing.Optional[typing.List["Reference"]]

    """ Additional clinical information.
    List of `Reference` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Notes or comments.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    relevant_history: typing.Optional[typing.List["Reference"]]

    """ Request provenance.
    List of `Reference` items (represented as `dict` in JSON).
    """



#   {'path': 'DeviceRequest.code[x]', 'choice_of_type': 'code', 'orig_name': 'codeReference', 'name': 'codeReference', 'parent_name': 'DeviceRequest', 'class_name': 'Reference', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Device requested', 'formal': 'The details of the device to be used.', 'representation': None}
    _code_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['code_reference', 'code_codeable_concept']), False))

#   {'path': 'DeviceRequest.occurrence[x]', 'choice_of_type': 'occurrence', 'orig_name': 'occurrenceDateTime', 'name': 'occurrenceDateTime', 'parent_name': 'DeviceRequest', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Desired time or schedule for use', 'formal': 'The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".', 'representation': None}
    _occurrence_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['occurrence_date_time', 'occurrence_period', 'occurrence_timing']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in RequestStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["intent"]["enum"]
            enums.clear()
            for item in RequestIntent:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["priority"]["enum"]
            enums.clear()
            for item in RequestPriority:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_instantiates_canonical = get_primitive_field_root_validator("instantiates_canonical")
    
    _validate_primitive_instantiates_uri = get_primitive_field_root_validator("instantiates_uri")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_intent = get_primitive_field_root_validator("intent")
    
    _validate_primitive_priority = get_primitive_field_root_validator("priority")
    
    _validate_primitive_occurrence_date_time = get_primitive_field_root_validator("occurrence_date_time")
    
    _validate_primitive_authored_on = get_primitive_field_root_validator("authored_on")
    


class DeviceUseStatement(DomainResource):
    """ Record of use of a device.

    A record of a device being used by a patient where the record is the result
    of a report from the patient or another clinician.
    """
    resource_type: typing.Literal["DeviceUseStatement"] = "DeviceUseStatement"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DeviceUseStatement",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ External identifier for this record.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    based_on: typing.Optional[typing.List["Reference"]]

    """ Fulfills plan, proposal or order.
    List of `Reference` items (represented as `dict` in JSON).
    """

            
    
    
    status: "DeviceUseStatementStatus"

    """ active | completed | entered-in-error +.
    Type `DeviceUseStatementStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subject: "Reference"

    """ Patient using device.
    Type `Reference` (represented as `dict` in JSON).
    """

    derived_from: typing.Optional[typing.List["Reference"]]

    """ Supporting information.
    List of `Reference` items (represented as `dict` in JSON).
    """

    timing_timing: typing.Optional["Timing"]

    """ How often  the device was used.
    Type `Timing` (represented as `dict` in JSON).
    """

    timing_period: typing.Optional["Period"]

    """ How often  the device was used.
    Type `Period` (represented as `dict` in JSON).
    """

    timing_date_time: typing.Optional[FHIRDateTime]

    """ How often  the device was used.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    timing_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_timing_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    recorded_on: typing.Optional[FHIRDateTime]

    """ When statement was recorded.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    recorded_on__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_recorded_on`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    source: typing.Optional["Reference"]

    """ Who made the statement.
    Type `Reference` (represented as `dict` in JSON).
    """

    device: "Reference"

    """ Reference to device used.
    Type `Reference` (represented as `dict` in JSON).
    """

    reason_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Why device was used.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    reason_reference: typing.Optional[typing.List["Reference"]]

    """ Why was DeviceUseStatement performed?.
    List of `Reference` items (represented as `dict` in JSON).
    """

    body_site: typing.Optional["CodeableConcept"]

    """ Target body site.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Addition details (comments, instructions).
    List of `Annotation` items (represented as `dict` in JSON).
    """



#   {'path': 'DeviceUseStatement.timing[x]', 'choice_of_type': 'timing', 'orig_name': 'timingTiming', 'name': 'timingTiming', 'parent_name': 'DeviceUseStatement', 'class_name': 'Timing', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'How often  the device was used', 'formal': 'How often the device was used.', 'representation': None}
    _timing_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['timing_timing', 'timing_period', 'timing_date_time']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in DeviceUseStatementStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_timing_date_time = get_primitive_field_root_validator("timing_date_time")
    
    _validate_primitive_recorded_on = get_primitive_field_root_validator("recorded_on")
    


class DiagnosticReport(DomainResource):
    """ A Diagnostic report - a combination of request information, atomic results,
    images, interpretation, as well as formatted reports.

    The findings and interpretation of diagnostic  tests performed on patients,
    groups of patients, devices, and locations, and/or specimens derived from
    these. The report includes clinical context such as requesting and provider
    information, and some mix of atomic results, images, textual and coded
    interpretations, and formatted representation of diagnostic reports.
    """
    resource_type: typing.Literal["DiagnosticReport"] = "DiagnosticReport"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DiagnosticReport",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business identifier for report.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    based_on: typing.Optional[typing.List["Reference"]]

    """ What was requested.
    List of `Reference` items (represented as `dict` in JSON).
    """

            
    
    
    status: "DiagnosticReportStatus"

    """ registered | partial | preliminary | final +.
    Type `DiagnosticReportStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    category: typing.Optional[typing.List["CodeableConcept"]]

    """ Service category.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    code: "CodeableConcept"

    """ Name/Code for this diagnostic report.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject: typing.Optional["Reference"]

    """ The subject of the report - usually, but not always, the patient.
    Type `Reference` (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Health care event when test ordered.
    Type `Reference` (represented as `dict` in JSON).
    """

    effective_date_time: typing.Optional[FHIRDateTime]

    """ Clinically relevant time/time-period for report.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    effective_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_effective_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    effective_period: typing.Optional["Period"]

    """ Clinically relevant time/time-period for report.
    Type `Period` (represented as `dict` in JSON).
    """

    issued: typing.Optional[FHIRInstant]

    """ DateTime this version was made.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    issued__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_issued`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    performer: typing.Optional[typing.List["Reference"]]

    """ Responsible Diagnostic Service.
    List of `Reference` items (represented as `dict` in JSON).
    """

    results_interpreter: typing.Optional[typing.List["Reference"]]

    """ Primary result interpreter.
    List of `Reference` items (represented as `dict` in JSON).
    """

    specimen: typing.Optional[typing.List["Reference"]]

    """ Specimens this report is based on.
    List of `Reference` items (represented as `dict` in JSON).
    """

    result: typing.Optional[typing.List["Reference"]]

    """ Observations.
    List of `Reference` items (represented as `dict` in JSON).
    """

    imaging_study: typing.Optional[typing.List["Reference"]]

    """ Reference to full details of imaging associated with the diagnostic
        report.
    List of `Reference` items (represented as `dict` in JSON).
    """

    media: typing.Optional[typing.List["DiagnosticReportMedia"]]

    """ Key images associated with this report.
    List of `DiagnosticReportMedia` items (represented as `dict` in JSON).
    """

    conclusion: typing.Optional[FHIRString]

    """ Clinical conclusion (interpretation) of test results.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    conclusion__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_conclusion`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    conclusion_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Codes for the clinical conclusion of test results.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    presented_form: typing.Optional[typing.List["Attachment"]]

    """ Entire report as issued.
    List of `Attachment` items (represented as `dict` in JSON).
    """



#   {'path': 'DiagnosticReport.effective[x]', 'choice_of_type': 'effective', 'orig_name': 'effectiveDateTime', 'name': 'effectiveDateTime', 'parent_name': 'DiagnosticReport', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Clinically relevant time/time-period for report', 'formal': 'The time or time-period the observed values are related to. When the subject of the report is a patient, this is usually either the time of the procedure or of specimen collection(s), but very often the source of the date/time is not known, only the date/time itself.', 'representation': None}
    _effective_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['effective_date_time', 'effective_period']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in DiagnosticReportStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_effective_date_time = get_primitive_field_root_validator("effective_date_time")
    
    _validate_primitive_issued = get_primitive_field_root_validator("issued")
    
    _validate_primitive_conclusion = get_primitive_field_root_validator("conclusion")
    


class DocumentManifest(DomainResource):
    """ A list that defines a set of documents.

    A collection of documents compiled for a purpose together with metadata
    that applies to the collection.
    """
    resource_type: typing.Literal["DocumentManifest"] = "DocumentManifest"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DocumentManifest",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    master_identifier: typing.Optional["Identifier"]

    """ Unique Identifier for the set of documents.
    Type `Identifier` (represented as `dict` in JSON).
    """

    identifier: typing.Optional[typing.List["Identifier"]]

    """ Other identifiers for the manifest.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "DocumentReferenceStatus"

    """ current | superseded | entered-in-error.
    Type `DocumentReferenceStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional["CodeableConcept"]

    """ Kind of document set.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject: typing.Optional["Reference"]

    """ The subject of the set of documents.
    Type `Reference` (represented as `dict` in JSON).
    """

    created: typing.Optional[FHIRDateTime]

    """ When this document manifest created.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    created__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_created`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    author: typing.Optional[typing.List["Reference"]]

    """ Who and/or what authored the DocumentManifest.
    List of `Reference` items (represented as `dict` in JSON).
    """

    recipient: typing.Optional[typing.List["Reference"]]

    """ Intended to get notified about this set of documents.
    List of `Reference` items (represented as `dict` in JSON).
    """

    source: typing.Optional[FHIRString]

    """ The source system/application/software.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    source__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_source`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ Human-readable description (title).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    content: typing.List["Reference"]

    """ Items in manifest.
    List of `Reference` items (represented as `dict` in JSON).
    """

    related: typing.Optional[typing.List["DocumentManifestRelated"]]

    """ Related things.
    List of `DocumentManifestRelated` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in DocumentReferenceStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_created = get_primitive_field_root_validator("created")
    
    _validate_primitive_source = get_primitive_field_root_validator("source")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class DocumentReference(DomainResource):
    """ A reference to a document.

    A reference to a document of any kind for any purpose. Provides metadata
    about the document so that the document can be discovered and managed. The
    scope of a document is any seralized object with a mime-type, so includes
    formal patient centric documents (CDA), cliical notes, scanned paper, and
    non-patient specific documents like policy text.
    """
    resource_type: typing.Literal["DocumentReference"] = "DocumentReference"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DocumentReference",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    master_identifier: typing.Optional["Identifier"]

    """ Master Version Specific Identifier.
    Type `Identifier` (represented as `dict` in JSON).
    """

    identifier: typing.Optional[typing.List["Identifier"]]

    """ Other identifiers for the document.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "DocumentReferenceStatus"

    """ current | superseded | entered-in-error.
    Type `DocumentReferenceStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    doc_status: typing.Optional["CompositionStatus"]

    """ preliminary | final | amended | entered-in-error.
    Type `CompositionStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    doc_status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_doc_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional["CodeableConcept"]

    """ Kind of document (LOINC if possible).
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    category: typing.Optional[typing.List["CodeableConcept"]]

    """ Categorization of document.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    subject: typing.Optional["Reference"]

    """ Who/what is the subject of the document.
    Type `Reference` (represented as `dict` in JSON).
    """

    date: typing.Optional[FHIRInstant]

    """ When this document reference was created.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    author: typing.Optional[typing.List["Reference"]]

    """ Who and/or what authored the document.
    List of `Reference` items (represented as `dict` in JSON).
    """

    authenticator: typing.Optional["Reference"]

    """ Who/what authenticated the document.
    Type `Reference` (represented as `dict` in JSON).
    """

    custodian: typing.Optional["Reference"]

    """ Organization which maintains the document.
    Type `Reference` (represented as `dict` in JSON).
    """

    relates_to: typing.Optional[typing.List["DocumentReferenceRelatesTo"]]

    """ Relationships to other documents.
    List of `DocumentReferenceRelatesTo` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Human-readable description.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    security_label: typing.Optional[typing.List["CodeableConcept"]]

    """ Document security-tags.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    content: typing.List["DocumentReferenceContent"]

    """ Document referenced.
    List of `DocumentReferenceContent` items (represented as `dict` in JSON).
    """

    context: typing.Optional["DocumentReferenceContext"]

    """ Clinical context of document.
    Type `DocumentReferenceContext` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in DocumentReferenceStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["docStatus"]["enum"]
            enums.clear()
            for item in CompositionStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_doc_status = get_primitive_field_root_validator("doc_status")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class EffectEvidenceSynthesis(DomainResource):
    """ A quantified estimate of effect based on a body of evidence.

    The EffectEvidenceSynthesis resource describes the difference in an outcome
    between exposures states in a population where the effect estimate is
    derived from a combination of research studies.
    """
    resource_type: typing.Literal["EffectEvidenceSynthesis"] = "EffectEvidenceSynthesis"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/EffectEvidenceSynthesis",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: typing.Optional[FHIRString]

    """ Canonical identifier for this effect evidence synthesis,
        represented as a URI (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    identifier: typing.Optional[typing.List["Identifier"]]

    """ Additional identifier for the effect evidence synthesis.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    version: typing.Optional[FHIRString]

    """ Business version of the effect evidence synthesis.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Name for this effect evidence synthesis (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Name for this effect evidence synthesis (human friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the effect evidence synthesis.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    note: typing.Optional[typing.List["Annotation"]]

    """ Used for footnotes or explanatory notes.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for effect evidence synthesis (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    copyright: typing.Optional[FHIRString]

    """ Use and/or publishing restrictions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    copyright__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_copyright`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    approval_date: typing.Optional[FHIRDate]

    """ When the effect evidence synthesis was approved by publisher.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    approval_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_approval_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    last_review_date: typing.Optional[FHIRDate]

    """ When the effect evidence synthesis was last reviewed.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    last_review_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_last_review_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    effective_period: typing.Optional["Period"]

    """ When the effect evidence synthesis is expected to be used.
    Type `Period` (represented as `dict` in JSON).
    """

    topic: typing.Optional[typing.List["CodeableConcept"]]

    """ The category of the EffectEvidenceSynthesis, such as Education,
        Treatment, Assessment, etc..
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    author: typing.Optional[typing.List["ContactDetail"]]

    """ Who authored the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    editor: typing.Optional[typing.List["ContactDetail"]]

    """ Who edited the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    reviewer: typing.Optional[typing.List["ContactDetail"]]

    """ Who reviewed the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    endorser: typing.Optional[typing.List["ContactDetail"]]

    """ Who endorsed the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    related_artifact: typing.Optional[typing.List["RelatedArtifact"]]

    """ Additional documentation, citations, etc..
    List of `RelatedArtifact` items (represented as `dict` in JSON).
    """

    synthesis_type: typing.Optional["CodeableConcept"]

    """ Type of synthesis.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    study_type: typing.Optional["CodeableConcept"]

    """ Type of study.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    population: "Reference"

    """ What population?.
    Type `Reference` (represented as `dict` in JSON).
    """

    exposure: "Reference"

    """ What exposure?.
    Type `Reference` (represented as `dict` in JSON).
    """

    exposure_alternative: "Reference"

    """ What comparison exposure?.
    Type `Reference` (represented as `dict` in JSON).
    """

    outcome: "Reference"

    """ What outcome?.
    Type `Reference` (represented as `dict` in JSON).
    """

    sample_size: typing.Optional["EffectEvidenceSynthesisSampleSize"]

    """ What sample size was involved?.
    Type `EffectEvidenceSynthesisSampleSize` (represented as `dict` in JSON).
    """

    results_by_exposure: typing.Optional[typing.List["EffectEvidenceSynthesisResultsByExposure"]]

    """ What was the result per exposure?.
    List of `EffectEvidenceSynthesisResultsByExposure` items (represented as `dict` in JSON).
    """

    effect_estimate: typing.Optional[typing.List["EffectEvidenceSynthesisEffectEstimate"]]

    """ What was the estimated effect.
    List of `EffectEvidenceSynthesisEffectEstimate` items (represented as `dict` in JSON).
    """

    certainty: typing.Optional[typing.List["EffectEvidenceSynthesisCertainty"]]

    """ How certain is the effect.
    List of `EffectEvidenceSynthesisCertainty` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_copyright = get_primitive_field_root_validator("copyright")
    
    _validate_primitive_approval_date = get_primitive_field_root_validator("approval_date")
    
    _validate_primitive_last_review_date = get_primitive_field_root_validator("last_review_date")
    


class Encounter(DomainResource):
    """ An interaction during which services are provided to the patient.

    An interaction between a patient and healthcare provider(s) for the purpose
    of providing healthcare service(s) or assessing the health status of a
    patient.
    """
    resource_type: typing.Literal["Encounter"] = "Encounter"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Encounter",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Identifier(s) by which this encounter is known.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "EncounterStatus"

    """ planned | arrived | triaged | in-progress | onleave | finished |
        cancelled +.
    Type `EncounterStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    status_history: typing.Optional[typing.List["EncounterStatusHistory"]]

    """ List of past encounter statuses.
    List of `EncounterStatusHistory` items (represented as `dict` in JSON).
    """

    class_: "Coding"

    """ Classification of patient encounter.
    Type `Coding` (represented as `dict` in JSON).
    """

    class_history: typing.Optional[typing.List["EncounterClassHistory"]]

    """ List of past encounter classes.
    List of `EncounterClassHistory` items (represented as `dict` in JSON).
    """

    type: typing.Optional[typing.List["CodeableConcept"]]

    """ Specific type of encounter.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    service_type: typing.Optional["CodeableConcept"]

    """ Specific type of service.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    priority: typing.Optional["CodeableConcept"]

    """ Indicates the urgency of the encounter.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject: typing.Optional["Reference"]

    """ The patient or group present at the encounter.
    Type `Reference` (represented as `dict` in JSON).
    """

    episode_of_care: typing.Optional[typing.List["Reference"]]

    """ Episode(s) of care that this encounter should be recorded against.
    List of `Reference` items (represented as `dict` in JSON).
    """

    based_on: typing.Optional[typing.List["Reference"]]

    """ The ServiceRequest that initiated this encounter.
    List of `Reference` items (represented as `dict` in JSON).
    """

    participant: typing.Optional[typing.List["EncounterParticipant"]]

    """ List of participants involved in the encounter.
    List of `EncounterParticipant` items (represented as `dict` in JSON).
    """

    appointment: typing.Optional[typing.List["Reference"]]

    """ The appointment that scheduled this encounter.
    List of `Reference` items (represented as `dict` in JSON).
    """

    period: typing.Optional["Period"]

    """ The start and end time of the encounter.
    Type `Period` (represented as `dict` in JSON).
    """

    length: typing.Optional["Duration"]

    """ Quantity of time the encounter lasted (less time absent).
    Type `Duration` (represented as `dict` in JSON).
    """

    reason_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Coded reason the encounter takes place.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    reason_reference: typing.Optional[typing.List["Reference"]]

    """ Reason the encounter takes place (reference).
    List of `Reference` items (represented as `dict` in JSON).
    """

    diagnosis: typing.Optional[typing.List["EncounterDiagnosis"]]

    """ The list of diagnosis relevant to this encounter.
    List of `EncounterDiagnosis` items (represented as `dict` in JSON).
    """

    account: typing.Optional[typing.List["Reference"]]

    """ The set of accounts that may be used for billing for this Encounter.
    List of `Reference` items (represented as `dict` in JSON).
    """

    hospitalization: typing.Optional["EncounterHospitalization"]

    """ Details about the admission to a healthcare service.
    Type `EncounterHospitalization` (represented as `dict` in JSON).
    """

    location: typing.Optional[typing.List["EncounterLocation"]]

    """ List of locations where the patient has been.
    List of `EncounterLocation` items (represented as `dict` in JSON).
    """

    service_provider: typing.Optional["Reference"]

    """ The organization (facility) responsible for this encounter.
    Type `Reference` (represented as `dict` in JSON).
    """

    part_of: typing.Optional["Reference"]

    """ Another Encounter this encounter is part of.
    Type `Reference` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in EncounterStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    


class Endpoint(DomainResource):
    """ The technical details of an endpoint that can be used for electronic
    services.

    The technical details of an endpoint that can be used for electronic
    services, such as for web services providing XDS.b or a REST endpoint for
    another FHIR server. This may include any security context information.
    """
    resource_type: typing.Literal["Endpoint"] = "Endpoint"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Endpoint",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Identifies this endpoint across multiple systems.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "EndpointStatus"

    """ active | suspended | error | off | entered-in-error | test.
    Type `EndpointStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    connection_type: "Coding"

    """ Protocol/Profile/Standard to be used with this endpoint connection.
    Type `Coding` (represented as `dict` in JSON).
    """

    name: typing.Optional[FHIRString]

    """ A name that this endpoint can be identified by.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    managing_organization: typing.Optional["Reference"]

    """ Organization that manages this endpoint (might not be the
        organization that exposes the endpoint).
    Type `Reference` (represented as `dict` in JSON).
    """

    contact: typing.Optional[typing.List["ContactPoint"]]

    """ Contact details for source (e.g. troubleshooting).
    List of `ContactPoint` items (represented as `dict` in JSON).
    """

    period: typing.Optional["Period"]

    """ Interval the endpoint is expected to be operational.
    Type `Period` (represented as `dict` in JSON).
    """

    payload_type: typing.List["CodeableConcept"]

    """ The type of content that may be used at this endpoint (e.g. XDS
        Discharge summaries).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    
    
    payload_mime_type: typing.Optional[typing.List[typing.Optional["FHIRCode"]]]

    """ Mimetype to send. If not specified, the content could be anything
        (including no payload, if the connectionType defined this).
    List of `FHIRCode` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    payload_mime_type__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_payload_mime_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    address: FHIRRequiredString

    """ The technical base address for connecting to this endpoint.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    address__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_address`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    header: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Usage depends on the channel type.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    header__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_header`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in EndpointStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_payload_mime_type = get_primitive_field_root_validator("payload_mime_type")
    
    _validate_primitive_address = get_primitive_field_root_validator("address")
    
    _validate_primitive_header = get_primitive_field_root_validator("header")
    


class EnrollmentRequest(DomainResource):
    """ Enroll in coverage.

    This resource provides the insurance enrollment details to the insurer
    regarding a specified coverage.
    """
    resource_type: typing.Literal["EnrollmentRequest"] = "EnrollmentRequest"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/EnrollmentRequest",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business Identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: typing.Optional["FinancialResourceStatusCodes"]

    """ active | cancelled | draft | entered-in-error.
    Type `FinancialResourceStatusCodes` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    created: typing.Optional[FHIRDateTime]

    """ Creation date.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    created__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_created`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    insurer: typing.Optional["Reference"]

    """ Target.
    Type `Reference` (represented as `dict` in JSON).
    """

    provider: typing.Optional["Reference"]

    """ Responsible practitioner.
    Type `Reference` (represented as `dict` in JSON).
    """

    candidate: typing.Optional["Reference"]

    """ The subject to be enrolled.
    Type `Reference` (represented as `dict` in JSON).
    """

    coverage: typing.Optional["Reference"]

    """ Insurance information.
    Type `Reference` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in FinancialResourceStatusCodes:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_created = get_primitive_field_root_validator("created")
    


class EnrollmentResponse(DomainResource):
    """ EnrollmentResponse resource.

    This resource provides enrollment and plan details from the processing of
    an EnrollmentRequest resource.
    """
    resource_type: typing.Literal["EnrollmentResponse"] = "EnrollmentResponse"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/EnrollmentResponse",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business Identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: typing.Optional["FinancialResourceStatusCodes"]

    """ active | cancelled | draft | entered-in-error.
    Type `FinancialResourceStatusCodes` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    request: typing.Optional["Reference"]

    """ Claim reference.
    Type `Reference` (represented as `dict` in JSON).
    """

            
    
    
    outcome: typing.Optional["ClaimProcessingCodes"]

    """ queued | complete | error | partial.
    Type `ClaimProcessingCodes` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    outcome__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_outcome`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    disposition: typing.Optional[FHIRString]

    """ Disposition Message.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    disposition__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_disposition`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    created: typing.Optional[FHIRDateTime]

    """ Creation date.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    created__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_created`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    organization: typing.Optional["Reference"]

    """ Insurer.
    Type `Reference` (represented as `dict` in JSON).
    """

    request_provider: typing.Optional["Reference"]

    """ Responsible practitioner.
    Type `Reference` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in FinancialResourceStatusCodes:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["outcome"]["enum"]
            enums.clear()
            for item in ClaimProcessingCodes:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_outcome = get_primitive_field_root_validator("outcome")
    
    _validate_primitive_disposition = get_primitive_field_root_validator("disposition")
    
    _validate_primitive_created = get_primitive_field_root_validator("created")
    


class EpisodeOfCare(DomainResource):
    """ An association of a Patient with an Organization and  Healthcare
    Provider(s) for a period of time that the Organization assumes some level
    of responsibility.

    An association between a patient and an organization / healthcare
    provider(s) during which time encounters may occur. The managing
    organization assumes a level of responsibility for the patient during this
    time.
    """
    resource_type: typing.Literal["EpisodeOfCare"] = "EpisodeOfCare"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/EpisodeOfCare",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business Identifier(s) relevant for this EpisodeOfCare.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "EpisodeOfCareStatus"

    """ planned | waitlist | active | onhold | finished | cancelled |
        entered-in-error.
    Type `EpisodeOfCareStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    status_history: typing.Optional[typing.List["EpisodeOfCareStatusHistory"]]

    """ Past list of status codes (the current status may be included to
        cover the start date of the status).
    List of `EpisodeOfCareStatusHistory` items (represented as `dict` in JSON).
    """

    type: typing.Optional[typing.List["CodeableConcept"]]

    """ Type/class  - e.g. specialist referral, disease management.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    diagnosis: typing.Optional[typing.List["EpisodeOfCareDiagnosis"]]

    """ The list of diagnosis relevant to this episode of care.
    List of `EpisodeOfCareDiagnosis` items (represented as `dict` in JSON).
    """

    patient: "Reference"

    """ The patient who is the focus of this episode of care.
    Type `Reference` (represented as `dict` in JSON).
    """

    managing_organization: typing.Optional["Reference"]

    """ Organization that assumes care.
    Type `Reference` (represented as `dict` in JSON).
    """

    period: typing.Optional["Period"]

    """ Interval during responsibility is assumed.
    Type `Period` (represented as `dict` in JSON).
    """

    referral_request: typing.Optional[typing.List["Reference"]]

    """ Originating Referral Request(s).
    List of `Reference` items (represented as `dict` in JSON).
    """

    care_manager: typing.Optional["Reference"]

    """ Care manager/care coordinator for the patient.
    Type `Reference` (represented as `dict` in JSON).
    """

    team: typing.Optional[typing.List["Reference"]]

    """ Other practitioners facilitating this episode of care.
    List of `Reference` items (represented as `dict` in JSON).
    """

    account: typing.Optional[typing.List["Reference"]]

    """ The set of accounts that may be used for billing for this
        EpisodeOfCare.
    List of `Reference` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in EpisodeOfCareStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    


class EventDefinition(DomainResource):
    """ A description of when an event can occur.

    The EventDefinition resource provides a reusable description of when a
    particular event can occur.
    """
    resource_type: typing.Literal["EventDefinition"] = "EventDefinition"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/EventDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: typing.Optional[FHIRString]

    """ Canonical identifier for this event definition, represented as a
        URI (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    identifier: typing.Optional[typing.List["Identifier"]]

    """ Additional identifier for the event definition.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    version: typing.Optional[FHIRString]

    """ Business version of the event definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Name for this event definition (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Name for this event definition (human friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subtitle: typing.Optional[FHIRString]

    """ Subordinate title of the event definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    subtitle__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_subtitle`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    experimental: typing.Optional[bool]

    """ For testing purposes, not real usage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    experimental__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_experimental`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subject_codeable_concept: typing.Optional["CodeableConcept"]

    """ Type of individual the event definition is focused on.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject_reference: typing.Optional["Reference"]

    """ Type of individual the event definition is focused on.
    Type `Reference` (represented as `dict` in JSON).
    """

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the event definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for event definition (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    purpose: typing.Optional[FHIRString]

    """ Why this event definition is defined.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    purpose__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_purpose`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    usage: typing.Optional[FHIRString]

    """ Describes the clinical usage of the event definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    usage__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_usage`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    copyright: typing.Optional[FHIRString]

    """ Use and/or publishing restrictions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    copyright__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_copyright`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    approval_date: typing.Optional[FHIRDate]

    """ When the event definition was approved by publisher.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    approval_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_approval_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    last_review_date: typing.Optional[FHIRDate]

    """ When the event definition was last reviewed.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    last_review_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_last_review_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    effective_period: typing.Optional["Period"]

    """ When the event definition is expected to be used.
    Type `Period` (represented as `dict` in JSON).
    """

    topic: typing.Optional[typing.List["CodeableConcept"]]

    """ E.g. Education, Treatment, Assessment, etc..
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    author: typing.Optional[typing.List["ContactDetail"]]

    """ Who authored the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    editor: typing.Optional[typing.List["ContactDetail"]]

    """ Who edited the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    reviewer: typing.Optional[typing.List["ContactDetail"]]

    """ Who reviewed the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    endorser: typing.Optional[typing.List["ContactDetail"]]

    """ Who endorsed the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    related_artifact: typing.Optional[typing.List["RelatedArtifact"]]

    """ Additional documentation, citations, etc..
    List of `RelatedArtifact` items (represented as `dict` in JSON).
    """

    trigger: typing.List["TriggerDefinition"]

    """ "when" the event occurs (multiple = 'or').
    List of `TriggerDefinition` items (represented as `dict` in JSON).
    """



#   {'path': 'EventDefinition.subject[x]', 'choice_of_type': 'subject', 'orig_name': 'subjectCodeableConcept', 'name': 'subjectCodeableConcept', 'parent_name': 'EventDefinition', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Type of individual the event definition is focused on', 'formal': 'A code or group definition that describes the intended subject of the event definition.', 'representation': None}
    _subject_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['subject_codeable_concept', 'subject_reference']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_subtitle = get_primitive_field_root_validator("subtitle")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_experimental = get_primitive_field_root_validator("experimental")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_purpose = get_primitive_field_root_validator("purpose")
    
    _validate_primitive_usage = get_primitive_field_root_validator("usage")
    
    _validate_primitive_copyright = get_primitive_field_root_validator("copyright")
    
    _validate_primitive_approval_date = get_primitive_field_root_validator("approval_date")
    
    _validate_primitive_last_review_date = get_primitive_field_root_validator("last_review_date")
    


class Evidence(DomainResource):
    """ A research context or question.

    The Evidence resource describes the conditional state (population and any
    exposures being compared within the population) and outcome (if specified)
    that the knowledge (evidence, assertion, recommendation) is about.
    """
    resource_type: typing.Literal["Evidence"] = "Evidence"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Evidence",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: typing.Optional[FHIRString]

    """ Canonical identifier for this evidence, represented as a URI
        (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    identifier: typing.Optional[typing.List["Identifier"]]

    """ Additional identifier for the evidence.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    version: typing.Optional[FHIRString]

    """ Business version of the evidence.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Name for this evidence (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Name for this evidence (human friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    short_title: typing.Optional[FHIRString]

    """ Title for use in informal contexts.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    short_title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_short_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subtitle: typing.Optional[FHIRString]

    """ Subordinate title of the Evidence.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    subtitle__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_subtitle`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the evidence.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    note: typing.Optional[typing.List["Annotation"]]

    """ Used for footnotes or explanatory notes.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for evidence (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    copyright: typing.Optional[FHIRString]

    """ Use and/or publishing restrictions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    copyright__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_copyright`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    approval_date: typing.Optional[FHIRDate]

    """ When the evidence was approved by publisher.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    approval_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_approval_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    last_review_date: typing.Optional[FHIRDate]

    """ When the evidence was last reviewed.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    last_review_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_last_review_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    effective_period: typing.Optional["Period"]

    """ When the evidence is expected to be used.
    Type `Period` (represented as `dict` in JSON).
    """

    topic: typing.Optional[typing.List["CodeableConcept"]]

    """ The category of the Evidence, such as Education, Treatment,
        Assessment, etc..
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    author: typing.Optional[typing.List["ContactDetail"]]

    """ Who authored the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    editor: typing.Optional[typing.List["ContactDetail"]]

    """ Who edited the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    reviewer: typing.Optional[typing.List["ContactDetail"]]

    """ Who reviewed the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    endorser: typing.Optional[typing.List["ContactDetail"]]

    """ Who endorsed the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    related_artifact: typing.Optional[typing.List["RelatedArtifact"]]

    """ Additional documentation, citations, etc..
    List of `RelatedArtifact` items (represented as `dict` in JSON).
    """

    exposure_background: "Reference"

    """ What population?.
    Type `Reference` (represented as `dict` in JSON).
    """

    exposure_variant: typing.Optional[typing.List["Reference"]]

    """ What exposure?.
    List of `Reference` items (represented as `dict` in JSON).
    """

    outcome: typing.Optional[typing.List["Reference"]]

    """ What outcome?.
    List of `Reference` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_short_title = get_primitive_field_root_validator("short_title")
    
    _validate_primitive_subtitle = get_primitive_field_root_validator("subtitle")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_copyright = get_primitive_field_root_validator("copyright")
    
    _validate_primitive_approval_date = get_primitive_field_root_validator("approval_date")
    
    _validate_primitive_last_review_date = get_primitive_field_root_validator("last_review_date")
    


class EvidenceVariable(DomainResource):
    """ A population, intervention, or exposure definition.

    The EvidenceVariable resource describes a "PICO" element that knowledge
    (evidence, assertion, recommendation) is about.
    """
    resource_type: typing.Literal["EvidenceVariable"] = "EvidenceVariable"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/EvidenceVariable",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: typing.Optional[FHIRString]

    """ Canonical identifier for this evidence variable, represented as a
        URI (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    identifier: typing.Optional[typing.List["Identifier"]]

    """ Additional identifier for the evidence variable.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    version: typing.Optional[FHIRString]

    """ Business version of the evidence variable.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Name for this evidence variable (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Name for this evidence variable (human friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    short_title: typing.Optional[FHIRString]

    """ Title for use in informal contexts.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    short_title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_short_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subtitle: typing.Optional[FHIRString]

    """ Subordinate title of the EvidenceVariable.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    subtitle__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_subtitle`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the evidence variable.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    note: typing.Optional[typing.List["Annotation"]]

    """ Used for footnotes or explanatory notes.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for evidence variable (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    copyright: typing.Optional[FHIRString]

    """ Use and/or publishing restrictions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    copyright__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_copyright`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    approval_date: typing.Optional[FHIRDate]

    """ When the evidence variable was approved by publisher.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    approval_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_approval_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    last_review_date: typing.Optional[FHIRDate]

    """ When the evidence variable was last reviewed.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    last_review_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_last_review_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    effective_period: typing.Optional["Period"]

    """ When the evidence variable is expected to be used.
    Type `Period` (represented as `dict` in JSON).
    """

    topic: typing.Optional[typing.List["CodeableConcept"]]

    """ The category of the EvidenceVariable, such as Education, Treatment,
        Assessment, etc..
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    author: typing.Optional[typing.List["ContactDetail"]]

    """ Who authored the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    editor: typing.Optional[typing.List["ContactDetail"]]

    """ Who edited the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    reviewer: typing.Optional[typing.List["ContactDetail"]]

    """ Who reviewed the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    endorser: typing.Optional[typing.List["ContactDetail"]]

    """ Who endorsed the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    related_artifact: typing.Optional[typing.List["RelatedArtifact"]]

    """ Additional documentation, citations, etc..
    List of `RelatedArtifact` items (represented as `dict` in JSON).
    """

            
    
    
    type: typing.Optional["EvidenceVariableType"]

    """ dichotomous | continuous | descriptive.
    Type `EvidenceVariableType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    characteristic: typing.List["EvidenceVariableCharacteristic"]

    """ What defines the members of the evidence element.
    List of `EvidenceVariableCharacteristic` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in EvidenceVariableType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_short_title = get_primitive_field_root_validator("short_title")
    
    _validate_primitive_subtitle = get_primitive_field_root_validator("subtitle")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_copyright = get_primitive_field_root_validator("copyright")
    
    _validate_primitive_approval_date = get_primitive_field_root_validator("approval_date")
    
    _validate_primitive_last_review_date = get_primitive_field_root_validator("last_review_date")
    
    _validate_primitive_type = get_primitive_field_root_validator("type")
    


class ExampleScenario(DomainResource):
    """ Example of workflow instance.
    """
    resource_type: typing.Literal["ExampleScenario"] = "ExampleScenario"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExampleScenario",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: typing.Optional[FHIRString]

    """ Canonical identifier for this example scenario, represented as a
        URI (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    identifier: typing.Optional[typing.List["Identifier"]]

    """ Additional identifier for the example scenario.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    version: typing.Optional[FHIRString]

    """ Business version of the example scenario.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Name for this example scenario (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    experimental: typing.Optional[bool]

    """ For testing purposes, not real usage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    experimental__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_experimental`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for example scenario (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    copyright: typing.Optional[FHIRString]

    """ Use and/or publishing restrictions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    copyright__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_copyright`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    purpose: typing.Optional[FHIRString]

    """ The purpose of the example, e.g. to illustrate a scenario.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    purpose__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_purpose`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    actor: typing.Optional[typing.List["ExampleScenarioActor"]]

    """ Actor participating in the resource.
    List of `ExampleScenarioActor` items (represented as `dict` in JSON).
    """

    instance: typing.Optional[typing.List["ExampleScenarioInstance"]]

    """ Each resource and each version that is present in the workflow.
    List of `ExampleScenarioInstance` items (represented as `dict` in JSON).
    """

    process: typing.Optional[typing.List["ExampleScenarioProcess"]]

    """ Each major process - a group of operations.
    List of `ExampleScenarioProcess` items (represented as `dict` in JSON).
    """

    workflow: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Another nested workflow.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    workflow__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_workflow`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_experimental = get_primitive_field_root_validator("experimental")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_copyright = get_primitive_field_root_validator("copyright")
    
    _validate_primitive_purpose = get_primitive_field_root_validator("purpose")
    
    _validate_primitive_workflow = get_primitive_field_root_validator("workflow")
    


class ExplanationOfBenefit(DomainResource):
    """ Explanation of Benefit resource.

    This resource provides: the claim details; adjudication details from the
    processing of a Claim; and optionally account balance information, for
    informing the subscriber of the benefits provided.
    """
    resource_type: typing.Literal["ExplanationOfBenefit"] = "ExplanationOfBenefit"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business Identifier for the resource.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "ExplanationOfBenefitStatus"

    """ active | cancelled | draft | entered-in-error.
    Type `ExplanationOfBenefitStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: "CodeableConcept"

    """ Category or discipline.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    sub_type: typing.Optional["CodeableConcept"]

    """ More granular claim type.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

            
    
    
    use: "Use"

    """ claim | preauthorization | predetermination.
    Type `Use` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    use__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_use`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    patient: "Reference"

    """ The recipient of the products and services.
    Type `Reference` (represented as `dict` in JSON).
    """

    billable_period: typing.Optional["Period"]

    """ Relevant time frame for the claim.
    Type `Period` (represented as `dict` in JSON).
    """

    created: FHIRDateTime

    """ Response creation date.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    created__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_created`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    enterer: typing.Optional["Reference"]

    """ Author of the claim.
    Type `Reference` (represented as `dict` in JSON).
    """

    insurer: "Reference"

    """ Party responsible for reimbursement.
    Type `Reference` (represented as `dict` in JSON).
    """

    provider: "Reference"

    """ Party responsible for the claim.
    Type `Reference` (represented as `dict` in JSON).
    """

    priority: typing.Optional["CodeableConcept"]

    """ Desired processing urgency.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    funds_reserve_requested: typing.Optional["CodeableConcept"]

    """ For whom to reserve funds.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    funds_reserve: typing.Optional["CodeableConcept"]

    """ Funds reserved status.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    related: typing.Optional[typing.List["ExplanationOfBenefitRelated"]]

    """ Prior or corollary claims.
    List of `ExplanationOfBenefitRelated` items (represented as `dict` in JSON).
    """

    prescription: typing.Optional["Reference"]

    """ Prescription authorizing services or products.
    Type `Reference` (represented as `dict` in JSON).
    """

    original_prescription: typing.Optional["Reference"]

    """ Original prescription if superceded by fulfiller.
    Type `Reference` (represented as `dict` in JSON).
    """

    payee: typing.Optional["ExplanationOfBenefitPayee"]

    """ Recipient of benefits payable.
    Type `ExplanationOfBenefitPayee` (represented as `dict` in JSON).
    """

    referral: typing.Optional["Reference"]

    """ Treatment Referral.
    Type `Reference` (represented as `dict` in JSON).
    """

    facility: typing.Optional["Reference"]

    """ Servicing Facility.
    Type `Reference` (represented as `dict` in JSON).
    """

    claim: typing.Optional["Reference"]

    """ Claim reference.
    Type `Reference` (represented as `dict` in JSON).
    """

    claim_response: typing.Optional["Reference"]

    """ Claim response reference.
    Type `Reference` (represented as `dict` in JSON).
    """

            
    
    
    outcome: "ClaimProcessingCodes"

    """ queued | complete | error | partial.
    Type `ClaimProcessingCodes` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    outcome__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_outcome`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    disposition: typing.Optional[FHIRString]

    """ Disposition Message.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    disposition__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_disposition`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    pre_auth_ref: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Preauthorization reference.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    pre_auth_ref__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pre_auth_ref`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    pre_auth_ref_period: typing.Optional[typing.List["Period"]]

    """ Preauthorization in-effect period.
    List of `Period` items (represented as `dict` in JSON).
    """

    care_team: typing.Optional[typing.List["ExplanationOfBenefitCareTeam"]]

    """ Care Team members.
    List of `ExplanationOfBenefitCareTeam` items (represented as `dict` in JSON).
    """

    supporting_info: typing.Optional[typing.List["ExplanationOfBenefitSupportingInfo"]]

    """ Supporting information.
    List of `ExplanationOfBenefitSupportingInfo` items (represented as `dict` in JSON).
    """

    diagnosis: typing.Optional[typing.List["ExplanationOfBenefitDiagnosis"]]

    """ Pertinent diagnosis information.
    List of `ExplanationOfBenefitDiagnosis` items (represented as `dict` in JSON).
    """

    procedure: typing.Optional[typing.List["ExplanationOfBenefitProcedure"]]

    """ Clinical procedures performed.
    List of `ExplanationOfBenefitProcedure` items (represented as `dict` in JSON).
    """

    precedence: typing.Optional[FHIRPositiveInt]

    """ Precedence (primary, secondary, etc.).
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    precedence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_precedence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    insurance: typing.List["ExplanationOfBenefitInsurance"]

    """ Patient insurance information.
    List of `ExplanationOfBenefitInsurance` items (represented as `dict` in JSON).
    """

    accident: typing.Optional["ExplanationOfBenefitAccident"]

    """ Details of the event.
    Type `ExplanationOfBenefitAccident` (represented as `dict` in JSON).
    """

    item: typing.Optional[typing.List["ExplanationOfBenefitItem"]]

    """ Product or service provided.
    List of `ExplanationOfBenefitItem` items (represented as `dict` in JSON).
    """

    add_item: typing.Optional[typing.List["ExplanationOfBenefitAddItem"]]

    """ Insurer added line items.
    List of `ExplanationOfBenefitAddItem` items (represented as `dict` in JSON).
    """

    adjudication: typing.Optional[typing.List["ExplanationOfBenefitItemAdjudication"]]

    """ Header-level adjudication.
    List of `ExplanationOfBenefitItemAdjudication` items (represented as `dict` in JSON).
    """

    total: typing.Optional[typing.List["ExplanationOfBenefitTotal"]]

    """ Adjudication totals.
    List of `ExplanationOfBenefitTotal` items (represented as `dict` in JSON).
    """

    payment: typing.Optional["ExplanationOfBenefitPayment"]

    """ Payment Details.
    Type `ExplanationOfBenefitPayment` (represented as `dict` in JSON).
    """

    form_code: typing.Optional["CodeableConcept"]

    """ Printed form identifier.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    form: typing.Optional["Attachment"]

    """ Printed reference or actual form.
    Type `Attachment` (represented as `dict` in JSON).
    """

    process_note: typing.Optional[typing.List["ExplanationOfBenefitProcessNote"]]

    """ Note concerning adjudication.
    List of `ExplanationOfBenefitProcessNote` items (represented as `dict` in JSON).
    """

    benefit_period: typing.Optional["Period"]

    """ When the benefits are applicable.
    Type `Period` (represented as `dict` in JSON).
    """

    benefit_balance: typing.Optional[typing.List["ExplanationOfBenefitBenefitBalance"]]

    """ Balance by Benefit Category.
    List of `ExplanationOfBenefitBenefitBalance` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in ExplanationOfBenefitStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["use"]["enum"]
            enums.clear()
            for item in Use:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["outcome"]["enum"]
            enums.clear()
            for item in ClaimProcessingCodes:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_use = get_primitive_field_root_validator("use")
    
    _validate_primitive_created = get_primitive_field_root_validator("created")
    
    _validate_primitive_outcome = get_primitive_field_root_validator("outcome")
    
    _validate_primitive_disposition = get_primitive_field_root_validator("disposition")
    
    _validate_primitive_pre_auth_ref = get_primitive_field_root_validator("pre_auth_ref")
    
    _validate_primitive_precedence = get_primitive_field_root_validator("precedence")
    


class FamilyMemberHistory(DomainResource):
    """ Information about patient's relatives, relevant for patient.

    Significant health conditions for a person related to the patient relevant
    in the context of care for the patient.
    """
    resource_type: typing.Literal["FamilyMemberHistory"] = "FamilyMemberHistory"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/FamilyMemberHistory",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ External Id(s) for this record.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    instantiates_canonical: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Instantiates FHIR protocol or definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates_canonical__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    instantiates_uri: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Instantiates external protocol or definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates_uri__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "FamilyHistoryStatus"

    """ partial | completed | entered-in-error | health-unknown.
    Type `FamilyHistoryStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    data_absent_reason: typing.Optional["CodeableConcept"]

    """ subject-unknown | withheld | unable-to-obtain | deferred.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    patient: "Reference"

    """ Patient history is about.
    Type `Reference` (represented as `dict` in JSON).
    """

    date: typing.Optional[FHIRDateTime]

    """ When history was recorded or last updated.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ The family member described.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    relationship: "CodeableConcept"

    """ Relationship to the subject.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    sex: typing.Optional["CodeableConcept"]

    """ male | female | other | unknown.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    born_period: typing.Optional["Period"]

    """ (approximate) date of birth.
    Type `Period` (represented as `dict` in JSON).
    """

    born_date: typing.Optional[FHIRDate]

    """ (approximate) date of birth.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    born_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_born_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    born_string: typing.Optional[FHIRString]

    """ (approximate) date of birth.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    born_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_born_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    age_age: typing.Optional["Age"]

    """ (approximate) age.
    Type `Age` (represented as `dict` in JSON).
    """

    age_range: typing.Optional["Range"]

    """ (approximate) age.
    Type `Range` (represented as `dict` in JSON).
    """

    age_string: typing.Optional[FHIRString]

    """ (approximate) age.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    age_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_age_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    estimated_age: typing.Optional[bool]

    """ Age is estimated?.
    Type `bool`. Is a JSON Primitive element.
    """
    

    estimated_age__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_estimated_age`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    deceased_boolean: typing.Optional[bool]

    """ Dead? How old/when?.
    Type `bool`. Is a JSON Primitive element.
    """
    

    deceased_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_deceased_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    deceased_age: typing.Optional["Age"]

    """ Dead? How old/when?.
    Type `Age` (represented as `dict` in JSON).
    """

    deceased_range: typing.Optional["Range"]

    """ Dead? How old/when?.
    Type `Range` (represented as `dict` in JSON).
    """

    deceased_date: typing.Optional[FHIRDate]

    """ Dead? How old/when?.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    deceased_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_deceased_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    deceased_string: typing.Optional[FHIRString]

    """ Dead? How old/when?.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    deceased_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_deceased_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    reason_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Why was family member history performed?.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    reason_reference: typing.Optional[typing.List["Reference"]]

    """ Why was family member history performed?.
    List of `Reference` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ General note about related person.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    condition: typing.Optional[typing.List["FamilyMemberHistoryCondition"]]

    """ Condition that the related person had.
    List of `FamilyMemberHistoryCondition` items (represented as `dict` in JSON).
    """



#   {'path': 'FamilyMemberHistory.born[x]', 'choice_of_type': 'born', 'orig_name': 'bornPeriod', 'name': 'bornPeriod', 'parent_name': 'FamilyMemberHistory', 'class_name': 'Period', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': '(approximate) date of birth', 'formal': 'The actual or approximate date of birth of the relative.', 'representation': None}
    _born_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['born_period', 'born_date', 'born_string']), True))

#   {'path': 'FamilyMemberHistory.age[x]', 'choice_of_type': 'age', 'orig_name': 'ageAge', 'name': 'ageAge', 'parent_name': 'FamilyMemberHistory', 'class_name': 'Age', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': '(approximate) age', 'formal': 'The age of the relative at the time the family member history is recorded.', 'representation': None}
    _age_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['age_age', 'age_range', 'age_string']), True))

#   {'path': 'FamilyMemberHistory.deceased[x]', 'choice_of_type': 'deceased', 'orig_name': 'deceasedBoolean', 'name': 'deceasedBoolean', 'parent_name': 'FamilyMemberHistory', 'class_name': 'bool', 'enum': None, 'module_name': None, 'json_class': 'bool', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Dead? How old/when?', 'formal': 'Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.', 'representation': None}
    _deceased_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['deceased_boolean', 'deceased_age', 'deceased_range', 'deceased_date', 'deceased_string']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in FamilyHistoryStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_instantiates_canonical = get_primitive_field_root_validator("instantiates_canonical")
    
    _validate_primitive_instantiates_uri = get_primitive_field_root_validator("instantiates_uri")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_born_date = get_primitive_field_root_validator("born_date")
    
    _validate_primitive_born_string = get_primitive_field_root_validator("born_string")
    
    _validate_primitive_age_string = get_primitive_field_root_validator("age_string")
    
    _validate_primitive_estimated_age = get_primitive_field_root_validator("estimated_age")
    
    _validate_primitive_deceased_boolean = get_primitive_field_root_validator("deceased_boolean")
    
    _validate_primitive_deceased_date = get_primitive_field_root_validator("deceased_date")
    
    _validate_primitive_deceased_string = get_primitive_field_root_validator("deceased_string")
    


class Flag(DomainResource):
    """ Key information to flag to healthcare providers.

    Prospective warnings of potential issues when providing care to the
    patient.
    """
    resource_type: typing.Literal["Flag"] = "Flag"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Flag",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "FlagStatus"

    """ active | inactive | entered-in-error.
    Type `FlagStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    category: typing.Optional[typing.List["CodeableConcept"]]

    """ Clinical, administrative, etc..
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    code: "CodeableConcept"

    """ Coded or textual message to display to user.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject: "Reference"

    """ Who/What is flag about?.
    Type `Reference` (represented as `dict` in JSON).
    """

    period: typing.Optional["Period"]

    """ Time period when flag is active.
    Type `Period` (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Alert relevant during encounter.
    Type `Reference` (represented as `dict` in JSON).
    """

    author: typing.Optional["Reference"]

    """ Flag creator.
    Type `Reference` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in FlagStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    


class Goal(DomainResource):
    """ Describes the intended objective(s) for a patient, group or organization.

    Describes the intended objective(s) for a patient, group or organization
    care, for example, weight loss, restoring an activity of daily living,
    obtaining herd immunity via immunization, meeting a process improvement
    objective, etc.
    """
    resource_type: typing.Literal["Goal"] = "Goal"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Goal",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ External Ids for this goal.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    lifecycle_status: "GoalLifecycleStatus"

    """ proposed | planned | accepted | active | on-hold | completed |
        cancelled | entered-in-error | rejected.
    Type `GoalLifecycleStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    lifecycle_status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_lifecycle_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    achievement_status: typing.Optional["CodeableConcept"]

    """ in-progress | improving | worsening | no-change | achieved |
        sustaining | not-achieved | no-progress | not-attainable.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    category: typing.Optional[typing.List["CodeableConcept"]]

    """ E.g. Treatment, dietary, behavioral, etc..
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    priority: typing.Optional["CodeableConcept"]

    """ high-priority | medium-priority | low-priority.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    description: "CodeableConcept"

    """ Code or text describing goal.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject: "Reference"

    """ Who this goal is intended for.
    Type `Reference` (represented as `dict` in JSON).
    """

    start_date: typing.Optional[FHIRDate]

    """ When goal pursuit begins.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    start_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_start_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    start_codeable_concept: typing.Optional["CodeableConcept"]

    """ When goal pursuit begins.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    target: typing.Optional[typing.List["GoalTarget"]]

    """ Target outcome for the goal.
    List of `GoalTarget` items (represented as `dict` in JSON).
    """

    status_date: typing.Optional[FHIRDate]

    """ When goal status took effect.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    status_reason: typing.Optional[FHIRString]

    """ Reason for current status.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status_reason__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status_reason`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    expressed_by: typing.Optional["Reference"]

    """ Who's responsible for creating Goal?.
    Type `Reference` (represented as `dict` in JSON).
    """

    addresses: typing.Optional[typing.List["Reference"]]

    """ Issues addressed by this goal.
    List of `Reference` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Comments about the goal.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    outcome_code: typing.Optional[typing.List["CodeableConcept"]]

    """ What result was achieved regarding the goal?.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    outcome_reference: typing.Optional[typing.List["Reference"]]

    """ Observation that resulted from goal.
    List of `Reference` items (represented as `dict` in JSON).
    """



#   {'path': 'Goal.start[x]', 'choice_of_type': 'start', 'orig_name': 'startDate', 'name': 'startDate', 'parent_name': 'Goal', 'class_name': 'FHIRDate', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'When goal pursuit begins', 'formal': 'The date or event after which the goal should begin being pursued.', 'representation': None}
    _start_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['start_date', 'start_codeable_concept']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["lifecycleStatus"]["enum"]
            enums.clear()
            for item in GoalLifecycleStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_lifecycle_status = get_primitive_field_root_validator("lifecycle_status")
    
    _validate_primitive_start_date = get_primitive_field_root_validator("start_date")
    
    _validate_primitive_status_date = get_primitive_field_root_validator("status_date")
    
    _validate_primitive_status_reason = get_primitive_field_root_validator("status_reason")
    


class GraphDefinition(DomainResource):
    """ Definition of a graph of resources.

    A formal computable definition of a graph of resources - that is, a
    coherent set of resources that form a graph by following references. The
    Graph Definition resource defines a set and makes rules about the set.
    """
    resource_type: typing.Literal["GraphDefinition"] = "GraphDefinition"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/GraphDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: typing.Optional[FHIRString]

    """ Canonical identifier for this graph definition, represented as a
        URI (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    version: typing.Optional[FHIRString]

    """ Business version of the graph definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: FHIRRequiredString

    """ Name for this graph definition (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    experimental: typing.Optional[bool]

    """ For testing purposes, not real usage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    experimental__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_experimental`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the graph definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for graph definition (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    purpose: typing.Optional[FHIRString]

    """ Why this graph definition is defined.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    purpose__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_purpose`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    start: "ResourceType"

    """ Type of resource at which the graph starts.
    Type `ResourceType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    start__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_start`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    profile: typing.Optional[FHIRString]

    """ Profile on base resource.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    profile__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_profile`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    link: typing.Optional[typing.List["GraphDefinitionLink"]]

    """ Links this graph makes rules about.
    List of `GraphDefinitionLink` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["start"]["enum"]
            enums.clear()
            for item in ResourceType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_experimental = get_primitive_field_root_validator("experimental")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_purpose = get_primitive_field_root_validator("purpose")
    
    _validate_primitive_start = get_primitive_field_root_validator("start")
    
    _validate_primitive_profile = get_primitive_field_root_validator("profile")
    


class Group(DomainResource):
    """ Group of multiple entities.

    Represents a defined collection of entities that may be discussed or acted
    upon collectively but which are not expected to act collectively, and are
    not formally or legally recognized; i.e. a collection of entities that
    isn't an Organization.
    """
    resource_type: typing.Literal["Group"] = "Group"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Group",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Unique id.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    active: typing.Optional[bool]

    """ Whether this group's record is in active use.
    Type `bool`. Is a JSON Primitive element.
    """
    

    active__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_active`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    type: "GroupType"

    """ person | animal | practitioner | device | medication | substance.
    Type `GroupType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    actual: bool

    """ Descriptive or actual.
    Type `bool`. Is a JSON Primitive element.
    """
    

    actual__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_actual`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code: typing.Optional["CodeableConcept"]

    """ Kind of Group members.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    name: typing.Optional[FHIRString]

    """ Label for Group.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    quantity: typing.Optional[FHIRUnsignedInt]

    """ Number of members.
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    quantity__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_quantity`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    managing_entity: typing.Optional["Reference"]

    """ Entity that is the custodian of the Group's definition.
    Type `Reference` (represented as `dict` in JSON).
    """

    characteristic: typing.Optional[typing.List["GroupCharacteristic"]]

    """ Include / Exclude group members by Trait.
    List of `GroupCharacteristic` items (represented as `dict` in JSON).
    """

    member: typing.Optional[typing.List["GroupMember"]]

    """ Who or what is in group.
    List of `GroupMember` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in GroupType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_active = get_primitive_field_root_validator("active")
    
    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_actual = get_primitive_field_root_validator("actual")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_quantity = get_primitive_field_root_validator("quantity")
    


class GuidanceResponse(DomainResource):
    """ The formal response to a guidance request.

    A guidance response is the formal response to a guidance request, including
    any output parameters returned by the evaluation, as well as the
    description of any proposed actions to be taken.
    """
    resource_type: typing.Literal["GuidanceResponse"] = "GuidanceResponse"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/GuidanceResponse",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    request_identifier: typing.Optional["Identifier"]

    """ The identifier of the request associated with this response, if any.
    Type `Identifier` (represented as `dict` in JSON).
    """

    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    module_uri: typing.Optional[FHIRString]

    """ What guidance was requested.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    module_uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_module_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    module_canonical: typing.Optional[FHIRString]

    """ What guidance was requested.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    module_canonical__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_module_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    module_codeable_concept: typing.Optional["CodeableConcept"]

    """ What guidance was requested.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

            
    
    
    status: "GuidanceResponseStatus"

    """ success | data-requested | data-required | in-progress | failure |
        entered-in-error.
    Type `GuidanceResponseStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subject: typing.Optional["Reference"]

    """ Patient the request was performed for.
    Type `Reference` (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Encounter during which the response was returned.
    Type `Reference` (represented as `dict` in JSON).
    """

    occurrence_date_time: typing.Optional[FHIRDateTime]

    """ When the guidance response was processed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    occurrence_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_occurrence_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    performer: typing.Optional["Reference"]

    """ Device returning the guidance.
    Type `Reference` (represented as `dict` in JSON).
    """

    reason_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Why guidance is needed.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    reason_reference: typing.Optional[typing.List["Reference"]]

    """ Why guidance is needed.
    List of `Reference` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Additional notes about the response.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    evaluation_message: typing.Optional[typing.List["Reference"]]

    """ Messages resulting from the evaluation of the artifact or artifacts.
    List of `Reference` items (represented as `dict` in JSON).
    """

    output_parameters: typing.Optional["Reference"]

    """ The output parameters of the evaluation, if any.
    Type `Reference` (represented as `dict` in JSON).
    """

    result: typing.Optional["Reference"]

    """ Proposed actions, if any.
    Type `Reference` (represented as `dict` in JSON).
    """

    data_requirement: typing.Optional[typing.List["DataRequirement"]]

    """ Additional required data.
    List of `DataRequirement` items (represented as `dict` in JSON).
    """



#   {'path': 'GuidanceResponse.module[x]', 'choice_of_type': 'module', 'orig_name': 'moduleUri', 'name': 'moduleUri', 'parent_name': 'GuidanceResponse', 'class_name': 'FHIRString', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'What guidance was requested', 'formal': 'An identifier, CodeableConcept or canonical reference to the guidance that was requested.', 'representation': None}
    _module_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['module_uri', 'module_canonical', 'module_codeable_concept']), False))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in GuidanceResponseStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_module_uri = get_primitive_field_root_validator("module_uri")
    
    _validate_primitive_module_canonical = get_primitive_field_root_validator("module_canonical")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_occurrence_date_time = get_primitive_field_root_validator("occurrence_date_time")
    


class HealthcareService(DomainResource):
    """ The details of a healthcare service available at a location.
    """
    resource_type: typing.Literal["HealthcareService"] = "HealthcareService"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/HealthcareService",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ External identifiers for this item.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    active: typing.Optional[bool]

    """ Whether this HealthcareService record is in active use.
    Type `bool`. Is a JSON Primitive element.
    """
    

    active__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_active`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    provided_by: typing.Optional["Reference"]

    """ Organization that provides this service.
    Type `Reference` (represented as `dict` in JSON).
    """

    category: typing.Optional[typing.List["CodeableConcept"]]

    """ Broad category of service being performed or delivered.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    type: typing.Optional[typing.List["CodeableConcept"]]

    """ Type of service that may be delivered or performed.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    specialty: typing.Optional[typing.List["CodeableConcept"]]

    """ Specialties handled by the HealthcareService.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    location: typing.Optional[typing.List["Reference"]]

    """ Location(s) where service may be provided.
    List of `Reference` items (represented as `dict` in JSON).
    """

    name: typing.Optional[FHIRString]

    """ Description of service as presented to a consumer while searching.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    comment: typing.Optional[FHIRString]

    """ Additional description and/or any specific issues not covered
        elsewhere.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    comment__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_comment`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    extra_details: typing.Optional[FHIRString]

    """ Extra details about the service that can't be placed in the other
        fields.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    extra_details__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_extra_details`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    photo: typing.Optional["Attachment"]

    """ Facilitates quick identification of the service.
    Type `Attachment` (represented as `dict` in JSON).
    """

    telecom: typing.Optional[typing.List["ContactPoint"]]

    """ Contacts related to the healthcare service.
    List of `ContactPoint` items (represented as `dict` in JSON).
    """

    coverage_area: typing.Optional[typing.List["Reference"]]

    """ Location(s) service is intended for/available to.
    List of `Reference` items (represented as `dict` in JSON).
    """

    service_provision_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Conditions under which service is available/offered.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    eligibility: typing.Optional[typing.List["HealthcareServiceEligibility"]]

    """ Specific eligibility requirements required to use the service.
    List of `HealthcareServiceEligibility` items (represented as `dict` in JSON).
    """

    program: typing.Optional[typing.List["CodeableConcept"]]

    """ Programs that this service is applicable to.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    characteristic: typing.Optional[typing.List["CodeableConcept"]]

    """ Collection of characteristics (attributes).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    communication: typing.Optional[typing.List["CodeableConcept"]]

    """ The language that this service is offered in.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    referral_method: typing.Optional[typing.List["CodeableConcept"]]

    """ Ways that the service accepts referrals.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    appointment_required: typing.Optional[bool]

    """ If an appointment is required for access to this service.
    Type `bool`. Is a JSON Primitive element.
    """
    

    appointment_required__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_appointment_required`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    available_time: typing.Optional[typing.List["HealthcareServiceAvailableTime"]]

    """ Times the Service Site is available.
    List of `HealthcareServiceAvailableTime` items (represented as `dict` in JSON).
    """

    not_available: typing.Optional[typing.List["HealthcareServiceNotAvailable"]]

    """ Not available during this time due to provided reason.
    List of `HealthcareServiceNotAvailable` items (represented as `dict` in JSON).
    """

    availability_exceptions: typing.Optional[FHIRString]

    """ Description of availability exceptions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    availability_exceptions__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_availability_exceptions`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    endpoint: typing.Optional[typing.List["Reference"]]

    """ Technical endpoints providing access to electronic services
        operated for the healthcare service.
    List of `Reference` items (represented as `dict` in JSON).
    """



    _validate_primitive_active = get_primitive_field_root_validator("active")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_comment = get_primitive_field_root_validator("comment")
    
    _validate_primitive_extra_details = get_primitive_field_root_validator("extra_details")
    
    _validate_primitive_appointment_required = get_primitive_field_root_validator("appointment_required")
    
    _validate_primitive_availability_exceptions = get_primitive_field_root_validator("availability_exceptions")
    


class ImagingStudy(DomainResource):
    """ A set of images produced in single study (one or more series of references
    images).

    Representation of the content produced in a DICOM imaging study. A study
    comprises a set of series, each of which includes a set of Service-Object
    Pair Instances (SOP Instances - images or other data) acquired or produced
    in a common context.  A series is of only one modality (e.g. X-ray, CT, MR,
    ultrasound), but a study may have multiple series of different modalities.
    """
    resource_type: typing.Literal["ImagingStudy"] = "ImagingStudy"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ImagingStudy",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Identifiers for the whole study.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "ImagingStudyStatus"

    """ registered | available | cancelled | entered-in-error | unknown.
    Type `ImagingStudyStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    modality: typing.Optional[typing.List["Coding"]]

    """ All series modality if actual acquisition modalities.
    List of `Coding` items (represented as `dict` in JSON).
    """

    subject: "Reference"

    """ Who or what is the subject of the study.
    Type `Reference` (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Encounter with which this imaging study is associated.
    Type `Reference` (represented as `dict` in JSON).
    """

    started: typing.Optional[FHIRDateTime]

    """ When the study was started.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    started__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_started`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    based_on: typing.Optional[typing.List["Reference"]]

    """ Request fulfilled.
    List of `Reference` items (represented as `dict` in JSON).
    """

    referrer: typing.Optional["Reference"]

    """ Referring physician.
    Type `Reference` (represented as `dict` in JSON).
    """

    interpreter: typing.Optional[typing.List["Reference"]]

    """ Who interpreted images.
    List of `Reference` items (represented as `dict` in JSON).
    """

    endpoint: typing.Optional[typing.List["Reference"]]

    """ Study access endpoint.
    List of `Reference` items (represented as `dict` in JSON).
    """

    number_of_series: typing.Optional[FHIRUnsignedInt]

    """ Number of Study Related Series.
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    number_of_series__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_number_of_series`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    number_of_instances: typing.Optional[FHIRUnsignedInt]

    """ Number of Study Related Instances.
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    number_of_instances__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_number_of_instances`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    procedure_reference: typing.Optional["Reference"]

    """ The performed Procedure reference.
    Type `Reference` (represented as `dict` in JSON).
    """

    procedure_code: typing.Optional[typing.List["CodeableConcept"]]

    """ The performed procedure code.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    location: typing.Optional["Reference"]

    """ Where ImagingStudy occurred.
    Type `Reference` (represented as `dict` in JSON).
    """

    reason_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Why the study was requested.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    reason_reference: typing.Optional[typing.List["Reference"]]

    """ Why was study performed.
    List of `Reference` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ User-defined comments.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Institution-generated description.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    series: typing.Optional[typing.List["ImagingStudySeries"]]

    """ Each study has one or more series of instances.
    List of `ImagingStudySeries` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in ImagingStudyStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_started = get_primitive_field_root_validator("started")
    
    _validate_primitive_number_of_series = get_primitive_field_root_validator("number_of_series")
    
    _validate_primitive_number_of_instances = get_primitive_field_root_validator("number_of_instances")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class Immunization(DomainResource):
    """ Immunization event information.

    Describes the event of a patient being administered a vaccine or a record
    of an immunization as reported by a patient, a clinician or another party.
    """
    resource_type: typing.Literal["Immunization"] = "Immunization"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Immunization",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "EventStatus"

    """ completed | entered-in-error | not-done.
    Type `EventStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    status_reason: typing.Optional["CodeableConcept"]

    """ Reason not done.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    vaccine_code: "CodeableConcept"

    """ Vaccine product administered.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    patient: "Reference"

    """ Who was immunized.
    Type `Reference` (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Encounter immunization was part of.
    Type `Reference` (represented as `dict` in JSON).
    """

    occurrence_date_time: typing.Optional[FHIRDateTime]

    """ Vaccine administration date.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    occurrence_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_occurrence_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    occurrence_string: typing.Optional[FHIRString]

    """ Vaccine administration date.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    occurrence_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_occurrence_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    recorded: typing.Optional[FHIRDateTime]

    """ When the immunization was first captured in the subject's record.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    recorded__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_recorded`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    primary_source: typing.Optional[bool]

    """ Indicates context the data was recorded in.
    Type `bool`. Is a JSON Primitive element.
    """
    

    primary_source__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_primary_source`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    report_origin: typing.Optional["CodeableConcept"]

    """ Indicates the source of a secondarily reported record.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    location: typing.Optional["Reference"]

    """ Where immunization occurred.
    Type `Reference` (represented as `dict` in JSON).
    """

    manufacturer: typing.Optional["Reference"]

    """ Vaccine manufacturer.
    Type `Reference` (represented as `dict` in JSON).
    """

    lot_number: typing.Optional[FHIRString]

    """ Vaccine lot number.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    lot_number__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_lot_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    expiration_date: typing.Optional[FHIRDate]

    """ Vaccine expiration date.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    expiration_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_expiration_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    site: typing.Optional["CodeableConcept"]

    """ Body site vaccine  was administered.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    route: typing.Optional["CodeableConcept"]

    """ How vaccine entered body.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    dose_quantity: typing.Optional["Quantity"]

    """ Amount of vaccine administered.
    Type `Quantity` (represented as `dict` in JSON).
    """

    performer: typing.Optional[typing.List["ImmunizationPerformer"]]

    """ Who performed event.
    List of `ImmunizationPerformer` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Additional immunization notes.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    reason_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Why immunization occurred.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    reason_reference: typing.Optional[typing.List["Reference"]]

    """ Why immunization occurred.
    List of `Reference` items (represented as `dict` in JSON).
    """

    is_subpotent: typing.Optional[bool]

    """ Dose potency.
    Type `bool`. Is a JSON Primitive element.
    """
    

    is_subpotent__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_is_subpotent`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subpotent_reason: typing.Optional[typing.List["CodeableConcept"]]

    """ Reason for being subpotent.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    education: typing.Optional[typing.List["ImmunizationEducation"]]

    """ Educational material presented to patient.
    List of `ImmunizationEducation` items (represented as `dict` in JSON).
    """

    program_eligibility: typing.Optional[typing.List["CodeableConcept"]]

    """ Patient eligibility for a vaccination program.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    funding_source: typing.Optional["CodeableConcept"]

    """ Funding source for the vaccine.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    reaction: typing.Optional[typing.List["ImmunizationReaction"]]

    """ Details of a reaction that follows immunization.
    List of `ImmunizationReaction` items (represented as `dict` in JSON).
    """

    protocol_applied: typing.Optional[typing.List["ImmunizationProtocolApplied"]]

    """ Protocol followed by the provider.
    List of `ImmunizationProtocolApplied` items (represented as `dict` in JSON).
    """



#   {'path': 'Immunization.occurrence[x]', 'choice_of_type': 'occurrence', 'orig_name': 'occurrenceDateTime', 'name': 'occurrenceDateTime', 'parent_name': 'Immunization', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Vaccine administration date', 'formal': 'Date vaccine administered or was to be administered.', 'representation': None}
    _occurrence_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['occurrence_date_time', 'occurrence_string']), False))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in EventStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_occurrence_date_time = get_primitive_field_root_validator("occurrence_date_time")
    
    _validate_primitive_occurrence_string = get_primitive_field_root_validator("occurrence_string")
    
    _validate_primitive_recorded = get_primitive_field_root_validator("recorded")
    
    _validate_primitive_primary_source = get_primitive_field_root_validator("primary_source")
    
    _validate_primitive_lot_number = get_primitive_field_root_validator("lot_number")
    
    _validate_primitive_expiration_date = get_primitive_field_root_validator("expiration_date")
    
    _validate_primitive_is_subpotent = get_primitive_field_root_validator("is_subpotent")
    


class ImmunizationEvaluation(DomainResource):
    """ Immunization evaluation information.

    Describes a comparison of an immunization event against published
    recommendations to determine if the administration is "valid" in relation
    to those  recommendations.
    """
    resource_type: typing.Literal["ImmunizationEvaluation"] = "ImmunizationEvaluation"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ImmunizationEvaluation",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "MedicationAdministrationStatusCodes"

    """ completed | entered-in-error.
    Type `MedicationAdministrationStatusCodes` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    patient: "Reference"

    """ Who this evaluation is for.
    Type `Reference` (represented as `dict` in JSON).
    """

    date: typing.Optional[FHIRDateTime]

    """ Date evaluation was performed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    authority: typing.Optional["Reference"]

    """ Who is responsible for publishing the recommendations.
    Type `Reference` (represented as `dict` in JSON).
    """

    target_disease: "CodeableConcept"

    """ Evaluation target disease.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    immunization_event: "Reference"

    """ Immunization being evaluated.
    Type `Reference` (represented as `dict` in JSON).
    """

    dose_status: "CodeableConcept"

    """ Status of the dose relative to published recommendations.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    dose_status_reason: typing.Optional[typing.List["CodeableConcept"]]

    """ Reason for the dose status.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Evaluation notes.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    series: typing.Optional[FHIRString]

    """ Name of vaccine series.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    series__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_series`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    dose_number_positive_int: typing.Optional[FHIRPositiveInt]

    """ Dose number within series.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    dose_number_positive_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_dose_number_positive_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    dose_number_string: typing.Optional[FHIRString]

    """ Dose number within series.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    dose_number_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_dose_number_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    series_doses_positive_int: typing.Optional[FHIRPositiveInt]

    """ Recommended number of doses for immunity.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    series_doses_positive_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_series_doses_positive_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    series_doses_string: typing.Optional[FHIRString]

    """ Recommended number of doses for immunity.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    series_doses_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_series_doses_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'ImmunizationEvaluation.doseNumber[x]', 'choice_of_type': 'doseNumber', 'orig_name': 'doseNumberPositiveInt', 'name': 'doseNumberPositiveInt', 'parent_name': 'ImmunizationEvaluation', 'class_name': 'FHIRPositiveInt', 'enum': None, 'module_name': None, 'json_class': 'int', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Dose number within series', 'formal': 'Nominal position in a series.', 'representation': None}
    _dose_number_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['dose_number_positive_int', 'dose_number_string']), True))

#   {'path': 'ImmunizationEvaluation.seriesDoses[x]', 'choice_of_type': 'seriesDoses', 'orig_name': 'seriesDosesPositiveInt', 'name': 'seriesDosesPositiveInt', 'parent_name': 'ImmunizationEvaluation', 'class_name': 'FHIRPositiveInt', 'enum': None, 'module_name': None, 'json_class': 'int', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Recommended number of doses for immunity', 'formal': 'The recommended number of doses to achieve immunity.', 'representation': None}
    _series_doses_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['series_doses_positive_int', 'series_doses_string']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in MedicationAdministrationStatusCodes:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_series = get_primitive_field_root_validator("series")
    
    _validate_primitive_dose_number_positive_int = get_primitive_field_root_validator("dose_number_positive_int")
    
    _validate_primitive_dose_number_string = get_primitive_field_root_validator("dose_number_string")
    
    _validate_primitive_series_doses_positive_int = get_primitive_field_root_validator("series_doses_positive_int")
    
    _validate_primitive_series_doses_string = get_primitive_field_root_validator("series_doses_string")
    


class ImmunizationRecommendation(DomainResource):
    """ Guidance or advice relating to an immunization.

    A patient's point-in-time set of recommendations (i.e. forecasting)
    according to a published schedule with optional supporting justification.
    """
    resource_type: typing.Literal["ImmunizationRecommendation"] = "ImmunizationRecommendation"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ImmunizationRecommendation",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    patient: "Reference"

    """ Who this profile is for.
    Type `Reference` (represented as `dict` in JSON).
    """

    date: FHIRDateTime

    """ Date recommendation(s) created.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    authority: typing.Optional["Reference"]

    """ Who is responsible for protocol.
    Type `Reference` (represented as `dict` in JSON).
    """

    recommendation: typing.List["ImmunizationRecommendationRecommendation"]

    """ Vaccine administration recommendations.
    List of `ImmunizationRecommendationRecommendation` items (represented as `dict` in JSON).
    """



    _validate_primitive_date = get_primitive_field_root_validator("date")
    


class ImplementationGuide(DomainResource):
    """ A set of rules about how FHIR is used.

    A set of rules of how a particular interoperability or standards problem is
    solved - typically through the use of FHIR resources. This resource is used
    to gather all the parts of an implementation guide into a logical whole and
    to publish a computable definition of all the parts.
    """
    resource_type: typing.Literal["ImplementationGuide"] = "ImplementationGuide"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ImplementationGuide",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: FHIRRequiredString

    """ Canonical identifier for this implementation guide, represented as
        a URI (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    version: typing.Optional[FHIRString]

    """ Business version of the implementation guide.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: FHIRRequiredString

    """ Name for this implementation guide (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Name for this implementation guide (human friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    experimental: typing.Optional[bool]

    """ For testing purposes, not real usage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    experimental__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_experimental`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the implementation guide.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for implementation guide (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    copyright: typing.Optional[FHIRString]

    """ Use and/or publishing restrictions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    copyright__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_copyright`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    package_id: FHIRId

    """ NPM Package name for IG.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    package_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_package_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    
    
    license: typing.Optional["FHIRCode"]

    """ SPDX license code for this IG (or not-open-source).
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    license__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_license`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    
    
    fhir_version: typing.List[typing.Optional["FHIRCode"]]

    """ FHIR Version(s) this Implementation Guide targets.
    List of `FHIRCode` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    fhir_version__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_fhir_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    depends_on: typing.Optional[typing.List["ImplementationGuideDependsOn"]]

    """ Another Implementation guide this depends on.
    List of `ImplementationGuideDependsOn` items (represented as `dict` in JSON).
    """

    global_: typing.Optional[typing.List["ImplementationGuideGlobal"]]

    """ Profiles that apply globally.
    List of `ImplementationGuideGlobal` items (represented as `dict` in JSON).
    """

    definition: typing.Optional["ImplementationGuideDefinition"]

    """ Information needed to build the IG.
    Type `ImplementationGuideDefinition` (represented as `dict` in JSON).
    """

    manifest: typing.Optional["ImplementationGuideManifest"]

    """ Information about an assembled IG.
    Type `ImplementationGuideManifest` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_experimental = get_primitive_field_root_validator("experimental")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_copyright = get_primitive_field_root_validator("copyright")
    
    _validate_primitive_package_id = get_primitive_field_root_validator("package_id")
    
    _validate_primitive_license = get_primitive_field_root_validator("license")
    
    _validate_primitive_fhir_version = get_primitive_field_root_validator("fhir_version")
    


class InsurancePlan(DomainResource):
    """ Details of a Health Insurance product/plan provided by an organization.
    """
    resource_type: typing.Literal["InsurancePlan"] = "InsurancePlan"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/InsurancePlan",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business Identifier for Product.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: typing.Optional["PublicationStatus"]

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional[typing.List["CodeableConcept"]]

    """ Kind of product.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    name: typing.Optional[FHIRString]

    """ Official name.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    alias: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Alternate names.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    alias__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_alias`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    period: typing.Optional["Period"]

    """ When the product is available.
    Type `Period` (represented as `dict` in JSON).
    """

    owned_by: typing.Optional["Reference"]

    """ Plan issuer.
    Type `Reference` (represented as `dict` in JSON).
    """

    administered_by: typing.Optional["Reference"]

    """ Product administrator.
    Type `Reference` (represented as `dict` in JSON).
    """

    coverage_area: typing.Optional[typing.List["Reference"]]

    """ Where product applies.
    List of `Reference` items (represented as `dict` in JSON).
    """

    contact: typing.Optional[typing.List["InsurancePlanContact"]]

    """ Contact for the product.
    List of `InsurancePlanContact` items (represented as `dict` in JSON).
    """

    endpoint: typing.Optional[typing.List["Reference"]]

    """ Technical endpoint.
    List of `Reference` items (represented as `dict` in JSON).
    """

    network: typing.Optional[typing.List["Reference"]]

    """ What networks are Included.
    List of `Reference` items (represented as `dict` in JSON).
    """

    coverage: typing.Optional[typing.List["InsurancePlanCoverage"]]

    """ Coverage details.
    List of `InsurancePlanCoverage` items (represented as `dict` in JSON).
    """

    plan: typing.Optional[typing.List["InsurancePlanPlan"]]

    """ Plan details.
    List of `InsurancePlanPlan` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_alias = get_primitive_field_root_validator("alias")
    


class Invoice(DomainResource):
    """ Invoice containing ChargeItems from an Account.

    Invoice containing collected ChargeItems from an Account with calculated
    individual and total price for Billing purpose.
    """
    resource_type: typing.Literal["Invoice"] = "Invoice"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Invoice",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business Identifier for item.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "InvoiceStatus"

    """ draft | issued | balanced | cancelled | entered-in-error.
    Type `InvoiceStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    cancelled_reason: typing.Optional[FHIRString]

    """ Reason for cancellation of this Invoice.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    cancelled_reason__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_cancelled_reason`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional["CodeableConcept"]

    """ Type of Invoice.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject: typing.Optional["Reference"]

    """ Recipient(s) of goods and services.
    Type `Reference` (represented as `dict` in JSON).
    """

    recipient: typing.Optional["Reference"]

    """ Recipient of this invoice.
    Type `Reference` (represented as `dict` in JSON).
    """

    date: typing.Optional[FHIRDateTime]

    """ Invoice date / posting date.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    participant: typing.Optional[typing.List["InvoiceParticipant"]]

    """ Participant in creation of this Invoice.
    List of `InvoiceParticipant` items (represented as `dict` in JSON).
    """

    issuer: typing.Optional["Reference"]

    """ Issuing Organization of Invoice.
    Type `Reference` (represented as `dict` in JSON).
    """

    account: typing.Optional["Reference"]

    """ Account that is being balanced.
    Type `Reference` (represented as `dict` in JSON).
    """

    line_item: typing.Optional[typing.List["InvoiceLineItem"]]

    """ Line items of this Invoice.
    List of `InvoiceLineItem` items (represented as `dict` in JSON).
    """

    total_price_component: typing.Optional[typing.List["InvoiceLineItemPriceComponent"]]

    """ Components of Invoice total.
    List of `InvoiceLineItemPriceComponent` items (represented as `dict` in JSON).
    """

    total_net: typing.Optional["Money"]

    """ Net total of this Invoice.
    Type `Money` (represented as `dict` in JSON).
    """

    total_gross: typing.Optional["Money"]

    """ Gross total of this Invoice.
    Type `Money` (represented as `dict` in JSON).
    """

    payment_terms: typing.Optional[FHIRString]

    """ Payment details.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    payment_terms__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_payment_terms`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    note: typing.Optional[typing.List["Annotation"]]

    """ Comments made about the invoice.
    List of `Annotation` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in InvoiceStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_cancelled_reason = get_primitive_field_root_validator("cancelled_reason")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_payment_terms = get_primitive_field_root_validator("payment_terms")
    


class Library(DomainResource):
    """ Represents a library of quality improvement components.

    The Library resource is a general-purpose container for knowledge asset
    definitions. It can be used to describe and expose existing knowledge
    assets such as logic libraries and information model descriptions, as well
    as to describe a collection of knowledge assets.
    """
    resource_type: typing.Literal["Library"] = "Library"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Library",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: typing.Optional[FHIRString]

    """ Canonical identifier for this library, represented as a URI
        (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    identifier: typing.Optional[typing.List["Identifier"]]

    """ Additional identifier for the library.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    version: typing.Optional[FHIRString]

    """ Business version of the library.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Name for this library (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Name for this library (human friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subtitle: typing.Optional[FHIRString]

    """ Subordinate title of the library.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    subtitle__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_subtitle`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    experimental: typing.Optional[bool]

    """ For testing purposes, not real usage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    experimental__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_experimental`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: "CodeableConcept"

    """ logic-library | model-definition | asset-collection | module-
        definition.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject_codeable_concept: typing.Optional["CodeableConcept"]

    """ Type of individual the library content is focused on.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject_reference: typing.Optional["Reference"]

    """ Type of individual the library content is focused on.
    Type `Reference` (represented as `dict` in JSON).
    """

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the library.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for library (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    purpose: typing.Optional[FHIRString]

    """ Why this library is defined.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    purpose__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_purpose`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    usage: typing.Optional[FHIRString]

    """ Describes the clinical usage of the library.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    usage__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_usage`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    copyright: typing.Optional[FHIRString]

    """ Use and/or publishing restrictions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    copyright__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_copyright`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    approval_date: typing.Optional[FHIRDate]

    """ When the library was approved by publisher.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    approval_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_approval_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    last_review_date: typing.Optional[FHIRDate]

    """ When the library was last reviewed.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    last_review_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_last_review_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    effective_period: typing.Optional["Period"]

    """ When the library is expected to be used.
    Type `Period` (represented as `dict` in JSON).
    """

    topic: typing.Optional[typing.List["CodeableConcept"]]

    """ E.g. Education, Treatment, Assessment, etc..
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    author: typing.Optional[typing.List["ContactDetail"]]

    """ Who authored the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    editor: typing.Optional[typing.List["ContactDetail"]]

    """ Who edited the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    reviewer: typing.Optional[typing.List["ContactDetail"]]

    """ Who reviewed the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    endorser: typing.Optional[typing.List["ContactDetail"]]

    """ Who endorsed the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    related_artifact: typing.Optional[typing.List["RelatedArtifact"]]

    """ Additional documentation, citations, etc..
    List of `RelatedArtifact` items (represented as `dict` in JSON).
    """

    parameter: typing.Optional[typing.List["ParameterDefinition"]]

    """ Parameters defined by the library.
    List of `ParameterDefinition` items (represented as `dict` in JSON).
    """

    data_requirement: typing.Optional[typing.List["DataRequirement"]]

    """ What data is referenced by this library.
    List of `DataRequirement` items (represented as `dict` in JSON).
    """

    content: typing.Optional[typing.List["Attachment"]]

    """ Contents of the library, either embedded or referenced.
    List of `Attachment` items (represented as `dict` in JSON).
    """



#   {'path': 'Library.subject[x]', 'choice_of_type': 'subject', 'orig_name': 'subjectCodeableConcept', 'name': 'subjectCodeableConcept', 'parent_name': 'Library', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Type of individual the library content is focused on', 'formal': 'A code or group definition that describes the intended subject of the contents of the library.', 'representation': None}
    _subject_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['subject_codeable_concept', 'subject_reference']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_subtitle = get_primitive_field_root_validator("subtitle")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_experimental = get_primitive_field_root_validator("experimental")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_purpose = get_primitive_field_root_validator("purpose")
    
    _validate_primitive_usage = get_primitive_field_root_validator("usage")
    
    _validate_primitive_copyright = get_primitive_field_root_validator("copyright")
    
    _validate_primitive_approval_date = get_primitive_field_root_validator("approval_date")
    
    _validate_primitive_last_review_date = get_primitive_field_root_validator("last_review_date")
    


class Linkage(DomainResource):
    """ Links records for 'same' item.

    Identifies two or more records (resource instances) that refer to the same
    real-world "occurrence".
    """
    resource_type: typing.Literal["Linkage"] = "Linkage"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Linkage",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    active: typing.Optional[bool]

    """ Whether this linkage assertion is active or not.
    Type `bool`. Is a JSON Primitive element.
    """
    

    active__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_active`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    author: typing.Optional["Reference"]

    """ Who is responsible for linkages.
    Type `Reference` (represented as `dict` in JSON).
    """

    item: typing.List["LinkageItem"]

    """ Item to be linked.
    List of `LinkageItem` items (represented as `dict` in JSON).
    """



    _validate_primitive_active = get_primitive_field_root_validator("active")
    


class List(DomainResource):
    """ A list is a curated collection of resources.
    """
    resource_type: typing.Literal["List"] = "List"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/List",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "ListStatus"

    """ current | retired | entered-in-error.
    Type `ListStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    mode: "ListMode"

    """ working | snapshot | changes.
    Type `ListMode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    mode__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_mode`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Descriptive name for the list.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code: typing.Optional["CodeableConcept"]

    """ What the purpose of this list is.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject: typing.Optional["Reference"]

    """ If all resources have the same subject.
    Type `Reference` (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Context in which list created.
    Type `Reference` (represented as `dict` in JSON).
    """

    date: typing.Optional[FHIRDateTime]

    """ When the list was prepared.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    source: typing.Optional["Reference"]

    """ Who and/or what defined the list contents (aka Author).
    Type `Reference` (represented as `dict` in JSON).
    """

    ordered_by: typing.Optional["CodeableConcept"]

    """ What order the list has.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Comments about the list.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    entry: typing.Optional[typing.List["ListEntry"]]

    """ Entries in the list.
    List of `ListEntry` items (represented as `dict` in JSON).
    """

    empty_reason: typing.Optional["CodeableConcept"]

    """ Why list is empty.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in ListStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["mode"]["enum"]
            enums.clear()
            for item in ListMode:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_mode = get_primitive_field_root_validator("mode")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    


class Location(DomainResource):
    """ Details and position information for a physical place.

    Details and position information for a physical place where services are
    provided and resources and participants may be stored, found, contained, or
    accommodated.
    """
    resource_type: typing.Literal["Location"] = "Location"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Location",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Unique code or number identifying the location to its users.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: typing.Optional["LocationStatus"]

    """ active | suspended | inactive.
    Type `LocationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    operational_status: typing.Optional["Coding"]

    """ The operational status of the location (typically only for a
        bed/room).
    Type `Coding` (represented as `dict` in JSON).
    """

    name: typing.Optional[FHIRString]

    """ Name of the location as used by humans.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    alias: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ A list of alternate names that the location is known as, or was
        known as, in the past.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    alias__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_alias`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ Additional details about the location that could be displayed as
        further information to identify the location beyond its name.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    mode: typing.Optional["LocationMode"]

    """ instance | kind.
    Type `LocationMode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    mode__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_mode`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional[typing.List["CodeableConcept"]]

    """ Type of function performed.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    telecom: typing.Optional[typing.List["ContactPoint"]]

    """ Contact details of the location.
    List of `ContactPoint` items (represented as `dict` in JSON).
    """

    address: typing.Optional["Address"]

    """ Physical location.
    Type `Address` (represented as `dict` in JSON).
    """

    physical_type: typing.Optional["CodeableConcept"]

    """ Physical form of the location.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    position: typing.Optional["LocationPosition"]

    """ The absolute geographic location.
    Type `LocationPosition` (represented as `dict` in JSON).
    """

    managing_organization: typing.Optional["Reference"]

    """ Organization responsible for provisioning and upkeep.
    Type `Reference` (represented as `dict` in JSON).
    """

    part_of: typing.Optional["Reference"]

    """ Another Location this one is physically a part of.
    Type `Reference` (represented as `dict` in JSON).
    """

    hours_of_operation: typing.Optional[typing.List["LocationHoursOfOperation"]]

    """ What days/times during a week is this location usually open.
    List of `LocationHoursOfOperation` items (represented as `dict` in JSON).
    """

    availability_exceptions: typing.Optional[FHIRString]

    """ Description of availability exceptions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    availability_exceptions__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_availability_exceptions`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    endpoint: typing.Optional[typing.List["Reference"]]

    """ Technical endpoints providing access to services operated for the
        location.
    List of `Reference` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in LocationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["mode"]["enum"]
            enums.clear()
            for item in LocationMode:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_alias = get_primitive_field_root_validator("alias")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_mode = get_primitive_field_root_validator("mode")
    
    _validate_primitive_availability_exceptions = get_primitive_field_root_validator("availability_exceptions")
    


class Measure(DomainResource):
    """ A quality measure definition.

    The Measure resource provides the definition of a quality measure.
    """
    resource_type: typing.Literal["Measure"] = "Measure"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Measure",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: typing.Optional[FHIRString]

    """ Canonical identifier for this measure, represented as a URI
        (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    identifier: typing.Optional[typing.List["Identifier"]]

    """ Additional identifier for the measure.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    version: typing.Optional[FHIRString]

    """ Business version of the measure.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Name for this measure (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Name for this measure (human friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subtitle: typing.Optional[FHIRString]

    """ Subordinate title of the measure.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    subtitle__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_subtitle`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    experimental: typing.Optional[bool]

    """ For testing purposes, not real usage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    experimental__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_experimental`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subject_codeable_concept: typing.Optional["CodeableConcept"]

    """ E.g. Patient, Practitioner, RelatedPerson, Organization, Location,
        Device.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject_reference: typing.Optional["Reference"]

    """ E.g. Patient, Practitioner, RelatedPerson, Organization, Location,
        Device.
    Type `Reference` (represented as `dict` in JSON).
    """

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the measure.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for measure (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    purpose: typing.Optional[FHIRString]

    """ Why this measure is defined.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    purpose__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_purpose`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    usage: typing.Optional[FHIRString]

    """ Describes the clinical usage of the measure.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    usage__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_usage`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    copyright: typing.Optional[FHIRString]

    """ Use and/or publishing restrictions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    copyright__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_copyright`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    approval_date: typing.Optional[FHIRDate]

    """ When the measure was approved by publisher.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    approval_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_approval_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    last_review_date: typing.Optional[FHIRDate]

    """ When the measure was last reviewed.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    last_review_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_last_review_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    effective_period: typing.Optional["Period"]

    """ When the measure is expected to be used.
    Type `Period` (represented as `dict` in JSON).
    """

    topic: typing.Optional[typing.List["CodeableConcept"]]

    """ The category of the measure, such as Education, Treatment,
        Assessment, etc..
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    author: typing.Optional[typing.List["ContactDetail"]]

    """ Who authored the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    editor: typing.Optional[typing.List["ContactDetail"]]

    """ Who edited the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    reviewer: typing.Optional[typing.List["ContactDetail"]]

    """ Who reviewed the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    endorser: typing.Optional[typing.List["ContactDetail"]]

    """ Who endorsed the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    related_artifact: typing.Optional[typing.List["RelatedArtifact"]]

    """ Additional documentation, citations, etc..
    List of `RelatedArtifact` items (represented as `dict` in JSON).
    """

    library: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Logic used by the measure.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    library__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_library`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    disclaimer: typing.Optional[FHIRString]

    """ Disclaimer for use of the measure or its referenced content.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    disclaimer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_disclaimer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    scoring: typing.Optional["CodeableConcept"]

    """ proportion | ratio | continuous-variable | cohort.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    composite_scoring: typing.Optional["CodeableConcept"]

    """ opportunity | all-or-nothing | linear | weighted.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    type: typing.Optional[typing.List["CodeableConcept"]]

    """ process | outcome | structure | patient-reported-outcome |
        composite.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    risk_adjustment: typing.Optional[FHIRString]

    """ How risk adjustment is applied for this measure.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    risk_adjustment__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_risk_adjustment`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    rate_aggregation: typing.Optional[FHIRString]

    """ How is rate aggregation performed for this measure.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    rate_aggregation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_rate_aggregation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    rationale: typing.Optional[FHIRString]

    """ Detailed description of why the measure exists.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    rationale__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_rationale`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    clinical_recommendation_statement: typing.Optional[FHIRString]

    """ Summary of clinical guidelines.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    clinical_recommendation_statement__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_clinical_recommendation_statement`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    improvement_notation: typing.Optional["CodeableConcept"]

    """ increase | decrease.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    definition: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Defined terms used in the measure documentation.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    definition__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_definition`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    guidance: typing.Optional[FHIRString]

    """ Additional guidance for implementers.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    guidance__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_guidance`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    group: typing.Optional[typing.List["MeasureGroup"]]

    """ Population criteria group.
    List of `MeasureGroup` items (represented as `dict` in JSON).
    """

    supplemental_data: typing.Optional[typing.List["MeasureSupplementalData"]]

    """ What other data should be reported with the measure.
    List of `MeasureSupplementalData` items (represented as `dict` in JSON).
    """



#   {'path': 'Measure.subject[x]', 'choice_of_type': 'subject', 'orig_name': 'subjectCodeableConcept', 'name': 'subjectCodeableConcept', 'parent_name': 'Measure', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device', 'formal': 'The intended subjects for the measure. If this element is not provided, a Patient subject is assumed, but the subject of the measure can be anything.', 'representation': None}
    _subject_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['subject_codeable_concept', 'subject_reference']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_subtitle = get_primitive_field_root_validator("subtitle")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_experimental = get_primitive_field_root_validator("experimental")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_purpose = get_primitive_field_root_validator("purpose")
    
    _validate_primitive_usage = get_primitive_field_root_validator("usage")
    
    _validate_primitive_copyright = get_primitive_field_root_validator("copyright")
    
    _validate_primitive_approval_date = get_primitive_field_root_validator("approval_date")
    
    _validate_primitive_last_review_date = get_primitive_field_root_validator("last_review_date")
    
    _validate_primitive_library = get_primitive_field_root_validator("library")
    
    _validate_primitive_disclaimer = get_primitive_field_root_validator("disclaimer")
    
    _validate_primitive_risk_adjustment = get_primitive_field_root_validator("risk_adjustment")
    
    _validate_primitive_rate_aggregation = get_primitive_field_root_validator("rate_aggregation")
    
    _validate_primitive_rationale = get_primitive_field_root_validator("rationale")
    
    _validate_primitive_clinical_recommendation_statement = get_primitive_field_root_validator("clinical_recommendation_statement")
    
    _validate_primitive_definition = get_primitive_field_root_validator("definition")
    
    _validate_primitive_guidance = get_primitive_field_root_validator("guidance")
    


class MeasureReport(DomainResource):
    """ Results of a measure evaluation.

    The MeasureReport resource contains the results of the calculation of a
    measure; and optionally a reference to the resources involved in that
    calculation.
    """
    resource_type: typing.Literal["MeasureReport"] = "MeasureReport"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MeasureReport",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Additional identifier for the MeasureReport.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "MeasureReportStatus"

    """ complete | pending | error.
    Type `MeasureReportStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    type: "MeasureReportType"

    """ individual | subject-list | summary | data-collection.
    Type `MeasureReportType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    measure: FHIRRequiredString

    """ What measure was calculated.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    measure__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_measure`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subject: typing.Optional["Reference"]

    """ What individual(s) the report is for.
    Type `Reference` (represented as `dict` in JSON).
    """

    date: typing.Optional[FHIRDateTime]

    """ When the report was generated.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    reporter: typing.Optional["Reference"]

    """ Who is reporting the data.
    Type `Reference` (represented as `dict` in JSON).
    """

    period: "Period"

    """ What period the report covers.
    Type `Period` (represented as `dict` in JSON).
    """

    improvement_notation: typing.Optional["CodeableConcept"]

    """ increase | decrease.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    group: typing.Optional[typing.List["MeasureReportGroup"]]

    """ Measure results for each group.
    List of `MeasureReportGroup` items (represented as `dict` in JSON).
    """

    evaluated_resource: typing.Optional[typing.List["Reference"]]

    """ What data was used to calculate the measure score.
    List of `Reference` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in MeasureReportStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in MeasureReportType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_measure = get_primitive_field_root_validator("measure")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    


class Media(DomainResource):
    """ A photo, video, or audio recording acquired or used in healthcare. The
    actual content may be inline or provided by direct reference.
    """
    resource_type: typing.Literal["Media"] = "Media"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Media",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Identifier(s) for the image.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    based_on: typing.Optional[typing.List["Reference"]]

    """ Procedure that caused this media to be created.
    List of `Reference` items (represented as `dict` in JSON).
    """

    part_of: typing.Optional[typing.List["Reference"]]

    """ Part of referenced event.
    List of `Reference` items (represented as `dict` in JSON).
    """

            
    
    
    status: "EventStatus"

    """ preparation | in-progress | not-done | on-hold | stopped |
        completed | entered-in-error | unknown.
    Type `EventStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional["CodeableConcept"]

    """ Classification of media as image, video, or audio.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    modality: typing.Optional["CodeableConcept"]

    """ The type of acquisition equipment/process.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    view: typing.Optional["CodeableConcept"]

    """ Imaging view, e.g. Lateral or Antero-posterior.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject: typing.Optional["Reference"]

    """ Who/What this Media is a record of.
    Type `Reference` (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Encounter associated with media.
    Type `Reference` (represented as `dict` in JSON).
    """

    created_date_time: typing.Optional[FHIRDateTime]

    """ When Media was collected.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    created_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_created_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    created_period: typing.Optional["Period"]

    """ When Media was collected.
    Type `Period` (represented as `dict` in JSON).
    """

    issued: typing.Optional[FHIRInstant]

    """ Date/Time this version was made available.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    issued__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_issued`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    operator: typing.Optional["Reference"]

    """ The person who generated the image.
    Type `Reference` (represented as `dict` in JSON).
    """

    reason_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Why was event performed?.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    body_site: typing.Optional["CodeableConcept"]

    """ Observed body part.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    device_name: typing.Optional[FHIRString]

    """ Name of the device/manufacturer.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    device_name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_device_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    device: typing.Optional["Reference"]

    """ Observing Device.
    Type `Reference` (represented as `dict` in JSON).
    """

    height: typing.Optional[FHIRPositiveInt]

    """ Height of the image in pixels (photo/video).
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    height__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_height`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    width: typing.Optional[FHIRPositiveInt]

    """ Width of the image in pixels (photo/video).
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    width__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_width`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    frames: typing.Optional[FHIRPositiveInt]

    """ Number of frames if > 1 (photo).
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    frames__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_frames`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    duration: typing.Optional[decimal.Decimal]

    """ Length in seconds (audio / video).
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    duration__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_duration`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    content: "Attachment"

    """ Actual Media - reference or data.
    Type `Attachment` (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Comments made about the media.
    List of `Annotation` items (represented as `dict` in JSON).
    """



#   {'path': 'Media.created[x]', 'choice_of_type': 'created', 'orig_name': 'createdDateTime', 'name': 'createdDateTime', 'parent_name': 'Media', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'When Media was collected', 'formal': 'The date and time(s) at which the media was collected.', 'representation': None}
    _created_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['created_date_time', 'created_period']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in EventStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_created_date_time = get_primitive_field_root_validator("created_date_time")
    
    _validate_primitive_issued = get_primitive_field_root_validator("issued")
    
    _validate_primitive_device_name = get_primitive_field_root_validator("device_name")
    
    _validate_primitive_height = get_primitive_field_root_validator("height")
    
    _validate_primitive_width = get_primitive_field_root_validator("width")
    
    _validate_primitive_frames = get_primitive_field_root_validator("frames")
    
    _validate_primitive_duration = get_primitive_field_root_validator("duration")
    


class Medication(DomainResource):
    """ Definition of a Medication.

    This resource is primarily used for the identification and definition of a
    medication for the purposes of prescribing, dispensing, and administering a
    medication as well as for making statements about medication use.
    """
    resource_type: typing.Literal["Medication"] = "Medication"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Medication",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business identifier for this medication.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    code: typing.Optional["CodeableConcept"]

    """ Codes that identify this medication.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

            
    
    
    status: typing.Optional["MedicationStatusCodes"]

    """ active | inactive | entered-in-error.
    Type `MedicationStatusCodes` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    manufacturer: typing.Optional["Reference"]

    """ Manufacturer of the item.
    Type `Reference` (represented as `dict` in JSON).
    """

    form: typing.Optional["CodeableConcept"]

    """ powder | tablets | capsule +.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    amount: typing.Optional["Ratio"]

    """ Amount of drug in package.
    Type `Ratio` (represented as `dict` in JSON).
    """

    ingredient: typing.Optional[typing.List["MedicationIngredient"]]

    """ Active or inactive ingredient.
    List of `MedicationIngredient` items (represented as `dict` in JSON).
    """

    batch: typing.Optional["MedicationBatch"]

    """ Details about packaged medications.
    Type `MedicationBatch` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in MedicationStatusCodes:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    


class MedicationAdministration(DomainResource):
    """ Administration of medication to a patient.

    Describes the event of a patient consuming or otherwise being administered
    a medication.  This may be as simple as swallowing a tablet or it may be a
    long running infusion.  Related resources tie this event to the authorizing
    prescription, and the specific encounter between patient and health care
    practitioner.
    """
    resource_type: typing.Literal["MedicationAdministration"] = "MedicationAdministration"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationAdministration",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ External identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    instantiates: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Instantiates protocol or definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    part_of: typing.Optional[typing.List["Reference"]]

    """ Part of referenced event.
    List of `Reference` items (represented as `dict` in JSON).
    """

            
    
    
    status: "MedicationAdministrationStatusCodes"

    """ in-progress | not-done | on-hold | completed | entered-in-error |
        stopped | unknown.
    Type `MedicationAdministrationStatusCodes` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    status_reason: typing.Optional[typing.List["CodeableConcept"]]

    """ Reason administration not performed.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    category: typing.Optional["CodeableConcept"]

    """ Type of medication usage.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    medication_codeable_concept: typing.Optional["CodeableConcept"]

    """ What was administered.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    medication_reference: typing.Optional["Reference"]

    """ What was administered.
    Type `Reference` (represented as `dict` in JSON).
    """

    subject: "Reference"

    """ Who received medication.
    Type `Reference` (represented as `dict` in JSON).
    """

    context: typing.Optional["Reference"]

    """ Encounter or Episode of Care administered as part of.
    Type `Reference` (represented as `dict` in JSON).
    """

    supporting_information: typing.Optional[typing.List["Reference"]]

    """ Additional information to support administration.
    List of `Reference` items (represented as `dict` in JSON).
    """

    effective_date_time: typing.Optional[FHIRDateTime]

    """ Start and end time of administration.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    effective_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_effective_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    effective_period: typing.Optional["Period"]

    """ Start and end time of administration.
    Type `Period` (represented as `dict` in JSON).
    """

    performer: typing.Optional[typing.List["MedicationAdministrationPerformer"]]

    """ Who performed the medication administration and what they did.
    List of `MedicationAdministrationPerformer` items (represented as `dict` in JSON).
    """

    reason_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Reason administration performed.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    reason_reference: typing.Optional[typing.List["Reference"]]

    """ Condition or observation that supports why the medication was
        administered.
    List of `Reference` items (represented as `dict` in JSON).
    """

    request: typing.Optional["Reference"]

    """ Request administration performed against.
    Type `Reference` (represented as `dict` in JSON).
    """

    device: typing.Optional[typing.List["Reference"]]

    """ Device used to administer.
    List of `Reference` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Information about the administration.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    dosage: typing.Optional["MedicationAdministrationDosage"]

    """ Details of how medication was taken.
    Type `MedicationAdministrationDosage` (represented as `dict` in JSON).
    """

    event_history: typing.Optional[typing.List["Reference"]]

    """ A list of events of interest in the lifecycle.
    List of `Reference` items (represented as `dict` in JSON).
    """



#   {'path': 'MedicationAdministration.medication[x]', 'choice_of_type': 'medication', 'orig_name': 'medicationCodeableConcept', 'name': 'medicationCodeableConcept', 'parent_name': 'MedicationAdministration', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'What was administered', 'formal': 'Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.', 'representation': None}
    _medication_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['medication_codeable_concept', 'medication_reference']), False))

#   {'path': 'MedicationAdministration.effective[x]', 'choice_of_type': 'effective', 'orig_name': 'effectiveDateTime', 'name': 'effectiveDateTime', 'parent_name': 'MedicationAdministration', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Start and end time of administration', 'formal': "A specific date/time or interval of time during which the administration took place (or did not take place, when the 'notGiven' attribute is true). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.", 'representation': None}
    _effective_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['effective_date_time', 'effective_period']), False))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in MedicationAdministrationStatusCodes:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_instantiates = get_primitive_field_root_validator("instantiates")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_effective_date_time = get_primitive_field_root_validator("effective_date_time")
    


class MedicationDispense(DomainResource):
    """ Dispensing a medication to a named patient.

    Indicates that a medication product is to be or has been dispensed for a
    named person/patient.  This includes a description of the medication
    product (supply) provided and the instructions for administering the
    medication.  The medication dispense is the result of a pharmacy system
    responding to a medication order.
    """
    resource_type: typing.Literal["MedicationDispense"] = "MedicationDispense"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationDispense",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ External identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    part_of: typing.Optional[typing.List["Reference"]]

    """ Event that dispense is part of.
    List of `Reference` items (represented as `dict` in JSON).
    """

            
    
    
    status: "MedicationDispenseStatusCodes"

    """ preparation | in-progress | cancelled | on-hold | completed |
        entered-in-error | stopped | declined | unknown.
    Type `MedicationDispenseStatusCodes` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    status_reason_codeable_concept: typing.Optional["CodeableConcept"]

    """ Why a dispense was not performed.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    status_reason_reference: typing.Optional["Reference"]

    """ Why a dispense was not performed.
    Type `Reference` (represented as `dict` in JSON).
    """

    category: typing.Optional["CodeableConcept"]

    """ Type of medication dispense.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    medication_codeable_concept: typing.Optional["CodeableConcept"]

    """ What medication was supplied.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    medication_reference: typing.Optional["Reference"]

    """ What medication was supplied.
    Type `Reference` (represented as `dict` in JSON).
    """

    subject: typing.Optional["Reference"]

    """ Who the dispense is for.
    Type `Reference` (represented as `dict` in JSON).
    """

    context: typing.Optional["Reference"]

    """ Encounter / Episode associated with event.
    Type `Reference` (represented as `dict` in JSON).
    """

    supporting_information: typing.Optional[typing.List["Reference"]]

    """ Information that supports the dispensing of the medication.
    List of `Reference` items (represented as `dict` in JSON).
    """

    performer: typing.Optional[typing.List["MedicationDispensePerformer"]]

    """ Who performed event.
    List of `MedicationDispensePerformer` items (represented as `dict` in JSON).
    """

    location: typing.Optional["Reference"]

    """ Where the dispense occurred.
    Type `Reference` (represented as `dict` in JSON).
    """

    authorizing_prescription: typing.Optional[typing.List["Reference"]]

    """ Medication order that authorizes the dispense.
    List of `Reference` items (represented as `dict` in JSON).
    """

    type: typing.Optional["CodeableConcept"]

    """ Trial fill, partial fill, emergency fill, etc..
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    quantity: typing.Optional["Quantity"]

    """ Amount dispensed.
    Type `Quantity` (represented as `dict` in JSON).
    """

    days_supply: typing.Optional["Quantity"]

    """ Amount of medication expressed as a timing amount.
    Type `Quantity` (represented as `dict` in JSON).
    """

    when_prepared: typing.Optional[FHIRDateTime]

    """ When product was packaged and reviewed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    when_prepared__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_when_prepared`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    when_handed_over: typing.Optional[FHIRDateTime]

    """ When product was given out.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    when_handed_over__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_when_handed_over`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    destination: typing.Optional["Reference"]

    """ Where the medication was sent.
    Type `Reference` (represented as `dict` in JSON).
    """

    receiver: typing.Optional[typing.List["Reference"]]

    """ Who collected the medication.
    List of `Reference` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Information about the dispense.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    dosage_instruction: typing.Optional[typing.List["Dosage"]]

    """ How the medication is to be used by the patient or administered by
        the caregiver.
    List of `Dosage` items (represented as `dict` in JSON).
    """

    substitution: typing.Optional["MedicationDispenseSubstitution"]

    """ Whether a substitution was performed on the dispense.
    Type `MedicationDispenseSubstitution` (represented as `dict` in JSON).
    """

    detected_issue: typing.Optional[typing.List["Reference"]]

    """ Clinical issue with action.
    List of `Reference` items (represented as `dict` in JSON).
    """

    event_history: typing.Optional[typing.List["Reference"]]

    """ A list of relevant lifecycle events.
    List of `Reference` items (represented as `dict` in JSON).
    """



#   {'path': 'MedicationDispense.statusReason[x]', 'choice_of_type': 'statusReason', 'orig_name': 'statusReasonCodeableConcept', 'name': 'statusReasonCodeableConcept', 'parent_name': 'MedicationDispense', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Why a dispense was not performed', 'formal': 'Indicates the reason why a dispense was not performed.', 'representation': None}
    _status_reason_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['status_reason_codeable_concept', 'status_reason_reference']), True))

#   {'path': 'MedicationDispense.medication[x]', 'choice_of_type': 'medication', 'orig_name': 'medicationCodeableConcept', 'name': 'medicationCodeableConcept', 'parent_name': 'MedicationDispense', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'What medication was supplied', 'formal': 'Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.', 'representation': None}
    _medication_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['medication_codeable_concept', 'medication_reference']), False))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in MedicationDispenseStatusCodes:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_when_prepared = get_primitive_field_root_validator("when_prepared")
    
    _validate_primitive_when_handed_over = get_primitive_field_root_validator("when_handed_over")
    


class MedicationKnowledge(DomainResource):
    """ Definition of Medication Knowledge.

    Information about a medication that is used to support knowledge.
    """
    resource_type: typing.Literal["MedicationKnowledge"] = "MedicationKnowledge"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationKnowledge",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: typing.Optional["CodeableConcept"]

    """ Code that identifies this medication.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

            
    
    
    status: typing.Optional["MedicationKnowledgeStatusCodes"]

    """ active | inactive | entered-in-error.
    Type `MedicationKnowledgeStatusCodes` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    manufacturer: typing.Optional["Reference"]

    """ Manufacturer of the item.
    Type `Reference` (represented as `dict` in JSON).
    """

    dose_form: typing.Optional["CodeableConcept"]

    """ powder | tablets | capsule +.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    amount: typing.Optional["Quantity"]

    """ Amount of drug in package.
    Type `Quantity` (represented as `dict` in JSON).
    """

    synonym: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Additional names for a medication.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    synonym__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_synonym`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    related_medication_knowledge: typing.Optional[typing.List["MedicationKnowledgeRelatedMedicationKnowledge"]]

    """ Associated or related medication information.
    List of `MedicationKnowledgeRelatedMedicationKnowledge` items (represented as `dict` in JSON).
    """

    associated_medication: typing.Optional[typing.List["Reference"]]

    """ A medication resource that is associated with this medication.
    List of `Reference` items (represented as `dict` in JSON).
    """

    product_type: typing.Optional[typing.List["CodeableConcept"]]

    """ Category of the medication or product.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    monograph: typing.Optional[typing.List["MedicationKnowledgeMonograph"]]

    """ Associated documentation about the medication.
    List of `MedicationKnowledgeMonograph` items (represented as `dict` in JSON).
    """

    ingredient: typing.Optional[typing.List["MedicationKnowledgeIngredient"]]

    """ Active or inactive ingredient.
    List of `MedicationKnowledgeIngredient` items (represented as `dict` in JSON).
    """

    preparation_instruction: typing.Optional[FHIRString]

    """ The instructions for preparing the medication.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    preparation_instruction__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_preparation_instruction`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    intended_route: typing.Optional[typing.List["CodeableConcept"]]

    """ The intended or approved route of administration.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    cost: typing.Optional[typing.List["MedicationKnowledgeCost"]]

    """ The pricing of the medication.
    List of `MedicationKnowledgeCost` items (represented as `dict` in JSON).
    """

    monitoring_program: typing.Optional[typing.List["MedicationKnowledgeMonitoringProgram"]]

    """ Program under which a medication is reviewed.
    List of `MedicationKnowledgeMonitoringProgram` items (represented as `dict` in JSON).
    """

    administration_guidelines: typing.Optional[typing.List["MedicationKnowledgeAdministrationGuidelines"]]

    """ Guidelines for administration of the medication.
    List of `MedicationKnowledgeAdministrationGuidelines` items (represented as `dict` in JSON).
    """

    medicine_classification: typing.Optional[typing.List["MedicationKnowledgeMedicineClassification"]]

    """ Categorization of the medication within a formulary or
        classification system.
    List of `MedicationKnowledgeMedicineClassification` items (represented as `dict` in JSON).
    """

    packaging: typing.Optional["MedicationKnowledgePackaging"]

    """ Details about packaged medications.
    Type `MedicationKnowledgePackaging` (represented as `dict` in JSON).
    """

    drug_characteristic: typing.Optional[typing.List["MedicationKnowledgeDrugCharacteristic"]]

    """ Specifies descriptive properties of the medicine.
    List of `MedicationKnowledgeDrugCharacteristic` items (represented as `dict` in JSON).
    """

    contraindication: typing.Optional[typing.List["Reference"]]

    """ Potential clinical issue with or between medication(s).
    List of `Reference` items (represented as `dict` in JSON).
    """

    regulatory: typing.Optional[typing.List["MedicationKnowledgeRegulatory"]]

    """ Regulatory information about a medication.
    List of `MedicationKnowledgeRegulatory` items (represented as `dict` in JSON).
    """

    kinetics: typing.Optional[typing.List["MedicationKnowledgeKinetics"]]

    """ The time course of drug absorption, distribution, metabolism and
        excretion of a medication from the body.
    List of `MedicationKnowledgeKinetics` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in MedicationKnowledgeStatusCodes:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_synonym = get_primitive_field_root_validator("synonym")
    
    _validate_primitive_preparation_instruction = get_primitive_field_root_validator("preparation_instruction")
    


class MedicationRequest(DomainResource):
    """ Ordering of medication for patient or group.

    An order or request for both supply of the medication and the instructions
    for administration of the medication to a patient. The resource is called
    "MedicationRequest" rather than "MedicationPrescription" or
    "MedicationOrder" to generalize the use across inpatient and outpatient
    settings, including care plans, etc., and to harmonize with workflow
    patterns.
    """
    resource_type: typing.Literal["MedicationRequest"] = "MedicationRequest"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationRequest",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ External ids for this request.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "MedicationrequestStatus"

    """ active | on-hold | cancelled | completed | entered-in-error |
        stopped | draft | unknown.
    Type `MedicationrequestStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    status_reason: typing.Optional["CodeableConcept"]

    """ Reason for current status.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

            
    
    
    intent: "MedicationRequestIntent"

    """ proposal | plan | order | original-order | reflex-order | filler-
        order | instance-order | option.
    Type `MedicationRequestIntent` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    intent__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_intent`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    category: typing.Optional[typing.List["CodeableConcept"]]

    """ Type of medication usage.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

            
    
    
    priority: typing.Optional["RequestPriority"]

    """ routine | urgent | asap | stat.
    Type `RequestPriority` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    priority__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_priority`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    do_not_perform: typing.Optional[bool]

    """ True if request is prohibiting action.
    Type `bool`. Is a JSON Primitive element.
    """
    

    do_not_perform__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_do_not_perform`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    reported_boolean: typing.Optional[bool]

    """ Reported rather than primary record.
    Type `bool`. Is a JSON Primitive element.
    """
    

    reported_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_reported_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    reported_reference: typing.Optional["Reference"]

    """ Reported rather than primary record.
    Type `Reference` (represented as `dict` in JSON).
    """

    medication_codeable_concept: typing.Optional["CodeableConcept"]

    """ Medication to be taken.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    medication_reference: typing.Optional["Reference"]

    """ Medication to be taken.
    Type `Reference` (represented as `dict` in JSON).
    """

    subject: "Reference"

    """ Who or group medication request is for.
    Type `Reference` (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Encounter created as part of encounter/admission/stay.
    Type `Reference` (represented as `dict` in JSON).
    """

    supporting_information: typing.Optional[typing.List["Reference"]]

    """ Information to support ordering of the medication.
    List of `Reference` items (represented as `dict` in JSON).
    """

    authored_on: typing.Optional[FHIRDateTime]

    """ When request was initially authored.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    authored_on__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_authored_on`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    requester: typing.Optional["Reference"]

    """ Who/What requested the Request.
    Type `Reference` (represented as `dict` in JSON).
    """

    performer: typing.Optional["Reference"]

    """ Intended performer of administration.
    Type `Reference` (represented as `dict` in JSON).
    """

    performer_type: typing.Optional["CodeableConcept"]

    """ Desired kind of performer of the medication administration.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    recorder: typing.Optional["Reference"]

    """ Person who entered the request.
    Type `Reference` (represented as `dict` in JSON).
    """

    reason_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Reason or indication for ordering or not ordering the medication.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    reason_reference: typing.Optional[typing.List["Reference"]]

    """ Condition or observation that supports why the prescription is
        being written.
    List of `Reference` items (represented as `dict` in JSON).
    """

    instantiates_canonical: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Instantiates FHIR protocol or definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates_canonical__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    instantiates_uri: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Instantiates external protocol or definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates_uri__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    based_on: typing.Optional[typing.List["Reference"]]

    """ What request fulfills.
    List of `Reference` items (represented as `dict` in JSON).
    """

    group_identifier: typing.Optional["Identifier"]

    """ Composite request this is part of.
    Type `Identifier` (represented as `dict` in JSON).
    """

    course_of_therapy_type: typing.Optional["CodeableConcept"]

    """ Overall pattern of medication administration.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    insurance: typing.Optional[typing.List["Reference"]]

    """ Associated insurance coverage.
    List of `Reference` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Information about the prescription.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    dosage_instruction: typing.Optional[typing.List["Dosage"]]

    """ How the medication should be taken.
    List of `Dosage` items (represented as `dict` in JSON).
    """

    dispense_request: typing.Optional["MedicationRequestDispenseRequest"]

    """ Medication supply authorization.
    Type `MedicationRequestDispenseRequest` (represented as `dict` in JSON).
    """

    substitution: typing.Optional["MedicationRequestSubstitution"]

    """ Any restrictions on medication substitution.
    Type `MedicationRequestSubstitution` (represented as `dict` in JSON).
    """

    prior_prescription: typing.Optional["Reference"]

    """ An order/prescription that is being replaced.
    Type `Reference` (represented as `dict` in JSON).
    """

    detected_issue: typing.Optional[typing.List["Reference"]]

    """ Clinical Issue with action.
    List of `Reference` items (represented as `dict` in JSON).
    """

    event_history: typing.Optional[typing.List["Reference"]]

    """ A list of events of interest in the lifecycle.
    List of `Reference` items (represented as `dict` in JSON).
    """



#   {'path': 'MedicationRequest.reported[x]', 'choice_of_type': 'reported', 'orig_name': 'reportedBoolean', 'name': 'reportedBoolean', 'parent_name': 'MedicationRequest', 'class_name': 'bool', 'enum': None, 'module_name': None, 'json_class': 'bool', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Reported rather than primary record', 'formal': "Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.", 'representation': None}
    _reported_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['reported_boolean', 'reported_reference']), True))

#   {'path': 'MedicationRequest.medication[x]', 'choice_of_type': 'medication', 'orig_name': 'medicationCodeableConcept', 'name': 'medicationCodeableConcept', 'parent_name': 'MedicationRequest', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Medication to be taken', 'formal': 'Identifies the medication being requested. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.', 'representation': None}
    _medication_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['medication_codeable_concept', 'medication_reference']), False))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in MedicationrequestStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["intent"]["enum"]
            enums.clear()
            for item in MedicationRequestIntent:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["priority"]["enum"]
            enums.clear()
            for item in RequestPriority:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_intent = get_primitive_field_root_validator("intent")
    
    _validate_primitive_priority = get_primitive_field_root_validator("priority")
    
    _validate_primitive_do_not_perform = get_primitive_field_root_validator("do_not_perform")
    
    _validate_primitive_reported_boolean = get_primitive_field_root_validator("reported_boolean")
    
    _validate_primitive_authored_on = get_primitive_field_root_validator("authored_on")
    
    _validate_primitive_instantiates_canonical = get_primitive_field_root_validator("instantiates_canonical")
    
    _validate_primitive_instantiates_uri = get_primitive_field_root_validator("instantiates_uri")
    


class MedicationStatement(DomainResource):
    """ Record of medication being taken by a patient.

    A record of a medication that is being consumed by a patient.   A
    MedicationStatement may indicate that the patient may be taking the
    medication now or has taken the medication in the past or will be taking
    the medication in the future.  The source of this information can be the
    patient, significant other (such as a family member or spouse), or a
    clinician.  A common scenario where this information is captured is during
    the history taking process during a patient visit or stay.   The medication
    information may come from sources such as the patient's memory, from a
    prescription bottle,  or from a list of medications the patient, clinician
    or other party maintains.
    
    The primary difference between a medication statement and a medication
    administration is that the medication administration has complete
    administration information and is based on actual administration
    information from the person who administered the medication.  A medication
    statement is often, if not always, less specific.  There is no required
    date/time when the medication was administered, in fact we only know that a
    source has reported the patient is taking this medication, where details
    such as time, quantity, or rate or even medication product may be
    incomplete or missing or less precise.  As stated earlier, the medication
    statement information may come from the patient's memory, from a
    prescription bottle or from a list of medications the patient, clinician or
    other party maintains.  Medication administration is more formal and is not
    missing detailed information.
    """
    resource_type: typing.Literal["MedicationStatement"] = "MedicationStatement"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationStatement",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ External identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    based_on: typing.Optional[typing.List["Reference"]]

    """ Fulfils plan, proposal or order.
    List of `Reference` items (represented as `dict` in JSON).
    """

    part_of: typing.Optional[typing.List["Reference"]]

    """ Part of referenced event.
    List of `Reference` items (represented as `dict` in JSON).
    """

            
    
    
    status: "MedicationStatementStatusCodes"

    """ active | completed | entered-in-error | intended | stopped | on-
        hold | unknown | not-taken.
    Type `MedicationStatementStatusCodes` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    status_reason: typing.Optional[typing.List["CodeableConcept"]]

    """ Reason for current status.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    category: typing.Optional["CodeableConcept"]

    """ Type of medication usage.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    medication_codeable_concept: typing.Optional["CodeableConcept"]

    """ What medication was taken.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    medication_reference: typing.Optional["Reference"]

    """ What medication was taken.
    Type `Reference` (represented as `dict` in JSON).
    """

    subject: "Reference"

    """ Who is/was taking  the medication.
    Type `Reference` (represented as `dict` in JSON).
    """

    context: typing.Optional["Reference"]

    """ Encounter / Episode associated with MedicationStatement.
    Type `Reference` (represented as `dict` in JSON).
    """

    effective_date_time: typing.Optional[FHIRDateTime]

    """ The date/time or interval when the medication is/was/will be taken.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    effective_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_effective_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    effective_period: typing.Optional["Period"]

    """ The date/time or interval when the medication is/was/will be taken.
    Type `Period` (represented as `dict` in JSON).
    """

    date_asserted: typing.Optional[FHIRDateTime]

    """ When the statement was asserted?.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date_asserted__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date_asserted`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    information_source: typing.Optional["Reference"]

    """ Person or organization that provided the information about the
        taking of this medication.
    Type `Reference` (represented as `dict` in JSON).
    """

    derived_from: typing.Optional[typing.List["Reference"]]

    """ Additional supporting information.
    List of `Reference` items (represented as `dict` in JSON).
    """

    reason_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Reason for why the medication is being/was taken.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    reason_reference: typing.Optional[typing.List["Reference"]]

    """ Condition or observation that supports why the medication is
        being/was taken.
    List of `Reference` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Further information about the statement.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    dosage: typing.Optional[typing.List["Dosage"]]

    """ Details of how medication is/was taken or should be taken.
    List of `Dosage` items (represented as `dict` in JSON).
    """



#   {'path': 'MedicationStatement.medication[x]', 'choice_of_type': 'medication', 'orig_name': 'medicationCodeableConcept', 'name': 'medicationCodeableConcept', 'parent_name': 'MedicationStatement', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'What medication was taken', 'formal': 'Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.', 'representation': None}
    _medication_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['medication_codeable_concept', 'medication_reference']), False))

#   {'path': 'MedicationStatement.effective[x]', 'choice_of_type': 'effective', 'orig_name': 'effectiveDateTime', 'name': 'effectiveDateTime', 'parent_name': 'MedicationStatement', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'The date/time or interval when the medication is/was/will be taken', 'formal': 'The interval of time during which it is being asserted that the patient is/was/will be taking the medication (or was not taking, when the MedicationStatement.taken element is No).', 'representation': None}
    _effective_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['effective_date_time', 'effective_period']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in MedicationStatementStatusCodes:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_effective_date_time = get_primitive_field_root_validator("effective_date_time")
    
    _validate_primitive_date_asserted = get_primitive_field_root_validator("date_asserted")
    


class MedicinalProduct(DomainResource):
    """ Detailed definition of a medicinal product, typically for uses other than
    direct patient care (e.g. regulatory use).
    """
    resource_type: typing.Literal["MedicinalProduct"] = "MedicinalProduct"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProduct",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business identifier for this product. Could be an MPID.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    type: typing.Optional["CodeableConcept"]

    """ Regulatory type, e.g. Investigational or Authorized.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    domain: typing.Optional["Coding"]

    """ If this medicine applies to human or veterinary uses.
    Type `Coding` (represented as `dict` in JSON).
    """

    combined_pharmaceutical_dose_form: typing.Optional["CodeableConcept"]

    """ The dose form for a single part product, or combined form of a
        multiple part product.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    legal_status_of_supply: typing.Optional["CodeableConcept"]

    """ The legal status of supply of the medicinal product as classified
        by the regulator.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    additional_monitoring_indicator: typing.Optional["CodeableConcept"]

    """ Whether the Medicinal Product is subject to additional monitoring
        for regulatory reasons.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    special_measures: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Whether the Medicinal Product is subject to special measures for
        regulatory reasons.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    special_measures__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_special_measures`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    paediatric_use_indicator: typing.Optional["CodeableConcept"]

    """ If authorised for use in children.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    product_classification: typing.Optional[typing.List["CodeableConcept"]]

    """ Allows the product to be classified by various systems.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    marketing_status: typing.Optional[typing.List["MarketingStatus"]]

    """ Marketing status of the medicinal product, in contrast to marketing
        authorizaton.
    List of `MarketingStatus` items (represented as `dict` in JSON).
    """

    pharmaceutical_product: typing.Optional[typing.List["Reference"]]

    """ Pharmaceutical aspects of product.
    List of `Reference` items (represented as `dict` in JSON).
    """

    packaged_medicinal_product: typing.Optional[typing.List["Reference"]]

    """ Package representation for the product.
    List of `Reference` items (represented as `dict` in JSON).
    """

    attached_document: typing.Optional[typing.List["Reference"]]

    """ Supporting documentation, typically for regulatory submission.
    List of `Reference` items (represented as `dict` in JSON).
    """

    master_file: typing.Optional[typing.List["Reference"]]

    """ A master file for to the medicinal product (e.g. Pharmacovigilance
        System Master File).
    List of `Reference` items (represented as `dict` in JSON).
    """

    contact: typing.Optional[typing.List["Reference"]]

    """ A product specific contact, person (in a role), or an organization.
    List of `Reference` items (represented as `dict` in JSON).
    """

    clinical_trial: typing.Optional[typing.List["Reference"]]

    """ Clinical trials or studies that this product is involved in.
    List of `Reference` items (represented as `dict` in JSON).
    """

    name: typing.List["MedicinalProductName"]

    """ The product's name, including full name and possibly coded parts.
    List of `MedicinalProductName` items (represented as `dict` in JSON).
    """

    cross_reference: typing.Optional[typing.List["Identifier"]]

    """ Reference to another product, e.g. for linking authorised to
        investigational product.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    manufacturing_business_operation: typing.Optional[typing.List["MedicinalProductManufacturingBusinessOperation"]]

    """ An operation applied to the product, for manufacturing or
        adminsitrative purpose.
    List of `MedicinalProductManufacturingBusinessOperation` items (represented as `dict` in JSON).
    """

    special_designation: typing.Optional[typing.List["MedicinalProductSpecialDesignation"]]

    """ Indicates if the medicinal product has an orphan designation for
        the treatment of a rare disease.
    List of `MedicinalProductSpecialDesignation` items (represented as `dict` in JSON).
    """



    _validate_primitive_special_measures = get_primitive_field_root_validator("special_measures")
    


class MedicinalProductAuthorization(DomainResource):
    """ The regulatory authorization of a medicinal product.
    """
    resource_type: typing.Literal["MedicinalProductAuthorization"] = "MedicinalProductAuthorization"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProductAuthorization",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business identifier for the marketing authorization, as assigned by
        a regulator.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    subject: typing.Optional["Reference"]

    """ The medicinal product that is being authorized.
    Type `Reference` (represented as `dict` in JSON).
    """

    country: typing.Optional[typing.List["CodeableConcept"]]

    """ The country in which the marketing authorization has been granted.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Jurisdiction within a country.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    status: typing.Optional["CodeableConcept"]

    """ The status of the marketing authorization.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    status_date: typing.Optional[FHIRDateTime]

    """ The date at which the given status has become applicable.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    restore_date: typing.Optional[FHIRDateTime]

    """ The date when a suspended the marketing or the marketing
        authorization of the product is anticipated to be restored.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    restore_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_restore_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    validity_period: typing.Optional["Period"]

    """ The beginning of the time period in which the marketing
        authorization is in the specific status shall be specified A
        complete date consisting of day, month and year shall be specified
        using the ISO 8601 date format.
    Type `Period` (represented as `dict` in JSON).
    """

    data_exclusivity_period: typing.Optional["Period"]

    """ A period of time after authorization before generic product
        applicatiosn can be submitted.
    Type `Period` (represented as `dict` in JSON).
    """

    date_of_first_authorization: typing.Optional[FHIRDateTime]

    """ The date when the first authorization was granted by a Medicines
        Regulatory Agency.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date_of_first_authorization__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date_of_first_authorization`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    international_birth_date: typing.Optional[FHIRDateTime]

    """ Date of first marketing authorization for a company's new medicinal
        product in any country in the World.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    international_birth_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_international_birth_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    legal_basis: typing.Optional["CodeableConcept"]

    """ The legal framework against which this authorization is granted.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    jurisdictional_authorization: typing.Optional[typing.List["MedicinalProductAuthorizationJurisdictionalAuthorization"]]

    """ Authorization in areas within a country.
    List of `MedicinalProductAuthorizationJurisdictionalAuthorization` items (represented as `dict` in JSON).
    """

    holder: typing.Optional["Reference"]

    """ Marketing Authorization Holder.
    Type `Reference` (represented as `dict` in JSON).
    """

    regulator: typing.Optional["Reference"]

    """ Medicines Regulatory Agency.
    Type `Reference` (represented as `dict` in JSON).
    """

    procedure: typing.Optional["MedicinalProductAuthorizationProcedure"]

    """ The regulatory procedure for granting or amending a marketing
        authorization.
    Type `MedicinalProductAuthorizationProcedure` (represented as `dict` in JSON).
    """



    _validate_primitive_status_date = get_primitive_field_root_validator("status_date")
    
    _validate_primitive_restore_date = get_primitive_field_root_validator("restore_date")
    
    _validate_primitive_date_of_first_authorization = get_primitive_field_root_validator("date_of_first_authorization")
    
    _validate_primitive_international_birth_date = get_primitive_field_root_validator("international_birth_date")
    


class MedicinalProductContraindication(DomainResource):
    """ MedicinalProductContraindication.

    The clinical particulars - indications, contraindications etc. of a
    medicinal product, including for regulatory purposes.
    """
    resource_type: typing.Literal["MedicinalProductContraindication"] = "MedicinalProductContraindication"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProductContraindication",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    subject: typing.Optional[typing.List["Reference"]]

    """ The medication for which this is an indication.
    List of `Reference` items (represented as `dict` in JSON).
    """

    disease: typing.Optional["CodeableConcept"]

    """ The disease, symptom or procedure for the contraindication.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    disease_status: typing.Optional["CodeableConcept"]

    """ The status of the disease or symptom for the contraindication.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    comorbidity: typing.Optional[typing.List["CodeableConcept"]]

    """ A comorbidity (concurrent condition) or coinfection.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    therapeutic_indication: typing.Optional[typing.List["Reference"]]

    """ Information about the use of the medicinal product in relation to
        other therapies as part of the indication.
    List of `Reference` items (represented as `dict` in JSON).
    """

    other_therapy: typing.Optional[typing.List["MedicinalProductContraindicationOtherTherapy"]]

    """ Information about the use of the medicinal product in relation to
        other therapies described as part of the indication.
    List of `MedicinalProductContraindicationOtherTherapy` items (represented as `dict` in JSON).
    """

    population: typing.Optional[typing.List["Population"]]

    """ The population group to which this applies.
    List of `Population` items (represented as `dict` in JSON).
    """




class MedicinalProductIndication(DomainResource):
    """ MedicinalProductIndication.

    Indication for the Medicinal Product.
    """
    resource_type: typing.Literal["MedicinalProductIndication"] = "MedicinalProductIndication"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProductIndication",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    subject: typing.Optional[typing.List["Reference"]]

    """ The medication for which this is an indication.
    List of `Reference` items (represented as `dict` in JSON).
    """

    disease_symptom_procedure: typing.Optional["CodeableConcept"]

    """ The disease, symptom or procedure that is the indication for
        treatment.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    disease_status: typing.Optional["CodeableConcept"]

    """ The status of the disease or symptom for which the indication
        applies.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    comorbidity: typing.Optional[typing.List["CodeableConcept"]]

    """ Comorbidity (concurrent condition) or co-infection as part of the
        indication.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    intended_effect: typing.Optional["CodeableConcept"]

    """ The intended effect, aim or strategy to be achieved by the
        indication.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    duration: typing.Optional["Quantity"]

    """ Timing or duration information as part of the indication.
    Type `Quantity` (represented as `dict` in JSON).
    """

    other_therapy: typing.Optional[typing.List["MedicinalProductIndicationOtherTherapy"]]

    """ Information about the use of the medicinal product in relation to
        other therapies described as part of the indication.
    List of `MedicinalProductIndicationOtherTherapy` items (represented as `dict` in JSON).
    """

    undesirable_effect: typing.Optional[typing.List["Reference"]]

    """ Describe the undesirable effects of the medicinal product.
    List of `Reference` items (represented as `dict` in JSON).
    """

    population: typing.Optional[typing.List["Population"]]

    """ The population group to which this applies.
    List of `Population` items (represented as `dict` in JSON).
    """




class MedicinalProductIngredient(DomainResource):
    """ An ingredient of a manufactured item or pharmaceutical product.
    """
    resource_type: typing.Literal["MedicinalProductIngredient"] = "MedicinalProductIngredient"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProductIngredient",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional["Identifier"]

    """ Identifier for the ingredient.
    Type `Identifier` (represented as `dict` in JSON).
    """

    role: "CodeableConcept"

    """ Ingredient role e.g. Active ingredient, excipient.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    allergenic_indicator: typing.Optional[bool]

    """ If the ingredient is a known or suspected allergen.
    Type `bool`. Is a JSON Primitive element.
    """
    

    allergenic_indicator__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_allergenic_indicator`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    manufacturer: typing.Optional[typing.List["Reference"]]

    """ Manufacturer of this Ingredient.
    List of `Reference` items (represented as `dict` in JSON).
    """

    specified_substance: typing.Optional[typing.List["MedicinalProductIngredientSpecifiedSubstance"]]

    """ A specified substance that comprises this ingredient.
    List of `MedicinalProductIngredientSpecifiedSubstance` items (represented as `dict` in JSON).
    """

    substance: typing.Optional["MedicinalProductIngredientSubstance"]

    """ The ingredient substance.
    Type `MedicinalProductIngredientSubstance` (represented as `dict` in JSON).
    """



    _validate_primitive_allergenic_indicator = get_primitive_field_root_validator("allergenic_indicator")
    


class MedicinalProductInteraction(DomainResource):
    """ MedicinalProductInteraction.

    The interactions of the medicinal product with other medicinal products, or
    other forms of interactions.
    """
    resource_type: typing.Literal["MedicinalProductInteraction"] = "MedicinalProductInteraction"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProductInteraction",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    subject: typing.Optional[typing.List["Reference"]]

    """ The medication for which this is a described interaction.
    List of `Reference` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ The interaction described.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    interactant: typing.Optional[typing.List["MedicinalProductInteractionInteractant"]]

    """ The specific medication, food or laboratory test that interacts.
    List of `MedicinalProductInteractionInteractant` items (represented as `dict` in JSON).
    """

    type: typing.Optional["CodeableConcept"]

    """ The type of the interaction e.g. drug-drug interaction, drug-food
        interaction, drug-lab test interaction.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    effect: typing.Optional["CodeableConcept"]

    """ The effect of the interaction, for example "reduced gastric
        absorption of primary medication".
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    incidence: typing.Optional["CodeableConcept"]

    """ The incidence of the interaction, e.g. theoretical, observed.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    management: typing.Optional["CodeableConcept"]

    """ Actions for managing the interaction.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """



    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class MedicinalProductManufactured(DomainResource):
    """ The manufactured item as contained in the packaged medicinal product.
    """
    resource_type: typing.Literal["MedicinalProductManufactured"] = "MedicinalProductManufactured"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProductManufactured",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    manufactured_dose_form: "CodeableConcept"

    """ Dose form as manufactured and before any transformation into the
        pharmaceutical product.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    unit_of_presentation: typing.Optional["CodeableConcept"]

    """ The “real world” units in which the quantity of the manufactured
        item is described.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    quantity: "Quantity"

    """ The quantity or "count number" of the manufactured item.
    Type `Quantity` (represented as `dict` in JSON).
    """

    manufacturer: typing.Optional[typing.List["Reference"]]

    """ Manufacturer of the item (Note that this should be named
        "manufacturer" but it currently causes technical issues).
    List of `Reference` items (represented as `dict` in JSON).
    """

    ingredient: typing.Optional[typing.List["Reference"]]

    """ Ingredient.
    List of `Reference` items (represented as `dict` in JSON).
    """

    physical_characteristics: typing.Optional["ProdCharacteristic"]

    """ Dimensions, color etc..
    Type `ProdCharacteristic` (represented as `dict` in JSON).
    """

    other_characteristics: typing.Optional[typing.List["CodeableConcept"]]

    """ Other codeable characteristics.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """




class MedicinalProductPackaged(DomainResource):
    """ A medicinal product in a container or package.
    """
    resource_type: typing.Literal["MedicinalProductPackaged"] = "MedicinalProductPackaged"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProductPackaged",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Unique identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    subject: typing.Optional[typing.List["Reference"]]

    """ The product with this is a pack for.
    List of `Reference` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Textual description.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    legal_status_of_supply: typing.Optional["CodeableConcept"]

    """ The legal status of supply of the medicinal product as classified
        by the regulator.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    marketing_status: typing.Optional[typing.List["MarketingStatus"]]

    """ Marketing information.
    List of `MarketingStatus` items (represented as `dict` in JSON).
    """

    marketing_authorization: typing.Optional["Reference"]

    """ Manufacturer of this Package Item.
    Type `Reference` (represented as `dict` in JSON).
    """

    manufacturer: typing.Optional[typing.List["Reference"]]

    """ Manufacturer of this Package Item.
    List of `Reference` items (represented as `dict` in JSON).
    """

    batch_identifier: typing.Optional[typing.List["MedicinalProductPackagedBatchIdentifier"]]

    """ Batch numbering.
    List of `MedicinalProductPackagedBatchIdentifier` items (represented as `dict` in JSON).
    """

    package_item: typing.List["MedicinalProductPackagedPackageItem"]

    """ A packaging item, as a contained for medicine, possibly with other
        packaging items within.
    List of `MedicinalProductPackagedPackageItem` items (represented as `dict` in JSON).
    """



    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class MedicinalProductPharmaceutical(DomainResource):
    """ A pharmaceutical product described in terms of its composition and dose
    form.
    """
    resource_type: typing.Literal["MedicinalProductPharmaceutical"] = "MedicinalProductPharmaceutical"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProductPharmaceutical",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ An identifier for the pharmaceutical medicinal product.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    administrable_dose_form: "CodeableConcept"

    """ The administrable dose form, after necessary reconstitution.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    unit_of_presentation: typing.Optional["CodeableConcept"]

    """ Todo.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    ingredient: typing.Optional[typing.List["Reference"]]

    """ Ingredient.
    List of `Reference` items (represented as `dict` in JSON).
    """

    device: typing.Optional[typing.List["Reference"]]

    """ Accompanying device.
    List of `Reference` items (represented as `dict` in JSON).
    """

    characteristics: typing.Optional[typing.List["MedicinalProductPharmaceuticalCharacteristics"]]

    """ Characteristics e.g. a products onset of action.
    List of `MedicinalProductPharmaceuticalCharacteristics` items (represented as `dict` in JSON).
    """

    route_of_administration: typing.List["MedicinalProductPharmaceuticalRouteOfAdministration"]

    """ The path by which the pharmaceutical product is taken into or makes
        contact with the body.
    List of `MedicinalProductPharmaceuticalRouteOfAdministration` items (represented as `dict` in JSON).
    """




class MedicinalProductUndesirableEffect(DomainResource):
    """ MedicinalProductUndesirableEffect.

    Describe the undesirable effects of the medicinal product.
    """
    resource_type: typing.Literal["MedicinalProductUndesirableEffect"] = "MedicinalProductUndesirableEffect"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProductUndesirableEffect",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    subject: typing.Optional[typing.List["Reference"]]

    """ The medication for which this is an indication.
    List of `Reference` items (represented as `dict` in JSON).
    """

    symptom_condition_effect: typing.Optional["CodeableConcept"]

    """ The symptom, condition or undesirable effect.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    classification: typing.Optional["CodeableConcept"]

    """ Classification of the effect.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    frequency_of_occurrence: typing.Optional["CodeableConcept"]

    """ The frequency of occurrence of the effect.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    population: typing.Optional[typing.List["Population"]]

    """ The population group to which this applies.
    List of `Population` items (represented as `dict` in JSON).
    """




class MessageDefinition(DomainResource):
    """ A resource that defines a type of message that can be exchanged between
    systems.

    Defines the characteristics of a message that can be shared between
    systems, including the type of event that initiates the message, the
    content to be transmitted and what response(s), if any, are permitted.
    """
    resource_type: typing.Literal["MessageDefinition"] = "MessageDefinition"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MessageDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: typing.Optional[FHIRString]

    """ Business Identifier for a given MessageDefinition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    identifier: typing.Optional[typing.List["Identifier"]]

    """ Primary key for the message definition on a given server.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    version: typing.Optional[FHIRString]

    """ Business version of the message definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Name for this message definition (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Name for this message definition (human friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    replaces: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Takes the place of.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    replaces__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_replaces`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    experimental: typing.Optional[bool]

    """ For testing purposes, not real usage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    experimental__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_experimental`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    date: FHIRDateTime

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the message definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for message definition (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    purpose: typing.Optional[FHIRString]

    """ Why this message definition is defined.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    purpose__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_purpose`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    copyright: typing.Optional[FHIRString]

    """ Use and/or publishing restrictions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    copyright__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_copyright`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    base: typing.Optional[FHIRString]

    """ Definition this one is based on.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    base__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_base`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    parent: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Protocol/workflow this is part of.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    parent__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_parent`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    event_coding: typing.Optional["Coding"]

    """ Event code  or link to the EventDefinition.
    Type `Coding` (represented as `dict` in JSON).
    """

    event_uri: typing.Optional[FHIRString]

    """ Event code  or link to the EventDefinition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    event_uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_event_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    category: typing.Optional["MessageSignificanceCategory"]

    """ consequence | currency | notification.
    Type `MessageSignificanceCategory` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    category__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_category`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    focus: typing.Optional[typing.List["MessageDefinitionFocus"]]

    """ Resource(s) that are the subject of the event.
    List of `MessageDefinitionFocus` items (represented as `dict` in JSON).
    """

            
    
    
    response_required: typing.Optional["MessageheaderResponseRequest"]

    """ always | on-error | never | on-success.
    Type `MessageheaderResponseRequest` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    response_required__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_response_required`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    allowed_response: typing.Optional[typing.List["MessageDefinitionAllowedResponse"]]

    """ Responses to this message.
    List of `MessageDefinitionAllowedResponse` items (represented as `dict` in JSON).
    """

    graph: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Canonical reference to a GraphDefinition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    graph__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_graph`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'MessageDefinition.event[x]', 'choice_of_type': 'event', 'orig_name': 'eventCoding', 'name': 'eventCoding', 'parent_name': 'MessageDefinition', 'class_name': 'Coding', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Event code  or link to the EventDefinition', 'formal': 'Event code or link to the EventDefinition.', 'representation': None}
    _event_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['event_coding', 'event_uri']), False))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["category"]["enum"]
            enums.clear()
            for item in MessageSignificanceCategory:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["responseRequired"]["enum"]
            enums.clear()
            for item in MessageheaderResponseRequest:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_replaces = get_primitive_field_root_validator("replaces")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_experimental = get_primitive_field_root_validator("experimental")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_purpose = get_primitive_field_root_validator("purpose")
    
    _validate_primitive_copyright = get_primitive_field_root_validator("copyright")
    
    _validate_primitive_base = get_primitive_field_root_validator("base")
    
    _validate_primitive_parent = get_primitive_field_root_validator("parent")
    
    _validate_primitive_event_uri = get_primitive_field_root_validator("event_uri")
    
    _validate_primitive_category = get_primitive_field_root_validator("category")
    
    _validate_primitive_response_required = get_primitive_field_root_validator("response_required")
    
    _validate_primitive_graph = get_primitive_field_root_validator("graph")
    


class MessageHeader(DomainResource):
    """ A resource that describes a message that is exchanged between systems.

    The header for a message exchange that is either requesting or responding
    to an action.  The reference(s) that are the subject of the action as well
    as other information related to the action are typically transmitted in a
    bundle in which the MessageHeader resource instance is the first resource
    in the bundle.
    """
    resource_type: typing.Literal["MessageHeader"] = "MessageHeader"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MessageHeader",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    event_coding: typing.Optional["Coding"]

    """ Code for the event this message represents or link to event
        definition.
    Type `Coding` (represented as `dict` in JSON).
    """

    event_uri: typing.Optional[FHIRString]

    """ Code for the event this message represents or link to event
        definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    event_uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_event_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    destination: typing.Optional[typing.List["MessageHeaderDestination"]]

    """ Message destination application(s).
    List of `MessageHeaderDestination` items (represented as `dict` in JSON).
    """

    sender: typing.Optional["Reference"]

    """ Real world sender of the message.
    Type `Reference` (represented as `dict` in JSON).
    """

    enterer: typing.Optional["Reference"]

    """ The source of the data entry.
    Type `Reference` (represented as `dict` in JSON).
    """

    author: typing.Optional["Reference"]

    """ The source of the decision.
    Type `Reference` (represented as `dict` in JSON).
    """

    source: "MessageHeaderSource"

    """ Message source application.
    Type `MessageHeaderSource` (represented as `dict` in JSON).
    """

    responsible: typing.Optional["Reference"]

    """ Final responsibility for event.
    Type `Reference` (represented as `dict` in JSON).
    """

    reason: typing.Optional["CodeableConcept"]

    """ Cause of event.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    response: typing.Optional["MessageHeaderResponse"]

    """ If this is a reply to prior message.
    Type `MessageHeaderResponse` (represented as `dict` in JSON).
    """

    focus: typing.Optional[typing.List["Reference"]]

    """ The actual content of the message.
    List of `Reference` items (represented as `dict` in JSON).
    """

    definition: typing.Optional[FHIRString]

    """ Link to the definition for this message.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    definition__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_definition`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'MessageHeader.event[x]', 'choice_of_type': 'event', 'orig_name': 'eventCoding', 'name': 'eventCoding', 'parent_name': 'MessageHeader', 'class_name': 'Coding', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Code for the event this message represents or link to event definition', 'formal': 'Code that identifies the event this message represents and connects it with its definition. Events defined as part of the FHIR specification have the system value "http://terminology.hl7.org/CodeSystem/message-events".  Alternatively uri to the EventDefinition.', 'representation': None}
    _event_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['event_coding', 'event_uri']), False))

    _validate_primitive_event_uri = get_primitive_field_root_validator("event_uri")
    
    _validate_primitive_definition = get_primitive_field_root_validator("definition")
    


class MolecularSequence(DomainResource):
    """ Information about a biological sequence.

    Raw data describing a biological sequence.
    """
    resource_type: typing.Literal["MolecularSequence"] = "MolecularSequence"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MolecularSequence",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Unique ID for this particular sequence. This is a FHIR-defined id.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    type: typing.Optional["SequenceType"]

    """ aa | dna | rna.
    Type `SequenceType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    coordinate_system: FHIRInt

    """ Base number of coordinate system (0 for 0-based numbering or
        coordinates, inclusive start, exclusive end, 1 for 1-based
        numbering, inclusive start, inclusive end).
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    coordinate_system__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_coordinate_system`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    patient: typing.Optional["Reference"]

    """ Who and/or what this is about.
    Type `Reference` (represented as `dict` in JSON).
    """

    specimen: typing.Optional["Reference"]

    """ Specimen used for sequencing.
    Type `Reference` (represented as `dict` in JSON).
    """

    device: typing.Optional["Reference"]

    """ The method for sequencing.
    Type `Reference` (represented as `dict` in JSON).
    """

    performer: typing.Optional["Reference"]

    """ Who should be responsible for test result.
    Type `Reference` (represented as `dict` in JSON).
    """

    quantity: typing.Optional["Quantity"]

    """ The number of copies of the sequence of interest.  (RNASeq).
    Type `Quantity` (represented as `dict` in JSON).
    """

    reference_seq: typing.Optional["MolecularSequenceReferenceSeq"]

    """ A sequence used as reference.
    Type `MolecularSequenceReferenceSeq` (represented as `dict` in JSON).
    """

    variant: typing.Optional[typing.List["MolecularSequenceVariant"]]

    """ Variant in sequence.
    List of `MolecularSequenceVariant` items (represented as `dict` in JSON).
    """

    observed_seq: typing.Optional[FHIRString]

    """ Sequence that was observed.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    observed_seq__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_observed_seq`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    quality: typing.Optional[typing.List["MolecularSequenceQuality"]]

    """ An set of value as quality of sequence.
    List of `MolecularSequenceQuality` items (represented as `dict` in JSON).
    """

    read_coverage: typing.Optional[FHIRInt]

    """ Average number of reads representing a given nucleotide in the
        reconstructed sequence.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    read_coverage__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_read_coverage`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    repository: typing.Optional[typing.List["MolecularSequenceRepository"]]

    """ External repository which contains detailed report related with
        observedSeq in this resource.
    List of `MolecularSequenceRepository` items (represented as `dict` in JSON).
    """

    pointer: typing.Optional[typing.List["Reference"]]

    """ Pointer to next atomic sequence.
    List of `Reference` items (represented as `dict` in JSON).
    """

    structure_variant: typing.Optional[typing.List["MolecularSequenceStructureVariant"]]

    """ Structural variant.
    List of `MolecularSequenceStructureVariant` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in SequenceType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_coordinate_system = get_primitive_field_root_validator("coordinate_system")
    
    _validate_primitive_observed_seq = get_primitive_field_root_validator("observed_seq")
    
    _validate_primitive_read_coverage = get_primitive_field_root_validator("read_coverage")
    


class NamingSystem(DomainResource):
    """ System of unique identification.

    A curated namespace that issues unique symbols within that namespace for
    the identification of concepts, people, devices, etc.  Represents a
    "System" used within the Identifier and Coding data types.
    """
    resource_type: typing.Literal["NamingSystem"] = "NamingSystem"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/NamingSystem",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: FHIRRequiredString

    """ Name for this naming system (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    kind: "NamingSystemType"

    """ codesystem | identifier | root.
    Type `NamingSystemType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    kind__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_kind`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    date: FHIRDateTime

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    responsible: typing.Optional[FHIRString]

    """ Who maintains system namespace?.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    responsible__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_responsible`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional["CodeableConcept"]

    """ e.g. driver,  provider,  patient, bank etc..
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the naming system.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for naming system (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    usage: typing.Optional[FHIRString]

    """ How/where is it used.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    usage__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_usage`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    unique_id: typing.List["NamingSystemUniqueId"]

    """ Unique identifiers used for system.
    List of `NamingSystemUniqueId` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["kind"]["enum"]
            enums.clear()
            for item in NamingSystemType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_kind = get_primitive_field_root_validator("kind")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_responsible = get_primitive_field_root_validator("responsible")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_usage = get_primitive_field_root_validator("usage")
    


class NutritionOrder(DomainResource):
    """ Diet, formula or nutritional supplement request.

    A request to supply a diet, formula feeding (enteral) or oral nutritional
    supplement to a patient/resident.
    """
    resource_type: typing.Literal["NutritionOrder"] = "NutritionOrder"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/NutritionOrder",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Identifiers assigned to this order.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    instantiates_canonical: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Instantiates FHIR protocol or definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates_canonical__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    instantiates_uri: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Instantiates external protocol or definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates_uri__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    instantiates: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Instantiates protocol or definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "RequestStatus"

    """ draft | active | on-hold | revoked | completed | entered-in-error |
        unknown.
    Type `RequestStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    intent: "RequestIntent"

    """ proposal | plan | directive | order | original-order | reflex-order
        | filler-order | instance-order | option.
    Type `RequestIntent` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    intent__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_intent`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    patient: "Reference"

    """ The person who requires the diet, formula or nutritional supplement.
    Type `Reference` (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ The encounter associated with this nutrition order.
    Type `Reference` (represented as `dict` in JSON).
    """

    date_time: FHIRDateTime

    """ Date and time the nutrition order was requested.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    orderer: typing.Optional["Reference"]

    """ Who ordered the diet, formula or nutritional supplement.
    Type `Reference` (represented as `dict` in JSON).
    """

    allergy_intolerance: typing.Optional[typing.List["Reference"]]

    """ List of the patient's food and nutrition-related allergies and
        intolerances.
    List of `Reference` items (represented as `dict` in JSON).
    """

    food_preference_modifier: typing.Optional[typing.List["CodeableConcept"]]

    """ Order-specific modifier about the type of food that should be given.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    exclude_food_modifier: typing.Optional[typing.List["CodeableConcept"]]

    """ Order-specific modifier about the type of food that should not be
        given.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    oral_diet: typing.Optional["NutritionOrderOralDiet"]

    """ Oral diet components.
    Type `NutritionOrderOralDiet` (represented as `dict` in JSON).
    """

    supplement: typing.Optional[typing.List["NutritionOrderSupplement"]]

    """ Supplement components.
    List of `NutritionOrderSupplement` items (represented as `dict` in JSON).
    """

    enteral_formula: typing.Optional["NutritionOrderEnteralFormula"]

    """ Enteral formula components.
    Type `NutritionOrderEnteralFormula` (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Comments.
    List of `Annotation` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in RequestStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["intent"]["enum"]
            enums.clear()
            for item in RequestIntent:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_instantiates_canonical = get_primitive_field_root_validator("instantiates_canonical")
    
    _validate_primitive_instantiates_uri = get_primitive_field_root_validator("instantiates_uri")
    
    _validate_primitive_instantiates = get_primitive_field_root_validator("instantiates")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_intent = get_primitive_field_root_validator("intent")
    
    _validate_primitive_date_time = get_primitive_field_root_validator("date_time")
    


class Observation(DomainResource):
    """ Measurements and simple assertions.

    Measurements and simple assertions made about a patient, device or other
    subject.
    """
    resource_type: typing.Literal["Observation"] = "Observation"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Observation",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business Identifier for observation.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    based_on: typing.Optional[typing.List["Reference"]]

    """ Fulfills plan, proposal or order.
    List of `Reference` items (represented as `dict` in JSON).
    """

    part_of: typing.Optional[typing.List["Reference"]]

    """ Part of referenced event.
    List of `Reference` items (represented as `dict` in JSON).
    """

            
    
    
    status: "ObservationStatus"

    """ registered | preliminary | final | amended +.
    Type `ObservationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    category: typing.Optional[typing.List["CodeableConcept"]]

    """ Classification of  type of observation.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    code: "CodeableConcept"

    """ Type of observation (code / type).
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject: typing.Optional["Reference"]

    """ Who and/or what the observation is about.
    Type `Reference` (represented as `dict` in JSON).
    """

    focus: typing.Optional[typing.List["Reference"]]

    """ What the observation is about, when it is not about the subject of
        record.
    List of `Reference` items (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Healthcare event during which this observation is made.
    Type `Reference` (represented as `dict` in JSON).
    """

    effective_date_time: typing.Optional[FHIRDateTime]

    """ Clinically relevant time/time-period for observation.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    effective_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_effective_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    effective_period: typing.Optional["Period"]

    """ Clinically relevant time/time-period for observation.
    Type `Period` (represented as `dict` in JSON).
    """

    effective_timing: typing.Optional["Timing"]

    """ Clinically relevant time/time-period for observation.
    Type `Timing` (represented as `dict` in JSON).
    """

    effective_instant: typing.Optional[FHIRInstant]

    """ Clinically relevant time/time-period for observation.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    effective_instant__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_effective_instant`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    issued: typing.Optional[FHIRInstant]

    """ Date/Time this version was made available.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    issued__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_issued`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    performer: typing.Optional[typing.List["Reference"]]

    """ Who is responsible for the observation.
    List of `Reference` items (represented as `dict` in JSON).
    """

    value_quantity: typing.Optional["Quantity"]

    """ Actual result.
    Type `Quantity` (represented as `dict` in JSON).
    """

    value_codeable_concept: typing.Optional["CodeableConcept"]

    """ Actual result.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value_string: typing.Optional[FHIRString]

    """ Actual result.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_boolean: typing.Optional[bool]

    """ Actual result.
    Type `bool`. Is a JSON Primitive element.
    """
    

    value_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_integer: typing.Optional[FHIRInt]

    """ Actual result.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_integer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_integer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_range: typing.Optional["Range"]

    """ Actual result.
    Type `Range` (represented as `dict` in JSON).
    """

    value_ratio: typing.Optional["Ratio"]

    """ Actual result.
    Type `Ratio` (represented as `dict` in JSON).
    """

    value_sampled_data: typing.Optional["SampledData"]

    """ Actual result.
    Type `SampledData` (represented as `dict` in JSON).
    """

    value_time: typing.Optional[FHIRTime]

    """ Actual result.
    Type `FHIRTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_date_time: typing.Optional[FHIRDateTime]

    """ Actual result.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_period: typing.Optional["Period"]

    """ Actual result.
    Type `Period` (represented as `dict` in JSON).
    """

    data_absent_reason: typing.Optional["CodeableConcept"]

    """ Why the result is missing.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    interpretation: typing.Optional[typing.List["CodeableConcept"]]

    """ High, low, normal, etc..
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Comments about the observation.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    body_site: typing.Optional["CodeableConcept"]

    """ Observed body part.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    method: typing.Optional["CodeableConcept"]

    """ How it was done.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    specimen: typing.Optional["Reference"]

    """ Specimen used for this observation.
    Type `Reference` (represented as `dict` in JSON).
    """

    device: typing.Optional["Reference"]

    """ (Measurement) Device.
    Type `Reference` (represented as `dict` in JSON).
    """

    reference_range: typing.Optional[typing.List["ObservationReferenceRange"]]

    """ Provides guide for interpretation.
    List of `ObservationReferenceRange` items (represented as `dict` in JSON).
    """

    has_member: typing.Optional[typing.List["Reference"]]

    """ Related resource that belongs to the Observation group.
    List of `Reference` items (represented as `dict` in JSON).
    """

    derived_from: typing.Optional[typing.List["Reference"]]

    """ Related measurements the observation is made from.
    List of `Reference` items (represented as `dict` in JSON).
    """

    component: typing.Optional[typing.List["ObservationComponent"]]

    """ Component results.
    List of `ObservationComponent` items (represented as `dict` in JSON).
    """



#   {'path': 'Observation.effective[x]', 'choice_of_type': 'effective', 'orig_name': 'effectiveDateTime', 'name': 'effectiveDateTime', 'parent_name': 'Observation', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Clinically relevant time/time-period for observation', 'formal': 'The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.', 'representation': None}
    _effective_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['effective_date_time', 'effective_period', 'effective_timing', 'effective_instant']), True))

#   {'path': 'Observation.value[x]', 'choice_of_type': 'value', 'orig_name': 'valueQuantity', 'name': 'valueQuantity', 'parent_name': 'Observation', 'class_name': 'Quantity', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Actual result', 'formal': 'The information determined as a result of making the observation, if the information has a simple value.', 'representation': None}
    _value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['value_quantity', 'value_codeable_concept', 'value_string', 'value_boolean', 'value_integer', 'value_range', 'value_ratio', 'value_sampled_data', 'value_time', 'value_date_time', 'value_period']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in ObservationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_effective_date_time = get_primitive_field_root_validator("effective_date_time")
    
    _validate_primitive_effective_instant = get_primitive_field_root_validator("effective_instant")
    
    _validate_primitive_issued = get_primitive_field_root_validator("issued")
    
    _validate_primitive_value_string = get_primitive_field_root_validator("value_string")
    
    _validate_primitive_value_boolean = get_primitive_field_root_validator("value_boolean")
    
    _validate_primitive_value_integer = get_primitive_field_root_validator("value_integer")
    
    _validate_primitive_value_time = get_primitive_field_root_validator("value_time")
    
    _validate_primitive_value_date_time = get_primitive_field_root_validator("value_date_time")
    


class ObservationDefinition(DomainResource):
    """ Definition of an observation.

    Set of definitional characteristics for a kind of observation or
    measurement produced or consumed by an orderable health care service.
    """
    resource_type: typing.Literal["ObservationDefinition"] = "ObservationDefinition"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ObservationDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    category: typing.Optional[typing.List["CodeableConcept"]]

    """ Category of observation.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    code: "CodeableConcept"

    """ Type of observation (code / type).
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business identifier for this ObservationDefinition instance.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    permitted_data_type: typing.Optional[typing.List[typing.Optional["ObservationDataType"]]]

    """ Quantity | CodeableConcept | string | boolean | integer | Range |
        Ratio | SampledData | time | dateTime | Period.
    List of `ObservationDataType` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    permitted_data_type__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_permitted_data_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    multiple_results_allowed: typing.Optional[bool]

    """ Multiple results allowed.
    Type `bool`. Is a JSON Primitive element.
    """
    

    multiple_results_allowed__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_multiple_results_allowed`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    method: typing.Optional["CodeableConcept"]

    """ Method used to produce the observation.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    preferred_report_name: typing.Optional[FHIRString]

    """ Preferred report name.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    preferred_report_name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_preferred_report_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    quantitative_details: typing.Optional["ObservationDefinitionQuantitativeDetails"]

    """ Characteristics of quantitative results.
    Type `ObservationDefinitionQuantitativeDetails` (represented as `dict` in JSON).
    """

    qualified_interval: typing.Optional[typing.List["ObservationDefinitionQualifiedInterval"]]

    """ Qualified range for continuous and ordinal observation results.
    List of `ObservationDefinitionQualifiedInterval` items (represented as `dict` in JSON).
    """

    valid_coded_value_set: typing.Optional["Reference"]

    """ Value set of valid coded values for the observations conforming to
        this ObservationDefinition.
    Type `Reference` (represented as `dict` in JSON).
    """

    normal_coded_value_set: typing.Optional["Reference"]

    """ Value set of normal coded values for the observations conforming to
        this ObservationDefinition.
    Type `Reference` (represented as `dict` in JSON).
    """

    abnormal_coded_value_set: typing.Optional["Reference"]

    """ Value set of abnormal coded values for the observations conforming
        to this ObservationDefinition.
    Type `Reference` (represented as `dict` in JSON).
    """

    critical_coded_value_set: typing.Optional["Reference"]

    """ Value set of critical coded values for the observations conforming
        to this ObservationDefinition.
    Type `Reference` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["permittedDataType"]["enum"]
            enums.clear()
            for item in ObservationDataType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_permitted_data_type = get_primitive_field_root_validator("permitted_data_type")
    
    _validate_primitive_multiple_results_allowed = get_primitive_field_root_validator("multiple_results_allowed")
    
    _validate_primitive_preferred_report_name = get_primitive_field_root_validator("preferred_report_name")
    


class OperationDefinition(DomainResource):
    """ Definition of an operation or a named query.

    A formal computable definition of an operation (on the RESTful interface)
    or a named query (using the search interaction).
    """
    resource_type: typing.Literal["OperationDefinition"] = "OperationDefinition"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/OperationDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: typing.Optional[FHIRString]

    """ Canonical identifier for this operation definition, represented as
        a URI (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    version: typing.Optional[FHIRString]

    """ Business version of the operation definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: FHIRRequiredString

    """ Name for this operation definition (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Name for this operation definition (human friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    kind: "OperationKind"

    """ operation | query.
    Type `OperationKind` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    kind__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_kind`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    experimental: typing.Optional[bool]

    """ For testing purposes, not real usage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    experimental__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_experimental`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the operation definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for operation definition (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    purpose: typing.Optional[FHIRString]

    """ Why this operation definition is defined.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    purpose__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_purpose`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    affects_state: typing.Optional[bool]

    """ Whether content is changed by the operation.
    Type `bool`. Is a JSON Primitive element.
    """
    

    affects_state__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_affects_state`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code: FHIRCode

    """ Name used to invoke the operation.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    comment: typing.Optional[FHIRString]

    """ Additional information about use.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    comment__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_comment`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    base: typing.Optional[FHIRString]

    """ Marks this as a profile of the base.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    base__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_base`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    resource: typing.Optional[typing.List[typing.Optional["ResourceType"]]]

    """ Types this operation applies to.
    List of `ResourceType` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    resource__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_resource`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    system: bool

    """ Invoke at the system level?.
    Type `bool`. Is a JSON Primitive element.
    """
    

    system__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_system`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: bool

    """ Invoke at the type level?.
    Type `bool`. Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    instance: bool

    """ Invoke on an instance?.
    Type `bool`. Is a JSON Primitive element.
    """
    

    instance__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instance`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    input_profile: typing.Optional[FHIRString]

    """ Validation information for in parameters.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    input_profile__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_input_profile`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    output_profile: typing.Optional[FHIRString]

    """ Validation information for out parameters.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    output_profile__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_output_profile`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    parameter: typing.Optional[typing.List["OperationDefinitionParameter"]]

    """ Parameters for the operation/query.
    List of `OperationDefinitionParameter` items (represented as `dict` in JSON).
    """

    overload: typing.Optional[typing.List["OperationDefinitionOverload"]]

    """ Define overloaded variants for when  generating code.
    List of `OperationDefinitionOverload` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["kind"]["enum"]
            enums.clear()
            for item in OperationKind:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["resource"]["enum"]
            enums.clear()
            for item in ResourceType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_kind = get_primitive_field_root_validator("kind")
    
    _validate_primitive_experimental = get_primitive_field_root_validator("experimental")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_purpose = get_primitive_field_root_validator("purpose")
    
    _validate_primitive_affects_state = get_primitive_field_root_validator("affects_state")
    
    _validate_primitive_code = get_primitive_field_root_validator("code")
    
    _validate_primitive_comment = get_primitive_field_root_validator("comment")
    
    _validate_primitive_base = get_primitive_field_root_validator("base")
    
    _validate_primitive_resource = get_primitive_field_root_validator("resource")
    
    _validate_primitive_system = get_primitive_field_root_validator("system")
    
    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_instance = get_primitive_field_root_validator("instance")
    
    _validate_primitive_input_profile = get_primitive_field_root_validator("input_profile")
    
    _validate_primitive_output_profile = get_primitive_field_root_validator("output_profile")
    


class OperationOutcome(DomainResource):
    """ Information about the success/failure of an action.

    A collection of error, warning, or information messages that result from a
    system action.
    """
    resource_type: typing.Literal["OperationOutcome"] = "OperationOutcome"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/OperationOutcome",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    issue: typing.List["OperationOutcomeIssue"]

    """ A single issue associated with the action.
    List of `OperationOutcomeIssue` items (represented as `dict` in JSON).
    """




class Organization(DomainResource):
    """ A grouping of people or organizations with a common purpose.

    A formally or informally recognized grouping of people or organizations
    formed for the purpose of achieving some form of collective action.
    Includes companies, institutions, corporations, departments, community
    groups, healthcare practice groups, payer/insurer, etc.
    """
    resource_type: typing.Literal["Organization"] = "Organization"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Organization",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Identifies this organization  across multiple systems.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    active: typing.Optional[bool]

    """ Whether the organization's record is still in active use.
    Type `bool`. Is a JSON Primitive element.
    """
    

    active__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_active`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional[typing.List["CodeableConcept"]]

    """ Kind of organization.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    name: typing.Optional[FHIRString]

    """ Name used for the organization.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    alias: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ A list of alternate names that the organization is known as, or was
        known as in the past.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    alias__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_alias`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    telecom: typing.Optional[typing.List["ContactPoint"]]

    """ A contact detail for the organization.
    List of `ContactPoint` items (represented as `dict` in JSON).
    """

    address: typing.Optional[typing.List["Address"]]

    """ An address for the organization.
    List of `Address` items (represented as `dict` in JSON).
    """

    part_of: typing.Optional["Reference"]

    """ The organization of which this organization forms a part.
    Type `Reference` (represented as `dict` in JSON).
    """

    contact: typing.Optional[typing.List["OrganizationContact"]]

    """ Contact for the organization for a certain purpose.
    List of `OrganizationContact` items (represented as `dict` in JSON).
    """

    endpoint: typing.Optional[typing.List["Reference"]]

    """ Technical endpoints providing access to services operated for the
        organization.
    List of `Reference` items (represented as `dict` in JSON).
    """



    _validate_primitive_active = get_primitive_field_root_validator("active")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_alias = get_primitive_field_root_validator("alias")
    


class OrganizationAffiliation(DomainResource):
    """ Defines an affiliation/assotiation/relationship between 2 distinct
    oganizations, that is not a part-of relationship/sub-division relationship.
    """
    resource_type: typing.Literal["OrganizationAffiliation"] = "OrganizationAffiliation"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/OrganizationAffiliation",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business identifiers that are specific to this role.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    active: typing.Optional[bool]

    """ Whether this organization affiliation record is in active use.
    Type `bool`. Is a JSON Primitive element.
    """
    

    active__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_active`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    period: typing.Optional["Period"]

    """ The period during which the participatingOrganization is affiliated
        with the primary organization.
    Type `Period` (represented as `dict` in JSON).
    """

    organization: typing.Optional["Reference"]

    """ Organization where the role is available.
    Type `Reference` (represented as `dict` in JSON).
    """

    participating_organization: typing.Optional["Reference"]

    """ Organization that provides/performs the role (e.g. providing
        services or is a member of).
    Type `Reference` (represented as `dict` in JSON).
    """

    network: typing.Optional[typing.List["Reference"]]

    """ Health insurance provider network in which the
        participatingOrganization provides the role's services (if defined)
        at the indicated locations (if defined).
    List of `Reference` items (represented as `dict` in JSON).
    """

    code: typing.Optional[typing.List["CodeableConcept"]]

    """ Definition of the role the participatingOrganization plays.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    specialty: typing.Optional[typing.List["CodeableConcept"]]

    """ Specific specialty of the participatingOrganization in the context
        of the role.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    location: typing.Optional[typing.List["Reference"]]

    """ The location(s) at which the role occurs.
    List of `Reference` items (represented as `dict` in JSON).
    """

    healthcare_service: typing.Optional[typing.List["Reference"]]

    """ Healthcare services provided through the role.
    List of `Reference` items (represented as `dict` in JSON).
    """

    telecom: typing.Optional[typing.List["ContactPoint"]]

    """ Contact details at the participatingOrganization relevant to this
        Affiliation.
    List of `ContactPoint` items (represented as `dict` in JSON).
    """

    endpoint: typing.Optional[typing.List["Reference"]]

    """ Technical endpoints providing access to services operated for this
        role.
    List of `Reference` items (represented as `dict` in JSON).
    """



    _validate_primitive_active = get_primitive_field_root_validator("active")
    


class Patient(DomainResource):
    """ Information about an individual or animal receiving health care services.

    Demographics and other administrative information about an individual or
    animal receiving care or other health-related services.
    """
    resource_type: typing.Literal["Patient"] = "Patient"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Patient",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ An identifier for this patient.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    active: typing.Optional[bool]

    """ Whether this patient's record is in active use.
    Type `bool`. Is a JSON Primitive element.
    """
    

    active__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_active`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[typing.List["HumanName"]]

    """ A name associated with the patient.
    List of `HumanName` items (represented as `dict` in JSON).
    """

    telecom: typing.Optional[typing.List["ContactPoint"]]

    """ A contact detail for the individual.
    List of `ContactPoint` items (represented as `dict` in JSON).
    """

            
    
    
    gender: typing.Optional["AdministrativeGender"]

    """ male | female | other | unknown.
    Type `AdministrativeGender` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    gender__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_gender`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    birth_date: typing.Optional[FHIRDate]

    """ The date of birth for the individual.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    birth_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_birth_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    deceased_boolean: typing.Optional[bool]

    """ Indicates if the individual is deceased or not.
    Type `bool`. Is a JSON Primitive element.
    """
    

    deceased_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_deceased_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    deceased_date_time: typing.Optional[FHIRDateTime]

    """ Indicates if the individual is deceased or not.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    deceased_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_deceased_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    address: typing.Optional[typing.List["Address"]]

    """ An address for the individual.
    List of `Address` items (represented as `dict` in JSON).
    """

    marital_status: typing.Optional["CodeableConcept"]

    """ Marital (civil) status of a patient.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    multiple_birth_boolean: typing.Optional[bool]

    """ Whether patient is part of a multiple birth.
    Type `bool`. Is a JSON Primitive element.
    """
    

    multiple_birth_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_multiple_birth_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    multiple_birth_integer: typing.Optional[FHIRInt]

    """ Whether patient is part of a multiple birth.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    multiple_birth_integer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_multiple_birth_integer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    photo: typing.Optional[typing.List["Attachment"]]

    """ Image of the patient.
    List of `Attachment` items (represented as `dict` in JSON).
    """

    contact: typing.Optional[typing.List["PatientContact"]]

    """ A contact party (e.g. guardian, partner, friend) for the patient.
    List of `PatientContact` items (represented as `dict` in JSON).
    """

    communication: typing.Optional[typing.List["PatientCommunication"]]

    """ A language which may be used to communicate with the patient about
        his or her health.
    List of `PatientCommunication` items (represented as `dict` in JSON).
    """

    general_practitioner: typing.Optional[typing.List["Reference"]]

    """ Patient's nominated primary care provider.
    List of `Reference` items (represented as `dict` in JSON).
    """

    managing_organization: typing.Optional["Reference"]

    """ Organization that is the custodian of the patient record.
    Type `Reference` (represented as `dict` in JSON).
    """

    link: typing.Optional[typing.List["PatientLink"]]

    """ Link to another patient resource that concerns the same actual
        person.
    List of `PatientLink` items (represented as `dict` in JSON).
    """



#   {'path': 'Patient.deceased[x]', 'choice_of_type': 'deceased', 'orig_name': 'deceasedBoolean', 'name': 'deceasedBoolean', 'parent_name': 'Patient', 'class_name': 'bool', 'enum': None, 'module_name': None, 'json_class': 'bool', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Indicates if the individual is deceased or not', 'formal': None, 'representation': None}
    _deceased_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['deceased_boolean', 'deceased_date_time']), True))

#   {'path': 'Patient.multipleBirth[x]', 'choice_of_type': 'multipleBirth', 'orig_name': 'multipleBirthBoolean', 'name': 'multipleBirthBoolean', 'parent_name': 'Patient', 'class_name': 'bool', 'enum': None, 'module_name': None, 'json_class': 'bool', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Whether patient is part of a multiple birth', 'formal': 'Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).', 'representation': None}
    _multiple_birth_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['multiple_birth_boolean', 'multiple_birth_integer']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["gender"]["enum"]
            enums.clear()
            for item in AdministrativeGender:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_active = get_primitive_field_root_validator("active")
    
    _validate_primitive_gender = get_primitive_field_root_validator("gender")
    
    _validate_primitive_birth_date = get_primitive_field_root_validator("birth_date")
    
    _validate_primitive_deceased_boolean = get_primitive_field_root_validator("deceased_boolean")
    
    _validate_primitive_deceased_date_time = get_primitive_field_root_validator("deceased_date_time")
    
    _validate_primitive_multiple_birth_boolean = get_primitive_field_root_validator("multiple_birth_boolean")
    
    _validate_primitive_multiple_birth_integer = get_primitive_field_root_validator("multiple_birth_integer")
    


class PaymentNotice(DomainResource):
    """ PaymentNotice request.

    This resource provides the status of the payment for goods and services
    rendered, and the request and response resource references.
    """
    resource_type: typing.Literal["PaymentNotice"] = "PaymentNotice"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/PaymentNotice",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business Identifier for the payment noctice.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "FinancialResourceStatusCodes"

    """ active | cancelled | draft | entered-in-error.
    Type `FinancialResourceStatusCodes` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    request: typing.Optional["Reference"]

    """ Request reference.
    Type `Reference` (represented as `dict` in JSON).
    """

    response: typing.Optional["Reference"]

    """ Response reference.
    Type `Reference` (represented as `dict` in JSON).
    """

    created: FHIRDateTime

    """ Creation date.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    created__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_created`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    provider: typing.Optional["Reference"]

    """ Responsible practitioner.
    Type `Reference` (represented as `dict` in JSON).
    """

    payment: "Reference"

    """ Payment reference.
    Type `Reference` (represented as `dict` in JSON).
    """

    payment_date: typing.Optional[FHIRDate]

    """ Payment or clearing date.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    payment_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_payment_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    payee: typing.Optional["Reference"]

    """ Party being paid.
    Type `Reference` (represented as `dict` in JSON).
    """

    recipient: "Reference"

    """ Party being notified.
    Type `Reference` (represented as `dict` in JSON).
    """

    amount: "Money"

    """ Monetary amount of the payment.
    Type `Money` (represented as `dict` in JSON).
    """

    payment_status: typing.Optional["CodeableConcept"]

    """ Issued or cleared Status of the payment.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in FinancialResourceStatusCodes:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_created = get_primitive_field_root_validator("created")
    
    _validate_primitive_payment_date = get_primitive_field_root_validator("payment_date")
    


class PaymentReconciliation(DomainResource):
    """ PaymentReconciliation resource.

    This resource provides the details including amount of a payment and
    allocates the payment items being paid.
    """
    resource_type: typing.Literal["PaymentReconciliation"] = "PaymentReconciliation"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/PaymentReconciliation",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business Identifier for a payment reconciliation.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "FinancialResourceStatusCodes"

    """ active | cancelled | draft | entered-in-error.
    Type `FinancialResourceStatusCodes` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    period: typing.Optional["Period"]

    """ Period covered.
    Type `Period` (represented as `dict` in JSON).
    """

    created: FHIRDateTime

    """ Creation date.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    created__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_created`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    payment_issuer: typing.Optional["Reference"]

    """ Party generating payment.
    Type `Reference` (represented as `dict` in JSON).
    """

    request: typing.Optional["Reference"]

    """ Reference to requesting resource.
    Type `Reference` (represented as `dict` in JSON).
    """

    requestor: typing.Optional["Reference"]

    """ Responsible practitioner.
    Type `Reference` (represented as `dict` in JSON).
    """

            
    
    
    outcome: typing.Optional["ClaimProcessingCodes"]

    """ queued | complete | error | partial.
    Type `ClaimProcessingCodes` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    outcome__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_outcome`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    disposition: typing.Optional[FHIRString]

    """ Disposition message.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    disposition__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_disposition`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    payment_date: FHIRDate

    """ When payment issued.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    payment_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_payment_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    payment_amount: "Money"

    """ Total amount of Payment.
    Type `Money` (represented as `dict` in JSON).
    """

    payment_identifier: typing.Optional["Identifier"]

    """ Business identifier for the payment.
    Type `Identifier` (represented as `dict` in JSON).
    """

    detail: typing.Optional[typing.List["PaymentReconciliationDetail"]]

    """ Settlement particulars.
    List of `PaymentReconciliationDetail` items (represented as `dict` in JSON).
    """

    form_code: typing.Optional["CodeableConcept"]

    """ Printed form identifier.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    process_note: typing.Optional[typing.List["PaymentReconciliationProcessNote"]]

    """ Note concerning processing.
    List of `PaymentReconciliationProcessNote` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in FinancialResourceStatusCodes:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["outcome"]["enum"]
            enums.clear()
            for item in ClaimProcessingCodes:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_created = get_primitive_field_root_validator("created")
    
    _validate_primitive_outcome = get_primitive_field_root_validator("outcome")
    
    _validate_primitive_disposition = get_primitive_field_root_validator("disposition")
    
    _validate_primitive_payment_date = get_primitive_field_root_validator("payment_date")
    


class Person(DomainResource):
    """ A generic person record.

    Demographics and administrative information about a person independent of a
    specific health-related context.
    """
    resource_type: typing.Literal["Person"] = "Person"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Person",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ A human identifier for this person.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    name: typing.Optional[typing.List["HumanName"]]

    """ A name associated with the person.
    List of `HumanName` items (represented as `dict` in JSON).
    """

    telecom: typing.Optional[typing.List["ContactPoint"]]

    """ A contact detail for the person.
    List of `ContactPoint` items (represented as `dict` in JSON).
    """

            
    
    
    gender: typing.Optional["AdministrativeGender"]

    """ male | female | other | unknown.
    Type `AdministrativeGender` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    gender__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_gender`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    birth_date: typing.Optional[FHIRDate]

    """ The date on which the person was born.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    birth_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_birth_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    address: typing.Optional[typing.List["Address"]]

    """ One or more addresses for the person.
    List of `Address` items (represented as `dict` in JSON).
    """

    photo: typing.Optional["Attachment"]

    """ Image of the person.
    Type `Attachment` (represented as `dict` in JSON).
    """

    managing_organization: typing.Optional["Reference"]

    """ The organization that is the custodian of the person record.
    Type `Reference` (represented as `dict` in JSON).
    """

    active: typing.Optional[bool]

    """ This person's record is in active use.
    Type `bool`. Is a JSON Primitive element.
    """
    

    active__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_active`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    link: typing.Optional[typing.List["PersonLink"]]

    """ Link to a resource that concerns the same actual person.
    List of `PersonLink` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["gender"]["enum"]
            enums.clear()
            for item in AdministrativeGender:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_gender = get_primitive_field_root_validator("gender")
    
    _validate_primitive_birth_date = get_primitive_field_root_validator("birth_date")
    
    _validate_primitive_active = get_primitive_field_root_validator("active")
    


class PlanDefinition(DomainResource):
    """ The definition of a plan for a series of actions, independent of any
    specific patient or context.

    This resource allows for the definition of various types of plans as a
    sharable, consumable, and executable artifact. The resource is general
    enough to support the description of a broad range of clinical artifacts
    such as clinical decision support rules, order sets and protocols.
    """
    resource_type: typing.Literal["PlanDefinition"] = "PlanDefinition"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/PlanDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: typing.Optional[FHIRString]

    """ Canonical identifier for this plan definition, represented as a URI
        (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    identifier: typing.Optional[typing.List["Identifier"]]

    """ Additional identifier for the plan definition.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    version: typing.Optional[FHIRString]

    """ Business version of the plan definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Name for this plan definition (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Name for this plan definition (human friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subtitle: typing.Optional[FHIRString]

    """ Subordinate title of the plan definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    subtitle__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_subtitle`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional["CodeableConcept"]

    """ order-set | clinical-protocol | eca-rule | workflow-definition.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    experimental: typing.Optional[bool]

    """ For testing purposes, not real usage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    experimental__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_experimental`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subject_codeable_concept: typing.Optional["CodeableConcept"]

    """ Type of individual the plan definition is focused on.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject_reference: typing.Optional["Reference"]

    """ Type of individual the plan definition is focused on.
    Type `Reference` (represented as `dict` in JSON).
    """

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the plan definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for plan definition (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    purpose: typing.Optional[FHIRString]

    """ Why this plan definition is defined.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    purpose__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_purpose`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    usage: typing.Optional[FHIRString]

    """ Describes the clinical usage of the plan.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    usage__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_usage`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    copyright: typing.Optional[FHIRString]

    """ Use and/or publishing restrictions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    copyright__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_copyright`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    approval_date: typing.Optional[FHIRDate]

    """ When the plan definition was approved by publisher.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    approval_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_approval_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    last_review_date: typing.Optional[FHIRDate]

    """ When the plan definition was last reviewed.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    last_review_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_last_review_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    effective_period: typing.Optional["Period"]

    """ When the plan definition is expected to be used.
    Type `Period` (represented as `dict` in JSON).
    """

    topic: typing.Optional[typing.List["CodeableConcept"]]

    """ E.g. Education, Treatment, Assessment.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    author: typing.Optional[typing.List["ContactDetail"]]

    """ Who authored the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    editor: typing.Optional[typing.List["ContactDetail"]]

    """ Who edited the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    reviewer: typing.Optional[typing.List["ContactDetail"]]

    """ Who reviewed the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    endorser: typing.Optional[typing.List["ContactDetail"]]

    """ Who endorsed the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    related_artifact: typing.Optional[typing.List["RelatedArtifact"]]

    """ Additional documentation, citations.
    List of `RelatedArtifact` items (represented as `dict` in JSON).
    """

    library: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Logic used by the plan definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    library__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_library`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    goal: typing.Optional[typing.List["PlanDefinitionGoal"]]

    """ What the plan is trying to accomplish.
    List of `PlanDefinitionGoal` items (represented as `dict` in JSON).
    """

    action: typing.Optional[typing.List["PlanDefinitionAction"]]

    """ Action defined by the plan.
    List of `PlanDefinitionAction` items (represented as `dict` in JSON).
    """



#   {'path': 'PlanDefinition.subject[x]', 'choice_of_type': 'subject', 'orig_name': 'subjectCodeableConcept', 'name': 'subjectCodeableConcept', 'parent_name': 'PlanDefinition', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Type of individual the plan definition is focused on', 'formal': 'A code or group definition that describes the intended subject of the plan definition.', 'representation': None}
    _subject_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['subject_codeable_concept', 'subject_reference']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_subtitle = get_primitive_field_root_validator("subtitle")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_experimental = get_primitive_field_root_validator("experimental")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_purpose = get_primitive_field_root_validator("purpose")
    
    _validate_primitive_usage = get_primitive_field_root_validator("usage")
    
    _validate_primitive_copyright = get_primitive_field_root_validator("copyright")
    
    _validate_primitive_approval_date = get_primitive_field_root_validator("approval_date")
    
    _validate_primitive_last_review_date = get_primitive_field_root_validator("last_review_date")
    
    _validate_primitive_library = get_primitive_field_root_validator("library")
    


class Practitioner(DomainResource):
    """ A person with a  formal responsibility in the provisioning of healthcare or
    related services.

    A person who is directly or indirectly involved in the provisioning of
    healthcare.
    """
    resource_type: typing.Literal["Practitioner"] = "Practitioner"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Practitioner",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ An identifier for the person as this agent.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    active: typing.Optional[bool]

    """ Whether this practitioner's record is in active use.
    Type `bool`. Is a JSON Primitive element.
    """
    

    active__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_active`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[typing.List["HumanName"]]

    """ The name(s) associated with the practitioner.
    List of `HumanName` items (represented as `dict` in JSON).
    """

    telecom: typing.Optional[typing.List["ContactPoint"]]

    """ A contact detail for the practitioner (that apply to all roles).
    List of `ContactPoint` items (represented as `dict` in JSON).
    """

    address: typing.Optional[typing.List["Address"]]

    """ Address(es) of the practitioner that are not role specific
        (typically home address).
    List of `Address` items (represented as `dict` in JSON).
    """

            
    
    
    gender: typing.Optional["AdministrativeGender"]

    """ male | female | other | unknown.
    Type `AdministrativeGender` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    gender__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_gender`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    birth_date: typing.Optional[FHIRDate]

    """ The date  on which the practitioner was born.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    birth_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_birth_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    photo: typing.Optional[typing.List["Attachment"]]

    """ Image of the person.
    List of `Attachment` items (represented as `dict` in JSON).
    """

    qualification: typing.Optional[typing.List["PractitionerQualification"]]

    """ Certification, licenses, or training pertaining to the provision of
        care.
    List of `PractitionerQualification` items (represented as `dict` in JSON).
    """

    communication: typing.Optional[typing.List["CodeableConcept"]]

    """ A language the practitioner can use in patient communication.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["gender"]["enum"]
            enums.clear()
            for item in AdministrativeGender:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_active = get_primitive_field_root_validator("active")
    
    _validate_primitive_gender = get_primitive_field_root_validator("gender")
    
    _validate_primitive_birth_date = get_primitive_field_root_validator("birth_date")
    


class PractitionerRole(DomainResource):
    """ Roles/organizations the practitioner is associated with.

    A specific set of Roles/Locations/specialties/services that a practitioner
    may perform at an organization for a period of time.
    """
    resource_type: typing.Literal["PractitionerRole"] = "PractitionerRole"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/PractitionerRole",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business Identifiers that are specific to a role/location.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    active: typing.Optional[bool]

    """ Whether this practitioner role record is in active use.
    Type `bool`. Is a JSON Primitive element.
    """
    

    active__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_active`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    period: typing.Optional["Period"]

    """ The period during which the practitioner is authorized to perform
        in these role(s).
    Type `Period` (represented as `dict` in JSON).
    """

    practitioner: typing.Optional["Reference"]

    """ Practitioner that is able to provide the defined services for the
        organization.
    Type `Reference` (represented as `dict` in JSON).
    """

    organization: typing.Optional["Reference"]

    """ Organization where the roles are available.
    Type `Reference` (represented as `dict` in JSON).
    """

    code: typing.Optional[typing.List["CodeableConcept"]]

    """ Roles which this practitioner may perform.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    specialty: typing.Optional[typing.List["CodeableConcept"]]

    """ Specific specialty of the practitioner.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    location: typing.Optional[typing.List["Reference"]]

    """ The location(s) at which this practitioner provides care.
    List of `Reference` items (represented as `dict` in JSON).
    """

    healthcare_service: typing.Optional[typing.List["Reference"]]

    """ The list of healthcare services that this worker provides for this
        role's Organization/Location(s).
    List of `Reference` items (represented as `dict` in JSON).
    """

    telecom: typing.Optional[typing.List["ContactPoint"]]

    """ Contact details that are specific to the role/location/service.
    List of `ContactPoint` items (represented as `dict` in JSON).
    """

    available_time: typing.Optional[typing.List["PractitionerRoleAvailableTime"]]

    """ Times the Service Site is available.
    List of `PractitionerRoleAvailableTime` items (represented as `dict` in JSON).
    """

    not_available: typing.Optional[typing.List["PractitionerRoleNotAvailable"]]

    """ Not available during this time due to provided reason.
    List of `PractitionerRoleNotAvailable` items (represented as `dict` in JSON).
    """

    availability_exceptions: typing.Optional[FHIRString]

    """ Description of availability exceptions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    availability_exceptions__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_availability_exceptions`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    endpoint: typing.Optional[typing.List["Reference"]]

    """ Technical endpoints providing access to services operated for the
        practitioner with this role.
    List of `Reference` items (represented as `dict` in JSON).
    """



    _validate_primitive_active = get_primitive_field_root_validator("active")
    
    _validate_primitive_availability_exceptions = get_primitive_field_root_validator("availability_exceptions")
    


class Procedure(DomainResource):
    """ An action that is being or was performed on a patient.

    An action that is or was performed on or for a patient. This can be a
    physical intervention like an operation, or less invasive like long term
    services, counseling, or hypnotherapy.
    """
    resource_type: typing.Literal["Procedure"] = "Procedure"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Procedure",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ External Identifiers for this procedure.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    instantiates_canonical: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Instantiates FHIR protocol or definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates_canonical__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    instantiates_uri: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Instantiates external protocol or definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates_uri__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    based_on: typing.Optional[typing.List["Reference"]]

    """ A request for this procedure.
    List of `Reference` items (represented as `dict` in JSON).
    """

    part_of: typing.Optional[typing.List["Reference"]]

    """ Part of referenced event.
    List of `Reference` items (represented as `dict` in JSON).
    """

            
    
    
    status: "EventStatus"

    """ preparation | in-progress | not-done | on-hold | stopped |
        completed | entered-in-error | unknown.
    Type `EventStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    status_reason: typing.Optional["CodeableConcept"]

    """ Reason for current status.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    category: typing.Optional["CodeableConcept"]

    """ Classification of the procedure.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    code: typing.Optional["CodeableConcept"]

    """ Identification of the procedure.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject: "Reference"

    """ Who the procedure was performed on.
    Type `Reference` (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Encounter created as part of.
    Type `Reference` (represented as `dict` in JSON).
    """

    performed_date_time: typing.Optional[FHIRDateTime]

    """ When the procedure was performed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    performed_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_performed_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    performed_period: typing.Optional["Period"]

    """ When the procedure was performed.
    Type `Period` (represented as `dict` in JSON).
    """

    performed_string: typing.Optional[FHIRString]

    """ When the procedure was performed.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    performed_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_performed_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    performed_age: typing.Optional["Age"]

    """ When the procedure was performed.
    Type `Age` (represented as `dict` in JSON).
    """

    performed_range: typing.Optional["Range"]

    """ When the procedure was performed.
    Type `Range` (represented as `dict` in JSON).
    """

    recorder: typing.Optional["Reference"]

    """ Who recorded the procedure.
    Type `Reference` (represented as `dict` in JSON).
    """

    asserter: typing.Optional["Reference"]

    """ Person who asserts this procedure.
    Type `Reference` (represented as `dict` in JSON).
    """

    performer: typing.Optional[typing.List["ProcedurePerformer"]]

    """ The people who performed the procedure.
    List of `ProcedurePerformer` items (represented as `dict` in JSON).
    """

    location: typing.Optional["Reference"]

    """ Where the procedure happened.
    Type `Reference` (represented as `dict` in JSON).
    """

    reason_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Coded reason procedure performed.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    reason_reference: typing.Optional[typing.List["Reference"]]

    """ The justification that the procedure was performed.
    List of `Reference` items (represented as `dict` in JSON).
    """

    body_site: typing.Optional[typing.List["CodeableConcept"]]

    """ Target body sites.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    outcome: typing.Optional["CodeableConcept"]

    """ The result of procedure.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    report: typing.Optional[typing.List["Reference"]]

    """ Any report resulting from the procedure.
    List of `Reference` items (represented as `dict` in JSON).
    """

    complication: typing.Optional[typing.List["CodeableConcept"]]

    """ Complication following the procedure.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    complication_detail: typing.Optional[typing.List["Reference"]]

    """ A condition that is a result of the procedure.
    List of `Reference` items (represented as `dict` in JSON).
    """

    follow_up: typing.Optional[typing.List["CodeableConcept"]]

    """ Instructions for follow up.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Additional information about the procedure.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    focal_device: typing.Optional[typing.List["ProcedureFocalDevice"]]

    """ Manipulated, implanted, or removed device.
    List of `ProcedureFocalDevice` items (represented as `dict` in JSON).
    """

    used_reference: typing.Optional[typing.List["Reference"]]

    """ Items used during procedure.
    List of `Reference` items (represented as `dict` in JSON).
    """

    used_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Coded items used during the procedure.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """



#   {'path': 'Procedure.performed[x]', 'choice_of_type': 'performed', 'orig_name': 'performedDateTime', 'name': 'performedDateTime', 'parent_name': 'Procedure', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'When the procedure was performed', 'formal': 'Estimated or actual date, date-time, period, or age when the procedure was performed.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.', 'representation': None}
    _performed_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['performed_date_time', 'performed_period', 'performed_string', 'performed_age', 'performed_range']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in EventStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_instantiates_canonical = get_primitive_field_root_validator("instantiates_canonical")
    
    _validate_primitive_instantiates_uri = get_primitive_field_root_validator("instantiates_uri")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_performed_date_time = get_primitive_field_root_validator("performed_date_time")
    
    _validate_primitive_performed_string = get_primitive_field_root_validator("performed_string")
    


class Provenance(DomainResource):
    """ Who, What, When for a set of resources.

    Provenance of a resource is a record that describes entities and processes
    involved in producing and delivering or otherwise influencing that
    resource. Provenance provides a critical foundation for assessing
    authenticity, enabling trust, and allowing reproducibility. Provenance
    assertions are a form of contextual metadata and can themselves become
    important records with their own provenance. Provenance statement indicates
    clinical significance in terms of confidence in authenticity, reliability,
    and trustworthiness, integrity, and stage in lifecycle (e.g. Document
    Completion - has the artifact been legally authenticated), all of which may
    impact security, privacy, and trust policies.
    """
    resource_type: typing.Literal["Provenance"] = "Provenance"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Provenance",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    target: typing.List["Reference"]

    """ Target Reference(s) (usually version specific).
    List of `Reference` items (represented as `dict` in JSON).
    """

    occurred_period: typing.Optional["Period"]

    """ When the activity occurred.
    Type `Period` (represented as `dict` in JSON).
    """

    occurred_date_time: typing.Optional[FHIRDateTime]

    """ When the activity occurred.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    occurred_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_occurred_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    recorded: FHIRInstant

    """ When the activity was recorded / updated.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    recorded__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_recorded`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    policy: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Policy or plan the activity was defined by.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    policy__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_policy`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    location: typing.Optional["Reference"]

    """ Where the activity occurred, if relevant.
    Type `Reference` (represented as `dict` in JSON).
    """

    reason: typing.Optional[typing.List["CodeableConcept"]]

    """ Reason the activity is occurring.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    activity: typing.Optional["CodeableConcept"]

    """ Activity that occurred.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    agent: typing.List["ProvenanceAgent"]

    """ Actor involved.
    List of `ProvenanceAgent` items (represented as `dict` in JSON).
    """

    entity: typing.Optional[typing.List["ProvenanceEntity"]]

    """ An entity used in this activity.
    List of `ProvenanceEntity` items (represented as `dict` in JSON).
    """

    signature: typing.Optional[typing.List["Signature"]]

    """ Signature on target.
    List of `Signature` items (represented as `dict` in JSON).
    """



#   {'path': 'Provenance.occurred[x]', 'choice_of_type': 'occurred', 'orig_name': 'occurredPeriod', 'name': 'occurredPeriod', 'parent_name': 'Provenance', 'class_name': 'Period', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'When the activity occurred', 'formal': 'The period during which the activity occurred.', 'representation': None}
    _occurred_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['occurred_period', 'occurred_date_time']), True))

    _validate_primitive_occurred_date_time = get_primitive_field_root_validator("occurred_date_time")
    
    _validate_primitive_recorded = get_primitive_field_root_validator("recorded")
    
    _validate_primitive_policy = get_primitive_field_root_validator("policy")
    


class Questionnaire(DomainResource):
    """ A structured set of questions.

    A structured set of questions intended to guide the collection of answers
    from end-users. Questionnaires provide detailed control over order,
    presentation, phraseology and grouping to allow coherent, consistent data
    collection.
    """
    resource_type: typing.Literal["Questionnaire"] = "Questionnaire"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Questionnaire",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: typing.Optional[FHIRString]

    """ Canonical identifier for this questionnaire, represented as a URI
        (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    identifier: typing.Optional[typing.List["Identifier"]]

    """ Additional identifier for the questionnaire.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    version: typing.Optional[FHIRString]

    """ Business version of the questionnaire.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Name for this questionnaire (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Name for this questionnaire (human friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    derived_from: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Instantiates protocol or definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    derived_from__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_derived_from`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    experimental: typing.Optional[bool]

    """ For testing purposes, not real usage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    experimental__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_experimental`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    subject_type: typing.Optional[typing.List[typing.Optional["ResourceType"]]]

    """ Resource that can be subject of QuestionnaireResponse.
    List of `ResourceType` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    subject_type__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_subject_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the questionnaire.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for questionnaire (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    purpose: typing.Optional[FHIRString]

    """ Why this questionnaire is defined.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    purpose__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_purpose`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    copyright: typing.Optional[FHIRString]

    """ Use and/or publishing restrictions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    copyright__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_copyright`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    approval_date: typing.Optional[FHIRDate]

    """ When the questionnaire was approved by publisher.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    approval_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_approval_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    last_review_date: typing.Optional[FHIRDate]

    """ When the questionnaire was last reviewed.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    last_review_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_last_review_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    effective_period: typing.Optional["Period"]

    """ When the questionnaire is expected to be used.
    Type `Period` (represented as `dict` in JSON).
    """

    code: typing.Optional[typing.List["Coding"]]

    """ Concept that represents the overall questionnaire.
    List of `Coding` items (represented as `dict` in JSON).
    """

    item: typing.Optional[typing.List["QuestionnaireItem"]]

    """ Questions and sections within the Questionnaire.
    List of `QuestionnaireItem` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["subjectType"]["enum"]
            enums.clear()
            for item in ResourceType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_derived_from = get_primitive_field_root_validator("derived_from")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_experimental = get_primitive_field_root_validator("experimental")
    
    _validate_primitive_subject_type = get_primitive_field_root_validator("subject_type")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_purpose = get_primitive_field_root_validator("purpose")
    
    _validate_primitive_copyright = get_primitive_field_root_validator("copyright")
    
    _validate_primitive_approval_date = get_primitive_field_root_validator("approval_date")
    
    _validate_primitive_last_review_date = get_primitive_field_root_validator("last_review_date")
    


class QuestionnaireResponse(DomainResource):
    """ A structured set of questions and their answers.

    A structured set of questions and their answers. The questions are ordered
    and grouped into coherent subsets, corresponding to the structure of the
    grouping of the questionnaire being responded to.
    """
    resource_type: typing.Literal["QuestionnaireResponse"] = "QuestionnaireResponse"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional["Identifier"]

    """ Unique id for this set of answers.
    Type `Identifier` (represented as `dict` in JSON).
    """

    based_on: typing.Optional[typing.List["Reference"]]

    """ Request fulfilled by this QuestionnaireResponse.
    List of `Reference` items (represented as `dict` in JSON).
    """

    part_of: typing.Optional[typing.List["Reference"]]

    """ Part of this action.
    List of `Reference` items (represented as `dict` in JSON).
    """

    questionnaire: typing.Optional[FHIRString]

    """ Form being answered.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    questionnaire__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_questionnaire`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "QuestionnaireResponseStatus"

    """ in-progress | completed | amended | entered-in-error | stopped.
    Type `QuestionnaireResponseStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subject: typing.Optional["Reference"]

    """ The subject of the questions.
    Type `Reference` (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Encounter created as part of.
    Type `Reference` (represented as `dict` in JSON).
    """

    authored: typing.Optional[FHIRDateTime]

    """ Date the answers were gathered.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    authored__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_authored`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    author: typing.Optional["Reference"]

    """ Person who received and recorded the answers.
    Type `Reference` (represented as `dict` in JSON).
    """

    source: typing.Optional["Reference"]

    """ The person who answered the questions.
    Type `Reference` (represented as `dict` in JSON).
    """

    item: typing.Optional[typing.List["QuestionnaireResponseItem"]]

    """ Groups and questions.
    List of `QuestionnaireResponseItem` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in QuestionnaireResponseStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_questionnaire = get_primitive_field_root_validator("questionnaire")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_authored = get_primitive_field_root_validator("authored")
    


class RelatedPerson(DomainResource):
    """ A person that is related to a patient, but who is not a direct target of
    care.

    Information about a person that is involved in the care for a patient, but
    who is not the target of healthcare, nor has a formal responsibility in the
    care process.
    """
    resource_type: typing.Literal["RelatedPerson"] = "RelatedPerson"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/RelatedPerson",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ A human identifier for this person.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    active: typing.Optional[bool]

    """ Whether this related person's record is in active use.
    Type `bool`. Is a JSON Primitive element.
    """
    

    active__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_active`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    patient: "Reference"

    """ The patient this person is related to.
    Type `Reference` (represented as `dict` in JSON).
    """

    relationship: typing.Optional[typing.List["CodeableConcept"]]

    """ The nature of the relationship.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    name: typing.Optional[typing.List["HumanName"]]

    """ A name associated with the person.
    List of `HumanName` items (represented as `dict` in JSON).
    """

    telecom: typing.Optional[typing.List["ContactPoint"]]

    """ A contact detail for the person.
    List of `ContactPoint` items (represented as `dict` in JSON).
    """

            
    
    
    gender: typing.Optional["AdministrativeGender"]

    """ male | female | other | unknown.
    Type `AdministrativeGender` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    gender__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_gender`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    birth_date: typing.Optional[FHIRDate]

    """ The date on which the related person was born.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    birth_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_birth_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    address: typing.Optional[typing.List["Address"]]

    """ Address where the related person can be contacted or visited.
    List of `Address` items (represented as `dict` in JSON).
    """

    photo: typing.Optional[typing.List["Attachment"]]

    """ Image of the person.
    List of `Attachment` items (represented as `dict` in JSON).
    """

    period: typing.Optional["Period"]

    """ Period of time that this relationship is considered valid.
    Type `Period` (represented as `dict` in JSON).
    """

    communication: typing.Optional[typing.List["RelatedPersonCommunication"]]

    """ A language which may be used to communicate with about the
        patient's health.
    List of `RelatedPersonCommunication` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["gender"]["enum"]
            enums.clear()
            for item in AdministrativeGender:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_active = get_primitive_field_root_validator("active")
    
    _validate_primitive_gender = get_primitive_field_root_validator("gender")
    
    _validate_primitive_birth_date = get_primitive_field_root_validator("birth_date")
    


class RequestGroup(DomainResource):
    """ A group of related requests.

    A group of related requests that can be used to capture intended activities
    that have inter-dependencies such as "give this medication after that one".
    """
    resource_type: typing.Literal["RequestGroup"] = "RequestGroup"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/RequestGroup",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    instantiates_canonical: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Instantiates FHIR protocol or definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates_canonical__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    instantiates_uri: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Instantiates external protocol or definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates_uri__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    based_on: typing.Optional[typing.List["Reference"]]

    """ Fulfills plan, proposal, or order.
    List of `Reference` items (represented as `dict` in JSON).
    """

    replaces: typing.Optional[typing.List["Reference"]]

    """ Request(s) replaced by this request.
    List of `Reference` items (represented as `dict` in JSON).
    """

    group_identifier: typing.Optional["Identifier"]

    """ Composite request this is part of.
    Type `Identifier` (represented as `dict` in JSON).
    """

            
    
    
    status: "RequestStatus"

    """ draft | active | on-hold | revoked | completed | entered-in-error |
        unknown.
    Type `RequestStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    intent: "RequestIntent"

    """ proposal | plan | directive | order | original-order | reflex-order
        | filler-order | instance-order | option.
    Type `RequestIntent` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    intent__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_intent`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    priority: typing.Optional["RequestPriority"]

    """ routine | urgent | asap | stat.
    Type `RequestPriority` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    priority__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_priority`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code: typing.Optional["CodeableConcept"]

    """ What's being requested/ordered.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject: typing.Optional["Reference"]

    """ Who the request group is about.
    Type `Reference` (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Created as part of.
    Type `Reference` (represented as `dict` in JSON).
    """

    authored_on: typing.Optional[FHIRDateTime]

    """ When the request group was authored.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    authored_on__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_authored_on`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    author: typing.Optional["Reference"]

    """ Device or practitioner that authored the request group.
    Type `Reference` (represented as `dict` in JSON).
    """

    reason_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Why the request group is needed.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    reason_reference: typing.Optional[typing.List["Reference"]]

    """ Why the request group is needed.
    List of `Reference` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Additional notes about the response.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    action: typing.Optional[typing.List["RequestGroupAction"]]

    """ Proposed actions, if any.
    List of `RequestGroupAction` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in RequestStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["intent"]["enum"]
            enums.clear()
            for item in RequestIntent:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["priority"]["enum"]
            enums.clear()
            for item in RequestPriority:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_instantiates_canonical = get_primitive_field_root_validator("instantiates_canonical")
    
    _validate_primitive_instantiates_uri = get_primitive_field_root_validator("instantiates_uri")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_intent = get_primitive_field_root_validator("intent")
    
    _validate_primitive_priority = get_primitive_field_root_validator("priority")
    
    _validate_primitive_authored_on = get_primitive_field_root_validator("authored_on")
    


class ResearchDefinition(DomainResource):
    """ A research context or question.

    The ResearchDefinition resource describes the conditional state (population
    and any exposures being compared within the population) and outcome (if
    specified) that the knowledge (evidence, assertion, recommendation) is
    about.
    """
    resource_type: typing.Literal["ResearchDefinition"] = "ResearchDefinition"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ResearchDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: typing.Optional[FHIRString]

    """ Canonical identifier for this research definition, represented as a
        URI (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    identifier: typing.Optional[typing.List["Identifier"]]

    """ Additional identifier for the research definition.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    version: typing.Optional[FHIRString]

    """ Business version of the research definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Name for this research definition (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Name for this research definition (human friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    short_title: typing.Optional[FHIRString]

    """ Title for use in informal contexts.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    short_title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_short_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subtitle: typing.Optional[FHIRString]

    """ Subordinate title of the ResearchDefinition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    subtitle__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_subtitle`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    experimental: typing.Optional[bool]

    """ For testing purposes, not real usage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    experimental__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_experimental`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subject_codeable_concept: typing.Optional["CodeableConcept"]

    """ E.g. Patient, Practitioner, RelatedPerson, Organization, Location,
        Device.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject_reference: typing.Optional["Reference"]

    """ E.g. Patient, Practitioner, RelatedPerson, Organization, Location,
        Device.
    Type `Reference` (represented as `dict` in JSON).
    """

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the research definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    comment: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Used for footnotes or explanatory notes.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    comment__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_comment`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for research definition (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    purpose: typing.Optional[FHIRString]

    """ Why this research definition is defined.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    purpose__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_purpose`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    usage: typing.Optional[FHIRString]

    """ Describes the clinical usage of the ResearchDefinition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    usage__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_usage`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    copyright: typing.Optional[FHIRString]

    """ Use and/or publishing restrictions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    copyright__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_copyright`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    approval_date: typing.Optional[FHIRDate]

    """ When the research definition was approved by publisher.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    approval_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_approval_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    last_review_date: typing.Optional[FHIRDate]

    """ When the research definition was last reviewed.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    last_review_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_last_review_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    effective_period: typing.Optional["Period"]

    """ When the research definition is expected to be used.
    Type `Period` (represented as `dict` in JSON).
    """

    topic: typing.Optional[typing.List["CodeableConcept"]]

    """ The category of the ResearchDefinition, such as Education,
        Treatment, Assessment, etc..
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    author: typing.Optional[typing.List["ContactDetail"]]

    """ Who authored the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    editor: typing.Optional[typing.List["ContactDetail"]]

    """ Who edited the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    reviewer: typing.Optional[typing.List["ContactDetail"]]

    """ Who reviewed the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    endorser: typing.Optional[typing.List["ContactDetail"]]

    """ Who endorsed the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    related_artifact: typing.Optional[typing.List["RelatedArtifact"]]

    """ Additional documentation, citations, etc..
    List of `RelatedArtifact` items (represented as `dict` in JSON).
    """

    library: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Logic used by the ResearchDefinition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    library__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_library`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    population: "Reference"

    """ What population?.
    Type `Reference` (represented as `dict` in JSON).
    """

    exposure: typing.Optional["Reference"]

    """ What exposure?.
    Type `Reference` (represented as `dict` in JSON).
    """

    exposure_alternative: typing.Optional["Reference"]

    """ What alternative exposure state?.
    Type `Reference` (represented as `dict` in JSON).
    """

    outcome: typing.Optional["Reference"]

    """ What outcome?.
    Type `Reference` (represented as `dict` in JSON).
    """



#   {'path': 'ResearchDefinition.subject[x]', 'choice_of_type': 'subject', 'orig_name': 'subjectCodeableConcept', 'name': 'subjectCodeableConcept', 'parent_name': 'ResearchDefinition', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device', 'formal': 'The intended subjects for the ResearchDefinition. If this element is not provided, a Patient subject is assumed, but the subject of the ResearchDefinition can be anything.', 'representation': None}
    _subject_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['subject_codeable_concept', 'subject_reference']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_short_title = get_primitive_field_root_validator("short_title")
    
    _validate_primitive_subtitle = get_primitive_field_root_validator("subtitle")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_experimental = get_primitive_field_root_validator("experimental")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_comment = get_primitive_field_root_validator("comment")
    
    _validate_primitive_purpose = get_primitive_field_root_validator("purpose")
    
    _validate_primitive_usage = get_primitive_field_root_validator("usage")
    
    _validate_primitive_copyright = get_primitive_field_root_validator("copyright")
    
    _validate_primitive_approval_date = get_primitive_field_root_validator("approval_date")
    
    _validate_primitive_last_review_date = get_primitive_field_root_validator("last_review_date")
    
    _validate_primitive_library = get_primitive_field_root_validator("library")
    


class ResearchElementDefinition(DomainResource):
    """ A population, intervention, or exposure definition.

    The ResearchElementDefinition resource describes a "PICO" element that
    knowledge (evidence, assertion, recommendation) is about.
    """
    resource_type: typing.Literal["ResearchElementDefinition"] = "ResearchElementDefinition"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ResearchElementDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: typing.Optional[FHIRString]

    """ Canonical identifier for this research element definition,
        represented as a URI (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    identifier: typing.Optional[typing.List["Identifier"]]

    """ Additional identifier for the research element definition.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    version: typing.Optional[FHIRString]

    """ Business version of the research element definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Name for this research element definition (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Name for this research element definition (human friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    short_title: typing.Optional[FHIRString]

    """ Title for use in informal contexts.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    short_title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_short_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subtitle: typing.Optional[FHIRString]

    """ Subordinate title of the ResearchElementDefinition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    subtitle__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_subtitle`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    experimental: typing.Optional[bool]

    """ For testing purposes, not real usage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    experimental__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_experimental`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subject_codeable_concept: typing.Optional["CodeableConcept"]

    """ E.g. Patient, Practitioner, RelatedPerson, Organization, Location,
        Device.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject_reference: typing.Optional["Reference"]

    """ E.g. Patient, Practitioner, RelatedPerson, Organization, Location,
        Device.
    Type `Reference` (represented as `dict` in JSON).
    """

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the research element definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    comment: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Used for footnotes or explanatory notes.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    comment__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_comment`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for research element definition (if
        applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    purpose: typing.Optional[FHIRString]

    """ Why this research element definition is defined.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    purpose__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_purpose`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    usage: typing.Optional[FHIRString]

    """ Describes the clinical usage of the ResearchElementDefinition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    usage__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_usage`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    copyright: typing.Optional[FHIRString]

    """ Use and/or publishing restrictions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    copyright__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_copyright`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    approval_date: typing.Optional[FHIRDate]

    """ When the research element definition was approved by publisher.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    approval_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_approval_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    last_review_date: typing.Optional[FHIRDate]

    """ When the research element definition was last reviewed.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    last_review_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_last_review_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    effective_period: typing.Optional["Period"]

    """ When the research element definition is expected to be used.
    Type `Period` (represented as `dict` in JSON).
    """

    topic: typing.Optional[typing.List["CodeableConcept"]]

    """ The category of the ResearchElementDefinition, such as Education,
        Treatment, Assessment, etc..
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    author: typing.Optional[typing.List["ContactDetail"]]

    """ Who authored the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    editor: typing.Optional[typing.List["ContactDetail"]]

    """ Who edited the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    reviewer: typing.Optional[typing.List["ContactDetail"]]

    """ Who reviewed the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    endorser: typing.Optional[typing.List["ContactDetail"]]

    """ Who endorsed the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    related_artifact: typing.Optional[typing.List["RelatedArtifact"]]

    """ Additional documentation, citations, etc..
    List of `RelatedArtifact` items (represented as `dict` in JSON).
    """

    library: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Logic used by the ResearchElementDefinition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    library__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_library`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    type: "ResearchElementType"

    """ population | exposure | outcome.
    Type `ResearchElementType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    variable_type: typing.Optional["EvidenceVariableType"]

    """ dichotomous | continuous | descriptive.
    Type `EvidenceVariableType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    variable_type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_variable_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    characteristic: typing.List["ResearchElementDefinitionCharacteristic"]

    """ What defines the members of the research element.
    List of `ResearchElementDefinitionCharacteristic` items (represented as `dict` in JSON).
    """



#   {'path': 'ResearchElementDefinition.subject[x]', 'choice_of_type': 'subject', 'orig_name': 'subjectCodeableConcept', 'name': 'subjectCodeableConcept', 'parent_name': 'ResearchElementDefinition', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device', 'formal': 'The intended subjects for the ResearchElementDefinition. If this element is not provided, a Patient subject is assumed, but the subject of the ResearchElementDefinition can be anything.', 'representation': None}
    _subject_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['subject_codeable_concept', 'subject_reference']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in ResearchElementType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["variableType"]["enum"]
            enums.clear()
            for item in EvidenceVariableType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_short_title = get_primitive_field_root_validator("short_title")
    
    _validate_primitive_subtitle = get_primitive_field_root_validator("subtitle")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_experimental = get_primitive_field_root_validator("experimental")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_comment = get_primitive_field_root_validator("comment")
    
    _validate_primitive_purpose = get_primitive_field_root_validator("purpose")
    
    _validate_primitive_usage = get_primitive_field_root_validator("usage")
    
    _validate_primitive_copyright = get_primitive_field_root_validator("copyright")
    
    _validate_primitive_approval_date = get_primitive_field_root_validator("approval_date")
    
    _validate_primitive_last_review_date = get_primitive_field_root_validator("last_review_date")
    
    _validate_primitive_library = get_primitive_field_root_validator("library")
    
    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_variable_type = get_primitive_field_root_validator("variable_type")
    


class ResearchStudy(DomainResource):
    """ Investigation to increase healthcare-related patient-independent knowledge.

    A process where a researcher or organization plans and then executes a
    series of steps intended to increase the field of healthcare-related
    knowledge.  This includes studies of safety, efficacy, comparative
    effectiveness and other information about medications, devices, therapies
    and other interventional and investigative techniques.  A ResearchStudy
    involves the gathering of information about human or animal subjects.
    """
    resource_type: typing.Literal["ResearchStudy"] = "ResearchStudy"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ResearchStudy",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business Identifier for study.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    title: typing.Optional[FHIRString]

    """ Name for this study.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    protocol: typing.Optional[typing.List["Reference"]]

    """ Steps followed in executing study.
    List of `Reference` items (represented as `dict` in JSON).
    """

    part_of: typing.Optional[typing.List["Reference"]]

    """ Part of larger study.
    List of `Reference` items (represented as `dict` in JSON).
    """

            
    
    
    status: "ResearchStudyStatus"

    """ active | administratively-completed | approved | closed-to-accrual
        | closed-to-accrual-and-intervention | completed | disapproved |
        in-review | temporarily-closed-to-accrual | temporarily-closed-to-
        accrual-and-intervention | withdrawn.
    Type `ResearchStudyStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    primary_purpose_type: typing.Optional["CodeableConcept"]

    """ treatment | prevention | diagnostic | supportive-care | screening |
        health-services-research | basic-science | device-feasibility.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    phase: typing.Optional["CodeableConcept"]

    """ n-a | early-phase-1 | phase-1 | phase-1-phase-2 | phase-2 |
        phase-2-phase-3 | phase-3 | phase-4.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    category: typing.Optional[typing.List["CodeableConcept"]]

    """ Classifications for the study.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    focus: typing.Optional[typing.List["CodeableConcept"]]

    """ Drugs, devices, etc. under study.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    condition: typing.Optional[typing.List["CodeableConcept"]]

    """ Condition being studied.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the study.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    related_artifact: typing.Optional[typing.List["RelatedArtifact"]]

    """ References and dependencies.
    List of `RelatedArtifact` items (represented as `dict` in JSON).
    """

    keyword: typing.Optional[typing.List["CodeableConcept"]]

    """ Used to search for the study.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    location: typing.Optional[typing.List["CodeableConcept"]]

    """ Geographic region(s) for study.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ What this is study doing.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    enrollment: typing.Optional[typing.List["Reference"]]

    """ Inclusion & exclusion criteria.
    List of `Reference` items (represented as `dict` in JSON).
    """

    period: typing.Optional["Period"]

    """ When the study began and ended.
    Type `Period` (represented as `dict` in JSON).
    """

    sponsor: typing.Optional["Reference"]

    """ Organization that initiates and is legally responsible for the
        study.
    Type `Reference` (represented as `dict` in JSON).
    """

    principal_investigator: typing.Optional["Reference"]

    """ Researcher who oversees multiple aspects of the study.
    Type `Reference` (represented as `dict` in JSON).
    """

    site: typing.Optional[typing.List["Reference"]]

    """ Facility where study activities are conducted.
    List of `Reference` items (represented as `dict` in JSON).
    """

    reason_stopped: typing.Optional["CodeableConcept"]

    """ accrual-goal-met | closed-due-to-toxicity | closed-due-to-lack-of-
        study-progress | temporarily-closed-per-study-design.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Comments made about the study.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    arm: typing.Optional[typing.List["ResearchStudyArm"]]

    """ Defined path through the study for a subject.
    List of `ResearchStudyArm` items (represented as `dict` in JSON).
    """

    objective: typing.Optional[typing.List["ResearchStudyObjective"]]

    """ A goal for the study.
    List of `ResearchStudyObjective` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in ResearchStudyStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class ResearchSubject(DomainResource):
    """ Physical entity which is the primary unit of interest in the study.

    A physical entity which is the primary unit of operational and/or
    administrative interest in a study.
    """
    resource_type: typing.Literal["ResearchSubject"] = "ResearchSubject"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ResearchSubject",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business Identifier for research subject in a study.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "ResearchSubjectStatus"

    """ candidate | eligible | follow-up | ineligible | not-registered |
        off-study | on-study | on-study-intervention | on-study-observation
        | pending-on-study | potential-candidate | screening | withdrawn.
    Type `ResearchSubjectStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    period: typing.Optional["Period"]

    """ Start and end of participation.
    Type `Period` (represented as `dict` in JSON).
    """

    study: "Reference"

    """ Study subject is part of.
    Type `Reference` (represented as `dict` in JSON).
    """

    individual: "Reference"

    """ Who is part of study.
    Type `Reference` (represented as `dict` in JSON).
    """

    assigned_arm: typing.Optional[FHIRString]

    """ What path should be followed.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    assigned_arm__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_assigned_arm`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    actual_arm: typing.Optional[FHIRString]

    """ What path was followed.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    actual_arm__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_actual_arm`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    consent: typing.Optional["Reference"]

    """ Agreement to participate in study.
    Type `Reference` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in ResearchSubjectStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_assigned_arm = get_primitive_field_root_validator("assigned_arm")
    
    _validate_primitive_actual_arm = get_primitive_field_root_validator("actual_arm")
    


class RiskAssessment(DomainResource):
    """ Potential outcomes for a subject with likelihood.

    An assessment of the likely outcome(s) for a patient or other subject as
    well as the likelihood of each outcome.
    """
    resource_type: typing.Literal["RiskAssessment"] = "RiskAssessment"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/RiskAssessment",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Unique identifier for the assessment.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    based_on: typing.Optional["Reference"]

    """ Request fulfilled by this assessment.
    Type `Reference` (represented as `dict` in JSON).
    """

    parent: typing.Optional["Reference"]

    """ Part of this occurrence.
    Type `Reference` (represented as `dict` in JSON).
    """

            
    
    
    status: "ObservationStatus"

    """ registered | preliminary | final | amended +.
    Type `ObservationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    method: typing.Optional["CodeableConcept"]

    """ Evaluation mechanism.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    code: typing.Optional["CodeableConcept"]

    """ Type of assessment.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject: "Reference"

    """ Who/what does assessment apply to?.
    Type `Reference` (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Where was assessment performed?.
    Type `Reference` (represented as `dict` in JSON).
    """

    occurrence_date_time: typing.Optional[FHIRDateTime]

    """ When was assessment made?.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    occurrence_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_occurrence_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    occurrence_period: typing.Optional["Period"]

    """ When was assessment made?.
    Type `Period` (represented as `dict` in JSON).
    """

    condition: typing.Optional["Reference"]

    """ Condition assessed.
    Type `Reference` (represented as `dict` in JSON).
    """

    performer: typing.Optional["Reference"]

    """ Who did assessment?.
    Type `Reference` (represented as `dict` in JSON).
    """

    reason_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Why the assessment was necessary?.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    reason_reference: typing.Optional[typing.List["Reference"]]

    """ Why the assessment was necessary?.
    List of `Reference` items (represented as `dict` in JSON).
    """

    basis: typing.Optional[typing.List["Reference"]]

    """ Information used in assessment.
    List of `Reference` items (represented as `dict` in JSON).
    """

    prediction: typing.Optional[typing.List["RiskAssessmentPrediction"]]

    """ Outcome predicted.
    List of `RiskAssessmentPrediction` items (represented as `dict` in JSON).
    """

    mitigation: typing.Optional[FHIRString]

    """ How to reduce risk.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    mitigation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_mitigation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    note: typing.Optional[typing.List["Annotation"]]

    """ Comments on the risk assessment.
    List of `Annotation` items (represented as `dict` in JSON).
    """



#   {'path': 'RiskAssessment.occurrence[x]', 'choice_of_type': 'occurrence', 'orig_name': 'occurrenceDateTime', 'name': 'occurrenceDateTime', 'parent_name': 'RiskAssessment', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'When was assessment made?', 'formal': 'The date (and possibly time) the risk assessment was performed.', 'representation': None}
    _occurrence_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['occurrence_date_time', 'occurrence_period']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in ObservationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_occurrence_date_time = get_primitive_field_root_validator("occurrence_date_time")
    
    _validate_primitive_mitigation = get_primitive_field_root_validator("mitigation")
    


class RiskEvidenceSynthesis(DomainResource):
    """ A quantified estimate of risk based on a body of evidence.

    The RiskEvidenceSynthesis resource describes the likelihood of an outcome
    in a population plus exposure state where the risk estimate is derived from
    a combination of research studies.
    """
    resource_type: typing.Literal["RiskEvidenceSynthesis"] = "RiskEvidenceSynthesis"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/RiskEvidenceSynthesis",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: typing.Optional[FHIRString]

    """ Canonical identifier for this risk evidence synthesis, represented
        as a URI (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    identifier: typing.Optional[typing.List["Identifier"]]

    """ Additional identifier for the risk evidence synthesis.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    version: typing.Optional[FHIRString]

    """ Business version of the risk evidence synthesis.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Name for this risk evidence synthesis (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Name for this risk evidence synthesis (human friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the risk evidence synthesis.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    note: typing.Optional[typing.List["Annotation"]]

    """ Used for footnotes or explanatory notes.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for risk evidence synthesis (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    copyright: typing.Optional[FHIRString]

    """ Use and/or publishing restrictions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    copyright__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_copyright`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    approval_date: typing.Optional[FHIRDate]

    """ When the risk evidence synthesis was approved by publisher.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    approval_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_approval_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    last_review_date: typing.Optional[FHIRDate]

    """ When the risk evidence synthesis was last reviewed.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    last_review_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_last_review_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    effective_period: typing.Optional["Period"]

    """ When the risk evidence synthesis is expected to be used.
    Type `Period` (represented as `dict` in JSON).
    """

    topic: typing.Optional[typing.List["CodeableConcept"]]

    """ The category of the EffectEvidenceSynthesis, such as Education,
        Treatment, Assessment, etc..
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    author: typing.Optional[typing.List["ContactDetail"]]

    """ Who authored the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    editor: typing.Optional[typing.List["ContactDetail"]]

    """ Who edited the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    reviewer: typing.Optional[typing.List["ContactDetail"]]

    """ Who reviewed the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    endorser: typing.Optional[typing.List["ContactDetail"]]

    """ Who endorsed the content.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    related_artifact: typing.Optional[typing.List["RelatedArtifact"]]

    """ Additional documentation, citations, etc..
    List of `RelatedArtifact` items (represented as `dict` in JSON).
    """

    synthesis_type: typing.Optional["CodeableConcept"]

    """ Type of synthesis.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    study_type: typing.Optional["CodeableConcept"]

    """ Type of study.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    population: "Reference"

    """ What population?.
    Type `Reference` (represented as `dict` in JSON).
    """

    exposure: typing.Optional["Reference"]

    """ What exposure?.
    Type `Reference` (represented as `dict` in JSON).
    """

    outcome: "Reference"

    """ What outcome?.
    Type `Reference` (represented as `dict` in JSON).
    """

    sample_size: typing.Optional["RiskEvidenceSynthesisSampleSize"]

    """ What sample size was involved?.
    Type `RiskEvidenceSynthesisSampleSize` (represented as `dict` in JSON).
    """

    risk_estimate: typing.Optional["RiskEvidenceSynthesisRiskEstimate"]

    """ What was the estimated risk.
    Type `RiskEvidenceSynthesisRiskEstimate` (represented as `dict` in JSON).
    """

    certainty: typing.Optional[typing.List["RiskEvidenceSynthesisCertainty"]]

    """ How certain is the risk.
    List of `RiskEvidenceSynthesisCertainty` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_copyright = get_primitive_field_root_validator("copyright")
    
    _validate_primitive_approval_date = get_primitive_field_root_validator("approval_date")
    
    _validate_primitive_last_review_date = get_primitive_field_root_validator("last_review_date")
    


class Schedule(DomainResource):
    """ A container for slots of time that may be available for booking
    appointments.
    """
    resource_type: typing.Literal["Schedule"] = "Schedule"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Schedule",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ External Ids for this item.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    active: typing.Optional[bool]

    """ Whether this schedule is in active use.
    Type `bool`. Is a JSON Primitive element.
    """
    

    active__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_active`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    service_category: typing.Optional[typing.List["CodeableConcept"]]

    """ High-level category.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    service_type: typing.Optional[typing.List["CodeableConcept"]]

    """ Specific service.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    specialty: typing.Optional[typing.List["CodeableConcept"]]

    """ Type of specialty needed.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    actor: typing.List["Reference"]

    """ Resource(s) that availability information is being provided for.
    List of `Reference` items (represented as `dict` in JSON).
    """

    planning_horizon: typing.Optional["Period"]

    """ Period of time covered by schedule.
    Type `Period` (represented as `dict` in JSON).
    """

    comment: typing.Optional[FHIRString]

    """ Comments on availability.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    comment__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_comment`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_active = get_primitive_field_root_validator("active")
    
    _validate_primitive_comment = get_primitive_field_root_validator("comment")
    


class SearchParameter(DomainResource):
    """ Search parameter for a resource.

    A search parameter that defines a named search item that can be used to
    search/filter on a resource.
    """
    resource_type: typing.Literal["SearchParameter"] = "SearchParameter"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SearchParameter",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: FHIRRequiredString

    """ Canonical identifier for this search parameter, represented as a
        URI (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    version: typing.Optional[FHIRString]

    """ Business version of the search parameter.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: FHIRRequiredString

    """ Name for this search parameter (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    derived_from: typing.Optional[FHIRString]

    """ Original definition for the search parameter.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    derived_from__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_derived_from`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    experimental: typing.Optional[bool]

    """ For testing purposes, not real usage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    experimental__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_experimental`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: FHIRRequiredString

    """ Natural language description of the search parameter.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for search parameter (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    purpose: typing.Optional[FHIRString]

    """ Why this search parameter is defined.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    purpose__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_purpose`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code: FHIRCode

    """ Code used in URL.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    base: typing.List[typing.Optional["ResourceType"]]

    """ The resource type(s) this search parameter applies to.
    List of `ResourceType` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    base__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_base`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    type: "SearchParamType"

    """ number | date | string | token | reference | composite | quantity |
        uri | special.
    Type `SearchParamType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    expression: typing.Optional[FHIRString]

    """ FHIRPath expression that extracts the values.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    expression__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_expression`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    xpath: typing.Optional[FHIRString]

    """ XPath that extracts the values.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    xpath__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_xpath`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    xpath_usage: typing.Optional["XPathUsageType"]

    """ normal | phonetic | nearby | distance | other.
    Type `XPathUsageType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    xpath_usage__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_xpath_usage`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    target: typing.Optional[typing.List[typing.Optional["ResourceType"]]]

    """ Types of resource (if a resource reference).
    List of `ResourceType` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    target__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_target`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    multiple_or: typing.Optional[bool]

    """ Allow multiple values per parameter (or).
    Type `bool`. Is a JSON Primitive element.
    """
    

    multiple_or__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_multiple_or`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    multiple_and: typing.Optional[bool]

    """ Allow multiple parameters (and).
    Type `bool`. Is a JSON Primitive element.
    """
    

    multiple_and__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_multiple_and`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    comparator: typing.Optional[typing.List[typing.Optional["SearchComparator"]]]

    """ eq | ne | gt | lt | ge | le | sa | eb | ap.
    List of `SearchComparator` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    comparator__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_comparator`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    modifier: typing.Optional[typing.List[typing.Optional["SearchModifierCode"]]]

    """ missing | exact | contains | not | text | in | not-in | below |
        above | type | identifier | ofType.
    List of `SearchModifierCode` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    modifier__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_modifier`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    chain: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Chained names supported.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    chain__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_chain`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    component: typing.Optional[typing.List["SearchParameterComponent"]]

    """ For Composite resources to define the parts.
    List of `SearchParameterComponent` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["base"]["enum"]
            enums.clear()
            for item in ResourceType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in SearchParamType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["xpathUsage"]["enum"]
            enums.clear()
            for item in XPathUsageType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["target"]["enum"]
            enums.clear()
            for item in ResourceType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["comparator"]["enum"]
            enums.clear()
            for item in SearchComparator:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["modifier"]["enum"]
            enums.clear()
            for item in SearchModifierCode:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_derived_from = get_primitive_field_root_validator("derived_from")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_experimental = get_primitive_field_root_validator("experimental")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_purpose = get_primitive_field_root_validator("purpose")
    
    _validate_primitive_code = get_primitive_field_root_validator("code")
    
    _validate_primitive_base = get_primitive_field_root_validator("base")
    
    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_expression = get_primitive_field_root_validator("expression")
    
    _validate_primitive_xpath = get_primitive_field_root_validator("xpath")
    
    _validate_primitive_xpath_usage = get_primitive_field_root_validator("xpath_usage")
    
    _validate_primitive_target = get_primitive_field_root_validator("target")
    
    _validate_primitive_multiple_or = get_primitive_field_root_validator("multiple_or")
    
    _validate_primitive_multiple_and = get_primitive_field_root_validator("multiple_and")
    
    _validate_primitive_comparator = get_primitive_field_root_validator("comparator")
    
    _validate_primitive_modifier = get_primitive_field_root_validator("modifier")
    
    _validate_primitive_chain = get_primitive_field_root_validator("chain")
    


class ServiceRequest(DomainResource):
    """ A request for a service to be performed.

    A record of a request for service such as diagnostic investigations,
    treatments, or operations to be performed.
    """
    resource_type: typing.Literal["ServiceRequest"] = "ServiceRequest"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ServiceRequest",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Identifiers assigned to this order.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    instantiates_canonical: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Instantiates FHIR protocol or definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates_canonical__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    instantiates_uri: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Instantiates external protocol or definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates_uri__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    based_on: typing.Optional[typing.List["Reference"]]

    """ What request fulfills.
    List of `Reference` items (represented as `dict` in JSON).
    """

    replaces: typing.Optional[typing.List["Reference"]]

    """ What request replaces.
    List of `Reference` items (represented as `dict` in JSON).
    """

    requisition: typing.Optional["Identifier"]

    """ Composite Request ID.
    Type `Identifier` (represented as `dict` in JSON).
    """

            
    
    
    status: "RequestStatus"

    """ draft | active | on-hold | revoked | completed | entered-in-error |
        unknown.
    Type `RequestStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    intent: "RequestIntent"

    """ proposal | plan | directive | order | original-order | reflex-order
        | filler-order | instance-order | option.
    Type `RequestIntent` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    intent__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_intent`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    category: typing.Optional[typing.List["CodeableConcept"]]

    """ Classification of service.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

            
    
    
    priority: typing.Optional["RequestPriority"]

    """ routine | urgent | asap | stat.
    Type `RequestPriority` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    priority__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_priority`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    do_not_perform: typing.Optional[bool]

    """ True if service/procedure should not be performed.
    Type `bool`. Is a JSON Primitive element.
    """
    

    do_not_perform__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_do_not_perform`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code: typing.Optional["CodeableConcept"]

    """ What is being requested/ordered.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    order_detail: typing.Optional[typing.List["CodeableConcept"]]

    """ Additional order information.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    quantity_quantity: typing.Optional["Quantity"]

    """ Service amount.
    Type `Quantity` (represented as `dict` in JSON).
    """

    quantity_ratio: typing.Optional["Ratio"]

    """ Service amount.
    Type `Ratio` (represented as `dict` in JSON).
    """

    quantity_range: typing.Optional["Range"]

    """ Service amount.
    Type `Range` (represented as `dict` in JSON).
    """

    subject: "Reference"

    """ Individual or Entity the service is ordered for.
    Type `Reference` (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Encounter in which the request was created.
    Type `Reference` (represented as `dict` in JSON).
    """

    occurrence_date_time: typing.Optional[FHIRDateTime]

    """ When service should occur.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    occurrence_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_occurrence_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    occurrence_period: typing.Optional["Period"]

    """ When service should occur.
    Type `Period` (represented as `dict` in JSON).
    """

    occurrence_timing: typing.Optional["Timing"]

    """ When service should occur.
    Type `Timing` (represented as `dict` in JSON).
    """

    as_needed_boolean: typing.Optional[bool]

    """ Preconditions for service.
    Type `bool`. Is a JSON Primitive element.
    """
    

    as_needed_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_as_needed_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    as_needed_codeable_concept: typing.Optional["CodeableConcept"]

    """ Preconditions for service.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    authored_on: typing.Optional[FHIRDateTime]

    """ Date request signed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    authored_on__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_authored_on`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    requester: typing.Optional["Reference"]

    """ Who/what is requesting service.
    Type `Reference` (represented as `dict` in JSON).
    """

    performer_type: typing.Optional["CodeableConcept"]

    """ Performer role.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    performer: typing.Optional[typing.List["Reference"]]

    """ Requested performer.
    List of `Reference` items (represented as `dict` in JSON).
    """

    location_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Requested location.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    location_reference: typing.Optional[typing.List["Reference"]]

    """ Requested location.
    List of `Reference` items (represented as `dict` in JSON).
    """

    reason_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Explanation/Justification for procedure or service.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    reason_reference: typing.Optional[typing.List["Reference"]]

    """ Explanation/Justification for service or service.
    List of `Reference` items (represented as `dict` in JSON).
    """

    insurance: typing.Optional[typing.List["Reference"]]

    """ Associated insurance coverage.
    List of `Reference` items (represented as `dict` in JSON).
    """

    supporting_info: typing.Optional[typing.List["Reference"]]

    """ Additional clinical information.
    List of `Reference` items (represented as `dict` in JSON).
    """

    specimen: typing.Optional[typing.List["Reference"]]

    """ Procedure Samples.
    List of `Reference` items (represented as `dict` in JSON).
    """

    body_site: typing.Optional[typing.List["CodeableConcept"]]

    """ Location on Body.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Comments.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    patient_instruction: typing.Optional[FHIRString]

    """ Patient or consumer-oriented instructions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    patient_instruction__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_patient_instruction`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    relevant_history: typing.Optional[typing.List["Reference"]]

    """ Request provenance.
    List of `Reference` items (represented as `dict` in JSON).
    """



#   {'path': 'ServiceRequest.quantity[x]', 'choice_of_type': 'quantity', 'orig_name': 'quantityQuantity', 'name': 'quantityQuantity', 'parent_name': 'ServiceRequest', 'class_name': 'Quantity', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Service amount', 'formal': 'An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).', 'representation': None}
    _quantity_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['quantity_quantity', 'quantity_ratio', 'quantity_range']), True))

#   {'path': 'ServiceRequest.occurrence[x]', 'choice_of_type': 'occurrence', 'orig_name': 'occurrenceDateTime', 'name': 'occurrenceDateTime', 'parent_name': 'ServiceRequest', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'When service should occur', 'formal': 'The date/time at which the requested service should occur.', 'representation': None}
    _occurrence_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['occurrence_date_time', 'occurrence_period', 'occurrence_timing']), True))

#   {'path': 'ServiceRequest.asNeeded[x]', 'choice_of_type': 'asNeeded', 'orig_name': 'asNeededBoolean', 'name': 'asNeededBoolean', 'parent_name': 'ServiceRequest', 'class_name': 'bool', 'enum': None, 'module_name': None, 'json_class': 'bool', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Preconditions for service', 'formal': 'If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.', 'representation': None}
    _as_needed_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['as_needed_boolean', 'as_needed_codeable_concept']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in RequestStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["intent"]["enum"]
            enums.clear()
            for item in RequestIntent:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["priority"]["enum"]
            enums.clear()
            for item in RequestPriority:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_instantiates_canonical = get_primitive_field_root_validator("instantiates_canonical")
    
    _validate_primitive_instantiates_uri = get_primitive_field_root_validator("instantiates_uri")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_intent = get_primitive_field_root_validator("intent")
    
    _validate_primitive_priority = get_primitive_field_root_validator("priority")
    
    _validate_primitive_do_not_perform = get_primitive_field_root_validator("do_not_perform")
    
    _validate_primitive_occurrence_date_time = get_primitive_field_root_validator("occurrence_date_time")
    
    _validate_primitive_as_needed_boolean = get_primitive_field_root_validator("as_needed_boolean")
    
    _validate_primitive_authored_on = get_primitive_field_root_validator("authored_on")
    
    _validate_primitive_patient_instruction = get_primitive_field_root_validator("patient_instruction")
    


class Slot(DomainResource):
    """ A slot of time on a schedule that may be available for booking appointments.
    """
    resource_type: typing.Literal["Slot"] = "Slot"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Slot",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ External Ids for this item.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    service_category: typing.Optional[typing.List["CodeableConcept"]]

    """ A broad categorization of the service that is to be performed
        during this appointment.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    service_type: typing.Optional[typing.List["CodeableConcept"]]

    """ The type of appointments that can be booked into this slot (ideally
        this would be an identifiable service - which is at a location,
        rather than the location itself). If provided then this overrides
        the value provided on the availability resource.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    specialty: typing.Optional[typing.List["CodeableConcept"]]

    """ The specialty of a practitioner that would be required to perform
        the service requested in this appointment.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    appointment_type: typing.Optional["CodeableConcept"]

    """ The style of appointment or patient that may be booked in the slot
        (not service type).
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    schedule: "Reference"

    """ The schedule resource that this slot defines an interval of status
        information.
    Type `Reference` (represented as `dict` in JSON).
    """

            
    
    
    status: "SlotStatus"

    """ busy | free | busy-unavailable | busy-tentative | entered-in-error.
    Type `SlotStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    start: FHIRInstant

    """ Date/Time that the slot is to begin.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    start__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_start`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    end: FHIRInstant

    """ Date/Time that the slot is to conclude.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    end__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_end`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    overbooked: typing.Optional[bool]

    """ This slot has already been overbooked, appointments are unlikely to
        be accepted for this time.
    Type `bool`. Is a JSON Primitive element.
    """
    

    overbooked__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_overbooked`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    comment: typing.Optional[FHIRString]

    """ Comments on the slot to describe any extended information. Such as
        custom constraints on the slot.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    comment__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_comment`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in SlotStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_start = get_primitive_field_root_validator("start")
    
    _validate_primitive_end = get_primitive_field_root_validator("end")
    
    _validate_primitive_overbooked = get_primitive_field_root_validator("overbooked")
    
    _validate_primitive_comment = get_primitive_field_root_validator("comment")
    


class Specimen(DomainResource):
    """ Sample for analysis.

    A sample to be used for analysis.
    """
    resource_type: typing.Literal["Specimen"] = "Specimen"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Specimen",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ External Identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    accession_identifier: typing.Optional["Identifier"]

    """ Identifier assigned by the lab.
    Type `Identifier` (represented as `dict` in JSON).
    """

            
    
    
    status: typing.Optional["SpecimenStatus"]

    """ available | unavailable | unsatisfactory | entered-in-error.
    Type `SpecimenStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional["CodeableConcept"]

    """ Kind of material that forms the specimen.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject: typing.Optional["Reference"]

    """ Where the specimen came from. This may be from patient(s), from a
        location (e.g., the source of an environmental sample), or a
        sampling of a substance or a device.
    Type `Reference` (represented as `dict` in JSON).
    """

    received_time: typing.Optional[FHIRDateTime]

    """ The time when specimen was received for processing.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    received_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_received_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    parent: typing.Optional[typing.List["Reference"]]

    """ Specimen from which this specimen originated.
    List of `Reference` items (represented as `dict` in JSON).
    """

    request: typing.Optional[typing.List["Reference"]]

    """ Why the specimen was collected.
    List of `Reference` items (represented as `dict` in JSON).
    """

    collection: typing.Optional["SpecimenCollection"]

    """ Collection details.
    Type `SpecimenCollection` (represented as `dict` in JSON).
    """

    processing: typing.Optional[typing.List["SpecimenProcessing"]]

    """ Processing and processing step details.
    List of `SpecimenProcessing` items (represented as `dict` in JSON).
    """

    container: typing.Optional[typing.List["SpecimenContainer"]]

    """ Direct container of specimen (tube/slide, etc.).
    List of `SpecimenContainer` items (represented as `dict` in JSON).
    """

    condition: typing.Optional[typing.List["CodeableConcept"]]

    """ State of the specimen.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Comments.
    List of `Annotation` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in SpecimenStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_received_time = get_primitive_field_root_validator("received_time")
    


class SpecimenDefinition(DomainResource):
    """ Kind of specimen.

    A kind of specimen with associated set of requirements.
    """
    resource_type: typing.Literal["SpecimenDefinition"] = "SpecimenDefinition"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SpecimenDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional["Identifier"]

    """ Business identifier of a kind of specimen.
    Type `Identifier` (represented as `dict` in JSON).
    """

    type_collected: typing.Optional["CodeableConcept"]

    """ Kind of material to collect.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    patient_preparation: typing.Optional[typing.List["CodeableConcept"]]

    """ Patient preparation for collection.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    time_aspect: typing.Optional[FHIRString]

    """ Time aspect for collection.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    time_aspect__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_time_aspect`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    collection: typing.Optional[typing.List["CodeableConcept"]]

    """ Specimen collection procedure.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    type_tested: typing.Optional[typing.List["SpecimenDefinitionTypeTested"]]

    """ Specimen in container intended for testing by lab.
    List of `SpecimenDefinitionTypeTested` items (represented as `dict` in JSON).
    """



    _validate_primitive_time_aspect = get_primitive_field_root_validator("time_aspect")
    


class StructureDefinition(DomainResource):
    """ Structural Definition.

    A definition of a FHIR structure. This resource is used to describe the
    underlying resources, data types defined in FHIR, and also for describing
    extensions and constraints on resources and data types.
    """
    resource_type: typing.Literal["StructureDefinition"] = "StructureDefinition"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/StructureDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: FHIRRequiredString

    """ Canonical identifier for this structure definition, represented as
        a URI (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    identifier: typing.Optional[typing.List["Identifier"]]

    """ Additional identifier for the structure definition.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    version: typing.Optional[FHIRString]

    """ Business version of the structure definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: FHIRRequiredString

    """ Name for this structure definition (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Name for this structure definition (human friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    experimental: typing.Optional[bool]

    """ For testing purposes, not real usage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    experimental__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_experimental`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the structure definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for structure definition (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    purpose: typing.Optional[FHIRString]

    """ Why this structure definition is defined.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    purpose__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_purpose`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    copyright: typing.Optional[FHIRString]

    """ Use and/or publishing restrictions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    copyright__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_copyright`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    keyword: typing.Optional[typing.List["Coding"]]

    """ Assist with indexing and finding.
    List of `Coding` items (represented as `dict` in JSON).
    """

    
    
    fhir_version: typing.Optional["FHIRCode"]

    """ FHIR Version this StructureDefinition targets.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    fhir_version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_fhir_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    mapping: typing.Optional[typing.List["StructureDefinitionMapping"]]

    """ External specification that the content is mapped to.
    List of `StructureDefinitionMapping` items (represented as `dict` in JSON).
    """

            
    
    
    kind: "StructureDefinitionKind"

    """ primitive-type | complex-type | resource | logical.
    Type `StructureDefinitionKind` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    kind__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_kind`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    abstract: bool

    """ Whether the structure is abstract.
    Type `bool`. Is a JSON Primitive element.
    """
    

    abstract__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_abstract`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    context: typing.Optional[typing.List["StructureDefinitionContext"]]

    """ If an extension, where it can be used in instances.
    List of `StructureDefinitionContext` items (represented as `dict` in JSON).
    """

    context_invariant: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ FHIRPath invariants - when the extension can be used.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    context_invariant__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_context_invariant`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: FHIRRequiredString

    """ Type defined or constrained by this structure.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    base_definition: typing.Optional[FHIRString]

    """ Definition that this type is constrained/specialized from.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    base_definition__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_base_definition`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    derivation: typing.Optional["TypeDerivationRule"]

    """ specialization | constraint - How relates to base definition.
    Type `TypeDerivationRule` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    derivation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_derivation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    snapshot: typing.Optional["StructureDefinitionSnapshot"]

    """ Snapshot view of the structure.
    Type `StructureDefinitionSnapshot` (represented as `dict` in JSON).
    """

    differential: typing.Optional["StructureDefinitionDifferential"]

    """ Differential view of the structure.
    Type `StructureDefinitionDifferential` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["kind"]["enum"]
            enums.clear()
            for item in StructureDefinitionKind:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["derivation"]["enum"]
            enums.clear()
            for item in TypeDerivationRule:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_experimental = get_primitive_field_root_validator("experimental")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_purpose = get_primitive_field_root_validator("purpose")
    
    _validate_primitive_copyright = get_primitive_field_root_validator("copyright")
    
    _validate_primitive_fhir_version = get_primitive_field_root_validator("fhir_version")
    
    _validate_primitive_kind = get_primitive_field_root_validator("kind")
    
    _validate_primitive_abstract = get_primitive_field_root_validator("abstract")
    
    _validate_primitive_context_invariant = get_primitive_field_root_validator("context_invariant")
    
    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_base_definition = get_primitive_field_root_validator("base_definition")
    
    _validate_primitive_derivation = get_primitive_field_root_validator("derivation")
    


class StructureMap(DomainResource):
    """ A Map of relationships between 2 structures that can be used to transform
    data.
    """
    resource_type: typing.Literal["StructureMap"] = "StructureMap"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/StructureMap",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: FHIRRequiredString

    """ Canonical identifier for this structure map, represented as a URI
        (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    identifier: typing.Optional[typing.List["Identifier"]]

    """ Additional identifier for the structure map.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    version: typing.Optional[FHIRString]

    """ Business version of the structure map.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: FHIRRequiredString

    """ Name for this structure map (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Name for this structure map (human friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    experimental: typing.Optional[bool]

    """ For testing purposes, not real usage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    experimental__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_experimental`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the structure map.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for structure map (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    purpose: typing.Optional[FHIRString]

    """ Why this structure map is defined.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    purpose__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_purpose`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    copyright: typing.Optional[FHIRString]

    """ Use and/or publishing restrictions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    copyright__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_copyright`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    structure: typing.Optional[typing.List["StructureMapStructure"]]

    """ Structure Definition used by this map.
    List of `StructureMapStructure` items (represented as `dict` in JSON).
    """

    import_: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Other maps used by this map (canonical URLs).
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    import___extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_import_`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    group: typing.List["StructureMapGroup"]

    """ Named sections for reader convenience.
    List of `StructureMapGroup` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_experimental = get_primitive_field_root_validator("experimental")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_purpose = get_primitive_field_root_validator("purpose")
    
    _validate_primitive_copyright = get_primitive_field_root_validator("copyright")
    
    _validate_primitive_import_ = get_primitive_field_root_validator("import_")
    


class Subscription(DomainResource):
    """ Server push subscription criteria.

    The subscription resource is used to define a push-based subscription from
    a server to another system. Once a subscription is registered with the
    server, the server checks every resource that is created or updated, and if
    the resource matches the given criteria, it sends a message on the defined
    "channel" so that another system can take an appropriate action.
    """
    resource_type: typing.Literal["Subscription"] = "Subscription"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Subscription",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    status: "SubscriptionStatus"

    """ requested | active | error | off.
    Type `SubscriptionStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactPoint"]]

    """ Contact details for source (e.g. troubleshooting).
    List of `ContactPoint` items (represented as `dict` in JSON).
    """

    end: typing.Optional[FHIRInstant]

    """ When to automatically delete the subscription.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    end__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_end`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    reason: FHIRRequiredString

    """ Description of why this subscription was created.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    reason__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_reason`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    criteria: FHIRRequiredString

    """ Rule for server push.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    criteria__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_criteria`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    error: typing.Optional[FHIRString]

    """ Latest error note.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    error__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_error`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    channel: "SubscriptionChannel"

    """ The channel on which to report matches to the criteria.
    Type `SubscriptionChannel` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in SubscriptionStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_end = get_primitive_field_root_validator("end")
    
    _validate_primitive_reason = get_primitive_field_root_validator("reason")
    
    _validate_primitive_criteria = get_primitive_field_root_validator("criteria")
    
    _validate_primitive_error = get_primitive_field_root_validator("error")
    


class Substance(DomainResource):
    """ A homogeneous material with a definite composition.
    """
    resource_type: typing.Literal["Substance"] = "Substance"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Substance",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Unique identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: typing.Optional["FHIRSubstanceStatus"]

    """ active | inactive | entered-in-error.
    Type `FHIRSubstanceStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    category: typing.Optional[typing.List["CodeableConcept"]]

    """ What class/type of substance this is.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    code: "CodeableConcept"

    """ What substance this is.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Textual description of the substance, comments.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    instance: typing.Optional[typing.List["SubstanceInstance"]]

    """ If this describes a specific package/container of the substance.
    List of `SubstanceInstance` items (represented as `dict` in JSON).
    """

    ingredient: typing.Optional[typing.List["SubstanceIngredient"]]

    """ Composition information about the substance.
    List of `SubstanceIngredient` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in FHIRSubstanceStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class SubstanceNucleicAcid(DomainResource):
    """ Nucleic acids are defined by three distinct elements: the base, sugar and
    linkage. Individual substance/moiety IDs will be created for each of these
    elements. The nucleotide sequence will be always entered in the 5’-3’
    direction.
    """
    resource_type: typing.Literal["SubstanceNucleicAcid"] = "SubstanceNucleicAcid"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceNucleicAcid",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    sequence_type: typing.Optional["CodeableConcept"]

    """ The type of the sequence shall be specified based on a controlled
        vocabulary.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    number_of_subunits: typing.Optional[FHIRInt]

    """ The number of linear sequences of nucleotides linked through
        phosphodiester bonds shall be described. Subunits would be strands
        of nucleic acids that are tightly associated typically through
        Watson-Crick base pairing. NOTE: If not specified in the reference
        source, the assumption is that there is 1 subunit.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    number_of_subunits__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_number_of_subunits`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    area_of_hybridisation: typing.Optional[FHIRString]

    """ The area of hybridisation shall be described if applicable for
        double stranded RNA or DNA. The number associated with the subunit
        followed by the number associated to the residue shall be specified
        in increasing order. The underscore “” shall be used as separator
        as follows: “Subunitnumber Residue”.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    area_of_hybridisation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_area_of_hybridisation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    oligo_nucleotide_type: typing.Optional["CodeableConcept"]

    """ (TBC).
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subunit: typing.Optional[typing.List["SubstanceNucleicAcidSubunit"]]

    """ Subunits are listed in order of decreasing length; sequences of the
        same length will be ordered by molecular weight; subunits that have
        identical sequences will be repeated multiple times.
    List of `SubstanceNucleicAcidSubunit` items (represented as `dict` in JSON).
    """



    _validate_primitive_number_of_subunits = get_primitive_field_root_validator("number_of_subunits")
    
    _validate_primitive_area_of_hybridisation = get_primitive_field_root_validator("area_of_hybridisation")
    


class SubstancePolymer(DomainResource):
    """ Todo.
    """
    resource_type: typing.Literal["SubstancePolymer"] = "SubstancePolymer"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstancePolymer",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    class_: typing.Optional["CodeableConcept"]

    """ Todo.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    geometry: typing.Optional["CodeableConcept"]

    """ Todo.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    copolymer_connectivity: typing.Optional[typing.List["CodeableConcept"]]

    """ Todo.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    modification: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Todo.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    modification__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_modification`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    monomer_set: typing.Optional[typing.List["SubstancePolymerMonomerSet"]]

    """ Todo.
    List of `SubstancePolymerMonomerSet` items (represented as `dict` in JSON).
    """

    repeat: typing.Optional[typing.List["SubstancePolymerRepeat"]]

    """ Todo.
    List of `SubstancePolymerRepeat` items (represented as `dict` in JSON).
    """



    _validate_primitive_modification = get_primitive_field_root_validator("modification")
    


class SubstanceProtein(DomainResource):
    """ A SubstanceProtein is defined as a single unit of a linear amino acid
    sequence, or a combination of subunits that are either covalently linked or
    have a defined invariant stoichiometric relationship. This includes all
    synthetic, recombinant and purified SubstanceProteins of defined sequence,
    whether the use is therapeutic or prophylactic. This set of elements will
    be used to describe albumins, coagulation factors, cytokines, growth
    factors, peptide/SubstanceProtein hormones, enzymes, toxins, toxoids,
    recombinant vaccines, and immunomodulators.
    """
    resource_type: typing.Literal["SubstanceProtein"] = "SubstanceProtein"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceProtein",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    sequence_type: typing.Optional["CodeableConcept"]

    """ The SubstanceProtein descriptive elements will only be used when a
        complete or partial amino acid sequence is available or derivable
        from a nucleic acid sequence.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    number_of_subunits: typing.Optional[FHIRInt]

    """ Number of linear sequences of amino acids linked through peptide
        bonds. The number of subunits constituting the SubstanceProtein
        shall be described. It is possible that the number of subunits can
        be variable.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    number_of_subunits__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_number_of_subunits`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    disulfide_linkage: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ The disulphide bond between two cysteine residues either on the
        same subunit or on two different subunits shall be described. The
        position of the disulfide bonds in the SubstanceProtein shall be
        listed in increasing order of subunit number and position within
        subunit followed by the abbreviation of the amino acids involved.
        The disulfide linkage positions shall actually contain the amino
        acid Cysteine at the respective positions.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    disulfide_linkage__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_disulfide_linkage`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subunit: typing.Optional[typing.List["SubstanceProteinSubunit"]]

    """ This subclause refers to the description of each subunit
        constituting the SubstanceProtein. A subunit is a linear sequence
        of amino acids linked through peptide bonds. The Subunit
        information shall be provided when the finished SubstanceProtein is
        a complex of multiple sequences; subunits are not used to delineate
        domains within a single sequence. Subunits are listed in order of
        decreasing length; sequences of the same length will be ordered by
        decreasing molecular weight; subunits that have identical sequences
        will be repeated multiple times.
    List of `SubstanceProteinSubunit` items (represented as `dict` in JSON).
    """



    _validate_primitive_number_of_subunits = get_primitive_field_root_validator("number_of_subunits")
    
    _validate_primitive_disulfide_linkage = get_primitive_field_root_validator("disulfide_linkage")
    


class SubstanceReferenceInformation(DomainResource):
    """ Todo.
    """
    resource_type: typing.Literal["SubstanceReferenceInformation"] = "SubstanceReferenceInformation"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceReferenceInformation",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    comment: typing.Optional[FHIRString]

    """ Todo.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    comment__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_comment`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    gene: typing.Optional[typing.List["SubstanceReferenceInformationGene"]]

    """ Todo.
    List of `SubstanceReferenceInformationGene` items (represented as `dict` in JSON).
    """

    gene_element: typing.Optional[typing.List["SubstanceReferenceInformationGeneElement"]]

    """ Todo.
    List of `SubstanceReferenceInformationGeneElement` items (represented as `dict` in JSON).
    """

    classification: typing.Optional[typing.List["SubstanceReferenceInformationClassification"]]

    """ Todo.
    List of `SubstanceReferenceInformationClassification` items (represented as `dict` in JSON).
    """

    target: typing.Optional[typing.List["SubstanceReferenceInformationTarget"]]

    """ Todo.
    List of `SubstanceReferenceInformationTarget` items (represented as `dict` in JSON).
    """



    _validate_primitive_comment = get_primitive_field_root_validator("comment")
    


class SubstanceSourceMaterial(DomainResource):
    """ Source material shall capture information on the taxonomic and anatomical
    origins as well as the fraction of a material that can result in or can be
    modified to form a substance. This set of data elements shall be used to
    define polymer substances isolated from biological matrices. Taxonomic and
    anatomical origins shall be described using a controlled vocabulary as
    required. This information is captured for naturally derived polymers ( .
    starch) and structurally diverse substances. For Organisms belonging to the
    Kingdom Plantae the Substance level defines the fresh material of a single
    species or infraspecies, the Herbal Drug and the Herbal preparation. For
    Herbal preparations, the fraction information will be captured at the
    Substance information level and additional information for herbal extracts
    will be captured at the Specified Substance Group 1 information level. See
    for further explanation the Substance Class: Structurally Diverse and the
    herbal annex.
    """
    resource_type: typing.Literal["SubstanceSourceMaterial"] = "SubstanceSourceMaterial"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceSourceMaterial",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    source_material_class: typing.Optional["CodeableConcept"]

    """ General high level classification of the source material specific
        to the origin of the material.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    source_material_type: typing.Optional["CodeableConcept"]

    """ The type of the source material shall be specified based on a
        controlled vocabulary. For vaccines, this subclause refers to the
        class of infectious agent.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    source_material_state: typing.Optional["CodeableConcept"]

    """ The state of the source material when extracted.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    organism_id: typing.Optional["Identifier"]

    """ The unique identifier associated with the source material parent
        organism shall be specified.
    Type `Identifier` (represented as `dict` in JSON).
    """

    organism_name: typing.Optional[FHIRString]

    """ The organism accepted Scientific name shall be provided based on
        the organism taxonomy.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    organism_name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_organism_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    parent_substance_id: typing.Optional[typing.List["Identifier"]]

    """ The parent of the herbal drug Ginkgo biloba, Leaf is the substance
        ID of the substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L.
        (Whole plant).
    List of `Identifier` items (represented as `dict` in JSON).
    """

    parent_substance_name: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ The parent substance of the Herbal Drug, or Herbal preparation.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    parent_substance_name__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_parent_substance_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    country_of_origin: typing.Optional[typing.List["CodeableConcept"]]

    """ The country where the plant material is harvested or the countries
        where the plasma is sourced from as laid down in accordance with
        the Plasma Master File. For “Plasma-derived substances” the
        attribute country of origin provides information about the
        countries used for the manufacturing of the Cryopoor plama or
        Crioprecipitate.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    geographical_location: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ The place/region where the plant is harvested or the places/regions
        where the animal source material has its habitat.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    geographical_location__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_geographical_location`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    development_stage: typing.Optional["CodeableConcept"]

    """ Stage of life for animals, plants, insects and microorganisms. This
        information shall be provided only when the substance is
        significantly different in these stages (e.g. foetal bovine serum).
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    fraction_description: typing.Optional[typing.List["SubstanceSourceMaterialFractionDescription"]]

    """ Many complex materials are fractions of parts of plants, animals,
        or minerals. Fraction elements are often necessary to define both
        Substances and Specified Group 1 Substances. For substances derived
        from Plants, fraction information will be captured at the Substance
        information level ( . Oils, Juices and Exudates). Additional
        information for Extracts, such as extraction solvent composition,
        will be captured at the Specified Substance Group 1 information
        level. For plasma-derived products fraction information will be
        captured at the Substance and the Specified Substance Group 1
        levels.
    List of `SubstanceSourceMaterialFractionDescription` items (represented as `dict` in JSON).
    """

    organism: typing.Optional["SubstanceSourceMaterialOrganism"]

    """ This subclause describes the organism which the substance is
        derived from. For vaccines, the parent organism shall be specified
        based on these subclause elements. As an example, full taxonomy
        will be described for the Substance Name: ., Leaf.
    Type `SubstanceSourceMaterialOrganism` (represented as `dict` in JSON).
    """

    part_description: typing.Optional[typing.List["SubstanceSourceMaterialPartDescription"]]

    """ To do.
    List of `SubstanceSourceMaterialPartDescription` items (represented as `dict` in JSON).
    """



    _validate_primitive_organism_name = get_primitive_field_root_validator("organism_name")
    
    _validate_primitive_parent_substance_name = get_primitive_field_root_validator("parent_substance_name")
    
    _validate_primitive_geographical_location = get_primitive_field_root_validator("geographical_location")
    


class SubstanceSpecification(DomainResource):
    """ The detailed description of a substance, typically at a level beyond what
    is used for prescribing.
    """
    resource_type: typing.Literal["SubstanceSpecification"] = "SubstanceSpecification"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceSpecification",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional["Identifier"]

    """ Identifier by which this substance is known.
    Type `Identifier` (represented as `dict` in JSON).
    """

    type: typing.Optional["CodeableConcept"]

    """ High level categorization, e.g. polymer or nucleic acid.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    status: typing.Optional["CodeableConcept"]

    """ Status of substance within the catalogue e.g. approved.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    domain: typing.Optional["CodeableConcept"]

    """ If the substance applies to only human or veterinary use.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Textual description of the substance.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    source: typing.Optional[typing.List["Reference"]]

    """ Supporting literature.
    List of `Reference` items (represented as `dict` in JSON).
    """

    comment: typing.Optional[FHIRString]

    """ Textual comment about this record of a substance.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    comment__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_comment`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    moiety: typing.Optional[typing.List["SubstanceSpecificationMoiety"]]

    """ Moiety, for structural modifications.
    List of `SubstanceSpecificationMoiety` items (represented as `dict` in JSON).
    """

    property: typing.Optional[typing.List["SubstanceSpecificationProperty"]]

    """ General specifications for this substance, including how it is
        related to other substances.
    List of `SubstanceSpecificationProperty` items (represented as `dict` in JSON).
    """

    reference_information: typing.Optional["Reference"]

    """ General information detailing this substance.
    Type `Reference` (represented as `dict` in JSON).
    """

    structure: typing.Optional["SubstanceSpecificationStructure"]

    """ Structural information.
    Type `SubstanceSpecificationStructure` (represented as `dict` in JSON).
    """

    code: typing.Optional[typing.List["SubstanceSpecificationFHIRCode"]]

    """ Codes associated with the substance.
    List of `SubstanceSpecificationFHIRCode` items (represented as `dict` in JSON).
    """

    name: typing.Optional[typing.List["SubstanceSpecificationName"]]

    """ Names applicable to this substance.
    List of `SubstanceSpecificationName` items (represented as `dict` in JSON).
    """

    molecular_weight: typing.Optional[typing.List["SubstanceSpecificationStructureIsotopeMolecularWeight"]]

    """ The molecular weight or weight range (for proteins, polymers or
        nucleic acids).
    List of `SubstanceSpecificationStructureIsotopeMolecularWeight` items (represented as `dict` in JSON).
    """

    relationship: typing.Optional[typing.List["SubstanceSpecificationRelationship"]]

    """ A link between this substance and another, with details of the
        relationship.
    List of `SubstanceSpecificationRelationship` items (represented as `dict` in JSON).
    """

    nucleic_acid: typing.Optional["Reference"]

    """ Data items specific to nucleic acids.
    Type `Reference` (represented as `dict` in JSON).
    """

    polymer: typing.Optional["Reference"]

    """ Data items specific to polymers.
    Type `Reference` (represented as `dict` in JSON).
    """

    protein: typing.Optional["Reference"]

    """ Data items specific to proteins.
    Type `Reference` (represented as `dict` in JSON).
    """

    source_material: typing.Optional["Reference"]

    """ Material or taxonomic/anatomical source for the substance.
    Type `Reference` (represented as `dict` in JSON).
    """



    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_comment = get_primitive_field_root_validator("comment")
    


class SupplyDelivery(DomainResource):
    """ Delivery of bulk Supplies.

    Record of delivery of what is supplied.
    """
    resource_type: typing.Literal["SupplyDelivery"] = "SupplyDelivery"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SupplyDelivery",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ External identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    based_on: typing.Optional[typing.List["Reference"]]

    """ Fulfills plan, proposal or order.
    List of `Reference` items (represented as `dict` in JSON).
    """

    part_of: typing.Optional[typing.List["Reference"]]

    """ Part of referenced event.
    List of `Reference` items (represented as `dict` in JSON).
    """

            
    
    
    status: typing.Optional["SupplyDeliveryStatus"]

    """ in-progress | completed | abandoned | entered-in-error.
    Type `SupplyDeliveryStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    patient: typing.Optional["Reference"]

    """ Patient for whom the item is supplied.
    Type `Reference` (represented as `dict` in JSON).
    """

    type: typing.Optional["CodeableConcept"]

    """ Category of dispense event.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    supplied_item: typing.Optional["SupplyDeliverySuppliedItem"]

    """ The item that is delivered or supplied.
    Type `SupplyDeliverySuppliedItem` (represented as `dict` in JSON).
    """

    occurrence_date_time: typing.Optional[FHIRDateTime]

    """ When event occurred.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    occurrence_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_occurrence_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    occurrence_period: typing.Optional["Period"]

    """ When event occurred.
    Type `Period` (represented as `dict` in JSON).
    """

    occurrence_timing: typing.Optional["Timing"]

    """ When event occurred.
    Type `Timing` (represented as `dict` in JSON).
    """

    supplier: typing.Optional["Reference"]

    """ Dispenser.
    Type `Reference` (represented as `dict` in JSON).
    """

    destination: typing.Optional["Reference"]

    """ Where the Supply was sent.
    Type `Reference` (represented as `dict` in JSON).
    """

    receiver: typing.Optional[typing.List["Reference"]]

    """ Who collected the Supply.
    List of `Reference` items (represented as `dict` in JSON).
    """



#   {'path': 'SupplyDelivery.occurrence[x]', 'choice_of_type': 'occurrence', 'orig_name': 'occurrenceDateTime', 'name': 'occurrenceDateTime', 'parent_name': 'SupplyDelivery', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'When event occurred', 'formal': 'The date or time(s) the activity occurred.', 'representation': None}
    _occurrence_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['occurrence_date_time', 'occurrence_period', 'occurrence_timing']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in SupplyDeliveryStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_occurrence_date_time = get_primitive_field_root_validator("occurrence_date_time")
    


class SupplyRequest(DomainResource):
    """ Request for a medication, substance or device.

    A record of a request for a medication, substance or device used in the
    healthcare setting.
    """
    resource_type: typing.Literal["SupplyRequest"] = "SupplyRequest"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SupplyRequest",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business Identifier for SupplyRequest.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: typing.Optional["SupplyRequestStatus"]

    """ draft | active | suspended +.
    Type `SupplyRequestStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    category: typing.Optional["CodeableConcept"]

    """ The kind of supply (central, non-stock, etc.).
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

            
    
    
    priority: typing.Optional["RequestPriority"]

    """ routine | urgent | asap | stat.
    Type `RequestPriority` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    priority__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_priority`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    item_codeable_concept: typing.Optional["CodeableConcept"]

    """ Medication, Substance, or Device requested to be supplied.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    item_reference: typing.Optional["Reference"]

    """ Medication, Substance, or Device requested to be supplied.
    Type `Reference` (represented as `dict` in JSON).
    """

    quantity: "Quantity"

    """ The requested amount of the item indicated.
    Type `Quantity` (represented as `dict` in JSON).
    """

    parameter: typing.Optional[typing.List["SupplyRequestParameter"]]

    """ Ordered item details.
    List of `SupplyRequestParameter` items (represented as `dict` in JSON).
    """

    occurrence_date_time: typing.Optional[FHIRDateTime]

    """ When the request should be fulfilled.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    occurrence_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_occurrence_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    occurrence_period: typing.Optional["Period"]

    """ When the request should be fulfilled.
    Type `Period` (represented as `dict` in JSON).
    """

    occurrence_timing: typing.Optional["Timing"]

    """ When the request should be fulfilled.
    Type `Timing` (represented as `dict` in JSON).
    """

    authored_on: typing.Optional[FHIRDateTime]

    """ When the request was made.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    authored_on__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_authored_on`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    requester: typing.Optional["Reference"]

    """ Individual making the request.
    Type `Reference` (represented as `dict` in JSON).
    """

    supplier: typing.Optional[typing.List["Reference"]]

    """ Who is intended to fulfill the request.
    List of `Reference` items (represented as `dict` in JSON).
    """

    reason_code: typing.Optional[typing.List["CodeableConcept"]]

    """ The reason why the supply item was requested.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    reason_reference: typing.Optional[typing.List["Reference"]]

    """ The reason why the supply item was requested.
    List of `Reference` items (represented as `dict` in JSON).
    """

    deliver_from: typing.Optional["Reference"]

    """ The origin of the supply.
    Type `Reference` (represented as `dict` in JSON).
    """

    deliver_to: typing.Optional["Reference"]

    """ The destination of the supply.
    Type `Reference` (represented as `dict` in JSON).
    """



#   {'path': 'SupplyRequest.item[x]', 'choice_of_type': 'item', 'orig_name': 'itemCodeableConcept', 'name': 'itemCodeableConcept', 'parent_name': 'SupplyRequest', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Medication, Substance, or Device requested to be supplied', 'formal': 'The item that is requested to be supplied. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.', 'representation': None}
    _item_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['item_codeable_concept', 'item_reference']), False))

#   {'path': 'SupplyRequest.occurrence[x]', 'choice_of_type': 'occurrence', 'orig_name': 'occurrenceDateTime', 'name': 'occurrenceDateTime', 'parent_name': 'SupplyRequest', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'When the request should be fulfilled', 'formal': None, 'representation': None}
    _occurrence_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['occurrence_date_time', 'occurrence_period', 'occurrence_timing']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in SupplyRequestStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["priority"]["enum"]
            enums.clear()
            for item in RequestPriority:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_priority = get_primitive_field_root_validator("priority")
    
    _validate_primitive_occurrence_date_time = get_primitive_field_root_validator("occurrence_date_time")
    
    _validate_primitive_authored_on = get_primitive_field_root_validator("authored_on")
    


class Task(DomainResource):
    """ A task to be performed.
    """
    resource_type: typing.Literal["Task"] = "Task"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Task",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Task Instance Identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    instantiates_canonical: typing.Optional[FHIRString]

    """ Formal definition of task.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates_canonical__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    instantiates_uri: typing.Optional[FHIRString]

    """ Formal definition of task.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates_uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    based_on: typing.Optional[typing.List["Reference"]]

    """ Request fulfilled by this task.
    List of `Reference` items (represented as `dict` in JSON).
    """

    group_identifier: typing.Optional["Identifier"]

    """ Requisition or grouper id.
    Type `Identifier` (represented as `dict` in JSON).
    """

    part_of: typing.Optional[typing.List["Reference"]]

    """ Composite task.
    List of `Reference` items (represented as `dict` in JSON).
    """

            
    
    
    status: "TaskStatus"

    """ draft | requested | received | accepted | +.
    Type `TaskStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    status_reason: typing.Optional["CodeableConcept"]

    """ Reason for current status.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    business_status: typing.Optional["CodeableConcept"]

    """ E.g. "Specimen collected", "IV prepped".
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    intent: FHIRCode

    """ unknown | proposal | plan | order | original-order | reflex-order |
        filler-order | instance-order | option.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    intent__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_intent`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    priority: typing.Optional["RequestPriority"]

    """ routine | urgent | asap | stat.
    Type `RequestPriority` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    priority__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_priority`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code: typing.Optional["CodeableConcept"]

    """ Task Type.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Human-readable explanation of task.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    focus: typing.Optional["Reference"]

    """ What task is acting on.
    Type `Reference` (represented as `dict` in JSON).
    """

    for_: typing.Optional["Reference"]

    """ Beneficiary of the Task.
    Type `Reference` (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Healthcare event during which this task originated.
    Type `Reference` (represented as `dict` in JSON).
    """

    execution_period: typing.Optional["Period"]

    """ Start and end time of execution.
    Type `Period` (represented as `dict` in JSON).
    """

    authored_on: typing.Optional[FHIRDateTime]

    """ Task Creation Date.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    authored_on__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_authored_on`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    last_modified: typing.Optional[FHIRDateTime]

    """ Task Last Modified Date.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    last_modified__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_last_modified`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    requester: typing.Optional["Reference"]

    """ Who is asking for task to be done.
    Type `Reference` (represented as `dict` in JSON).
    """

    performer_type: typing.Optional[typing.List["CodeableConcept"]]

    """ Requested performer.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    owner: typing.Optional["Reference"]

    """ Responsible individual.
    Type `Reference` (represented as `dict` in JSON).
    """

    location: typing.Optional["Reference"]

    """ Where task occurs.
    Type `Reference` (represented as `dict` in JSON).
    """

    reason_code: typing.Optional["CodeableConcept"]

    """ Why task is needed.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    reason_reference: typing.Optional["Reference"]

    """ Why task is needed.
    Type `Reference` (represented as `dict` in JSON).
    """

    insurance: typing.Optional[typing.List["Reference"]]

    """ Associated insurance coverage.
    List of `Reference` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Comments made about the task.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    relevant_history: typing.Optional[typing.List["Reference"]]

    """ Key events in history of the Task.
    List of `Reference` items (represented as `dict` in JSON).
    """

    restriction: typing.Optional["TaskRestriction"]

    """ Constraints on fulfillment tasks.
    Type `TaskRestriction` (represented as `dict` in JSON).
    """

    input: typing.Optional[typing.List["TaskInput"]]

    """ Information used to perform task.
    List of `TaskInput` items (represented as `dict` in JSON).
    """

    output: typing.Optional[typing.List["TaskOutput"]]

    """ Information produced as part of task.
    List of `TaskOutput` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in TaskStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["priority"]["enum"]
            enums.clear()
            for item in RequestPriority:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_instantiates_canonical = get_primitive_field_root_validator("instantiates_canonical")
    
    _validate_primitive_instantiates_uri = get_primitive_field_root_validator("instantiates_uri")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_intent = get_primitive_field_root_validator("intent")
    
    _validate_primitive_priority = get_primitive_field_root_validator("priority")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_authored_on = get_primitive_field_root_validator("authored_on")
    
    _validate_primitive_last_modified = get_primitive_field_root_validator("last_modified")
    


class TerminologyCapabilities(DomainResource):
    """ A statement of system capabilities.

    A TerminologyCapabilities resource documents a set of capabilities
    (behaviors) of a FHIR Terminology Server that may be used as a statement of
    actual server functionality or a statement of required or desired server
    implementation.
    """
    resource_type: typing.Literal["TerminologyCapabilities"] = "TerminologyCapabilities"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TerminologyCapabilities",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: typing.Optional[FHIRString]

    """ Canonical identifier for this terminology capabilities, represented
        as a URI (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    version: typing.Optional[FHIRString]

    """ Business version of the terminology capabilities.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Name for this terminology capabilities (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Name for this terminology capabilities (human friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    experimental: typing.Optional[bool]

    """ For testing purposes, not real usage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    experimental__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_experimental`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    date: FHIRDateTime

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the terminology capabilities.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for terminology capabilities (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    purpose: typing.Optional[FHIRString]

    """ Why this terminology capabilities is defined.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    purpose__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_purpose`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    copyright: typing.Optional[FHIRString]

    """ Use and/or publishing restrictions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    copyright__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_copyright`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    kind: "CapabilityStatementKind"

    """ instance | capability | requirements.
    Type `CapabilityStatementKind` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    kind__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_kind`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    software: typing.Optional["TerminologyCapabilitiesSoftware"]

    """ Software that is covered by this terminology capability statement.
    Type `TerminologyCapabilitiesSoftware` (represented as `dict` in JSON).
    """

    implementation: typing.Optional["TerminologyCapabilitiesImplementation"]

    """ If this describes a specific instance.
    Type `TerminologyCapabilitiesImplementation` (represented as `dict` in JSON).
    """

    locked_date: typing.Optional[bool]

    """ Whether lockedDate is supported.
    Type `bool`. Is a JSON Primitive element.
    """
    

    locked_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_locked_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code_system: typing.Optional[typing.List["TerminologyCapabilitiesCodeSystem"]]

    """ A code system supported by the server.
    List of `TerminologyCapabilitiesCodeSystem` items (represented as `dict` in JSON).
    """

    expansion: typing.Optional["TerminologyCapabilitiesExpansion"]

    """ Information about the [ValueSet/$expand](valueset-operation-
        expand.html) operation.
    Type `TerminologyCapabilitiesExpansion` (represented as `dict` in JSON).
    """

            
    
    
    code_search: typing.Optional["CodeSearchSupport"]

    """ explicit | all.
    Type `CodeSearchSupport` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code_search__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code_search`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    validate_code: typing.Optional["TerminologyCapabilitiesValidateCode"]

    """ Information about the [ValueSet/$validate-code](valueset-operation-
        validate-code.html) operation.
    Type `TerminologyCapabilitiesValidateCode` (represented as `dict` in JSON).
    """

    translation: typing.Optional["TerminologyCapabilitiesTranslation"]

    """ Information about the [ConceptMap/$translate](conceptmap-operation-
        translate.html) operation.
    Type `TerminologyCapabilitiesTranslation` (represented as `dict` in JSON).
    """

    closure: typing.Optional["TerminologyCapabilitiesClosure"]

    """ Information about the [ConceptMap/$closure](conceptmap-operation-
        closure.html) operation.
    Type `TerminologyCapabilitiesClosure` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["kind"]["enum"]
            enums.clear()
            for item in CapabilityStatementKind:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["codeSearch"]["enum"]
            enums.clear()
            for item in CodeSearchSupport:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_experimental = get_primitive_field_root_validator("experimental")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_purpose = get_primitive_field_root_validator("purpose")
    
    _validate_primitive_copyright = get_primitive_field_root_validator("copyright")
    
    _validate_primitive_kind = get_primitive_field_root_validator("kind")
    
    _validate_primitive_locked_date = get_primitive_field_root_validator("locked_date")
    
    _validate_primitive_code_search = get_primitive_field_root_validator("code_search")
    


class TestReport(DomainResource):
    """ Describes the results of a TestScript execution.

    A summary of information based on the results of executing a TestScript.
    """
    resource_type: typing.Literal["TestReport"] = "TestReport"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestReport",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional["Identifier"]

    """ External identifier.
    Type `Identifier` (represented as `dict` in JSON).
    """

    name: typing.Optional[FHIRString]

    """ Informal name of the executed TestScript.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "TestReportStatus"

    """ completed | in-progress | waiting | stopped | entered-in-error.
    Type `TestReportStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    test_script: "Reference"

    """ Reference to the  version-specific TestScript that was executed to
        produce this TestReport.
    Type `Reference` (represented as `dict` in JSON).
    """

            
    
    
    result: "TestReportResult"

    """ pass | fail | pending.
    Type `TestReportResult` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    result__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_result`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    score: typing.Optional[decimal.Decimal]

    """ The final score (percentage of tests passed) resulting from the
        execution of the TestScript.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    score__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_score`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    tester: typing.Optional[FHIRString]

    """ Name of the tester producing this report (Organization or
        individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    tester__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_tester`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    issued: typing.Optional[FHIRDateTime]

    """ When the TestScript was executed and this TestReport was generated.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    issued__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_issued`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    participant: typing.Optional[typing.List["TestReportParticipant"]]

    """ A participant in the test execution, either the execution engine, a
        client, or a server.
    List of `TestReportParticipant` items (represented as `dict` in JSON).
    """

    setup: typing.Optional["TestReportSetup"]

    """ The results of the series of required setup operations before the
        tests were executed.
    Type `TestReportSetup` (represented as `dict` in JSON).
    """

    test: typing.Optional[typing.List["TestReportTest"]]

    """ A test executed from the test script.
    List of `TestReportTest` items (represented as `dict` in JSON).
    """

    teardown: typing.Optional["TestReportTeardown"]

    """ The results of running the series of required clean up steps.
    Type `TestReportTeardown` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in TestReportStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["result"]["enum"]
            enums.clear()
            for item in TestReportResult:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_result = get_primitive_field_root_validator("result")
    
    _validate_primitive_score = get_primitive_field_root_validator("score")
    
    _validate_primitive_tester = get_primitive_field_root_validator("tester")
    
    _validate_primitive_issued = get_primitive_field_root_validator("issued")
    


class TestScript(DomainResource):
    """ Describes a set of tests.

    A structured set of tests against a FHIR server or client implementation to
    determine compliance against the FHIR specification.
    """
    resource_type: typing.Literal["TestScript"] = "TestScript"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestScript",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: FHIRRequiredString

    """ Canonical identifier for this test script, represented as a URI
        (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    identifier: typing.Optional["Identifier"]

    """ Additional identifier for the test script.
    Type `Identifier` (represented as `dict` in JSON).
    """

    version: typing.Optional[FHIRString]

    """ Business version of the test script.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: FHIRRequiredString

    """ Name for this test script (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Name for this test script (human friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    experimental: typing.Optional[bool]

    """ For testing purposes, not real usage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    experimental__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_experimental`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the test script.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for test script (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    purpose: typing.Optional[FHIRString]

    """ Why this test script is defined.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    purpose__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_purpose`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    copyright: typing.Optional[FHIRString]

    """ Use and/or publishing restrictions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    copyright__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_copyright`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    origin: typing.Optional[typing.List["TestScriptOrigin"]]

    """ An abstract server representing a client or sender in a message
        exchange.
    List of `TestScriptOrigin` items (represented as `dict` in JSON).
    """

    destination: typing.Optional[typing.List["TestScriptDestination"]]

    """ An abstract server representing a destination or receiver in a
        message exchange.
    List of `TestScriptDestination` items (represented as `dict` in JSON).
    """

    metadata: typing.Optional["TestScriptMetadata"]

    """ Required capability that is assumed to function correctly on the
        FHIR server being tested.
    Type `TestScriptMetadata` (represented as `dict` in JSON).
    """

    fixture: typing.Optional[typing.List["TestScriptFixture"]]

    """ Fixture in the test script - by reference (uri).
    List of `TestScriptFixture` items (represented as `dict` in JSON).
    """

    profile: typing.Optional[typing.List["Reference"]]

    """ Reference of the validation profile.
    List of `Reference` items (represented as `dict` in JSON).
    """

    variable: typing.Optional[typing.List["TestScriptVariable"]]

    """ Placeholder for evaluated elements.
    List of `TestScriptVariable` items (represented as `dict` in JSON).
    """

    setup: typing.Optional["TestScriptSetup"]

    """ A series of required setup operations before tests are executed.
    Type `TestScriptSetup` (represented as `dict` in JSON).
    """

    test: typing.Optional[typing.List["TestScriptTest"]]

    """ A test in this script.
    List of `TestScriptTest` items (represented as `dict` in JSON).
    """

    teardown: typing.Optional["TestScriptTeardown"]

    """ A series of required clean up steps.
    Type `TestScriptTeardown` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_experimental = get_primitive_field_root_validator("experimental")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_purpose = get_primitive_field_root_validator("purpose")
    
    _validate_primitive_copyright = get_primitive_field_root_validator("copyright")
    


class ValueSet(DomainResource):
    """ A set of codes drawn from one or more code systems.

    A ValueSet resource instance specifies a set of codes drawn from one or
    more code systems, intended for use in a particular context. Value sets
    link between [CodeSystem](codesystem.html) definitions and their use in
    [coded elements](terminologies.html).
    """
    resource_type: typing.Literal["ValueSet"] = "ValueSet"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ValueSet",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: typing.Optional[FHIRString]

    """ Canonical identifier for this value set, represented as a URI
        (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    identifier: typing.Optional[typing.List["Identifier"]]

    """ Additional identifier for the value set (business identifier).
    List of `Identifier` items (represented as `dict` in JSON).
    """

    version: typing.Optional[FHIRString]

    """ Business version of the value set.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Name for this value set (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Name for this value set (human friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    experimental: typing.Optional[bool]

    """ For testing purposes, not real usage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    experimental__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_experimental`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the value set.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for value set (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    immutable: typing.Optional[bool]

    """ Indicates whether or not any change to the content logical
        definition may occur.
    Type `bool`. Is a JSON Primitive element.
    """
    

    immutable__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_immutable`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    purpose: typing.Optional[FHIRString]

    """ Why this value set is defined.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    purpose__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_purpose`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    copyright: typing.Optional[FHIRString]

    """ Use and/or publishing restrictions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    copyright__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_copyright`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    compose: typing.Optional["ValueSetCompose"]

    """ Content logical definition of the value set (CLD).
    Type `ValueSetCompose` (represented as `dict` in JSON).
    """

    expansion: typing.Optional["ValueSetExpansion"]

    """ Used when the value set is "expanded".
    Type `ValueSetExpansion` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_experimental = get_primitive_field_root_validator("experimental")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_immutable = get_primitive_field_root_validator("immutable")
    
    _validate_primitive_purpose = get_primitive_field_root_validator("purpose")
    
    _validate_primitive_copyright = get_primitive_field_root_validator("copyright")
    


class VerificationResult(DomainResource):
    """ Describes validation requirements, source(s), status and dates for one or
    more elements.
    """
    resource_type: typing.Literal["VerificationResult"] = "VerificationResult"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/VerificationResult",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    target: typing.Optional[typing.List["Reference"]]

    """ A resource that was validated.
    List of `Reference` items (represented as `dict` in JSON).
    """

    target_location: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ The fhirpath location(s) within the resource that was validated.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    target_location__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_target_location`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    need: typing.Optional["CodeableConcept"]

    """ none | initial | periodic.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

            
    
    
    status: "Status"

    """ attested | validated | in-process | req-revalid | val-fail | reval-
        fail.
    Type `Status` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    status_date: typing.Optional[FHIRDateTime]

    """ When the validation status was updated.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    validation_type: typing.Optional["CodeableConcept"]

    """ nothing | primary | multiple.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    validation_process: typing.Optional[typing.List["CodeableConcept"]]

    """ The primary process by which the target is validated (edit check;
        value set; primary source; multiple sources; standalone; in
        context).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    frequency: typing.Optional["Timing"]

    """ Frequency of revalidation.
    Type `Timing` (represented as `dict` in JSON).
    """

    last_performed: typing.Optional[FHIRDateTime]

    """ The date/time validation was last completed (including failed
        validations).
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    last_performed__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_last_performed`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    next_scheduled: typing.Optional[FHIRDate]

    """ The date when target is next validated, if appropriate.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    next_scheduled__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_next_scheduled`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    failure_action: typing.Optional["CodeableConcept"]

    """ fatal | warn | rec-only | none.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    primary_source: typing.Optional[typing.List["VerificationResultPrimarySource"]]

    """ Information about the primary source(s) involved in validation.
    List of `VerificationResultPrimarySource` items (represented as `dict` in JSON).
    """

    attestation: typing.Optional["VerificationResultAttestation"]

    """ Information about the entity attesting to information.
    Type `VerificationResultAttestation` (represented as `dict` in JSON).
    """

    validator: typing.Optional[typing.List["VerificationResultValidator"]]

    """ Information about the entity validating information.
    List of `VerificationResultValidator` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in Status:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_target_location = get_primitive_field_root_validator("target_location")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_status_date = get_primitive_field_root_validator("status_date")
    
    _validate_primitive_last_performed = get_primitive_field_root_validator("last_performed")
    
    _validate_primitive_next_scheduled = get_primitive_field_root_validator("next_scheduled")
    


class VisionPrescription(DomainResource):
    """ Prescription for vision correction products for a patient.

    An authorization for the provision of glasses and/or contact lenses to a
    patient.
    """
    resource_type: typing.Literal["VisionPrescription"] = "VisionPrescription"

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/VisionPrescription",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business Identifier for vision prescription.
    List of `Identifier` items (represented as `dict` in JSON).
    """

            
    
    
    status: "FinancialResourceStatusCodes"

    """ active | cancelled | draft | entered-in-error.
    Type `FinancialResourceStatusCodes` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    created: FHIRDateTime

    """ Response creation date.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    created__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_created`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    patient: "Reference"

    """ Who prescription is for.
    Type `Reference` (represented as `dict` in JSON).
    """

    encounter: typing.Optional["Reference"]

    """ Created during encounter / admission / stay.
    Type `Reference` (represented as `dict` in JSON).
    """

    date_written: FHIRDateTime

    """ When prescription was authorized.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date_written__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date_written`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    prescriber: "Reference"

    """ Who authorized the vision prescription.
    Type `Reference` (represented as `dict` in JSON).
    """

    lens_specification: typing.List["VisionPrescriptionLensSpecification"]

    """ Vision lens authorization.
    List of `VisionPrescriptionLensSpecification` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in FinancialResourceStatusCodes:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_created = get_primitive_field_root_validator("created")
    
    _validate_primitive_date_written = get_primitive_field_root_validator("date_written")
    


class MetadataResource(DomainResource):
    """ Common Ancestor declaration for definitional resources.

    Common Ancestor declaration for conformance and knowledge artifact
    resources.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MetadataResource",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: typing.Optional[FHIRString]

    """ Canonical identifier for this metadata resource, represented as a
        URI (globally unique).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    version: typing.Optional[FHIRString]

    """ Business version of the metadata resource.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Name for this metadata resource (computer friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Name for this metadata resource (human friendly).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "PublicationStatus"

    """ draft | active | retired | unknown.
    Type `PublicationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    experimental: typing.Optional[bool]

    """ For testing purposes, not real usage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    experimental__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_experimental`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    date: typing.Optional[FHIRDateTime]

    """ Date last changed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publisher: typing.Optional[FHIRString]

    """ Name of the publisher (organization or individual).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publisher__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publisher`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details for the publisher.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Natural language description of the metadata resource.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use_context: typing.Optional[typing.List["UsageContext"]]

    """ The context that the content is intended to support.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Intended jurisdiction for metadata resource (if applicable).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in PublicationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_experimental = get_primitive_field_root_validator("experimental")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_publisher = get_primitive_field_root_validator("publisher")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class Element(FHIRAbstractBase):
    """ Base for all elements.

    Base definition for all elements in a resource.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Element",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    id: typing.Optional[FHIRString]

    """ Unique id for inter-element referencing.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    extension: typing.Optional[typing.List["Extension"]]

    """ Additional content defined by implementations.
    List of `Extension` items (represented as `dict` in JSON).
    """



    _validate_primitive_id = get_primitive_field_root_validator("id")
    


class BackboneElement(Element):
    """ Base for elements defined inside a resource.

    Base definition for all elements that are defined inside a resource - but
    not those in a data type.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/BackboneElement",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    modifier_extension: typing.Optional[typing.List["Extension"]]

    """ Extensions that cannot be ignored even if unrecognized.
    List of `Extension` items (represented as `dict` in JSON).
    """




class Address(Element):
    """ An address expressed using postal conventions (as opposed to GPS or other
    location definition formats).

    An address expressed using postal conventions (as opposed to GPS or other
    location definition formats).  This data type may be used to convey
    addresses for use in delivering mail as well as for visiting locations
    which might not be valid for mail delivery.  There are a variety of postal
    address formats defined around the world.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Address",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    use: typing.Optional["AddressUse"]

    """ home | work | temp | old | billing - purpose of this address.
    Type `AddressUse` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    use__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_use`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    type: typing.Optional["AddressType"]

    """ postal | physical | both.
    Type `AddressType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    text: typing.Optional[FHIRString]

    """ Text representation of the address.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    text__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_text`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    line: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Street name, number, direction & P.O. Box etc..
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    line__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_line`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    city: typing.Optional[FHIRString]

    """ Name of city, town etc..
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    city__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_city`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    district: typing.Optional[FHIRString]

    """ District name (aka county).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    district__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_district`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    state: typing.Optional[FHIRString]

    """ Sub-unit of country (abbreviations ok).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    state__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_state`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    postal_code: typing.Optional[FHIRString]

    """ Postal code for area.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    postal_code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_postal_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    country: typing.Optional[FHIRString]

    """ Country (e.g. can be ISO 3166 2 or 3 letter code).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    country__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_country`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    period: typing.Optional["Period"]

    """ Time period when address was/is in use.
    Type `Period` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["use"]["enum"]
            enums.clear()
            for item in AddressUse:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in AddressType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_use = get_primitive_field_root_validator("use")
    
    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_text = get_primitive_field_root_validator("text")
    
    _validate_primitive_line = get_primitive_field_root_validator("line")
    
    _validate_primitive_city = get_primitive_field_root_validator("city")
    
    _validate_primitive_district = get_primitive_field_root_validator("district")
    
    _validate_primitive_state = get_primitive_field_root_validator("state")
    
    _validate_primitive_postal_code = get_primitive_field_root_validator("postal_code")
    
    _validate_primitive_country = get_primitive_field_root_validator("country")
    


class Annotation(Element):
    """ Text node with attribution.

    A  text note which also  contains information about who made the statement
    and when.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Annotation",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    author_reference: typing.Optional["Reference"]

    """ Individual responsible for the annotation.
    Type `Reference` (represented as `dict` in JSON).
    """

    author_string: typing.Optional[FHIRString]

    """ Individual responsible for the annotation.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    author_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_author_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    time: typing.Optional[FHIRDateTime]

    """ When the annotation was made.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    text: FHIRRequiredString

    """ The annotation  - text content (as markdown).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    text__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_text`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'Annotation.author[x]', 'choice_of_type': 'author', 'orig_name': 'authorReference', 'name': 'authorReference', 'parent_name': 'Annotation', 'class_name': 'Reference', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Individual responsible for the annotation', 'formal': 'The individual responsible for making the annotation.', 'representation': None}
    _author_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['author_reference', 'author_string']), True))

    _validate_primitive_author_string = get_primitive_field_root_validator("author_string")
    
    _validate_primitive_time = get_primitive_field_root_validator("time")
    
    _validate_primitive_text = get_primitive_field_root_validator("text")
    


class Attachment(Element):
    """ Content in a format defined elsewhere.

    For referring to data content defined in other formats.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Attachment",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    
    
    content_type: typing.Optional["FHIRCode"]

    """ Mime type of the content, with charset etc..
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    content_type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_content_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    language: typing.Optional[FHIRCode]

    """ Human language of the content (BCP-47).
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    language__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_language`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    data: typing.Optional[FHIRBase64Binary]

    """ Data inline, base64ed.
    Type `FHIRBase64Binary` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    data__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_data`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    url: typing.Optional[FHIRString]

    """ Uri where the data can be found.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    size: typing.Optional[FHIRUnsignedInt]

    """ Number of bytes of content (if url provided).
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    size__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_size`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    hash: typing.Optional[FHIRBase64Binary]

    """ Hash of the data (sha-1, base64ed).
    Type `FHIRBase64Binary` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    hash__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_hash`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Label to display in place of the data.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    creation: typing.Optional[FHIRDateTime]

    """ Date attachment was first created.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    creation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_creation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_content_type = get_primitive_field_root_validator("content_type")
    
    _validate_primitive_language = get_primitive_field_root_validator("language")
    
    _validate_primitive_data = get_primitive_field_root_validator("data")
    
    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_size = get_primitive_field_root_validator("size")
    
    _validate_primitive_hash = get_primitive_field_root_validator("hash")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_creation = get_primitive_field_root_validator("creation")
    


class CodeableConcept(Element):
    """ Concept - reference to a terminology or just  text.

    A concept that may be defined by a formal reference to a terminology or
    ontology or may be provided by text.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CodeableConcept",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    coding: typing.Optional[typing.List["Coding"]]

    """ Code defined by a terminology system.
    List of `Coding` items (represented as `dict` in JSON).
    """

    text: typing.Optional[FHIRString]

    """ Plain text representation of the concept.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    text__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_text`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_text = get_primitive_field_root_validator("text")
    


class Coding(Element):
    """ A reference to a code defined by a terminology system.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Coding",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    system: typing.Optional[FHIRString]

    """ Identity of the terminology system.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    system__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_system`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    version: typing.Optional[FHIRString]

    """ Version of the system - if relevant.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code: typing.Optional[FHIRCode]

    """ Symbol in syntax defined by the system.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    display: typing.Optional[FHIRString]

    """ Representation defined by the system.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    display__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_display`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    user_selected: typing.Optional[bool]

    """ If this coding was chosen directly by the user.
    Type `bool`. Is a JSON Primitive element.
    """
    

    user_selected__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_user_selected`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_system = get_primitive_field_root_validator("system")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_code = get_primitive_field_root_validator("code")
    
    _validate_primitive_display = get_primitive_field_root_validator("display")
    
    _validate_primitive_user_selected = get_primitive_field_root_validator("user_selected")
    


class ContactDetail(Element):
    """ Contact information.

    Specifies contact information for a person or organization.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ContactDetail",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: typing.Optional[FHIRString]

    """ Name of an individual to contact.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    telecom: typing.Optional[typing.List["ContactPoint"]]

    """ Contact details for individual or organization.
    List of `ContactPoint` items (represented as `dict` in JSON).
    """



    _validate_primitive_name = get_primitive_field_root_validator("name")
    


class ContactPoint(Element):
    """ Details of a Technology mediated contact point (phone, fax, email, etc.).

    Details for all kinds of technology mediated contact points for a person or
    organization, including telephone, email, etc.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ContactPoint",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    system: typing.Optional["ContactPointSystem"]

    """ phone | fax | email | pager | url | sms | other.
    Type `ContactPointSystem` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    system__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_system`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value: typing.Optional[FHIRString]

    """ The actual contact point details.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    use: typing.Optional["ContactPointUse"]

    """ home | work | temp | old | mobile - purpose of this contact point.
    Type `ContactPointUse` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    use__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_use`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    rank: typing.Optional[FHIRPositiveInt]

    """ Specify preferred order of use (1 = highest).
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    rank__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_rank`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    period: typing.Optional["Period"]

    """ Time period when the contact point was/is in use.
    Type `Period` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["system"]["enum"]
            enums.clear()
            for item in ContactPointSystem:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["use"]["enum"]
            enums.clear()
            for item in ContactPointUse:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_system = get_primitive_field_root_validator("system")
    
    _validate_primitive_value = get_primitive_field_root_validator("value")
    
    _validate_primitive_use = get_primitive_field_root_validator("use")
    
    _validate_primitive_rank = get_primitive_field_root_validator("rank")
    


class Contributor(Element):
    """ Contributor information.

    A contributor to the content of a knowledge asset, including authors,
    editors, reviewers, and endorsers.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Contributor",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    type: "ContributorType"

    """ author | editor | reviewer | endorser.
    Type `ContributorType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: FHIRRequiredString

    """ Who contributed the content.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional[typing.List["ContactDetail"]]

    """ Contact details of the contributor.
    List of `ContactDetail` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in ContributorType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    


class DataRequirement(Element):
    """ Describes a required data item.

    Describes a required data item for evaluation in terms of the type of data,
    and optional code or date-based filters of the data.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DataRequirement",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: FHIRCode

    """ The type of the required data.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    profile: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ The profile of the required data.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    profile__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_profile`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subject_codeable_concept: typing.Optional["CodeableConcept"]

    """ E.g. Patient, Practitioner, RelatedPerson, Organization, Location,
        Device.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject_reference: typing.Optional["Reference"]

    """ E.g. Patient, Practitioner, RelatedPerson, Organization, Location,
        Device.
    Type `Reference` (represented as `dict` in JSON).
    """

    must_support: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Indicates specific structure elements that are referenced by the
        knowledge module.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    must_support__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_must_support`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code_filter: typing.Optional[typing.List["DataRequirementCodeFilter"]]

    """ What codes are expected.
    List of `DataRequirementCodeFilter` items (represented as `dict` in JSON).
    """

    date_filter: typing.Optional[typing.List["DataRequirementDateFilter"]]

    """ What dates/date ranges are expected.
    List of `DataRequirementDateFilter` items (represented as `dict` in JSON).
    """

    limit: typing.Optional[FHIRPositiveInt]

    """ Number of results.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    limit__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_limit`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    sort: typing.Optional[typing.List["DataRequirementSort"]]

    """ Order of the results.
    List of `DataRequirementSort` items (represented as `dict` in JSON).
    """



#   {'path': 'DataRequirement.subject[x]', 'choice_of_type': 'subject', 'orig_name': 'subjectCodeableConcept', 'name': 'subjectCodeableConcept', 'parent_name': 'DataRequirement', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device', 'formal': 'The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.', 'representation': None}
    _subject_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['subject_codeable_concept', 'subject_reference']), True))

    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_profile = get_primitive_field_root_validator("profile")
    
    _validate_primitive_must_support = get_primitive_field_root_validator("must_support")
    
    _validate_primitive_limit = get_primitive_field_root_validator("limit")
    


class DataRequirementCodeFilter(Element):
    """ What codes are expected.

    Code filters specify additional constraints on the data, specifying the
    value set of interest for a particular element of the data. Each code
    filter defines an additional constraint on the data, i.e. code filters are
    AND'ed, not OR'ed.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DataRequirement",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    path: typing.Optional[FHIRString]

    """ A code-valued attribute to filter on.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    path__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_path`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    search_param: typing.Optional[FHIRString]

    """ A coded (token) parameter to search on.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    search_param__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_search_param`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_set: typing.Optional[FHIRString]

    """ Valueset for the filter.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_set__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_set`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code: typing.Optional[typing.List["Coding"]]

    """ What code is expected.
    List of `Coding` items (represented as `dict` in JSON).
    """



    _validate_primitive_path = get_primitive_field_root_validator("path")
    
    _validate_primitive_search_param = get_primitive_field_root_validator("search_param")
    
    _validate_primitive_value_set = get_primitive_field_root_validator("value_set")
    


class DataRequirementDateFilter(Element):
    """ What dates/date ranges are expected.

    Date filters specify additional constraints on the data in terms of the
    applicable date range for specific elements. Each date filter specifies an
    additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DataRequirement",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    path: typing.Optional[FHIRString]

    """ A date-valued attribute to filter on.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    path__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_path`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    search_param: typing.Optional[FHIRString]

    """ A date valued parameter to search on.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    search_param__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_search_param`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_date_time: typing.Optional[FHIRDateTime]

    """ The value of the filter, as a Period, DateTime, or Duration value.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_period: typing.Optional["Period"]

    """ The value of the filter, as a Period, DateTime, or Duration value.
    Type `Period` (represented as `dict` in JSON).
    """

    value_duration: typing.Optional["Duration"]

    """ The value of the filter, as a Period, DateTime, or Duration value.
    Type `Duration` (represented as `dict` in JSON).
    """



#   {'path': 'DataRequirement.dateFilter.value[x]', 'choice_of_type': 'value', 'orig_name': 'valueDateTime', 'name': 'valueDateTime', 'parent_name': 'DataRequirement.dateFilter', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'The value of the filter, as a Period, DateTime, or Duration value', 'formal': 'The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.', 'representation': None}
    _value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['value_date_time', 'value_period', 'value_duration']), True))

    _validate_primitive_path = get_primitive_field_root_validator("path")
    
    _validate_primitive_search_param = get_primitive_field_root_validator("search_param")
    
    _validate_primitive_value_date_time = get_primitive_field_root_validator("value_date_time")
    


class DataRequirementSort(Element):
    """ Order of the results.

    Specifies the order of the results to be returned.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DataRequirement",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    path: FHIRRequiredString

    """ The name of the attribute to perform the sort.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    path__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_path`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    direction: "SortDirection"

    """ ascending | descending.
    Type `SortDirection` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    direction__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_direction`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["direction"]["enum"]
            enums.clear()
            for item in SortDirection:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_path = get_primitive_field_root_validator("path")
    
    _validate_primitive_direction = get_primitive_field_root_validator("direction")
    


class DosageDoseAndRate(Element):
    """ Amount of medication administered.

    The amount of medication administered.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Dosage",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: typing.Optional["CodeableConcept"]

    """ The kind of dose or rate specified.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    dose_range: typing.Optional["Range"]

    """ Amount of medication per dose.
    Type `Range` (represented as `dict` in JSON).
    """

    dose_quantity: typing.Optional["Quantity"]

    """ Amount of medication per dose.
    Type `Quantity` (represented as `dict` in JSON).
    """

    rate_ratio: typing.Optional["Ratio"]

    """ Amount of medication per unit of time.
    Type `Ratio` (represented as `dict` in JSON).
    """

    rate_range: typing.Optional["Range"]

    """ Amount of medication per unit of time.
    Type `Range` (represented as `dict` in JSON).
    """

    rate_quantity: typing.Optional["Quantity"]

    """ Amount of medication per unit of time.
    Type `Quantity` (represented as `dict` in JSON).
    """



#   {'path': 'Dosage.doseAndRate.dose[x]', 'choice_of_type': 'dose', 'orig_name': 'doseRange', 'name': 'doseRange', 'parent_name': 'Dosage.doseAndRate', 'class_name': 'Range', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Amount of medication per dose', 'formal': None, 'representation': None}
    _dose_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['dose_range', 'dose_quantity']), True))

#   {'path': 'Dosage.doseAndRate.rate[x]', 'choice_of_type': 'rate', 'orig_name': 'rateRatio', 'name': 'rateRatio', 'parent_name': 'Dosage.doseAndRate', 'class_name': 'Ratio', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Amount of medication per unit of time', 'formal': None, 'representation': None}
    _rate_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['rate_ratio', 'rate_range', 'rate_quantity']), True))


class ElementDefinitionSlicing(Element):
    """ This element is sliced - slices follow.

    Indicates that the element is sliced into a set of alternative definitions
    (i.e. in a structure definition, there are multiple different constraints
    on a single element in the base resource). Slicing can be used in any
    resource that has cardinality ..* on the base resource, or any resource
    with a choice of types. The set of slices is any elements that come after
    this in the element sequence that have the same path, until a shorter path
    occurs (the shorter path terminates the set).
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ElementDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    discriminator: typing.Optional[typing.List["ElementDefinitionSlicingDiscriminator"]]

    """ Element values that are used to distinguish the slices.
    List of `ElementDefinitionSlicingDiscriminator` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Text description of how slicing works (or not).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    ordered: typing.Optional[bool]

    """ If elements must be in same order as slices.
    Type `bool`. Is a JSON Primitive element.
    """
    

    ordered__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_ordered`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    rules: "SlicingRules"

    """ closed | open | openAtEnd.
    Type `SlicingRules` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    rules__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_rules`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["rules"]["enum"]
            enums.clear()
            for item in SlicingRules:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_ordered = get_primitive_field_root_validator("ordered")
    
    _validate_primitive_rules = get_primitive_field_root_validator("rules")
    


class ElementDefinitionSlicingDiscriminator(Element):
    """ Element values that are used to distinguish the slices.

    Designates which child elements are used to discriminate between the slices
    when processing an instance. If one or more discriminators are provided,
    the value of the child elements in the instance data SHALL completely
    distinguish which slice the element in the resource matches based on the
    allowed values for those elements in each of the slices.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ElementDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    type: "DiscriminatorType"

    """ value | exists | pattern | type | profile.
    Type `DiscriminatorType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    path: FHIRRequiredString

    """ Path to element value.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    path__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_path`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in DiscriminatorType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_path = get_primitive_field_root_validator("path")
    


class ElementDefinitionBase(Element):
    """ Base definition information for tools.

    Information about the base definition of the element, provided to make it
    unnecessary for tools to trace the deviation of the element through the
    derived and related profiles. When the element definition is not the
    original definition of an element - i.g. either in a constraint on another
    type, or for elements from a super type in a snap shot - then the
    information in provided in the element definition may be different to the
    base definition. On the original definition of the element, it will be
    same.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ElementDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    path: FHIRRequiredString

    """ Path that identifies the base element.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    path__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_path`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    min: FHIRUnsignedInt

    """ Min cardinality of the base element.
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    min__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_min`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    max: FHIRRequiredString

    """ Max cardinality of the base element.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    max__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_max`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_path = get_primitive_field_root_validator("path")
    
    _validate_primitive_min = get_primitive_field_root_validator("min")
    
    _validate_primitive_max = get_primitive_field_root_validator("max")
    


class ElementDefinitionType(Element):
    """ Data type and Profile for this element.

    The data type or resource that the value of this element is permitted to
    be.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ElementDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: FHIRRequiredString

    """ Data type or Resource (reference to definition).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    profile: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Profiles (StructureDefinition or IG) - one must apply.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    profile__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_profile`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    target_profile: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Profile (StructureDefinition or IG) on the Reference/canonical
        target - one must apply.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    target_profile__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_target_profile`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    aggregation: typing.Optional[typing.List[typing.Optional["AggregationMode"]]]

    """ contained | referenced | bundled - how aggregated.
    List of `AggregationMode` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    aggregation__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_aggregation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    versioning: typing.Optional["ReferenceVersionRules"]

    """ either | independent | specific.
    Type `ReferenceVersionRules` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    versioning__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_versioning`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["aggregation"]["enum"]
            enums.clear()
            for item in AggregationMode:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["versioning"]["enum"]
            enums.clear()
            for item in ReferenceVersionRules:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_code = get_primitive_field_root_validator("code")
    
    _validate_primitive_profile = get_primitive_field_root_validator("profile")
    
    _validate_primitive_target_profile = get_primitive_field_root_validator("target_profile")
    
    _validate_primitive_aggregation = get_primitive_field_root_validator("aggregation")
    
    _validate_primitive_versioning = get_primitive_field_root_validator("versioning")
    


class ElementDefinitionExample(Element):
    """ Example value (as defined for type).

    A sample value for this element demonstrating the type of information that
    would typically be found in the element.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ElementDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    label: FHIRRequiredString

    """ Describes the purpose of this example.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    label__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_label`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_base64_binary: typing.Optional[FHIRBase64Binary]

    """ Value of Example (one of allowed types).
    Type `FHIRBase64Binary` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_base64_binary__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_base64_binary`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_boolean: typing.Optional[bool]

    """ Value of Example (one of allowed types).
    Type `bool`. Is a JSON Primitive element.
    """
    

    value_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_canonical: typing.Optional[FHIRString]

    """ Value of Example (one of allowed types).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_canonical__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_code: typing.Optional[FHIRCode]

    """ Value of Example (one of allowed types).
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_date: typing.Optional[FHIRDate]

    """ Value of Example (one of allowed types).
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_date_time: typing.Optional[FHIRDateTime]

    """ Value of Example (one of allowed types).
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_decimal: typing.Optional[decimal.Decimal]

    """ Value of Example (one of allowed types).
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    value_decimal__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_decimal`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_id: typing.Optional[FHIRId]

    """ Value of Example (one of allowed types).
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_instant: typing.Optional[FHIRInstant]

    """ Value of Example (one of allowed types).
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_instant__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_instant`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_integer: typing.Optional[FHIRInt]

    """ Value of Example (one of allowed types).
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_integer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_integer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_markdown: typing.Optional[FHIRString]

    """ Value of Example (one of allowed types).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_markdown__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_markdown`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_oid: typing.Optional[FHIROid]

    """ Value of Example (one of allowed types).
    Type `FHIROid` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_oid__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_oid`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_positive_int: typing.Optional[FHIRPositiveInt]

    """ Value of Example (one of allowed types).
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    value_positive_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_positive_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_string: typing.Optional[FHIRString]

    """ Value of Example (one of allowed types).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_time: typing.Optional[FHIRTime]

    """ Value of Example (one of allowed types).
    Type `FHIRTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_unsigned_int: typing.Optional[FHIRUnsignedInt]

    """ Value of Example (one of allowed types).
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_unsigned_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_unsigned_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_uri: typing.Optional[FHIRString]

    """ Value of Example (one of allowed types).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_url: typing.Optional[FHIRString]

    """ Value of Example (one of allowed types).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_uuid: typing.Optional[FHIRString]

    """ Value of Example (one of allowed types).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_uuid__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_uuid`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_address: typing.Optional["Address"]

    """ Value of Example (one of allowed types).
    Type `Address` (represented as `dict` in JSON).
    """

    value_age: typing.Optional["Age"]

    """ Value of Example (one of allowed types).
    Type `Age` (represented as `dict` in JSON).
    """

    value_annotation: typing.Optional["Annotation"]

    """ Value of Example (one of allowed types).
    Type `Annotation` (represented as `dict` in JSON).
    """

    value_attachment: typing.Optional["Attachment"]

    """ Value of Example (one of allowed types).
    Type `Attachment` (represented as `dict` in JSON).
    """

    value_codeable_concept: typing.Optional["CodeableConcept"]

    """ Value of Example (one of allowed types).
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value_coding: typing.Optional["Coding"]

    """ Value of Example (one of allowed types).
    Type `Coding` (represented as `dict` in JSON).
    """

    value_contact_point: typing.Optional["ContactPoint"]

    """ Value of Example (one of allowed types).
    Type `ContactPoint` (represented as `dict` in JSON).
    """

    value_count: typing.Optional["Count"]

    """ Value of Example (one of allowed types).
    Type `Count` (represented as `dict` in JSON).
    """

    value_distance: typing.Optional["Distance"]

    """ Value of Example (one of allowed types).
    Type `Distance` (represented as `dict` in JSON).
    """

    value_duration: typing.Optional["Duration"]

    """ Value of Example (one of allowed types).
    Type `Duration` (represented as `dict` in JSON).
    """

    value_human_name: typing.Optional["HumanName"]

    """ Value of Example (one of allowed types).
    Type `HumanName` (represented as `dict` in JSON).
    """

    value_identifier: typing.Optional["Identifier"]

    """ Value of Example (one of allowed types).
    Type `Identifier` (represented as `dict` in JSON).
    """

    value_money: typing.Optional["Money"]

    """ Value of Example (one of allowed types).
    Type `Money` (represented as `dict` in JSON).
    """

    value_period: typing.Optional["Period"]

    """ Value of Example (one of allowed types).
    Type `Period` (represented as `dict` in JSON).
    """

    value_quantity: typing.Optional["Quantity"]

    """ Value of Example (one of allowed types).
    Type `Quantity` (represented as `dict` in JSON).
    """

    value_range: typing.Optional["Range"]

    """ Value of Example (one of allowed types).
    Type `Range` (represented as `dict` in JSON).
    """

    value_ratio: typing.Optional["Ratio"]

    """ Value of Example (one of allowed types).
    Type `Ratio` (represented as `dict` in JSON).
    """

    value_reference: typing.Optional["Reference"]

    """ Value of Example (one of allowed types).
    Type `Reference` (represented as `dict` in JSON).
    """

    value_sampled_data: typing.Optional["SampledData"]

    """ Value of Example (one of allowed types).
    Type `SampledData` (represented as `dict` in JSON).
    """

    value_signature: typing.Optional["Signature"]

    """ Value of Example (one of allowed types).
    Type `Signature` (represented as `dict` in JSON).
    """

    value_timing: typing.Optional["Timing"]

    """ Value of Example (one of allowed types).
    Type `Timing` (represented as `dict` in JSON).
    """

    value_contact_detail: typing.Optional["ContactDetail"]

    """ Value of Example (one of allowed types).
    Type `ContactDetail` (represented as `dict` in JSON).
    """

    value_contributor: typing.Optional["Contributor"]

    """ Value of Example (one of allowed types).
    Type `Contributor` (represented as `dict` in JSON).
    """

    value_data_requirement: typing.Optional["DataRequirement"]

    """ Value of Example (one of allowed types).
    Type `DataRequirement` (represented as `dict` in JSON).
    """

    value_expression: typing.Optional["Expression"]

    """ Value of Example (one of allowed types).
    Type `Expression` (represented as `dict` in JSON).
    """

    value_parameter_definition: typing.Optional["ParameterDefinition"]

    """ Value of Example (one of allowed types).
    Type `ParameterDefinition` (represented as `dict` in JSON).
    """

    value_related_artifact: typing.Optional["RelatedArtifact"]

    """ Value of Example (one of allowed types).
    Type `RelatedArtifact` (represented as `dict` in JSON).
    """

    value_trigger_definition: typing.Optional["TriggerDefinition"]

    """ Value of Example (one of allowed types).
    Type `TriggerDefinition` (represented as `dict` in JSON).
    """

    value_usage_context: typing.Optional["UsageContext"]

    """ Value of Example (one of allowed types).
    Type `UsageContext` (represented as `dict` in JSON).
    """

    value_dosage: typing.Optional["Dosage"]

    """ Value of Example (one of allowed types).
    Type `Dosage` (represented as `dict` in JSON).
    """

    value_meta: typing.Optional["Meta"]

    """ Value of Example (one of allowed types).
    Type `Meta` (represented as `dict` in JSON).
    """



#   {'path': 'ElementDefinition.example.value[x]', 'choice_of_type': 'value', 'orig_name': 'valueBase64Binary', 'name': 'valueBase64Binary', 'parent_name': 'ElementDefinition.example', 'class_name': 'FHIRBase64Binary', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Value of Example (one of allowed types)', 'formal': 'The actual value for the element, which must be one of the types allowed for this element.', 'representation': None}
    _value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['value_base64_binary', 'value_boolean', 'value_canonical', 'value_code', 'value_date', 'value_date_time', 'value_decimal', 'value_id', 'value_instant', 'value_integer', 'value_markdown', 'value_oid', 'value_positive_int', 'value_string', 'value_time', 'value_unsigned_int', 'value_uri', 'value_url', 'value_uuid', 'value_address', 'value_age', 'value_annotation', 'value_attachment', 'value_codeable_concept', 'value_coding', 'value_contact_point', 'value_count', 'value_distance', 'value_duration', 'value_human_name', 'value_identifier', 'value_money', 'value_period', 'value_quantity', 'value_range', 'value_ratio', 'value_reference', 'value_sampled_data', 'value_signature', 'value_timing', 'value_contact_detail', 'value_contributor', 'value_data_requirement', 'value_expression', 'value_parameter_definition', 'value_related_artifact', 'value_trigger_definition', 'value_usage_context', 'value_dosage', 'value_meta']), False))

    _validate_primitive_label = get_primitive_field_root_validator("label")
    
    _validate_primitive_value_base64_binary = get_primitive_field_root_validator("value_base64_binary")
    
    _validate_primitive_value_boolean = get_primitive_field_root_validator("value_boolean")
    
    _validate_primitive_value_canonical = get_primitive_field_root_validator("value_canonical")
    
    _validate_primitive_value_code = get_primitive_field_root_validator("value_code")
    
    _validate_primitive_value_date = get_primitive_field_root_validator("value_date")
    
    _validate_primitive_value_date_time = get_primitive_field_root_validator("value_date_time")
    
    _validate_primitive_value_decimal = get_primitive_field_root_validator("value_decimal")
    
    _validate_primitive_value_id = get_primitive_field_root_validator("value_id")
    
    _validate_primitive_value_instant = get_primitive_field_root_validator("value_instant")
    
    _validate_primitive_value_integer = get_primitive_field_root_validator("value_integer")
    
    _validate_primitive_value_markdown = get_primitive_field_root_validator("value_markdown")
    
    _validate_primitive_value_oid = get_primitive_field_root_validator("value_oid")
    
    _validate_primitive_value_positive_int = get_primitive_field_root_validator("value_positive_int")
    
    _validate_primitive_value_string = get_primitive_field_root_validator("value_string")
    
    _validate_primitive_value_time = get_primitive_field_root_validator("value_time")
    
    _validate_primitive_value_unsigned_int = get_primitive_field_root_validator("value_unsigned_int")
    
    _validate_primitive_value_uri = get_primitive_field_root_validator("value_uri")
    
    _validate_primitive_value_url = get_primitive_field_root_validator("value_url")
    
    _validate_primitive_value_uuid = get_primitive_field_root_validator("value_uuid")
    


class ElementDefinitionConstraint(Element):
    """ Condition that must evaluate to true.

    Formal constraints such as co-occurrence and other constraints that can be
    computationally evaluated within the context of the instance.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ElementDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    key: FHIRId

    """ Target of 'condition' reference above.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    key__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_key`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    requirements: typing.Optional[FHIRString]

    """ Why this constraint is necessary or appropriate.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    requirements__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_requirements`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    severity: "ConstraintSeverity"

    """ error | warning.
    Type `ConstraintSeverity` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    severity__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_severity`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    human: FHIRRequiredString

    """ Human description of constraint.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    human__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_human`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    expression: typing.Optional[FHIRString]

    """ FHIRPath expression of constraint.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    expression__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_expression`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    xpath: typing.Optional[FHIRString]

    """ XPath expression of constraint.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    xpath__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_xpath`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    source: typing.Optional[FHIRString]

    """ Reference to original source of constraint.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    source__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_source`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["severity"]["enum"]
            enums.clear()
            for item in ConstraintSeverity:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_key = get_primitive_field_root_validator("key")
    
    _validate_primitive_requirements = get_primitive_field_root_validator("requirements")
    
    _validate_primitive_severity = get_primitive_field_root_validator("severity")
    
    _validate_primitive_human = get_primitive_field_root_validator("human")
    
    _validate_primitive_expression = get_primitive_field_root_validator("expression")
    
    _validate_primitive_xpath = get_primitive_field_root_validator("xpath")
    
    _validate_primitive_source = get_primitive_field_root_validator("source")
    


class ElementDefinitionBinding(Element):
    """ ValueSet details if this is coded.

    Binds to a value set if this element is coded (code, Coding,
    CodeableConcept, Quantity), or the data types (string, uri).
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ElementDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    strength: "BindingStrength"

    """ required | extensible | preferred | example.
    Type `BindingStrength` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    strength__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_strength`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ Human explanation of the value set.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_set: typing.Optional[FHIRString]

    """ Source of value set.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_set__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_set`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["strength"]["enum"]
            enums.clear()
            for item in BindingStrength:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_strength = get_primitive_field_root_validator("strength")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_value_set = get_primitive_field_root_validator("value_set")
    


class ElementDefinitionMapping(Element):
    """ Map element to another set of definitions.

    Identifies a concept from an external specification that roughly
    corresponds to this element.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ElementDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identity: FHIRId

    """ Reference to mapping declaration.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    identity__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_identity`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    
    
    language: typing.Optional["FHIRCode"]

    """ Computable language of mapping.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    language__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_language`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    map: FHIRRequiredString

    """ Details of the mapping.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    map__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_map`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    comment: typing.Optional[FHIRString]

    """ Comments about the mapping or its use.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    comment__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_comment`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_identity = get_primitive_field_root_validator("identity")
    
    _validate_primitive_language = get_primitive_field_root_validator("language")
    
    _validate_primitive_map = get_primitive_field_root_validator("map")
    
    _validate_primitive_comment = get_primitive_field_root_validator("comment")
    


class Expression(Element):
    """ An expression that can be used to generate a value.

    A expression that is evaluated in a specified context and returns a value.
    The context of use of the expression must specify the context in which the
    expression is evaluated, and how the result of the expression is used.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Expression",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    description: typing.Optional[FHIRString]

    """ Natural language description of the condition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRId]

    """ Short name assigned to expression for reuse.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    language: FHIRCode

    """ text/cql | text/fhirpath | application/x-fhir-query | etc..
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    language__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_language`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    expression: typing.Optional[FHIRString]

    """ Expression in specified language.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    expression__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_expression`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    reference: typing.Optional[FHIRString]

    """ Where the expression is found.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    reference__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_reference`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_language = get_primitive_field_root_validator("language")
    
    _validate_primitive_expression = get_primitive_field_root_validator("expression")
    
    _validate_primitive_reference = get_primitive_field_root_validator("reference")
    


class Extension(Element):
    """ Optional Extensions Element.

    Optional Extension Element - found in all resources.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Extension",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: FHIRRequiredString

    """ identifies the meaning of the extension.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_base64_binary: typing.Optional[FHIRBase64Binary]

    """ Value of extension.
    Type `FHIRBase64Binary` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_base64_binary__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_base64_binary`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_boolean: typing.Optional[bool]

    """ Value of extension.
    Type `bool`. Is a JSON Primitive element.
    """
    

    value_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_canonical: typing.Optional[FHIRString]

    """ Value of extension.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_canonical__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_code: typing.Optional[FHIRCode]

    """ Value of extension.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_date: typing.Optional[FHIRDate]

    """ Value of extension.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_date_time: typing.Optional[FHIRDateTime]

    """ Value of extension.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_decimal: typing.Optional[decimal.Decimal]

    """ Value of extension.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    value_decimal__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_decimal`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_id: typing.Optional[FHIRId]

    """ Value of extension.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_instant: typing.Optional[FHIRInstant]

    """ Value of extension.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_instant__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_instant`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_integer: typing.Optional[FHIRInt]

    """ Value of extension.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_integer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_integer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_markdown: typing.Optional[FHIRString]

    """ Value of extension.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_markdown__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_markdown`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_oid: typing.Optional[FHIROid]

    """ Value of extension.
    Type `FHIROid` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_oid__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_oid`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_positive_int: typing.Optional[FHIRPositiveInt]

    """ Value of extension.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    value_positive_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_positive_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_string: typing.Optional[FHIRString]

    """ Value of extension.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_time: typing.Optional[FHIRTime]

    """ Value of extension.
    Type `FHIRTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_unsigned_int: typing.Optional[FHIRUnsignedInt]

    """ Value of extension.
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_unsigned_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_unsigned_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_uri: typing.Optional[FHIRString]

    """ Value of extension.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_url: typing.Optional[FHIRString]

    """ Value of extension.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_uuid: typing.Optional[FHIRString]

    """ Value of extension.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_uuid__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_uuid`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_address: typing.Optional["Address"]

    """ Value of extension.
    Type `Address` (represented as `dict` in JSON).
    """

    value_age: typing.Optional["Age"]

    """ Value of extension.
    Type `Age` (represented as `dict` in JSON).
    """

    value_annotation: typing.Optional["Annotation"]

    """ Value of extension.
    Type `Annotation` (represented as `dict` in JSON).
    """

    value_attachment: typing.Optional["Attachment"]

    """ Value of extension.
    Type `Attachment` (represented as `dict` in JSON).
    """

    value_codeable_concept: typing.Optional["CodeableConcept"]

    """ Value of extension.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value_coding: typing.Optional["Coding"]

    """ Value of extension.
    Type `Coding` (represented as `dict` in JSON).
    """

    value_contact_point: typing.Optional["ContactPoint"]

    """ Value of extension.
    Type `ContactPoint` (represented as `dict` in JSON).
    """

    value_count: typing.Optional["Count"]

    """ Value of extension.
    Type `Count` (represented as `dict` in JSON).
    """

    value_distance: typing.Optional["Distance"]

    """ Value of extension.
    Type `Distance` (represented as `dict` in JSON).
    """

    value_duration: typing.Optional["Duration"]

    """ Value of extension.
    Type `Duration` (represented as `dict` in JSON).
    """

    value_human_name: typing.Optional["HumanName"]

    """ Value of extension.
    Type `HumanName` (represented as `dict` in JSON).
    """

    value_identifier: typing.Optional["Identifier"]

    """ Value of extension.
    Type `Identifier` (represented as `dict` in JSON).
    """

    value_money: typing.Optional["Money"]

    """ Value of extension.
    Type `Money` (represented as `dict` in JSON).
    """

    value_period: typing.Optional["Period"]

    """ Value of extension.
    Type `Period` (represented as `dict` in JSON).
    """

    value_quantity: typing.Optional["Quantity"]

    """ Value of extension.
    Type `Quantity` (represented as `dict` in JSON).
    """

    value_range: typing.Optional["Range"]

    """ Value of extension.
    Type `Range` (represented as `dict` in JSON).
    """

    value_ratio: typing.Optional["Ratio"]

    """ Value of extension.
    Type `Ratio` (represented as `dict` in JSON).
    """

    value_reference: typing.Optional["Reference"]

    """ Value of extension.
    Type `Reference` (represented as `dict` in JSON).
    """

    value_sampled_data: typing.Optional["SampledData"]

    """ Value of extension.
    Type `SampledData` (represented as `dict` in JSON).
    """

    value_signature: typing.Optional["Signature"]

    """ Value of extension.
    Type `Signature` (represented as `dict` in JSON).
    """

    value_timing: typing.Optional["Timing"]

    """ Value of extension.
    Type `Timing` (represented as `dict` in JSON).
    """

    value_contact_detail: typing.Optional["ContactDetail"]

    """ Value of extension.
    Type `ContactDetail` (represented as `dict` in JSON).
    """

    value_contributor: typing.Optional["Contributor"]

    """ Value of extension.
    Type `Contributor` (represented as `dict` in JSON).
    """

    value_data_requirement: typing.Optional["DataRequirement"]

    """ Value of extension.
    Type `DataRequirement` (represented as `dict` in JSON).
    """

    value_expression: typing.Optional["Expression"]

    """ Value of extension.
    Type `Expression` (represented as `dict` in JSON).
    """

    value_parameter_definition: typing.Optional["ParameterDefinition"]

    """ Value of extension.
    Type `ParameterDefinition` (represented as `dict` in JSON).
    """

    value_related_artifact: typing.Optional["RelatedArtifact"]

    """ Value of extension.
    Type `RelatedArtifact` (represented as `dict` in JSON).
    """

    value_trigger_definition: typing.Optional["TriggerDefinition"]

    """ Value of extension.
    Type `TriggerDefinition` (represented as `dict` in JSON).
    """

    value_usage_context: typing.Optional["UsageContext"]

    """ Value of extension.
    Type `UsageContext` (represented as `dict` in JSON).
    """

    value_dosage: typing.Optional["Dosage"]

    """ Value of extension.
    Type `Dosage` (represented as `dict` in JSON).
    """

    value_meta: typing.Optional["Meta"]

    """ Value of extension.
    Type `Meta` (represented as `dict` in JSON).
    """



#   {'path': 'Extension.value[x]', 'choice_of_type': 'value', 'orig_name': 'valueBase64Binary', 'name': 'valueBase64Binary', 'parent_name': 'Extension', 'class_name': 'FHIRBase64Binary', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Value of extension', 'formal': 'Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).', 'representation': None}
    _value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['value_base64_binary', 'value_boolean', 'value_canonical', 'value_code', 'value_date', 'value_date_time', 'value_decimal', 'value_id', 'value_instant', 'value_integer', 'value_markdown', 'value_oid', 'value_positive_int', 'value_string', 'value_time', 'value_unsigned_int', 'value_uri', 'value_url', 'value_uuid', 'value_address', 'value_age', 'value_annotation', 'value_attachment', 'value_codeable_concept', 'value_coding', 'value_contact_point', 'value_count', 'value_distance', 'value_duration', 'value_human_name', 'value_identifier', 'value_money', 'value_period', 'value_quantity', 'value_range', 'value_ratio', 'value_reference', 'value_sampled_data', 'value_signature', 'value_timing', 'value_contact_detail', 'value_contributor', 'value_data_requirement', 'value_expression', 'value_parameter_definition', 'value_related_artifact', 'value_trigger_definition', 'value_usage_context', 'value_dosage', 'value_meta']), True))

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_value_base64_binary = get_primitive_field_root_validator("value_base64_binary")
    
    _validate_primitive_value_boolean = get_primitive_field_root_validator("value_boolean")
    
    _validate_primitive_value_canonical = get_primitive_field_root_validator("value_canonical")
    
    _validate_primitive_value_code = get_primitive_field_root_validator("value_code")
    
    _validate_primitive_value_date = get_primitive_field_root_validator("value_date")
    
    _validate_primitive_value_date_time = get_primitive_field_root_validator("value_date_time")
    
    _validate_primitive_value_decimal = get_primitive_field_root_validator("value_decimal")
    
    _validate_primitive_value_id = get_primitive_field_root_validator("value_id")
    
    _validate_primitive_value_instant = get_primitive_field_root_validator("value_instant")
    
    _validate_primitive_value_integer = get_primitive_field_root_validator("value_integer")
    
    _validate_primitive_value_markdown = get_primitive_field_root_validator("value_markdown")
    
    _validate_primitive_value_oid = get_primitive_field_root_validator("value_oid")
    
    _validate_primitive_value_positive_int = get_primitive_field_root_validator("value_positive_int")
    
    _validate_primitive_value_string = get_primitive_field_root_validator("value_string")
    
    _validate_primitive_value_time = get_primitive_field_root_validator("value_time")
    
    _validate_primitive_value_unsigned_int = get_primitive_field_root_validator("value_unsigned_int")
    
    _validate_primitive_value_uri = get_primitive_field_root_validator("value_uri")
    
    _validate_primitive_value_url = get_primitive_field_root_validator("value_url")
    
    _validate_primitive_value_uuid = get_primitive_field_root_validator("value_uuid")
    


class HumanName(Element):
    """ Name of a human - parts and usage.

    A human's name with the ability to identify parts and usage.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/HumanName",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    use: typing.Optional["NameUse"]

    """ usual | official | temp | nickname | anonymous | old | maiden.
    Type `NameUse` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    use__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_use`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    text: typing.Optional[FHIRString]

    """ Text representation of the full name.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    text__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_text`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    family: typing.Optional[FHIRString]

    """ Family name (often called 'Surname').
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    family__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_family`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    given: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Given names (not always 'first'). Includes middle names.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    given__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_given`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    prefix: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Parts that come before the name.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    prefix__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_prefix`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    suffix: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Parts that come after the name.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    suffix__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_suffix`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    period: typing.Optional["Period"]

    """ Time period when name was/is in use.
    Type `Period` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["use"]["enum"]
            enums.clear()
            for item in NameUse:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_use = get_primitive_field_root_validator("use")
    
    _validate_primitive_text = get_primitive_field_root_validator("text")
    
    _validate_primitive_family = get_primitive_field_root_validator("family")
    
    _validate_primitive_given = get_primitive_field_root_validator("given")
    
    _validate_primitive_prefix = get_primitive_field_root_validator("prefix")
    
    _validate_primitive_suffix = get_primitive_field_root_validator("suffix")
    


class Identifier(Element):
    """ An identifier intended for computation.

    An identifier - identifies some entity uniquely and unambiguously.
    Typically this is used for business identifiers.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Identifier",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    use: typing.Optional["IdentifierUse"]

    """ usual | official | temp | secondary | old (If known).
    Type `IdentifierUse` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    use__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_use`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional["CodeableConcept"]

    """ Description of identifier.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    system: typing.Optional[FHIRString]

    """ The namespace for the identifier value.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    system__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_system`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value: typing.Optional[FHIRString]

    """ The value that is unique.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    period: typing.Optional["Period"]

    """ Time period when id is/was valid for use.
    Type `Period` (represented as `dict` in JSON).
    """

    assigner: typing.Optional["Reference"]

    """ Organization that issued id (may be just text).
    Type `Reference` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["use"]["enum"]
            enums.clear()
            for item in IdentifierUse:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_use = get_primitive_field_root_validator("use")
    
    _validate_primitive_system = get_primitive_field_root_validator("system")
    
    _validate_primitive_value = get_primitive_field_root_validator("value")
    


class Meta(Element):
    """ Metadata about a resource.

    The metadata about a resource. This is content in the resource that is
    maintained by the infrastructure. Changes to the content might not always
    be associated with version changes to the resource.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Meta",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    version_id: typing.Optional[FHIRId]

    """ Version specific identifier.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    last_updated: typing.Optional[FHIRInstant]

    """ When the resource version last changed.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    last_updated__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_last_updated`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    source: typing.Optional[FHIRString]

    """ Identifies where the resource comes from.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    source__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_source`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    profile: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Profiles this resource claims to conform to.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    profile__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_profile`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    security: typing.Optional[typing.List["Coding"]]

    """ Security Labels applied to this resource.
    List of `Coding` items (represented as `dict` in JSON).
    """

    tag: typing.Optional[typing.List["Coding"]]

    """ Tags applied to this resource.
    List of `Coding` items (represented as `dict` in JSON).
    """



    _validate_primitive_version_id = get_primitive_field_root_validator("version_id")
    
    _validate_primitive_last_updated = get_primitive_field_root_validator("last_updated")
    
    _validate_primitive_source = get_primitive_field_root_validator("source")
    
    _validate_primitive_profile = get_primitive_field_root_validator("profile")
    


class Money(Element):
    """ An amount of economic utility in some recognized currency.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Money",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    value: typing.Optional[decimal.Decimal]

    """ Numerical value (with implicit precision).
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    value__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    
    
    currency: typing.Optional["FHIRCode"]

    """ ISO 4217 Currency Code.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    currency__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_currency`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_value = get_primitive_field_root_validator("value")
    
    _validate_primitive_currency = get_primitive_field_root_validator("currency")
    


class Narrative(Element):
    """ Human-readable summary of the resource (essential clinical and business
    information).

    A human-readable summary of the resource conveying the essential clinical
    and business information for the resource.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Narrative",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    status: "NarrativeStatus"

    """ generated | extensions | additional | empty.
    Type `NarrativeStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    div: FHIRRequiredString

    """ Limited xhtml content.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    div__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_div`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in NarrativeStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_div = get_primitive_field_root_validator("div")
    


class ParameterDefinition(Element):
    """ Definition of a parameter to a module.

    The parameters to the module. This collection specifies both the input and
    output parameters. Input parameters are provided by the caller as part of
    the $evaluate operation. Output parameters are included in the
    GuidanceResponse.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ParameterDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: typing.Optional[FHIRCode]

    """ Name used to access the parameter value.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    use: "OperationParameterUse"

    """ in | out.
    Type `OperationParameterUse` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    use__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_use`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    min: typing.Optional[FHIRInt]

    """ Minimum cardinality.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    min__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_min`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    max: typing.Optional[FHIRString]

    """ Maximum cardinality (a number of *).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    max__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_max`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    documentation: typing.Optional[FHIRString]

    """ A brief description of the parameter.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    documentation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_documentation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: FHIRCode

    """ What type of value.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    profile: typing.Optional[FHIRString]

    """ What profile the value is expected to be.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    profile__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_profile`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["use"]["enum"]
            enums.clear()
            for item in OperationParameterUse:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_use = get_primitive_field_root_validator("use")
    
    _validate_primitive_min = get_primitive_field_root_validator("min")
    
    _validate_primitive_max = get_primitive_field_root_validator("max")
    
    _validate_primitive_documentation = get_primitive_field_root_validator("documentation")
    
    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_profile = get_primitive_field_root_validator("profile")
    


class Period(Element):
    """ Time range defined by start and end date/time.

    A time period defined by a start and end date and optionally time.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Period",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    start: typing.Optional[FHIRDateTime]

    """ Starting time with inclusive boundary.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    start__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_start`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    end: typing.Optional[FHIRDateTime]

    """ End time with inclusive boundary, if not ongoing.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    end__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_end`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_start = get_primitive_field_root_validator("start")
    
    _validate_primitive_end = get_primitive_field_root_validator("end")
    


class Quantity(Element):
    """ A measured or measurable amount.

    A measured amount (or an amount that can potentially be measured). Note
    that measured amounts include amounts that are not precisely quantified,
    including amounts involving arbitrary units and floating currencies.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MoneyQuantity",
           "http://hl7.org/fhir/StructureDefinition/Quantity",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    value: typing.Optional[decimal.Decimal]

    """ Numerical value (with implicit precision).
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    value__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    comparator: typing.Optional["QuantityComparator"]

    """ < | <= | >= | > - how to understand the value.
    Type `QuantityComparator` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    comparator__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_comparator`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    unit: typing.Optional[FHIRString]

    """ Unit representation.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    unit__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_unit`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    system: typing.Optional[FHIRString]

    """ System that defines coded unit form.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    system__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_system`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code: typing.Optional[FHIRCode]

    """ Coded form of the unit.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["comparator"]["enum"]
            enums.clear()
            for item in QuantityComparator:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_value = get_primitive_field_root_validator("value")
    
    _validate_primitive_comparator = get_primitive_field_root_validator("comparator")
    
    _validate_primitive_unit = get_primitive_field_root_validator("unit")
    
    _validate_primitive_system = get_primitive_field_root_validator("system")
    
    _validate_primitive_code = get_primitive_field_root_validator("code")
    


class Range(Element):
    """ Set of values bounded by low and high.

    A set of ordered Quantities defined by a low and high limit.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Range",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    low: typing.Optional["Quantity"]

    """ Low limit.
    Type `Quantity` (represented as `dict` in JSON).
    """

    high: typing.Optional["Quantity"]

    """ High limit.
    Type `Quantity` (represented as `dict` in JSON).
    """




class Ratio(Element):
    """ A ratio of two Quantity values - a numerator and a denominator.

    A relationship of two Quantity values - expressed as a numerator and a
    denominator.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Ratio",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    numerator: typing.Optional["Quantity"]

    """ Numerator value.
    Type `Quantity` (represented as `dict` in JSON).
    """

    denominator: typing.Optional["Quantity"]

    """ Denominator value.
    Type `Quantity` (represented as `dict` in JSON).
    """




class Reference(Element):
    """ A reference from one resource to another.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Reference",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    reference: typing.Optional[FHIRString]

    """ Literal reference, Relative, internal or absolute URL.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    reference__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_reference`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional[FHIRString]

    """ Type the reference refers to (e.g. "Patient").
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    identifier: typing.Optional["Identifier"]

    """ Logical reference, when literal reference is not known.
    Type `Identifier` (represented as `dict` in JSON).
    """

    display: typing.Optional[FHIRString]

    """ Text alternative for the resource.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    display__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_display`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_reference = get_primitive_field_root_validator("reference")
    
    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_display = get_primitive_field_root_validator("display")
    


class RelatedArtifact(Element):
    """ Related artifacts for a knowledge resource.

    Related artifacts such as additional documentation, justification, or
    bibliographic references.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/RelatedArtifact",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    type: "RelatedArtifactType"

    """ documentation | justification | citation | predecessor | successor
        | derived-from | depends-on | composed-of.
    Type `RelatedArtifactType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    label: typing.Optional[FHIRString]

    """ Short label.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    label__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_label`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    display: typing.Optional[FHIRString]

    """ Brief description of the related artifact.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    display__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_display`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    citation: typing.Optional[FHIRString]

    """ Bibliographic citation for the artifact.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    citation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_citation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    url: typing.Optional[FHIRString]

    """ Where the artifact can be accessed.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    document: typing.Optional["Attachment"]

    """ What document is being referenced.
    Type `Attachment` (represented as `dict` in JSON).
    """

    resource: typing.Optional[FHIRString]

    """ What resource is being referenced.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    resource__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_resource`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in RelatedArtifactType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_label = get_primitive_field_root_validator("label")
    
    _validate_primitive_display = get_primitive_field_root_validator("display")
    
    _validate_primitive_citation = get_primitive_field_root_validator("citation")
    
    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_resource = get_primitive_field_root_validator("resource")
    


class SampledData(Element):
    """ A series of measurements taken by a device.

    A series of measurements taken by a device, with upper and lower limits.
    There may be more than one dimension in the data.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SampledData",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    origin: "Quantity"

    """ Zero value and units.
    Type `Quantity` (represented as `dict` in JSON).
    """

    period: decimal.Decimal

    """ Number of milliseconds between samples.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    period__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_period`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    factor: typing.Optional[decimal.Decimal]

    """ Multiply data by this before adding to origin.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    factor__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_factor`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    lower_limit: typing.Optional[decimal.Decimal]

    """ Lower limit of detection.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    lower_limit__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_lower_limit`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    upper_limit: typing.Optional[decimal.Decimal]

    """ Upper limit of detection.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    upper_limit__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_upper_limit`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    dimensions: FHIRPositiveInt

    """ Number of sample points at each time point.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    dimensions__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_dimensions`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    data: typing.Optional[FHIRString]

    """ Decimal values with spaces, or "E" | "U" | "L".
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    data__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_data`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_period = get_primitive_field_root_validator("period")
    
    _validate_primitive_factor = get_primitive_field_root_validator("factor")
    
    _validate_primitive_lower_limit = get_primitive_field_root_validator("lower_limit")
    
    _validate_primitive_upper_limit = get_primitive_field_root_validator("upper_limit")
    
    _validate_primitive_dimensions = get_primitive_field_root_validator("dimensions")
    
    _validate_primitive_data = get_primitive_field_root_validator("data")
    


class Signature(Element):
    """ A Signature - XML DigSig, JWS, Graphical image of signature, etc..

    A signature along with supporting context. The signature may be a digital
    signature that is cryptographic in nature, or some other signature
    acceptable to the domain. This other signature may be as simple as a
    graphical image representing a hand-written signature, or a signature
    ceremony Different signature approaches have different utilities.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Signature",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: typing.List["Coding"]

    """ Indication of the reason the entity signed the object(s).
    List of `Coding` items (represented as `dict` in JSON).
    """

    when: FHIRInstant

    """ When the signature was created.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    when__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_when`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    who: "Reference"

    """ Who signed.
    Type `Reference` (represented as `dict` in JSON).
    """

    on_behalf_of: typing.Optional["Reference"]

    """ The party represented.
    Type `Reference` (represented as `dict` in JSON).
    """

    
    
    target_format: typing.Optional["FHIRCode"]

    """ The technical format of the signed resources.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    target_format__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_target_format`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    
    
    sig_format: typing.Optional["FHIRCode"]

    """ The technical format of the signature.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    sig_format__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sig_format`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    data: typing.Optional[FHIRBase64Binary]

    """ The actual signature content (XML DigSig. JWS, picture, etc.).
    Type `FHIRBase64Binary` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    data__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_data`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_when = get_primitive_field_root_validator("when")
    
    _validate_primitive_target_format = get_primitive_field_root_validator("target_format")
    
    _validate_primitive_sig_format = get_primitive_field_root_validator("sig_format")
    
    _validate_primitive_data = get_primitive_field_root_validator("data")
    


class SubstanceAmountReferenceRange(Element):
    """ Reference range of possible or expected values.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceAmount",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    low_limit: typing.Optional["Quantity"]

    """ Lower limit possible or expected.
    Type `Quantity` (represented as `dict` in JSON).
    """

    high_limit: typing.Optional["Quantity"]

    """ Upper limit possible or expected.
    Type `Quantity` (represented as `dict` in JSON).
    """




class TimingRepeat(Element):
    """ When the event is to occur.

    A set of rules that describe when the event is scheduled.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Timing",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    bounds_duration: typing.Optional["Duration"]

    """ Length/Range of lengths, or (Start and/or end) limits.
    Type `Duration` (represented as `dict` in JSON).
    """

    bounds_range: typing.Optional["Range"]

    """ Length/Range of lengths, or (Start and/or end) limits.
    Type `Range` (represented as `dict` in JSON).
    """

    bounds_period: typing.Optional["Period"]

    """ Length/Range of lengths, or (Start and/or end) limits.
    Type `Period` (represented as `dict` in JSON).
    """

    count: typing.Optional[FHIRPositiveInt]

    """ Number of times to repeat.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    count__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_count`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    count_max: typing.Optional[FHIRPositiveInt]

    """ Maximum number of times to repeat.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    count_max__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_count_max`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    duration: typing.Optional[decimal.Decimal]

    """ How long when it happens.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    duration__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_duration`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    duration_max: typing.Optional[decimal.Decimal]

    """ How long when it happens (Max).
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    duration_max__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_duration_max`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    
                
                
                
                
                
                
                
    
    duration_unit: typing.Optional[typing.Literal["s", "min", "h", "d", "wk", "mo", "a"]]

    """ s | min | h | d | wk | mo | a - unit of time (UCUM).
    Type `typing.Literal` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    duration_unit__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_duration_unit`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    frequency: typing.Optional[FHIRPositiveInt]

    """ Event occurs frequency times per period.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    frequency__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_frequency`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    frequency_max: typing.Optional[FHIRPositiveInt]

    """ Event occurs up to frequencyMax times per period.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    frequency_max__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_frequency_max`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    period: typing.Optional[decimal.Decimal]

    """ Event occurs frequency times per period.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    period__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_period`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    period_max: typing.Optional[decimal.Decimal]

    """ Upper limit of period (3-4 hours).
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    period_max__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_period_max`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    
                
                
                
                
                
                
                
    
    period_unit: typing.Optional[typing.Literal["s", "min", "h", "d", "wk", "mo", "a"]]

    """ s | min | h | d | wk | mo | a - unit of time (UCUM).
    Type `typing.Literal` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    period_unit__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_period_unit`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    day_of_week: typing.Optional[typing.List[typing.Optional["DaysOfWeek"]]]

    """ mon | tue | wed | thu | fri | sat | sun.
    List of `DaysOfWeek` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    day_of_week__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_day_of_week`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    time_of_day: typing.Optional[typing.List[typing.Optional[FHIRTime]]]

    """ Time of day for action.
    List of `FHIRTime` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    time_of_day__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_time_of_day`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    when: typing.Optional[typing.List[typing.Optional[FHIRCode]]]

    """ Code for time period of occurrence.
    List of `FHIRCode` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    when__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_when`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    offset: typing.Optional[FHIRUnsignedInt]

    """ Minutes from event (before or after).
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    offset__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_offset`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'Timing.repeat.bounds[x]', 'choice_of_type': 'bounds', 'orig_name': 'boundsDuration', 'name': 'boundsDuration', 'parent_name': 'Timing.repeat', 'class_name': 'Duration', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Length/Range of lengths, or (Start and/or end) limits', 'formal': 'Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.', 'representation': None}
    _bounds_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['bounds_duration', 'bounds_range', 'bounds_period']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["dayOfWeek"]["items"]["enum"]
            enums.clear()
            for item in DaysOfWeek:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_count = get_primitive_field_root_validator("count")
    
    _validate_primitive_count_max = get_primitive_field_root_validator("count_max")
    
    _validate_primitive_duration = get_primitive_field_root_validator("duration")
    
    _validate_primitive_duration_max = get_primitive_field_root_validator("duration_max")
    
    _validate_primitive_duration_unit = get_primitive_field_root_validator("duration_unit")
    
    _validate_primitive_frequency = get_primitive_field_root_validator("frequency")
    
    _validate_primitive_frequency_max = get_primitive_field_root_validator("frequency_max")
    
    _validate_primitive_period = get_primitive_field_root_validator("period")
    
    _validate_primitive_period_max = get_primitive_field_root_validator("period_max")
    
    _validate_primitive_period_unit = get_primitive_field_root_validator("period_unit")
    
    _validate_primitive_day_of_week = get_primitive_field_root_validator("day_of_week")
    
    _validate_primitive_time_of_day = get_primitive_field_root_validator("time_of_day")
    
    _validate_primitive_when = get_primitive_field_root_validator("when")
    
    _validate_primitive_offset = get_primitive_field_root_validator("offset")
    


class TriggerDefinition(Element):
    """ Defines an expected trigger for a module.

    A description of a triggering event. Triggering events can be named events,
    data events, or periodic, as determined by the type element.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TriggerDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    type: "TriggerType"

    """ named-event | periodic | data-changed | data-added | data-modified
        | data-removed | data-accessed | data-access-ended.
    Type `TriggerType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Name or URI that identifies the event.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    timing_timing: typing.Optional["Timing"]

    """ Timing of the event.
    Type `Timing` (represented as `dict` in JSON).
    """

    timing_reference: typing.Optional["Reference"]

    """ Timing of the event.
    Type `Reference` (represented as `dict` in JSON).
    """

    timing_date: typing.Optional[FHIRDate]

    """ Timing of the event.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    timing_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_timing_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    timing_date_time: typing.Optional[FHIRDateTime]

    """ Timing of the event.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    timing_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_timing_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    data: typing.Optional[typing.List["DataRequirement"]]

    """ Triggering data of the event (multiple = 'and').
    List of `DataRequirement` items (represented as `dict` in JSON).
    """

    condition: typing.Optional["Expression"]

    """ Whether the event triggers (boolean expression).
    Type `Expression` (represented as `dict` in JSON).
    """



#   {'path': 'TriggerDefinition.timing[x]', 'choice_of_type': 'timing', 'orig_name': 'timingTiming', 'name': 'timingTiming', 'parent_name': 'TriggerDefinition', 'class_name': 'Timing', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Timing of the event', 'formal': 'The timing of the event (if this is a periodic trigger).', 'representation': None}
    _timing_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['timing_timing', 'timing_reference', 'timing_date', 'timing_date_time']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in TriggerType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_timing_date = get_primitive_field_root_validator("timing_date")
    
    _validate_primitive_timing_date_time = get_primitive_field_root_validator("timing_date_time")
    


class UsageContext(Element):
    """ Describes the context of use for a conformance or knowledge resource.

    Specifies clinical/business/etc. metadata that can be used to retrieve,
    index and/or categorize an artifact. This metadata can either be specific
    to the applicable population (e.g., age category, DRG) or the specific
    context of care (e.g., venue, care setting, provider of care).
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/UsageContext",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: "Coding"

    """ Type of context being specified.
    Type `Coding` (represented as `dict` in JSON).
    """

    value_codeable_concept: typing.Optional["CodeableConcept"]

    """ Value that defines the context.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value_quantity: typing.Optional["Quantity"]

    """ Value that defines the context.
    Type `Quantity` (represented as `dict` in JSON).
    """

    value_range: typing.Optional["Range"]

    """ Value that defines the context.
    Type `Range` (represented as `dict` in JSON).
    """

    value_reference: typing.Optional["Reference"]

    """ Value that defines the context.
    Type `Reference` (represented as `dict` in JSON).
    """



#   {'path': 'UsageContext.value[x]', 'choice_of_type': 'value', 'orig_name': 'valueCodeableConcept', 'name': 'valueCodeableConcept', 'parent_name': 'UsageContext', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Value that defines the context', 'formal': 'A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.', 'representation': None}
    _value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['value_codeable_concept', 'value_quantity', 'value_range', 'value_reference']), False))


class Age(Quantity):
    """ A duration of time during which an organism (or a process) has existed.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Age",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """








class Count(Quantity):
    """ A measured or measurable amount.

    A measured amount (or an amount that can potentially be measured). Note
    that measured amounts include amounts that are not precisely quantified,
    including amounts involving arbitrary units and floating currencies.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Count",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """








class Distance(Quantity):
    """ A length - a value with a unit that is a physical distance.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Distance",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """








class Duration(Quantity):
    """ A length of time.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Duration",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """








class Dosage(BackboneElement):
    """ How the medication is/was taken or should be taken.

    Indicates how the medication is/was taken or should be taken by the
    patient.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Dosage",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    sequence: typing.Optional[FHIRInt]

    """ The order of the dosage instructions.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    text: typing.Optional[FHIRString]

    """ Free text dosage instructions e.g. SIG.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    text__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_text`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    additional_instruction: typing.Optional[typing.List["CodeableConcept"]]

    """ Supplemental instruction or warnings to the patient - e.g. "with
        meals", "may cause drowsiness".
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    patient_instruction: typing.Optional[FHIRString]

    """ Patient or consumer oriented instructions.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    patient_instruction__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_patient_instruction`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    timing: typing.Optional["Timing"]

    """ When medication should be administered.
    Type `Timing` (represented as `dict` in JSON).
    """

    as_needed_boolean: typing.Optional[bool]

    """ Take "as needed" (for x).
    Type `bool`. Is a JSON Primitive element.
    """
    

    as_needed_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_as_needed_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    as_needed_codeable_concept: typing.Optional["CodeableConcept"]

    """ Take "as needed" (for x).
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    site: typing.Optional["CodeableConcept"]

    """ Body site to administer to.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    route: typing.Optional["CodeableConcept"]

    """ How drug should enter body.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    method: typing.Optional["CodeableConcept"]

    """ Technique for administering medication.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    dose_and_rate: typing.Optional[typing.List["DosageDoseAndRate"]]

    """ Amount of medication administered.
    List of `DosageDoseAndRate` items (represented as `dict` in JSON).
    """

    max_dose_per_period: typing.Optional["Ratio"]

    """ Upper limit on medication per unit of time.
    Type `Ratio` (represented as `dict` in JSON).
    """

    max_dose_per_administration: typing.Optional["Quantity"]

    """ Upper limit on medication per administration.
    Type `Quantity` (represented as `dict` in JSON).
    """

    max_dose_per_lifetime: typing.Optional["Quantity"]

    """ Upper limit on medication per lifetime of the patient.
    Type `Quantity` (represented as `dict` in JSON).
    """



#   {'path': 'Dosage.asNeeded[x]', 'choice_of_type': 'asNeeded', 'orig_name': 'asNeededBoolean', 'name': 'asNeededBoolean', 'parent_name': 'Dosage', 'class_name': 'bool', 'enum': None, 'module_name': None, 'json_class': 'bool', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Take "as needed" (for x)', 'formal': 'Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).', 'representation': None}
    _as_needed_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['as_needed_boolean', 'as_needed_codeable_concept']), True))

    _validate_primitive_sequence = get_primitive_field_root_validator("sequence")
    
    _validate_primitive_text = get_primitive_field_root_validator("text")
    
    _validate_primitive_patient_instruction = get_primitive_field_root_validator("patient_instruction")
    
    _validate_primitive_as_needed_boolean = get_primitive_field_root_validator("as_needed_boolean")
    


class ElementDefinition(BackboneElement):
    """ Definition of an element in a resource or extension.

    Captures constraints on each element within the resource, profile, or
    extension.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ElementDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    path: FHIRRequiredString

    """ Path of the element in the hierarchy of elements.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    path__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_path`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    representation: typing.Optional[typing.List[typing.Optional["PropertyRepresentation"]]]

    """ xmlAttr | xmlText | typeAttr | cdaText | xhtml.
    List of `PropertyRepresentation` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    representation__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_representation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    slice_name: typing.Optional[FHIRString]

    """ Name for this particular element (in a set of slices).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    slice_name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_slice_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    slice_is_constraining: typing.Optional[bool]

    """ If this slice definition constrains an inherited slice definition
        (or not).
    Type `bool`. Is a JSON Primitive element.
    """
    

    slice_is_constraining__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_slice_is_constraining`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    label: typing.Optional[FHIRString]

    """ Name for element to display with or prompt for element.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    label__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_label`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code: typing.Optional[typing.List["Coding"]]

    """ Corresponding codes in terminologies.
    List of `Coding` items (represented as `dict` in JSON).
    """

    slicing: typing.Optional["ElementDefinitionSlicing"]

    """ This element is sliced - slices follow.
    Type `ElementDefinitionSlicing` (represented as `dict` in JSON).
    """

    short: typing.Optional[FHIRString]

    """ Concise definition for space-constrained presentation.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    short__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_short`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    definition: typing.Optional[FHIRString]

    """ Full formal definition as narrative text.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    definition__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_definition`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    comment: typing.Optional[FHIRString]

    """ Comments about the use of this element.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    comment__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_comment`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    requirements: typing.Optional[FHIRString]

    """ Why this resource has been created.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    requirements__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_requirements`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    alias: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Other names.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    alias__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_alias`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    min: typing.Optional[FHIRUnsignedInt]

    """ Minimum Cardinality.
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    min__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_min`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    max: typing.Optional[FHIRString]

    """ Maximum Cardinality (a number or *).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    max__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_max`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    base: typing.Optional["ElementDefinitionBase"]

    """ Base definition information for tools.
    Type `ElementDefinitionBase` (represented as `dict` in JSON).
    """

    content_reference: typing.Optional[FHIRString]

    """ Reference to definition of content for the element.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    content_reference__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_content_reference`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional[typing.List["ElementDefinitionType"]]

    """ Data type and Profile for this element.
    List of `ElementDefinitionType` items (represented as `dict` in JSON).
    """

    default_value_base64_binary: typing.Optional[FHIRBase64Binary]

    """ Specified value if missing from instance.
    Type `FHIRBase64Binary` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_base64_binary__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_base64_binary`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_boolean: typing.Optional[bool]

    """ Specified value if missing from instance.
    Type `bool`. Is a JSON Primitive element.
    """
    

    default_value_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_canonical: typing.Optional[FHIRString]

    """ Specified value if missing from instance.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_canonical__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_code: typing.Optional[FHIRCode]

    """ Specified value if missing from instance.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_date: typing.Optional[FHIRDate]

    """ Specified value if missing from instance.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_date_time: typing.Optional[FHIRDateTime]

    """ Specified value if missing from instance.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_decimal: typing.Optional[decimal.Decimal]

    """ Specified value if missing from instance.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    default_value_decimal__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_decimal`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_id: typing.Optional[FHIRId]

    """ Specified value if missing from instance.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_instant: typing.Optional[FHIRInstant]

    """ Specified value if missing from instance.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_instant__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_instant`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_integer: typing.Optional[FHIRInt]

    """ Specified value if missing from instance.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_integer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_integer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_markdown: typing.Optional[FHIRString]

    """ Specified value if missing from instance.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_markdown__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_markdown`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_oid: typing.Optional[FHIROid]

    """ Specified value if missing from instance.
    Type `FHIROid` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_oid__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_oid`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_positive_int: typing.Optional[FHIRPositiveInt]

    """ Specified value if missing from instance.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    default_value_positive_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_positive_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_string: typing.Optional[FHIRString]

    """ Specified value if missing from instance.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_time: typing.Optional[FHIRTime]

    """ Specified value if missing from instance.
    Type `FHIRTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_unsigned_int: typing.Optional[FHIRUnsignedInt]

    """ Specified value if missing from instance.
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_unsigned_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_unsigned_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_uri: typing.Optional[FHIRString]

    """ Specified value if missing from instance.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_url: typing.Optional[FHIRString]

    """ Specified value if missing from instance.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_uuid: typing.Optional[FHIRString]

    """ Specified value if missing from instance.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_uuid__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_uuid`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_address: typing.Optional["Address"]

    """ Specified value if missing from instance.
    Type `Address` (represented as `dict` in JSON).
    """

    default_value_age: typing.Optional["Age"]

    """ Specified value if missing from instance.
    Type `Age` (represented as `dict` in JSON).
    """

    default_value_annotation: typing.Optional["Annotation"]

    """ Specified value if missing from instance.
    Type `Annotation` (represented as `dict` in JSON).
    """

    default_value_attachment: typing.Optional["Attachment"]

    """ Specified value if missing from instance.
    Type `Attachment` (represented as `dict` in JSON).
    """

    default_value_codeable_concept: typing.Optional["CodeableConcept"]

    """ Specified value if missing from instance.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    default_value_coding: typing.Optional["Coding"]

    """ Specified value if missing from instance.
    Type `Coding` (represented as `dict` in JSON).
    """

    default_value_contact_point: typing.Optional["ContactPoint"]

    """ Specified value if missing from instance.
    Type `ContactPoint` (represented as `dict` in JSON).
    """

    default_value_count: typing.Optional["Count"]

    """ Specified value if missing from instance.
    Type `Count` (represented as `dict` in JSON).
    """

    default_value_distance: typing.Optional["Distance"]

    """ Specified value if missing from instance.
    Type `Distance` (represented as `dict` in JSON).
    """

    default_value_duration: typing.Optional["Duration"]

    """ Specified value if missing from instance.
    Type `Duration` (represented as `dict` in JSON).
    """

    default_value_human_name: typing.Optional["HumanName"]

    """ Specified value if missing from instance.
    Type `HumanName` (represented as `dict` in JSON).
    """

    default_value_identifier: typing.Optional["Identifier"]

    """ Specified value if missing from instance.
    Type `Identifier` (represented as `dict` in JSON).
    """

    default_value_money: typing.Optional["Money"]

    """ Specified value if missing from instance.
    Type `Money` (represented as `dict` in JSON).
    """

    default_value_period: typing.Optional["Period"]

    """ Specified value if missing from instance.
    Type `Period` (represented as `dict` in JSON).
    """

    default_value_quantity: typing.Optional["Quantity"]

    """ Specified value if missing from instance.
    Type `Quantity` (represented as `dict` in JSON).
    """

    default_value_range: typing.Optional["Range"]

    """ Specified value if missing from instance.
    Type `Range` (represented as `dict` in JSON).
    """

    default_value_ratio: typing.Optional["Ratio"]

    """ Specified value if missing from instance.
    Type `Ratio` (represented as `dict` in JSON).
    """

    default_value_reference: typing.Optional["Reference"]

    """ Specified value if missing from instance.
    Type `Reference` (represented as `dict` in JSON).
    """

    default_value_sampled_data: typing.Optional["SampledData"]

    """ Specified value if missing from instance.
    Type `SampledData` (represented as `dict` in JSON).
    """

    default_value_signature: typing.Optional["Signature"]

    """ Specified value if missing from instance.
    Type `Signature` (represented as `dict` in JSON).
    """

    default_value_timing: typing.Optional["Timing"]

    """ Specified value if missing from instance.
    Type `Timing` (represented as `dict` in JSON).
    """

    default_value_contact_detail: typing.Optional["ContactDetail"]

    """ Specified value if missing from instance.
    Type `ContactDetail` (represented as `dict` in JSON).
    """

    default_value_contributor: typing.Optional["Contributor"]

    """ Specified value if missing from instance.
    Type `Contributor` (represented as `dict` in JSON).
    """

    default_value_data_requirement: typing.Optional["DataRequirement"]

    """ Specified value if missing from instance.
    Type `DataRequirement` (represented as `dict` in JSON).
    """

    default_value_expression: typing.Optional["Expression"]

    """ Specified value if missing from instance.
    Type `Expression` (represented as `dict` in JSON).
    """

    default_value_parameter_definition: typing.Optional["ParameterDefinition"]

    """ Specified value if missing from instance.
    Type `ParameterDefinition` (represented as `dict` in JSON).
    """

    default_value_related_artifact: typing.Optional["RelatedArtifact"]

    """ Specified value if missing from instance.
    Type `RelatedArtifact` (represented as `dict` in JSON).
    """

    default_value_trigger_definition: typing.Optional["TriggerDefinition"]

    """ Specified value if missing from instance.
    Type `TriggerDefinition` (represented as `dict` in JSON).
    """

    default_value_usage_context: typing.Optional["UsageContext"]

    """ Specified value if missing from instance.
    Type `UsageContext` (represented as `dict` in JSON).
    """

    default_value_dosage: typing.Optional["Dosage"]

    """ Specified value if missing from instance.
    Type `Dosage` (represented as `dict` in JSON).
    """

    default_value_meta: typing.Optional["Meta"]

    """ Specified value if missing from instance.
    Type `Meta` (represented as `dict` in JSON).
    """

    meaning_when_missing: typing.Optional[FHIRString]

    """ Implicit meaning when this element is missing.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    meaning_when_missing__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_meaning_when_missing`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    order_meaning: typing.Optional[FHIRString]

    """ What the order of the elements means.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    order_meaning__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_order_meaning`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    fixed_base64_binary: typing.Optional[FHIRBase64Binary]

    """ Value must be exactly this.
    Type `FHIRBase64Binary` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    fixed_base64_binary__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_fixed_base64_binary`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    fixed_boolean: typing.Optional[bool]

    """ Value must be exactly this.
    Type `bool`. Is a JSON Primitive element.
    """
    

    fixed_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_fixed_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    fixed_canonical: typing.Optional[FHIRString]

    """ Value must be exactly this.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    fixed_canonical__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_fixed_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    fixed_code: typing.Optional[FHIRCode]

    """ Value must be exactly this.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    fixed_code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_fixed_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    fixed_date: typing.Optional[FHIRDate]

    """ Value must be exactly this.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    fixed_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_fixed_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    fixed_date_time: typing.Optional[FHIRDateTime]

    """ Value must be exactly this.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    fixed_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_fixed_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    fixed_decimal: typing.Optional[decimal.Decimal]

    """ Value must be exactly this.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    fixed_decimal__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_fixed_decimal`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    fixed_id: typing.Optional[FHIRId]

    """ Value must be exactly this.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    fixed_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_fixed_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    fixed_instant: typing.Optional[FHIRInstant]

    """ Value must be exactly this.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    fixed_instant__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_fixed_instant`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    fixed_integer: typing.Optional[FHIRInt]

    """ Value must be exactly this.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    fixed_integer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_fixed_integer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    fixed_markdown: typing.Optional[FHIRString]

    """ Value must be exactly this.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    fixed_markdown__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_fixed_markdown`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    fixed_oid: typing.Optional[FHIROid]

    """ Value must be exactly this.
    Type `FHIROid` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    fixed_oid__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_fixed_oid`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    fixed_positive_int: typing.Optional[FHIRPositiveInt]

    """ Value must be exactly this.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    fixed_positive_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_fixed_positive_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    fixed_string: typing.Optional[FHIRString]

    """ Value must be exactly this.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    fixed_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_fixed_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    fixed_time: typing.Optional[FHIRTime]

    """ Value must be exactly this.
    Type `FHIRTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    fixed_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_fixed_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    fixed_unsigned_int: typing.Optional[FHIRUnsignedInt]

    """ Value must be exactly this.
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    fixed_unsigned_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_fixed_unsigned_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    fixed_uri: typing.Optional[FHIRString]

    """ Value must be exactly this.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    fixed_uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_fixed_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    fixed_url: typing.Optional[FHIRString]

    """ Value must be exactly this.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    fixed_url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_fixed_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    fixed_uuid: typing.Optional[FHIRString]

    """ Value must be exactly this.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    fixed_uuid__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_fixed_uuid`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    fixed_address: typing.Optional["Address"]

    """ Value must be exactly this.
    Type `Address` (represented as `dict` in JSON).
    """

    fixed_age: typing.Optional["Age"]

    """ Value must be exactly this.
    Type `Age` (represented as `dict` in JSON).
    """

    fixed_annotation: typing.Optional["Annotation"]

    """ Value must be exactly this.
    Type `Annotation` (represented as `dict` in JSON).
    """

    fixed_attachment: typing.Optional["Attachment"]

    """ Value must be exactly this.
    Type `Attachment` (represented as `dict` in JSON).
    """

    fixed_codeable_concept: typing.Optional["CodeableConcept"]

    """ Value must be exactly this.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    fixed_coding: typing.Optional["Coding"]

    """ Value must be exactly this.
    Type `Coding` (represented as `dict` in JSON).
    """

    fixed_contact_point: typing.Optional["ContactPoint"]

    """ Value must be exactly this.
    Type `ContactPoint` (represented as `dict` in JSON).
    """

    fixed_count: typing.Optional["Count"]

    """ Value must be exactly this.
    Type `Count` (represented as `dict` in JSON).
    """

    fixed_distance: typing.Optional["Distance"]

    """ Value must be exactly this.
    Type `Distance` (represented as `dict` in JSON).
    """

    fixed_duration: typing.Optional["Duration"]

    """ Value must be exactly this.
    Type `Duration` (represented as `dict` in JSON).
    """

    fixed_human_name: typing.Optional["HumanName"]

    """ Value must be exactly this.
    Type `HumanName` (represented as `dict` in JSON).
    """

    fixed_identifier: typing.Optional["Identifier"]

    """ Value must be exactly this.
    Type `Identifier` (represented as `dict` in JSON).
    """

    fixed_money: typing.Optional["Money"]

    """ Value must be exactly this.
    Type `Money` (represented as `dict` in JSON).
    """

    fixed_period: typing.Optional["Period"]

    """ Value must be exactly this.
    Type `Period` (represented as `dict` in JSON).
    """

    fixed_quantity: typing.Optional["Quantity"]

    """ Value must be exactly this.
    Type `Quantity` (represented as `dict` in JSON).
    """

    fixed_range: typing.Optional["Range"]

    """ Value must be exactly this.
    Type `Range` (represented as `dict` in JSON).
    """

    fixed_ratio: typing.Optional["Ratio"]

    """ Value must be exactly this.
    Type `Ratio` (represented as `dict` in JSON).
    """

    fixed_reference: typing.Optional["Reference"]

    """ Value must be exactly this.
    Type `Reference` (represented as `dict` in JSON).
    """

    fixed_sampled_data: typing.Optional["SampledData"]

    """ Value must be exactly this.
    Type `SampledData` (represented as `dict` in JSON).
    """

    fixed_signature: typing.Optional["Signature"]

    """ Value must be exactly this.
    Type `Signature` (represented as `dict` in JSON).
    """

    fixed_timing: typing.Optional["Timing"]

    """ Value must be exactly this.
    Type `Timing` (represented as `dict` in JSON).
    """

    fixed_contact_detail: typing.Optional["ContactDetail"]

    """ Value must be exactly this.
    Type `ContactDetail` (represented as `dict` in JSON).
    """

    fixed_contributor: typing.Optional["Contributor"]

    """ Value must be exactly this.
    Type `Contributor` (represented as `dict` in JSON).
    """

    fixed_data_requirement: typing.Optional["DataRequirement"]

    """ Value must be exactly this.
    Type `DataRequirement` (represented as `dict` in JSON).
    """

    fixed_expression: typing.Optional["Expression"]

    """ Value must be exactly this.
    Type `Expression` (represented as `dict` in JSON).
    """

    fixed_parameter_definition: typing.Optional["ParameterDefinition"]

    """ Value must be exactly this.
    Type `ParameterDefinition` (represented as `dict` in JSON).
    """

    fixed_related_artifact: typing.Optional["RelatedArtifact"]

    """ Value must be exactly this.
    Type `RelatedArtifact` (represented as `dict` in JSON).
    """

    fixed_trigger_definition: typing.Optional["TriggerDefinition"]

    """ Value must be exactly this.
    Type `TriggerDefinition` (represented as `dict` in JSON).
    """

    fixed_usage_context: typing.Optional["UsageContext"]

    """ Value must be exactly this.
    Type `UsageContext` (represented as `dict` in JSON).
    """

    fixed_dosage: typing.Optional["Dosage"]

    """ Value must be exactly this.
    Type `Dosage` (represented as `dict` in JSON).
    """

    fixed_meta: typing.Optional["Meta"]

    """ Value must be exactly this.
    Type `Meta` (represented as `dict` in JSON).
    """

    pattern_base64_binary: typing.Optional[FHIRBase64Binary]

    """ Value must have at least these property values.
    Type `FHIRBase64Binary` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    pattern_base64_binary__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pattern_base64_binary`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    pattern_boolean: typing.Optional[bool]

    """ Value must have at least these property values.
    Type `bool`. Is a JSON Primitive element.
    """
    

    pattern_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pattern_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    pattern_canonical: typing.Optional[FHIRString]

    """ Value must have at least these property values.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    pattern_canonical__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pattern_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    pattern_code: typing.Optional[FHIRCode]

    """ Value must have at least these property values.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    pattern_code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pattern_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    pattern_date: typing.Optional[FHIRDate]

    """ Value must have at least these property values.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    pattern_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pattern_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    pattern_date_time: typing.Optional[FHIRDateTime]

    """ Value must have at least these property values.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    pattern_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pattern_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    pattern_decimal: typing.Optional[decimal.Decimal]

    """ Value must have at least these property values.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    pattern_decimal__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pattern_decimal`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    pattern_id: typing.Optional[FHIRId]

    """ Value must have at least these property values.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    pattern_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pattern_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    pattern_instant: typing.Optional[FHIRInstant]

    """ Value must have at least these property values.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    pattern_instant__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pattern_instant`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    pattern_integer: typing.Optional[FHIRInt]

    """ Value must have at least these property values.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    pattern_integer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pattern_integer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    pattern_markdown: typing.Optional[FHIRString]

    """ Value must have at least these property values.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    pattern_markdown__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pattern_markdown`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    pattern_oid: typing.Optional[FHIROid]

    """ Value must have at least these property values.
    Type `FHIROid` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    pattern_oid__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pattern_oid`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    pattern_positive_int: typing.Optional[FHIRPositiveInt]

    """ Value must have at least these property values.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    pattern_positive_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pattern_positive_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    pattern_string: typing.Optional[FHIRString]

    """ Value must have at least these property values.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    pattern_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pattern_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    pattern_time: typing.Optional[FHIRTime]

    """ Value must have at least these property values.
    Type `FHIRTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    pattern_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pattern_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    pattern_unsigned_int: typing.Optional[FHIRUnsignedInt]

    """ Value must have at least these property values.
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    pattern_unsigned_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pattern_unsigned_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    pattern_uri: typing.Optional[FHIRString]

    """ Value must have at least these property values.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    pattern_uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pattern_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    pattern_url: typing.Optional[FHIRString]

    """ Value must have at least these property values.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    pattern_url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pattern_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    pattern_uuid: typing.Optional[FHIRString]

    """ Value must have at least these property values.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    pattern_uuid__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pattern_uuid`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    pattern_address: typing.Optional["Address"]

    """ Value must have at least these property values.
    Type `Address` (represented as `dict` in JSON).
    """

    pattern_age: typing.Optional["Age"]

    """ Value must have at least these property values.
    Type `Age` (represented as `dict` in JSON).
    """

    pattern_annotation: typing.Optional["Annotation"]

    """ Value must have at least these property values.
    Type `Annotation` (represented as `dict` in JSON).
    """

    pattern_attachment: typing.Optional["Attachment"]

    """ Value must have at least these property values.
    Type `Attachment` (represented as `dict` in JSON).
    """

    pattern_codeable_concept: typing.Optional["CodeableConcept"]

    """ Value must have at least these property values.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    pattern_coding: typing.Optional["Coding"]

    """ Value must have at least these property values.
    Type `Coding` (represented as `dict` in JSON).
    """

    pattern_contact_point: typing.Optional["ContactPoint"]

    """ Value must have at least these property values.
    Type `ContactPoint` (represented as `dict` in JSON).
    """

    pattern_count: typing.Optional["Count"]

    """ Value must have at least these property values.
    Type `Count` (represented as `dict` in JSON).
    """

    pattern_distance: typing.Optional["Distance"]

    """ Value must have at least these property values.
    Type `Distance` (represented as `dict` in JSON).
    """

    pattern_duration: typing.Optional["Duration"]

    """ Value must have at least these property values.
    Type `Duration` (represented as `dict` in JSON).
    """

    pattern_human_name: typing.Optional["HumanName"]

    """ Value must have at least these property values.
    Type `HumanName` (represented as `dict` in JSON).
    """

    pattern_identifier: typing.Optional["Identifier"]

    """ Value must have at least these property values.
    Type `Identifier` (represented as `dict` in JSON).
    """

    pattern_money: typing.Optional["Money"]

    """ Value must have at least these property values.
    Type `Money` (represented as `dict` in JSON).
    """

    pattern_period: typing.Optional["Period"]

    """ Value must have at least these property values.
    Type `Period` (represented as `dict` in JSON).
    """

    pattern_quantity: typing.Optional["Quantity"]

    """ Value must have at least these property values.
    Type `Quantity` (represented as `dict` in JSON).
    """

    pattern_range: typing.Optional["Range"]

    """ Value must have at least these property values.
    Type `Range` (represented as `dict` in JSON).
    """

    pattern_ratio: typing.Optional["Ratio"]

    """ Value must have at least these property values.
    Type `Ratio` (represented as `dict` in JSON).
    """

    pattern_reference: typing.Optional["Reference"]

    """ Value must have at least these property values.
    Type `Reference` (represented as `dict` in JSON).
    """

    pattern_sampled_data: typing.Optional["SampledData"]

    """ Value must have at least these property values.
    Type `SampledData` (represented as `dict` in JSON).
    """

    pattern_signature: typing.Optional["Signature"]

    """ Value must have at least these property values.
    Type `Signature` (represented as `dict` in JSON).
    """

    pattern_timing: typing.Optional["Timing"]

    """ Value must have at least these property values.
    Type `Timing` (represented as `dict` in JSON).
    """

    pattern_contact_detail: typing.Optional["ContactDetail"]

    """ Value must have at least these property values.
    Type `ContactDetail` (represented as `dict` in JSON).
    """

    pattern_contributor: typing.Optional["Contributor"]

    """ Value must have at least these property values.
    Type `Contributor` (represented as `dict` in JSON).
    """

    pattern_data_requirement: typing.Optional["DataRequirement"]

    """ Value must have at least these property values.
    Type `DataRequirement` (represented as `dict` in JSON).
    """

    pattern_expression: typing.Optional["Expression"]

    """ Value must have at least these property values.
    Type `Expression` (represented as `dict` in JSON).
    """

    pattern_parameter_definition: typing.Optional["ParameterDefinition"]

    """ Value must have at least these property values.
    Type `ParameterDefinition` (represented as `dict` in JSON).
    """

    pattern_related_artifact: typing.Optional["RelatedArtifact"]

    """ Value must have at least these property values.
    Type `RelatedArtifact` (represented as `dict` in JSON).
    """

    pattern_trigger_definition: typing.Optional["TriggerDefinition"]

    """ Value must have at least these property values.
    Type `TriggerDefinition` (represented as `dict` in JSON).
    """

    pattern_usage_context: typing.Optional["UsageContext"]

    """ Value must have at least these property values.
    Type `UsageContext` (represented as `dict` in JSON).
    """

    pattern_dosage: typing.Optional["Dosage"]

    """ Value must have at least these property values.
    Type `Dosage` (represented as `dict` in JSON).
    """

    pattern_meta: typing.Optional["Meta"]

    """ Value must have at least these property values.
    Type `Meta` (represented as `dict` in JSON).
    """

    example: typing.Optional[typing.List["ElementDefinitionExample"]]

    """ Example value (as defined for type).
    List of `ElementDefinitionExample` items (represented as `dict` in JSON).
    """

    min_value_date: typing.Optional[FHIRDate]

    """ Minimum Allowed Value (for some types).
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    min_value_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_min_value_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    min_value_date_time: typing.Optional[FHIRDateTime]

    """ Minimum Allowed Value (for some types).
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    min_value_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_min_value_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    min_value_instant: typing.Optional[FHIRInstant]

    """ Minimum Allowed Value (for some types).
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    min_value_instant__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_min_value_instant`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    min_value_time: typing.Optional[FHIRTime]

    """ Minimum Allowed Value (for some types).
    Type `FHIRTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    min_value_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_min_value_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    min_value_decimal: typing.Optional[decimal.Decimal]

    """ Minimum Allowed Value (for some types).
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    min_value_decimal__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_min_value_decimal`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    min_value_integer: typing.Optional[FHIRInt]

    """ Minimum Allowed Value (for some types).
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    min_value_integer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_min_value_integer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    min_value_positive_int: typing.Optional[FHIRPositiveInt]

    """ Minimum Allowed Value (for some types).
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    min_value_positive_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_min_value_positive_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    min_value_unsigned_int: typing.Optional[FHIRUnsignedInt]

    """ Minimum Allowed Value (for some types).
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    min_value_unsigned_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_min_value_unsigned_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    min_value_quantity: typing.Optional["Quantity"]

    """ Minimum Allowed Value (for some types).
    Type `Quantity` (represented as `dict` in JSON).
    """

    max_value_date: typing.Optional[FHIRDate]

    """ Maximum Allowed Value (for some types).
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    max_value_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_max_value_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    max_value_date_time: typing.Optional[FHIRDateTime]

    """ Maximum Allowed Value (for some types).
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    max_value_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_max_value_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    max_value_instant: typing.Optional[FHIRInstant]

    """ Maximum Allowed Value (for some types).
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    max_value_instant__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_max_value_instant`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    max_value_time: typing.Optional[FHIRTime]

    """ Maximum Allowed Value (for some types).
    Type `FHIRTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    max_value_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_max_value_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    max_value_decimal: typing.Optional[decimal.Decimal]

    """ Maximum Allowed Value (for some types).
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    max_value_decimal__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_max_value_decimal`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    max_value_integer: typing.Optional[FHIRInt]

    """ Maximum Allowed Value (for some types).
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    max_value_integer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_max_value_integer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    max_value_positive_int: typing.Optional[FHIRPositiveInt]

    """ Maximum Allowed Value (for some types).
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    max_value_positive_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_max_value_positive_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    max_value_unsigned_int: typing.Optional[FHIRUnsignedInt]

    """ Maximum Allowed Value (for some types).
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    max_value_unsigned_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_max_value_unsigned_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    max_value_quantity: typing.Optional["Quantity"]

    """ Maximum Allowed Value (for some types).
    Type `Quantity` (represented as `dict` in JSON).
    """

    max_length: typing.Optional[FHIRInt]

    """ Max length for strings.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    max_length__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_max_length`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    condition: typing.Optional[typing.List[typing.Optional[FHIRId]]]

    """ Reference to invariant about presence.
    List of `FHIRId` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    condition__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_condition`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    constraint: typing.Optional[typing.List["ElementDefinitionConstraint"]]

    """ Condition that must evaluate to true.
    List of `ElementDefinitionConstraint` items (represented as `dict` in JSON).
    """

    must_support: typing.Optional[bool]

    """ If the element must be supported.
    Type `bool`. Is a JSON Primitive element.
    """
    

    must_support__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_must_support`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    is_modifier: typing.Optional[bool]

    """ If this modifies the meaning of other elements.
    Type `bool`. Is a JSON Primitive element.
    """
    

    is_modifier__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_is_modifier`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    is_modifier_reason: typing.Optional[FHIRString]

    """ Reason that this element is marked as a modifier.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    is_modifier_reason__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_is_modifier_reason`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    is_summary: typing.Optional[bool]

    """ Include when _summary = true?.
    Type `bool`. Is a JSON Primitive element.
    """
    

    is_summary__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_is_summary`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    binding: typing.Optional["ElementDefinitionBinding"]

    """ ValueSet details if this is coded.
    Type `ElementDefinitionBinding` (represented as `dict` in JSON).
    """

    mapping: typing.Optional[typing.List["ElementDefinitionMapping"]]

    """ Map element to another set of definitions.
    List of `ElementDefinitionMapping` items (represented as `dict` in JSON).
    """



#   {'path': 'ElementDefinition.defaultValue[x]', 'choice_of_type': 'defaultValue', 'orig_name': 'defaultValueBase64Binary', 'name': 'defaultValueBase64Binary', 'parent_name': 'ElementDefinition', 'class_name': 'FHIRBase64Binary', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Specified value if missing from instance', 'formal': "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').", 'representation': None}
    _default_value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['default_value_base64_binary', 'default_value_boolean', 'default_value_canonical', 'default_value_code', 'default_value_date', 'default_value_date_time', 'default_value_decimal', 'default_value_id', 'default_value_instant', 'default_value_integer', 'default_value_markdown', 'default_value_oid', 'default_value_positive_int', 'default_value_string', 'default_value_time', 'default_value_unsigned_int', 'default_value_uri', 'default_value_url', 'default_value_uuid', 'default_value_address', 'default_value_age', 'default_value_annotation', 'default_value_attachment', 'default_value_codeable_concept', 'default_value_coding', 'default_value_contact_point', 'default_value_count', 'default_value_distance', 'default_value_duration', 'default_value_human_name', 'default_value_identifier', 'default_value_money', 'default_value_period', 'default_value_quantity', 'default_value_range', 'default_value_ratio', 'default_value_reference', 'default_value_sampled_data', 'default_value_signature', 'default_value_timing', 'default_value_contact_detail', 'default_value_contributor', 'default_value_data_requirement', 'default_value_expression', 'default_value_parameter_definition', 'default_value_related_artifact', 'default_value_trigger_definition', 'default_value_usage_context', 'default_value_dosage', 'default_value_meta']), True))

#   {'path': 'ElementDefinition.fixed[x]', 'choice_of_type': 'fixed', 'orig_name': 'fixedBase64Binary', 'name': 'fixedBase64Binary', 'parent_name': 'ElementDefinition', 'class_name': 'FHIRBase64Binary', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Value must be exactly this', 'formal': 'Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.', 'representation': None}
    _fixed_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['fixed_base64_binary', 'fixed_boolean', 'fixed_canonical', 'fixed_code', 'fixed_date', 'fixed_date_time', 'fixed_decimal', 'fixed_id', 'fixed_instant', 'fixed_integer', 'fixed_markdown', 'fixed_oid', 'fixed_positive_int', 'fixed_string', 'fixed_time', 'fixed_unsigned_int', 'fixed_uri', 'fixed_url', 'fixed_uuid', 'fixed_address', 'fixed_age', 'fixed_annotation', 'fixed_attachment', 'fixed_codeable_concept', 'fixed_coding', 'fixed_contact_point', 'fixed_count', 'fixed_distance', 'fixed_duration', 'fixed_human_name', 'fixed_identifier', 'fixed_money', 'fixed_period', 'fixed_quantity', 'fixed_range', 'fixed_ratio', 'fixed_reference', 'fixed_sampled_data', 'fixed_signature', 'fixed_timing', 'fixed_contact_detail', 'fixed_contributor', 'fixed_data_requirement', 'fixed_expression', 'fixed_parameter_definition', 'fixed_related_artifact', 'fixed_trigger_definition', 'fixed_usage_context', 'fixed_dosage', 'fixed_meta']), True))

#   {'path': 'ElementDefinition.pattern[x]', 'choice_of_type': 'pattern', 'orig_name': 'patternBase64Binary', 'name': 'patternBase64Binary', 'parent_name': 'ElementDefinition', 'class_name': 'FHIRBase64Binary', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Value must have at least these property values', 'formal': 'Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.', 'representation': None}
    _pattern_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['pattern_base64_binary', 'pattern_boolean', 'pattern_canonical', 'pattern_code', 'pattern_date', 'pattern_date_time', 'pattern_decimal', 'pattern_id', 'pattern_instant', 'pattern_integer', 'pattern_markdown', 'pattern_oid', 'pattern_positive_int', 'pattern_string', 'pattern_time', 'pattern_unsigned_int', 'pattern_uri', 'pattern_url', 'pattern_uuid', 'pattern_address', 'pattern_age', 'pattern_annotation', 'pattern_attachment', 'pattern_codeable_concept', 'pattern_coding', 'pattern_contact_point', 'pattern_count', 'pattern_distance', 'pattern_duration', 'pattern_human_name', 'pattern_identifier', 'pattern_money', 'pattern_period', 'pattern_quantity', 'pattern_range', 'pattern_ratio', 'pattern_reference', 'pattern_sampled_data', 'pattern_signature', 'pattern_timing', 'pattern_contact_detail', 'pattern_contributor', 'pattern_data_requirement', 'pattern_expression', 'pattern_parameter_definition', 'pattern_related_artifact', 'pattern_trigger_definition', 'pattern_usage_context', 'pattern_dosage', 'pattern_meta']), True))

#   {'path': 'ElementDefinition.minValue[x]', 'choice_of_type': 'minValue', 'orig_name': 'minValueDate', 'name': 'minValueDate', 'parent_name': 'ElementDefinition', 'class_name': 'FHIRDate', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Minimum Allowed Value (for some types)', 'formal': 'The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.', 'representation': None}
    _min_value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['min_value_date', 'min_value_date_time', 'min_value_instant', 'min_value_time', 'min_value_decimal', 'min_value_integer', 'min_value_positive_int', 'min_value_unsigned_int', 'min_value_quantity']), True))

#   {'path': 'ElementDefinition.maxValue[x]', 'choice_of_type': 'maxValue', 'orig_name': 'maxValueDate', 'name': 'maxValueDate', 'parent_name': 'ElementDefinition', 'class_name': 'FHIRDate', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Maximum Allowed Value (for some types)', 'formal': 'The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.', 'representation': None}
    _max_value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['max_value_date', 'max_value_date_time', 'max_value_instant', 'max_value_time', 'max_value_decimal', 'max_value_integer', 'max_value_positive_int', 'max_value_unsigned_int', 'max_value_quantity']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["representation"]["enum"]
            enums.clear()
            for item in PropertyRepresentation:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_path = get_primitive_field_root_validator("path")
    
    _validate_primitive_representation = get_primitive_field_root_validator("representation")
    
    _validate_primitive_slice_name = get_primitive_field_root_validator("slice_name")
    
    _validate_primitive_slice_is_constraining = get_primitive_field_root_validator("slice_is_constraining")
    
    _validate_primitive_label = get_primitive_field_root_validator("label")
    
    _validate_primitive_short = get_primitive_field_root_validator("short")
    
    _validate_primitive_definition = get_primitive_field_root_validator("definition")
    
    _validate_primitive_comment = get_primitive_field_root_validator("comment")
    
    _validate_primitive_requirements = get_primitive_field_root_validator("requirements")
    
    _validate_primitive_alias = get_primitive_field_root_validator("alias")
    
    _validate_primitive_min = get_primitive_field_root_validator("min")
    
    _validate_primitive_max = get_primitive_field_root_validator("max")
    
    _validate_primitive_content_reference = get_primitive_field_root_validator("content_reference")
    
    _validate_primitive_default_value_base64_binary = get_primitive_field_root_validator("default_value_base64_binary")
    
    _validate_primitive_default_value_boolean = get_primitive_field_root_validator("default_value_boolean")
    
    _validate_primitive_default_value_canonical = get_primitive_field_root_validator("default_value_canonical")
    
    _validate_primitive_default_value_code = get_primitive_field_root_validator("default_value_code")
    
    _validate_primitive_default_value_date = get_primitive_field_root_validator("default_value_date")
    
    _validate_primitive_default_value_date_time = get_primitive_field_root_validator("default_value_date_time")
    
    _validate_primitive_default_value_decimal = get_primitive_field_root_validator("default_value_decimal")
    
    _validate_primitive_default_value_id = get_primitive_field_root_validator("default_value_id")
    
    _validate_primitive_default_value_instant = get_primitive_field_root_validator("default_value_instant")
    
    _validate_primitive_default_value_integer = get_primitive_field_root_validator("default_value_integer")
    
    _validate_primitive_default_value_markdown = get_primitive_field_root_validator("default_value_markdown")
    
    _validate_primitive_default_value_oid = get_primitive_field_root_validator("default_value_oid")
    
    _validate_primitive_default_value_positive_int = get_primitive_field_root_validator("default_value_positive_int")
    
    _validate_primitive_default_value_string = get_primitive_field_root_validator("default_value_string")
    
    _validate_primitive_default_value_time = get_primitive_field_root_validator("default_value_time")
    
    _validate_primitive_default_value_unsigned_int = get_primitive_field_root_validator("default_value_unsigned_int")
    
    _validate_primitive_default_value_uri = get_primitive_field_root_validator("default_value_uri")
    
    _validate_primitive_default_value_url = get_primitive_field_root_validator("default_value_url")
    
    _validate_primitive_default_value_uuid = get_primitive_field_root_validator("default_value_uuid")
    
    _validate_primitive_meaning_when_missing = get_primitive_field_root_validator("meaning_when_missing")
    
    _validate_primitive_order_meaning = get_primitive_field_root_validator("order_meaning")
    
    _validate_primitive_fixed_base64_binary = get_primitive_field_root_validator("fixed_base64_binary")
    
    _validate_primitive_fixed_boolean = get_primitive_field_root_validator("fixed_boolean")
    
    _validate_primitive_fixed_canonical = get_primitive_field_root_validator("fixed_canonical")
    
    _validate_primitive_fixed_code = get_primitive_field_root_validator("fixed_code")
    
    _validate_primitive_fixed_date = get_primitive_field_root_validator("fixed_date")
    
    _validate_primitive_fixed_date_time = get_primitive_field_root_validator("fixed_date_time")
    
    _validate_primitive_fixed_decimal = get_primitive_field_root_validator("fixed_decimal")
    
    _validate_primitive_fixed_id = get_primitive_field_root_validator("fixed_id")
    
    _validate_primitive_fixed_instant = get_primitive_field_root_validator("fixed_instant")
    
    _validate_primitive_fixed_integer = get_primitive_field_root_validator("fixed_integer")
    
    _validate_primitive_fixed_markdown = get_primitive_field_root_validator("fixed_markdown")
    
    _validate_primitive_fixed_oid = get_primitive_field_root_validator("fixed_oid")
    
    _validate_primitive_fixed_positive_int = get_primitive_field_root_validator("fixed_positive_int")
    
    _validate_primitive_fixed_string = get_primitive_field_root_validator("fixed_string")
    
    _validate_primitive_fixed_time = get_primitive_field_root_validator("fixed_time")
    
    _validate_primitive_fixed_unsigned_int = get_primitive_field_root_validator("fixed_unsigned_int")
    
    _validate_primitive_fixed_uri = get_primitive_field_root_validator("fixed_uri")
    
    _validate_primitive_fixed_url = get_primitive_field_root_validator("fixed_url")
    
    _validate_primitive_fixed_uuid = get_primitive_field_root_validator("fixed_uuid")
    
    _validate_primitive_pattern_base64_binary = get_primitive_field_root_validator("pattern_base64_binary")
    
    _validate_primitive_pattern_boolean = get_primitive_field_root_validator("pattern_boolean")
    
    _validate_primitive_pattern_canonical = get_primitive_field_root_validator("pattern_canonical")
    
    _validate_primitive_pattern_code = get_primitive_field_root_validator("pattern_code")
    
    _validate_primitive_pattern_date = get_primitive_field_root_validator("pattern_date")
    
    _validate_primitive_pattern_date_time = get_primitive_field_root_validator("pattern_date_time")
    
    _validate_primitive_pattern_decimal = get_primitive_field_root_validator("pattern_decimal")
    
    _validate_primitive_pattern_id = get_primitive_field_root_validator("pattern_id")
    
    _validate_primitive_pattern_instant = get_primitive_field_root_validator("pattern_instant")
    
    _validate_primitive_pattern_integer = get_primitive_field_root_validator("pattern_integer")
    
    _validate_primitive_pattern_markdown = get_primitive_field_root_validator("pattern_markdown")
    
    _validate_primitive_pattern_oid = get_primitive_field_root_validator("pattern_oid")
    
    _validate_primitive_pattern_positive_int = get_primitive_field_root_validator("pattern_positive_int")
    
    _validate_primitive_pattern_string = get_primitive_field_root_validator("pattern_string")
    
    _validate_primitive_pattern_time = get_primitive_field_root_validator("pattern_time")
    
    _validate_primitive_pattern_unsigned_int = get_primitive_field_root_validator("pattern_unsigned_int")
    
    _validate_primitive_pattern_uri = get_primitive_field_root_validator("pattern_uri")
    
    _validate_primitive_pattern_url = get_primitive_field_root_validator("pattern_url")
    
    _validate_primitive_pattern_uuid = get_primitive_field_root_validator("pattern_uuid")
    
    _validate_primitive_min_value_date = get_primitive_field_root_validator("min_value_date")
    
    _validate_primitive_min_value_date_time = get_primitive_field_root_validator("min_value_date_time")
    
    _validate_primitive_min_value_instant = get_primitive_field_root_validator("min_value_instant")
    
    _validate_primitive_min_value_time = get_primitive_field_root_validator("min_value_time")
    
    _validate_primitive_min_value_decimal = get_primitive_field_root_validator("min_value_decimal")
    
    _validate_primitive_min_value_integer = get_primitive_field_root_validator("min_value_integer")
    
    _validate_primitive_min_value_positive_int = get_primitive_field_root_validator("min_value_positive_int")
    
    _validate_primitive_min_value_unsigned_int = get_primitive_field_root_validator("min_value_unsigned_int")
    
    _validate_primitive_max_value_date = get_primitive_field_root_validator("max_value_date")
    
    _validate_primitive_max_value_date_time = get_primitive_field_root_validator("max_value_date_time")
    
    _validate_primitive_max_value_instant = get_primitive_field_root_validator("max_value_instant")
    
    _validate_primitive_max_value_time = get_primitive_field_root_validator("max_value_time")
    
    _validate_primitive_max_value_decimal = get_primitive_field_root_validator("max_value_decimal")
    
    _validate_primitive_max_value_integer = get_primitive_field_root_validator("max_value_integer")
    
    _validate_primitive_max_value_positive_int = get_primitive_field_root_validator("max_value_positive_int")
    
    _validate_primitive_max_value_unsigned_int = get_primitive_field_root_validator("max_value_unsigned_int")
    
    _validate_primitive_max_length = get_primitive_field_root_validator("max_length")
    
    _validate_primitive_condition = get_primitive_field_root_validator("condition")
    
    _validate_primitive_must_support = get_primitive_field_root_validator("must_support")
    
    _validate_primitive_is_modifier = get_primitive_field_root_validator("is_modifier")
    
    _validate_primitive_is_modifier_reason = get_primitive_field_root_validator("is_modifier_reason")
    
    _validate_primitive_is_summary = get_primitive_field_root_validator("is_summary")
    


class MarketingStatus(BackboneElement):
    """ The marketing status describes the date when a medicinal product is
    actually put on the market or the date as of which it is no longer
    available.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MarketingStatus",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    country: "CodeableConcept"

    """ The country in which the marketing authorisation has been granted
        shall be specified It should be specified using the ISO 3166 ‑ 1
        alpha-2 code elements.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional["CodeableConcept"]

    """ Where a Medicines Regulatory Agency has granted a marketing
        authorisation for which specific provisions within a jurisdiction
        apply, the jurisdiction can be specified using an appropriate
        controlled terminology The controlled term and the controlled term
        identifier shall be specified.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    status: "CodeableConcept"

    """ This attribute provides information on the status of the marketing
        of the medicinal product See ISO/TS 20443 for more information and
        examples.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    date_range: "Period"

    """ The date when the Medicinal Product is placed on the market by the
        Marketing Authorisation Holder (or where applicable, the
        manufacturer/distributor) in a country and/or jurisdiction shall be
        provided A complete date consisting of day, month and year shall be
        specified using the ISO 8601 date format NOTE “Placed on the
        market” refers to the release of the Medicinal Product into the
        distribution chain.
    Type `Period` (represented as `dict` in JSON).
    """

    restore_date: typing.Optional[FHIRDateTime]

    """ The date when the Medicinal Product is placed on the market by the
        Marketing Authorisation Holder (or where applicable, the
        manufacturer/distributor) in a country and/or jurisdiction shall be
        provided A complete date consisting of day, month and year shall be
        specified using the ISO 8601 date format NOTE “Placed on the
        market” refers to the release of the Medicinal Product into the
        distribution chain.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    restore_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_restore_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_restore_date = get_primitive_field_root_validator("restore_date")
    


class Population(BackboneElement):
    """ A definition of a set of people that apply to some clinically related
    context, for example people contraindicated for a certain medication.

    A populatioof people with some set of grouping criteria.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Population",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    age_range: typing.Optional["Range"]

    """ The age of the specific population.
    Type `Range` (represented as `dict` in JSON).
    """

    age_codeable_concept: typing.Optional["CodeableConcept"]

    """ The age of the specific population.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    gender: typing.Optional["CodeableConcept"]

    """ The gender of the specific population.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    race: typing.Optional["CodeableConcept"]

    """ Race of the specific population.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    physiological_condition: typing.Optional["CodeableConcept"]

    """ The existing physiological conditions of the specific population to
        which this applies.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """



#   {'path': 'Population.age[x]', 'choice_of_type': 'age', 'orig_name': 'ageRange', 'name': 'ageRange', 'parent_name': 'Population', 'class_name': 'Range', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'The age of the specific population', 'formal': None, 'representation': None}
    _age_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['age_range', 'age_codeable_concept']), True))


class ProdCharacteristic(BackboneElement):
    """ The marketing status describes the date when a medicinal product is
    actually put on the market or the date as of which it is no longer
    available.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ProdCharacteristic",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    height: typing.Optional["Quantity"]

    """ Where applicable, the height can be specified using a numerical
        value and its unit of measurement The unit of measurement shall be
        specified in accordance with ISO 11240 and the resulting
        terminology The symbol and the symbol identifier shall be used.
    Type `Quantity` (represented as `dict` in JSON).
    """

    width: typing.Optional["Quantity"]

    """ Where applicable, the width can be specified using a numerical
        value and its unit of measurement The unit of measurement shall be
        specified in accordance with ISO 11240 and the resulting
        terminology The symbol and the symbol identifier shall be used.
    Type `Quantity` (represented as `dict` in JSON).
    """

    depth: typing.Optional["Quantity"]

    """ Where applicable, the depth can be specified using a numerical
        value and its unit of measurement The unit of measurement shall be
        specified in accordance with ISO 11240 and the resulting
        terminology The symbol and the symbol identifier shall be used.
    Type `Quantity` (represented as `dict` in JSON).
    """

    weight: typing.Optional["Quantity"]

    """ Where applicable, the weight can be specified using a numerical
        value and its unit of measurement The unit of measurement shall be
        specified in accordance with ISO 11240 and the resulting
        terminology The symbol and the symbol identifier shall be used.
    Type `Quantity` (represented as `dict` in JSON).
    """

    nominal_volume: typing.Optional["Quantity"]

    """ Where applicable, the nominal volume can be specified using a
        numerical value and its unit of measurement The unit of measurement
        shall be specified in accordance with ISO 11240 and the resulting
        terminology The symbol and the symbol identifier shall be used.
    Type `Quantity` (represented as `dict` in JSON).
    """

    external_diameter: typing.Optional["Quantity"]

    """ Where applicable, the external diameter can be specified using a
        numerical value and its unit of measurement The unit of measurement
        shall be specified in accordance with ISO 11240 and the resulting
        terminology The symbol and the symbol identifier shall be used.
    Type `Quantity` (represented as `dict` in JSON).
    """

    shape: typing.Optional[FHIRString]

    """ Where applicable, the shape can be specified An appropriate
        controlled vocabulary shall be used The term and the term
        identifier shall be used.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    shape__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_shape`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    color: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Where applicable, the color can be specified An appropriate
        controlled vocabulary shall be used The term and the term
        identifier shall be used.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    color__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_color`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    imprint: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Where applicable, the imprint can be specified as text.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    imprint__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_imprint`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    image: typing.Optional[typing.List["Attachment"]]

    """ Where applicable, the image can be provided The format of the image
        attachment shall be specified by regional implementations.
    List of `Attachment` items (represented as `dict` in JSON).
    """

    scoring: typing.Optional["CodeableConcept"]

    """ Where applicable, the scoring can be specified An appropriate
        controlled vocabulary shall be used The term and the term
        identifier shall be used.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """



    _validate_primitive_shape = get_primitive_field_root_validator("shape")
    
    _validate_primitive_color = get_primitive_field_root_validator("color")
    
    _validate_primitive_imprint = get_primitive_field_root_validator("imprint")
    


class ProductShelfLife(BackboneElement):
    """ The shelf-life and storage information for a medicinal product item or
    container can be described using this class.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ProductShelfLife",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional["Identifier"]

    """ Unique identifier for the packaged Medicinal Product.
    Type `Identifier` (represented as `dict` in JSON).
    """

    type: "CodeableConcept"

    """ This describes the shelf life, taking into account various
        scenarios such as shelf life of the packaged Medicinal Product
        itself, shelf life after transformation where necessary and shelf
        life after the first opening of a bottle, etc. The shelf life type
        shall be specified using an appropriate controlled vocabulary The
        controlled term and the controlled term identifier shall be
        specified.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    period: "Quantity"

    """ The shelf life time period can be specified using a numerical value
        for the period of time and its unit of time measurement The unit of
        measurement shall be specified in accordance with ISO 11240 and the
        resulting terminology The symbol and the symbol identifier shall be
        used.
    Type `Quantity` (represented as `dict` in JSON).
    """

    special_precautions_for_storage: typing.Optional[typing.List["CodeableConcept"]]

    """ Special precautions for storage, if any, can be specified using an
        appropriate controlled vocabulary The controlled term and the
        controlled term identifier shall be specified.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """




class SubstanceAmount(BackboneElement):
    """ Chemical substances are a single substance type whose primary defining
    element is the molecular structure. Chemical substances shall be defined on
    the basis of their complete covalent molecular structure; the presence of a
    salt (counter-ion) and/or solvates (water, alcohols) is also captured.
    Purity, grade, physical form or particle size are not taken into account in
    the definition of a chemical substance or in the assignment of a Substance
    ID.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceAmount",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    amount_quantity: typing.Optional["Quantity"]

    """ Used to capture quantitative values for a variety of elements. If
        only limits are given, the arithmetic mean would be the average. If
        only a single definite value for a given element is given, it would
        be captured in this field.
    Type `Quantity` (represented as `dict` in JSON).
    """

    amount_range: typing.Optional["Range"]

    """ Used to capture quantitative values for a variety of elements. If
        only limits are given, the arithmetic mean would be the average. If
        only a single definite value for a given element is given, it would
        be captured in this field.
    Type `Range` (represented as `dict` in JSON).
    """

    amount_string: typing.Optional[FHIRString]

    """ Used to capture quantitative values for a variety of elements. If
        only limits are given, the arithmetic mean would be the average. If
        only a single definite value for a given element is given, it would
        be captured in this field.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    amount_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_amount_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    amount_type: typing.Optional["CodeableConcept"]

    """ Most elements that require a quantitative value will also have a
        field called amount type. Amount type should always be specified
        because the actual value of the amount is often dependent on it.
        EXAMPLE: In capturing the actual relative amounts of substances or
        molecular fragments it is essential to indicate whether the amount
        refers to a mole ratio or weight ratio. For any given element an
        effort should be made to use same the amount type for all related
        definitional elements.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    amount_text: typing.Optional[FHIRString]

    """ A textual comment on a numeric value.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    amount_text__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_amount_text`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    reference_range: typing.Optional["SubstanceAmountReferenceRange"]

    """ Reference range of possible or expected values.
    Type `SubstanceAmountReferenceRange` (represented as `dict` in JSON).
    """



#   {'path': 'SubstanceAmount.amount[x]', 'choice_of_type': 'amount', 'orig_name': 'amountQuantity', 'name': 'amountQuantity', 'parent_name': 'SubstanceAmount', 'class_name': 'Quantity', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field', 'formal': None, 'representation': None}
    _amount_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['amount_quantity', 'amount_range', 'amount_string']), True))

    _validate_primitive_amount_string = get_primitive_field_root_validator("amount_string")
    
    _validate_primitive_amount_text = get_primitive_field_root_validator("amount_text")
    


class Timing(BackboneElement):
    """ A timing schedule that specifies an event that may occur multiple times.

    Specifies an event that may occur multiple times. Timing schedules are used
    to record when things are planned, expected or requested to occur. The most
    common usage is in dosage instructions for medications. They are also used
    when planning care of various kinds, and may be used for reporting the
    schedule to which past regular activities were carried out.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Timing",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    event: typing.Optional[typing.List[typing.Optional[FHIRDateTime]]]

    """ When the event occurs.
    List of `FHIRDateTime` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    event__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_event`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    repeat: typing.Optional["TimingRepeat"]

    """ When the event is to occur.
    Type `TimingRepeat` (represented as `dict` in JSON).
    """

    code: typing.Optional["CodeableConcept"]

    """ BID | TID | QID | AM | PM | QD | QOD | +.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """



    _validate_primitive_event = get_primitive_field_root_validator("event")
    


class AccountCoverage(BackboneElement):
    """ The party(s) that are responsible for covering the payment of this account,
    and what order should they be applied to the account.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Account",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    coverage: "Reference"

    """ The party(s), such as insurances, that may contribute to the
        payment of this account.
    Type `Reference` (represented as `dict` in JSON).
    """

    priority: typing.Optional[FHIRPositiveInt]

    """ The priority of the coverage in the context of this account.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    priority__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_priority`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_priority = get_primitive_field_root_validator("priority")
    


class AccountGuarantor(BackboneElement):
    """ The parties ultimately responsible for balancing the Account.

    The parties responsible for balancing the account if other payment options
    fall short.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Account",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    party: "Reference"

    """ Responsible entity.
    Type `Reference` (represented as `dict` in JSON).
    """

    on_hold: typing.Optional[bool]

    """ Credit or other hold applied.
    Type `bool`. Is a JSON Primitive element.
    """
    

    on_hold__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_on_hold`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    period: typing.Optional["Period"]

    """ Guarantee account during.
    Type `Period` (represented as `dict` in JSON).
    """



    _validate_primitive_on_hold = get_primitive_field_root_validator("on_hold")
    


class ActivityDefinitionParticipant(BackboneElement):
    """ Who should participate in the action.

    Indicates who should participate in performing the action described.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ActivityDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    type: "ActionParticipantType"

    """ patient | practitioner | related-person | device.
    Type `ActionParticipantType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    role: typing.Optional["CodeableConcept"]

    """ E.g. Nurse, Surgeon, Parent, etc..
    Type `CodeableConcept` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in ActionParticipantType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_type = get_primitive_field_root_validator("type")
    


class ActivityDefinitionDynamicValue(BackboneElement):
    """ Dynamic aspects of the definition.

    Dynamic values that will be evaluated to produce values for elements of the
    resulting resource. For example, if the dosage of a medication must be
    computed based on the patient's weight, a dynamic value would be used to
    specify an expression that calculated the weight, and the path on the
    request resource that would contain the result.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ActivityDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    path: FHIRRequiredString

    """ The path to the element to be set dynamically.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    path__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_path`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    expression: "Expression"

    """ An expression that provides the dynamic value for the customization.
    Type `Expression` (represented as `dict` in JSON).
    """



    _validate_primitive_path = get_primitive_field_root_validator("path")
    


class AdverseEventSuspectEntity(BackboneElement):
    """ The suspected agent causing the adverse event.

    Describes the entity that is suspected to have caused the adverse event.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/AdverseEvent",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    instance: "Reference"

    """ Refers to the specific entity that caused the adverse event.
    Type `Reference` (represented as `dict` in JSON).
    """

    causality: typing.Optional[typing.List["AdverseEventSuspectEntityCausality"]]

    """ Information on the possible cause of the event.
    List of `AdverseEventSuspectEntityCausality` items (represented as `dict` in JSON).
    """




class AdverseEventSuspectEntityCausality(BackboneElement):
    """ Information on the possible cause of the event.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/AdverseEvent",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    assessment: typing.Optional["CodeableConcept"]

    """ Assessment of if the entity caused the event.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    product_relatedness: typing.Optional[FHIRString]

    """ AdverseEvent.suspectEntity.causalityProductRelatedness.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    product_relatedness__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_product_relatedness`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    author: typing.Optional["Reference"]

    """ AdverseEvent.suspectEntity.causalityAuthor.
    Type `Reference` (represented as `dict` in JSON).
    """

    method: typing.Optional["CodeableConcept"]

    """ ProbabilityScale | Bayesian | Checklist.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """



    _validate_primitive_product_relatedness = get_primitive_field_root_validator("product_relatedness")
    


class AllergyIntoleranceReaction(BackboneElement):
    """ Adverse Reaction Events linked to exposure to substance.

    Details about each adverse reaction event linked to exposure to the
    identified substance.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/AllergyIntolerance",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    substance: typing.Optional["CodeableConcept"]

    """ Specific substance or pharmaceutical product considered to be
        responsible for event.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    manifestation: typing.List["CodeableConcept"]

    """ Clinical symptoms/signs associated with the Event.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Description of the event as a whole.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    onset: typing.Optional[FHIRDateTime]

    """ Date(/time) when manifestations showed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    onset__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_onset`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    severity: typing.Optional["AllergyIntoleranceSeverity"]

    """ mild | moderate | severe (of event as a whole).
    Type `AllergyIntoleranceSeverity` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    severity__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_severity`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    exposure_route: typing.Optional["CodeableConcept"]

    """ How the subject was exposed to the substance.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Text about event not captured in other fields.
    List of `Annotation` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["severity"]["enum"]
            enums.clear()
            for item in AllergyIntoleranceSeverity:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_onset = get_primitive_field_root_validator("onset")
    
    _validate_primitive_severity = get_primitive_field_root_validator("severity")
    


class AppointmentParticipant(BackboneElement):
    """ Participants involved in appointment.

    List of participants involved in the appointment.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Appointment",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: typing.Optional[typing.List["CodeableConcept"]]

    """ Role of participant in the appointment.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    actor: typing.Optional["Reference"]

    """ Person, Location/HealthcareService or Device.
    Type `Reference` (represented as `dict` in JSON).
    """

            
    
    
    required: typing.Optional["ParticipantRequired"]

    """ required | optional | information-only.
    Type `ParticipantRequired` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    required__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_required`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    status: "ParticipationStatus"

    """ accepted | declined | tentative | needs-action.
    Type `ParticipationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    period: typing.Optional["Period"]

    """ Participation period of the actor.
    Type `Period` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["required"]["enum"]
            enums.clear()
            for item in ParticipantRequired:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in ParticipationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_required = get_primitive_field_root_validator("required")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    


class AuditEventAgent(BackboneElement):
    """ Actor involved in the event.

    An actor taking an active role in the event or activity that is logged.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/AuditEvent",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: typing.Optional["CodeableConcept"]

    """ How agent participated.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    role: typing.Optional[typing.List["CodeableConcept"]]

    """ Agent role in the event.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    who: typing.Optional["Reference"]

    """ Identifier of who.
    Type `Reference` (represented as `dict` in JSON).
    """

    alt_id: typing.Optional[FHIRString]

    """ Alternative User identity.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    alt_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_alt_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Human friendly name for the agent.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    requestor: bool

    """ Whether user is initiator.
    Type `bool`. Is a JSON Primitive element.
    """
    

    requestor__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_requestor`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    location: typing.Optional["Reference"]

    """ Where.
    Type `Reference` (represented as `dict` in JSON).
    """

    policy: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Policy that authorized event.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    policy__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_policy`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    media: typing.Optional["Coding"]

    """ Type of media.
    Type `Coding` (represented as `dict` in JSON).
    """

    network: typing.Optional["AuditEventAgentNetwork"]

    """ Logical network location for application activity.
    Type `AuditEventAgentNetwork` (represented as `dict` in JSON).
    """

    purpose_of_use: typing.Optional[typing.List["CodeableConcept"]]

    """ Reason given for this user.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """



    _validate_primitive_alt_id = get_primitive_field_root_validator("alt_id")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_requestor = get_primitive_field_root_validator("requestor")
    
    _validate_primitive_policy = get_primitive_field_root_validator("policy")
    


class AuditEventAgentNetwork(BackboneElement):
    """ Logical network location for application activity.

    Logical network location for application activity, if the activity has a
    network location.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/AuditEvent",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    address: typing.Optional[FHIRString]

    """ Identifier for the network access point of the user device.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    address__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_address`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    
    
    type: typing.Optional["FHIRCode"]

    """ The type of network access point.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_address = get_primitive_field_root_validator("address")
    
    _validate_primitive_type = get_primitive_field_root_validator("type")
    


class AuditEventSource(BackboneElement):
    """ Audit Event Reporter.

    The system that is reporting the event.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/AuditEvent",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    site: typing.Optional[FHIRString]

    """ Logical source location within the enterprise.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    site__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_site`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    observer: "Reference"

    """ The identity of source detecting the event.
    Type `Reference` (represented as `dict` in JSON).
    """

    type: typing.Optional[typing.List["Coding"]]

    """ The type of source where event originated.
    List of `Coding` items (represented as `dict` in JSON).
    """



    _validate_primitive_site = get_primitive_field_root_validator("site")
    


class AuditEventEntity(BackboneElement):
    """ Data or objects used.

    Specific instances of data or objects that have been accessed.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/AuditEvent",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    what: typing.Optional["Reference"]

    """ Specific instance of resource.
    Type `Reference` (represented as `dict` in JSON).
    """

    type: typing.Optional["Coding"]

    """ Type of entity involved.
    Type `Coding` (represented as `dict` in JSON).
    """

    role: typing.Optional["Coding"]

    """ What role the entity played.
    Type `Coding` (represented as `dict` in JSON).
    """

    lifecycle: typing.Optional["Coding"]

    """ Life-cycle stage for the entity.
    Type `Coding` (represented as `dict` in JSON).
    """

    security_label: typing.Optional[typing.List["Coding"]]

    """ Security labels on the entity.
    List of `Coding` items (represented as `dict` in JSON).
    """

    name: typing.Optional[FHIRString]

    """ Descriptor for entity.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ Descriptive text.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    query: typing.Optional[FHIRBase64Binary]

    """ Query parameters.
    Type `FHIRBase64Binary` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    query__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_query`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    detail: typing.Optional[typing.List["AuditEventEntityDetail"]]

    """ Additional Information about the entity.
    List of `AuditEventEntityDetail` items (represented as `dict` in JSON).
    """



    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_query = get_primitive_field_root_validator("query")
    


class AuditEventEntityDetail(BackboneElement):
    """ Additional Information about the entity.

    Tagged value pairs for conveying additional information about the entity.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/AuditEvent",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: FHIRRequiredString

    """ Name of the property.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_string: typing.Optional[FHIRString]

    """ Property value.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_base64_binary: typing.Optional[FHIRBase64Binary]

    """ Property value.
    Type `FHIRBase64Binary` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_base64_binary__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_base64_binary`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'AuditEvent.entity.detail.value[x]', 'choice_of_type': 'value', 'orig_name': 'valueString', 'name': 'valueString', 'parent_name': 'AuditEvent.entity.detail', 'class_name': 'FHIRString', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Property value', 'formal': 'The  value of the extra detail.', 'representation': None}
    _value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['value_string', 'value_base64_binary']), False))

    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_value_string = get_primitive_field_root_validator("value_string")
    
    _validate_primitive_value_base64_binary = get_primitive_field_root_validator("value_base64_binary")
    


class BiologicallyDerivedProductCollection(BackboneElement):
    """ How this product was collected.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/BiologicallyDerivedProduct",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    collector: typing.Optional["Reference"]

    """ Individual performing collection.
    Type `Reference` (represented as `dict` in JSON).
    """

    source: typing.Optional["Reference"]

    """ Who is product from.
    Type `Reference` (represented as `dict` in JSON).
    """

    collected_date_time: typing.Optional[FHIRDateTime]

    """ Time of product collection.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    collected_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_collected_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    collected_period: typing.Optional["Period"]

    """ Time of product collection.
    Type `Period` (represented as `dict` in JSON).
    """



#   {'path': 'BiologicallyDerivedProduct.collection.collected[x]', 'choice_of_type': 'collected', 'orig_name': 'collectedDateTime', 'name': 'collectedDateTime', 'parent_name': 'BiologicallyDerivedProduct.collection', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Time of product collection', 'formal': None, 'representation': None}
    _collected_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['collected_date_time', 'collected_period']), True))

    _validate_primitive_collected_date_time = get_primitive_field_root_validator("collected_date_time")
    


class BiologicallyDerivedProductProcessing(BackboneElement):
    """ Any processing of the product during collection.

    Any processing of the product during collection that does not change the
    fundamental nature of the product. For example adding anti-coagulants
    during the collection of Peripheral Blood Stem Cells.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/BiologicallyDerivedProduct",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    description: typing.Optional[FHIRString]

    """ Description of of processing.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    procedure: typing.Optional["CodeableConcept"]

    """ Procesing code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    additive: typing.Optional["Reference"]

    """ Substance added during processing.
    Type `Reference` (represented as `dict` in JSON).
    """

    time_date_time: typing.Optional[FHIRDateTime]

    """ Time of processing.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    time_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_time_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    time_period: typing.Optional["Period"]

    """ Time of processing.
    Type `Period` (represented as `dict` in JSON).
    """



#   {'path': 'BiologicallyDerivedProduct.processing.time[x]', 'choice_of_type': 'time', 'orig_name': 'timeDateTime', 'name': 'timeDateTime', 'parent_name': 'BiologicallyDerivedProduct.processing', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Time of processing', 'formal': None, 'representation': None}
    _time_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['time_date_time', 'time_period']), True))

    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_time_date_time = get_primitive_field_root_validator("time_date_time")
    


class BiologicallyDerivedProductManipulation(BackboneElement):
    """ Any manipulation of product post-collection.

    Any manipulation of product post-collection that is intended to alter the
    product.  For example a buffy-coat enrichment or CD8 reduction of
    Peripheral Blood Stem Cells to make it more suitable for infusion.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/BiologicallyDerivedProduct",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    description: typing.Optional[FHIRString]

    """ Description of manipulation.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    time_date_time: typing.Optional[FHIRDateTime]

    """ Time of manipulation.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    time_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_time_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    time_period: typing.Optional["Period"]

    """ Time of manipulation.
    Type `Period` (represented as `dict` in JSON).
    """



#   {'path': 'BiologicallyDerivedProduct.manipulation.time[x]', 'choice_of_type': 'time', 'orig_name': 'timeDateTime', 'name': 'timeDateTime', 'parent_name': 'BiologicallyDerivedProduct.manipulation', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Time of manipulation', 'formal': None, 'representation': None}
    _time_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['time_date_time', 'time_period']), True))

    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_time_date_time = get_primitive_field_root_validator("time_date_time")
    


class BiologicallyDerivedProductStorage(BackboneElement):
    """ Product storage.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/BiologicallyDerivedProduct",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    description: typing.Optional[FHIRString]

    """ Description of storage.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    temperature: typing.Optional[decimal.Decimal]

    """ Storage temperature.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    temperature__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_temperature`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    scale: typing.Optional["BiologicallyDerivedProductStorageScale"]

    """ farenheit | celsius | kelvin.
    Type `BiologicallyDerivedProductStorageScale` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    scale__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_scale`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    duration: typing.Optional["Period"]

    """ Storage timeperiod.
    Type `Period` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["scale"]["enum"]
            enums.clear()
            for item in BiologicallyDerivedProductStorageScale:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_temperature = get_primitive_field_root_validator("temperature")
    
    _validate_primitive_scale = get_primitive_field_root_validator("scale")
    


class BundleLink(BackboneElement):
    """ Links related to this Bundle.

    A series of links that provide context to this bundle.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Bundle",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    relation: FHIRRequiredString

    """ See http://www.iana.org/assignments/link-relations/link-
        relations.xhtml#link-relations-1.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    relation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_relation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    url: FHIRRequiredString

    """ Reference details for the link.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_relation = get_primitive_field_root_validator("relation")
    
    _validate_primitive_url = get_primitive_field_root_validator("url")
    


class BundleEntry(BackboneElement):
    """ Entry in the bundle - will have a resource or information.

    An entry in a bundle resource - will either contain a resource or
    information about a resource (transactions and history only).
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Bundle",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    link: typing.Optional[typing.List["BundleLink"]]

    """ Links related to this entry.
    List of `BundleLink` items (represented as `dict` in JSON).
    """

    full_url: typing.Optional[FHIRString]

    """ URI for resource (Absolute URL server address or URI for UUID/OID).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    full_url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_full_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    resource: typing.Optional["Resource"]

    """ A resource in the bundle.
    Type `Resource` (represented as `dict` in JSON).
    """
    @pydantic.validator("resource", pre=True,  each_item=True)
    def resource_factory(cls, value):
        if isinstance(value, Resource):
            return value
        return from_dict(value)

    search: typing.Optional["BundleEntrySearch"]

    """ Search related information.
    Type `BundleEntrySearch` (represented as `dict` in JSON).
    """

    request: typing.Optional["BundleEntryRequest"]

    """ Additional execution information (transaction/batch/history).
    Type `BundleEntryRequest` (represented as `dict` in JSON).
    """

    response: typing.Optional["BundleEntryResponse"]

    """ Results of execution (transaction/batch/history).
    Type `BundleEntryResponse` (represented as `dict` in JSON).
    """



    _validate_primitive_full_url = get_primitive_field_root_validator("full_url")
    


class BundleEntrySearch(BackboneElement):
    """ Search related information.

    Information about the search process that lead to the creation of this
    entry.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Bundle",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    mode: typing.Optional["SearchEntryMode"]

    """ match | include | outcome - why this is in the result set.
    Type `SearchEntryMode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    mode__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_mode`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    score: typing.Optional[decimal.Decimal]

    """ Search ranking (between 0 and 1).
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    score__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_score`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["mode"]["enum"]
            enums.clear()
            for item in SearchEntryMode:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_mode = get_primitive_field_root_validator("mode")
    
    _validate_primitive_score = get_primitive_field_root_validator("score")
    


class BundleEntryRequest(BackboneElement):
    """ Additional execution information (transaction/batch/history).

    Additional information about how this entry should be processed as part of
    a transaction or batch.  For history, it shows how the entry was processed
    to create the version contained in the entry.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Bundle",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    method: "HTTPVerb"

    """ GET | HEAD | POST | PUT | DELETE | PATCH.
    Type `HTTPVerb` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    method__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_method`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    url: FHIRRequiredString

    """ URL for HTTP equivalent of this entry.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    if_none_match: typing.Optional[FHIRString]

    """ For managing cache currency.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    if_none_match__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_if_none_match`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    if_modified_since: typing.Optional[FHIRInstant]

    """ For managing cache currency.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    if_modified_since__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_if_modified_since`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    if_match: typing.Optional[FHIRString]

    """ For managing update contention.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    if_match__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_if_match`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    if_none_exist: typing.Optional[FHIRString]

    """ For conditional creates.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    if_none_exist__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_if_none_exist`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["method"]["enum"]
            enums.clear()
            for item in HTTPVerb:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_method = get_primitive_field_root_validator("method")
    
    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_if_none_match = get_primitive_field_root_validator("if_none_match")
    
    _validate_primitive_if_modified_since = get_primitive_field_root_validator("if_modified_since")
    
    _validate_primitive_if_match = get_primitive_field_root_validator("if_match")
    
    _validate_primitive_if_none_exist = get_primitive_field_root_validator("if_none_exist")
    


class BundleEntryResponse(BackboneElement):
    """ Results of execution (transaction/batch/history).

    Indicates the results of processing the corresponding 'request' entry in
    the batch or transaction being responded to or what the results of an
    operation where when returning history.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Bundle",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    status: FHIRRequiredString

    """ Status response code (text optional).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    location: typing.Optional[FHIRString]

    """ The location (if the operation returns a location).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    location__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_location`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    etag: typing.Optional[FHIRString]

    """ The Etag for the resource (if relevant).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    etag__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_etag`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    last_modified: typing.Optional[FHIRInstant]

    """ Server's date time modified.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    last_modified__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_last_modified`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    outcome: typing.Optional["Resource"]

    """ OperationOutcome with hints and warnings (for batch/transaction).
    Type `Resource` (represented as `dict` in JSON).
    """
    @pydantic.validator("outcome", pre=True,  each_item=True)
    def resource_factory(cls, value):
        if isinstance(value, Resource):
            return value
        return from_dict(value)



    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_location = get_primitive_field_root_validator("location")
    
    _validate_primitive_etag = get_primitive_field_root_validator("etag")
    
    _validate_primitive_last_modified = get_primitive_field_root_validator("last_modified")
    


class CapabilityStatementSoftware(BackboneElement):
    """ Software that is covered by this capability statement.

    Software that is covered by this capability statement.  It is used when the
    capability statement describes the capabilities of a particular software
    version, independent of an installation.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CapabilityStatement",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: FHIRRequiredString

    """ A name the software is known by.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    version: typing.Optional[FHIRString]

    """ Version covered by this statement.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    release_date: typing.Optional[FHIRDateTime]

    """ Date this version was released.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    release_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_release_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_release_date = get_primitive_field_root_validator("release_date")
    


class CapabilityStatementImplementation(BackboneElement):
    """ If this describes a specific instance.

    Identifies a specific implementation instance that is described by the
    capability statement - i.e. a particular installation, rather than the
    capabilities of a software program.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CapabilityStatement",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    description: FHIRRequiredString

    """ Describes this specific instance.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    url: typing.Optional[FHIRString]

    """ Base URL for the installation.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    custodian: typing.Optional["Reference"]

    """ Organization that manages the data.
    Type `Reference` (represented as `dict` in JSON).
    """



    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_url = get_primitive_field_root_validator("url")
    


class CapabilityStatementRest(BackboneElement):
    """ If the endpoint is a RESTful one.

    A definition of the restful capabilities of the solution, if any.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CapabilityStatement",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    mode: "RestfulCapabilityMode"

    """ client | server.
    Type `RestfulCapabilityMode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    mode__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_mode`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    documentation: typing.Optional[FHIRString]

    """ General description of implementation.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    documentation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_documentation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    security: typing.Optional["CapabilityStatementRestSecurity"]

    """ Information about security of implementation.
    Type `CapabilityStatementRestSecurity` (represented as `dict` in JSON).
    """

    resource: typing.Optional[typing.List["CapabilityStatementRestResource"]]

    """ Resource served on the REST interface.
    List of `CapabilityStatementRestResource` items (represented as `dict` in JSON).
    """

    interaction: typing.Optional[typing.List["CapabilityStatementRestInteraction"]]

    """ What operations are supported?.
    List of `CapabilityStatementRestInteraction` items (represented as `dict` in JSON).
    """

    search_param: typing.Optional[typing.List["CapabilityStatementRestResourceSearchParam"]]

    """ Search parameters for searching all resources.
    List of `CapabilityStatementRestResourceSearchParam` items (represented as `dict` in JSON).
    """

    operation: typing.Optional[typing.List["CapabilityStatementRestResourceOperation"]]

    """ Definition of a system level operation.
    List of `CapabilityStatementRestResourceOperation` items (represented as `dict` in JSON).
    """

    compartment: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Compartments served/used by system.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    compartment__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_compartment`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["mode"]["enum"]
            enums.clear()
            for item in RestfulCapabilityMode:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_mode = get_primitive_field_root_validator("mode")
    
    _validate_primitive_documentation = get_primitive_field_root_validator("documentation")
    
    _validate_primitive_compartment = get_primitive_field_root_validator("compartment")
    


class CapabilityStatementRestSecurity(BackboneElement):
    """ Information about security of implementation.

    Information about security implementation from an interface perspective -
    what a client needs to know.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CapabilityStatement",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    cors: typing.Optional[bool]

    """ Adds CORS Headers (http://enable-cors.org/).
    Type `bool`. Is a JSON Primitive element.
    """
    

    cors__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_cors`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    service: typing.Optional[typing.List["CodeableConcept"]]

    """ OAuth | SMART-on-FHIR | NTLM | Basic | Kerberos | Certificates.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ General description of how security works.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_cors = get_primitive_field_root_validator("cors")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class CapabilityStatementRestResource(BackboneElement):
    """ Resource served on the REST interface.

    A specification of the restful capabilities of the solution for a specific
    resource type.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CapabilityStatement",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    type: "ResourceType"

    """ A resource type that is supported.
    Type `ResourceType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    profile: typing.Optional[FHIRString]

    """ Base System profile for all uses of resource.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    profile__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_profile`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    supported_profile: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Profiles for use cases supported.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    supported_profile__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_supported_profile`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    documentation: typing.Optional[FHIRString]

    """ Additional information about the use of the resource type.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    documentation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_documentation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    interaction: typing.Optional[typing.List["CapabilityStatementRestResourceInteraction"]]

    """ What operations are supported?.
    List of `CapabilityStatementRestResourceInteraction` items (represented as `dict` in JSON).
    """

            
    
    
    versioning: typing.Optional["ResourceVersionPolicy"]

    """ no-version | versioned | versioned-update.
    Type `ResourceVersionPolicy` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    versioning__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_versioning`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    read_history: typing.Optional[bool]

    """ Whether vRead can return past versions.
    Type `bool`. Is a JSON Primitive element.
    """
    

    read_history__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_read_history`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    update_create: typing.Optional[bool]

    """ If update can commit to a new identity.
    Type `bool`. Is a JSON Primitive element.
    """
    

    update_create__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_update_create`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    conditional_create: typing.Optional[bool]

    """ If allows/uses conditional create.
    Type `bool`. Is a JSON Primitive element.
    """
    

    conditional_create__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_conditional_create`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    conditional_read: typing.Optional["ConditionalReadStatus"]

    """ not-supported | modified-since | not-match | full-support.
    Type `ConditionalReadStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    conditional_read__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_conditional_read`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    conditional_update: typing.Optional[bool]

    """ If allows/uses conditional update.
    Type `bool`. Is a JSON Primitive element.
    """
    

    conditional_update__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_conditional_update`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    conditional_delete: typing.Optional["ConditionalDeleteStatus"]

    """ not-supported | single | multiple - how conditional delete is
        supported.
    Type `ConditionalDeleteStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    conditional_delete__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_conditional_delete`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    reference_policy: typing.Optional[typing.List[typing.Optional["ReferenceHandlingPolicy"]]]

    """ literal | logical | resolves | enforced | local.
    List of `ReferenceHandlingPolicy` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    reference_policy__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_reference_policy`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    search_include: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ _include values supported by the server.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    search_include__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_search_include`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    search_rev_include: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ _revinclude values supported by the server.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    search_rev_include__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_search_rev_include`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    search_param: typing.Optional[typing.List["CapabilityStatementRestResourceSearchParam"]]

    """ Search parameters supported by implementation.
    List of `CapabilityStatementRestResourceSearchParam` items (represented as `dict` in JSON).
    """

    operation: typing.Optional[typing.List["CapabilityStatementRestResourceOperation"]]

    """ Definition of a resource operation.
    List of `CapabilityStatementRestResourceOperation` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in ResourceType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["versioning"]["enum"]
            enums.clear()
            for item in ResourceVersionPolicy:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["conditionalRead"]["enum"]
            enums.clear()
            for item in ConditionalReadStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["conditionalDelete"]["enum"]
            enums.clear()
            for item in ConditionalDeleteStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["referencePolicy"]["enum"]
            enums.clear()
            for item in ReferenceHandlingPolicy:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_profile = get_primitive_field_root_validator("profile")
    
    _validate_primitive_supported_profile = get_primitive_field_root_validator("supported_profile")
    
    _validate_primitive_documentation = get_primitive_field_root_validator("documentation")
    
    _validate_primitive_versioning = get_primitive_field_root_validator("versioning")
    
    _validate_primitive_read_history = get_primitive_field_root_validator("read_history")
    
    _validate_primitive_update_create = get_primitive_field_root_validator("update_create")
    
    _validate_primitive_conditional_create = get_primitive_field_root_validator("conditional_create")
    
    _validate_primitive_conditional_read = get_primitive_field_root_validator("conditional_read")
    
    _validate_primitive_conditional_update = get_primitive_field_root_validator("conditional_update")
    
    _validate_primitive_conditional_delete = get_primitive_field_root_validator("conditional_delete")
    
    _validate_primitive_reference_policy = get_primitive_field_root_validator("reference_policy")
    
    _validate_primitive_search_include = get_primitive_field_root_validator("search_include")
    
    _validate_primitive_search_rev_include = get_primitive_field_root_validator("search_rev_include")
    


class CapabilityStatementRestResourceInteraction(BackboneElement):
    """ What operations are supported?.

    Identifies a restful operation supported by the solution.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CapabilityStatement",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    code: "FHIRRestfulInteractions"

    """ read | vread | update | patch | delete | history-instance |
        history-type | create | search-type.
    Type `FHIRRestfulInteractions` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    documentation: typing.Optional[FHIRString]

    """ Anything special about operation behavior.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    documentation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_documentation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["code"]["enum"]
            enums.clear()
            for item in FHIRRestfulInteractions:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_code = get_primitive_field_root_validator("code")
    
    _validate_primitive_documentation = get_primitive_field_root_validator("documentation")
    


class CapabilityStatementRestResourceSearchParam(BackboneElement):
    """ Search parameters supported by implementation.

    Search parameters for implementations to support and/or make use of -
    either references to ones defined in the specification, or additional ones
    defined for/by the implementation.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CapabilityStatement",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: FHIRRequiredString

    """ Name of search parameter.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    definition: typing.Optional[FHIRString]

    """ Source of definition for parameter.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    definition__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_definition`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    type: "SearchParamType"

    """ number | date | string | token | reference | composite | quantity |
        uri | special.
    Type `SearchParamType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    documentation: typing.Optional[FHIRString]

    """ Server-specific usage.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    documentation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_documentation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in SearchParamType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_definition = get_primitive_field_root_validator("definition")
    
    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_documentation = get_primitive_field_root_validator("documentation")
    


class CapabilityStatementRestResourceOperation(BackboneElement):
    """ Definition of a resource operation.

    Definition of an operation or a named query together with its parameters
    and their meaning and type. Consult the definition of the operation for
    details about how to invoke the operation, and the parameters.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CapabilityStatement",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: FHIRRequiredString

    """ Name by which the operation/query is invoked.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    definition: FHIRRequiredString

    """ The defined operation/query.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    definition__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_definition`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    documentation: typing.Optional[FHIRString]

    """ Specific details about operation behavior.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    documentation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_documentation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_definition = get_primitive_field_root_validator("definition")
    
    _validate_primitive_documentation = get_primitive_field_root_validator("documentation")
    


class CapabilityStatementRestInteraction(BackboneElement):
    """ What operations are supported?.

    A specification of restful operations supported by the system.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CapabilityStatement",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    code: "FHIRRestfulInteractions"

    """ transaction | batch | search-system | history-system.
    Type `FHIRRestfulInteractions` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    documentation: typing.Optional[FHIRString]

    """ Anything special about operation behavior.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    documentation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_documentation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["code"]["enum"]
            enums.clear()
            for item in FHIRRestfulInteractions:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_code = get_primitive_field_root_validator("code")
    
    _validate_primitive_documentation = get_primitive_field_root_validator("documentation")
    


class CapabilityStatementMessaging(BackboneElement):
    """ If messaging is supported.

    A description of the messaging capabilities of the solution.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CapabilityStatement",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    endpoint: typing.Optional[typing.List["CapabilityStatementMessagingEndpoint"]]

    """ Where messages should be sent.
    List of `CapabilityStatementMessagingEndpoint` items (represented as `dict` in JSON).
    """

    reliable_cache: typing.Optional[FHIRUnsignedInt]

    """ Reliable Message Cache Length (min).
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    reliable_cache__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_reliable_cache`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    documentation: typing.Optional[FHIRString]

    """ Messaging interface behavior details.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    documentation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_documentation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    supported_message: typing.Optional[typing.List["CapabilityStatementMessagingSupportedMessage"]]

    """ Messages supported by this system.
    List of `CapabilityStatementMessagingSupportedMessage` items (represented as `dict` in JSON).
    """



    _validate_primitive_reliable_cache = get_primitive_field_root_validator("reliable_cache")
    
    _validate_primitive_documentation = get_primitive_field_root_validator("documentation")
    


class CapabilityStatementMessagingEndpoint(BackboneElement):
    """ Where messages should be sent.

    An endpoint (network accessible address) to which messages and/or replies
    are to be sent.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CapabilityStatement",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    protocol: "Coding"

    """ http | ftp | mllp +.
    Type `Coding` (represented as `dict` in JSON).
    """

    address: FHIRRequiredString

    """ Network address or identifier of the end-point.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    address__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_address`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_address = get_primitive_field_root_validator("address")
    


class CapabilityStatementMessagingSupportedMessage(BackboneElement):
    """ Messages supported by this system.

    References to message definitions for messages this system can send or
    receive.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CapabilityStatement",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    mode: "EventCapabilityMode"

    """ sender | receiver.
    Type `EventCapabilityMode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    mode__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_mode`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    definition: FHIRRequiredString

    """ Message supported by this system.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    definition__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_definition`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["mode"]["enum"]
            enums.clear()
            for item in EventCapabilityMode:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_mode = get_primitive_field_root_validator("mode")
    
    _validate_primitive_definition = get_primitive_field_root_validator("definition")
    


class CapabilityStatementDocument(BackboneElement):
    """ Document definition.

    A document definition.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CapabilityStatement",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    mode: "DocumentMode"

    """ producer | consumer.
    Type `DocumentMode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    mode__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_mode`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    documentation: typing.Optional[FHIRString]

    """ Description of document support.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    documentation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_documentation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    profile: FHIRRequiredString

    """ Constraint on the resources used in the document.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    profile__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_profile`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["mode"]["enum"]
            enums.clear()
            for item in DocumentMode:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_mode = get_primitive_field_root_validator("mode")
    
    _validate_primitive_documentation = get_primitive_field_root_validator("documentation")
    
    _validate_primitive_profile = get_primitive_field_root_validator("profile")
    


class CarePlanActivity(BackboneElement):
    """ Action to occur as part of plan.

    Identifies a planned action to occur as part of the plan.  For example, a
    medication to be used, lab tests to perform, self-monitoring, education,
    etc.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CarePlan",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    outcome_codeable_concept: typing.Optional[typing.List["CodeableConcept"]]

    """ Results of the activity.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    outcome_reference: typing.Optional[typing.List["Reference"]]

    """ Appointment, Encounter, Procedure, etc..
    List of `Reference` items (represented as `dict` in JSON).
    """

    progress: typing.Optional[typing.List["Annotation"]]

    """ Comments about the activity status/progress.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    reference: typing.Optional["Reference"]

    """ Activity details defined in specific resource.
    Type `Reference` (represented as `dict` in JSON).
    """

    detail: typing.Optional["CarePlanActivityDetail"]

    """ In-line definition of activity.
    Type `CarePlanActivityDetail` (represented as `dict` in JSON).
    """




class CarePlanActivityDetail(BackboneElement):
    """ In-line definition of activity.

    A simple summary of a planned activity suitable for a general care plan
    system (e.g. form driven) that doesn't know about specific resources such
    as procedure etc.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CarePlan",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    kind: typing.Optional["ResourceType"]

    """ Appointment | CommunicationRequest | DeviceRequest |
        MedicationRequest | NutritionOrder | Task | ServiceRequest |
        VisionPrescription.
    Type `ResourceType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    kind__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_kind`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    instantiates_canonical: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Instantiates FHIR protocol or definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates_canonical__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    instantiates_uri: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Instantiates external protocol or definition.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instantiates_uri__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instantiates_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code: typing.Optional["CodeableConcept"]

    """ Detail type of activity.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    reason_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Why activity should be done or why activity was prohibited.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    reason_reference: typing.Optional[typing.List["Reference"]]

    """ Why activity is needed.
    List of `Reference` items (represented as `dict` in JSON).
    """

    goal: typing.Optional[typing.List["Reference"]]

    """ Goals this activity relates to.
    List of `Reference` items (represented as `dict` in JSON).
    """

            
    
    
    status: "CarePlanActivityStatus"

    """ not-started | scheduled | in-progress | on-hold | completed |
        cancelled | stopped | unknown | entered-in-error.
    Type `CarePlanActivityStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    status_reason: typing.Optional["CodeableConcept"]

    """ Reason for current status.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    do_not_perform: typing.Optional[bool]

    """ If true, activity is prohibiting action.
    Type `bool`. Is a JSON Primitive element.
    """
    

    do_not_perform__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_do_not_perform`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    scheduled_timing: typing.Optional["Timing"]

    """ When activity is to occur.
    Type `Timing` (represented as `dict` in JSON).
    """

    scheduled_period: typing.Optional["Period"]

    """ When activity is to occur.
    Type `Period` (represented as `dict` in JSON).
    """

    scheduled_string: typing.Optional[FHIRString]

    """ When activity is to occur.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    scheduled_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_scheduled_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    location: typing.Optional["Reference"]

    """ Where it should happen.
    Type `Reference` (represented as `dict` in JSON).
    """

    performer: typing.Optional[typing.List["Reference"]]

    """ Who will be responsible?.
    List of `Reference` items (represented as `dict` in JSON).
    """

    product_codeable_concept: typing.Optional["CodeableConcept"]

    """ What is to be administered/supplied.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    product_reference: typing.Optional["Reference"]

    """ What is to be administered/supplied.
    Type `Reference` (represented as `dict` in JSON).
    """

    daily_amount: typing.Optional["Quantity"]

    """ How to consume/day?.
    Type `Quantity` (represented as `dict` in JSON).
    """

    quantity: typing.Optional["Quantity"]

    """ How much to administer/supply/consume.
    Type `Quantity` (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Extra info describing activity to perform.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'CarePlan.activity.detail.scheduled[x]', 'choice_of_type': 'scheduled', 'orig_name': 'scheduledTiming', 'name': 'scheduledTiming', 'parent_name': 'CarePlan.activity.detail', 'class_name': 'Timing', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'When activity is to occur', 'formal': 'The period, timing or frequency upon which the described activity is to occur.', 'representation': None}
    _scheduled_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['scheduled_timing', 'scheduled_period', 'scheduled_string']), True))

#   {'path': 'CarePlan.activity.detail.product[x]', 'choice_of_type': 'product', 'orig_name': 'productCodeableConcept', 'name': 'productCodeableConcept', 'parent_name': 'CarePlan.activity.detail', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'What is to be administered/supplied', 'formal': 'Identifies the food, drug or other product to be consumed or supplied in the activity.', 'representation': None}
    _product_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['product_codeable_concept', 'product_reference']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["kind"]["enum"]
            enums.clear()
            for item in ResourceType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in CarePlanActivityStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_kind = get_primitive_field_root_validator("kind")
    
    _validate_primitive_instantiates_canonical = get_primitive_field_root_validator("instantiates_canonical")
    
    _validate_primitive_instantiates_uri = get_primitive_field_root_validator("instantiates_uri")
    
    _validate_primitive_status = get_primitive_field_root_validator("status")
    
    _validate_primitive_do_not_perform = get_primitive_field_root_validator("do_not_perform")
    
    _validate_primitive_scheduled_string = get_primitive_field_root_validator("scheduled_string")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class CareTeamParticipant(BackboneElement):
    """ Members of the team.

    Identifies all people and organizations who are expected to be involved in
    the care team.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CareTeam",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    role: typing.Optional[typing.List["CodeableConcept"]]

    """ Type of involvement.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    member: typing.Optional["Reference"]

    """ Who is involved.
    Type `Reference` (represented as `dict` in JSON).
    """

    on_behalf_of: typing.Optional["Reference"]

    """ Organization of the practitioner.
    Type `Reference` (represented as `dict` in JSON).
    """

    period: typing.Optional["Period"]

    """ Time period of participant.
    Type `Period` (represented as `dict` in JSON).
    """




class CatalogEntryRelatedEntry(BackboneElement):
    """ An item that this catalog entry is related to.

    Used for example, to point to a substance, or to a device used to
    administer a medication.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CatalogEntry",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    relationtype: "CatalogEntryRelationType"

    """ triggers | is-replaced-by.
    Type `CatalogEntryRelationType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    relationtype__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_relationtype`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    item: "Reference"

    """ The reference to the related item.
    Type `Reference` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["relationtype"]["enum"]
            enums.clear()
            for item in CatalogEntryRelationType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_relationtype = get_primitive_field_root_validator("relationtype")
    


class ChargeItemPerformer(BackboneElement):
    """ Who performed charged service.

    Indicates who or what performed or participated in the charged service.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ChargeItem",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    function: typing.Optional["CodeableConcept"]

    """ What type of performance was done.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    actor: "Reference"

    """ Individual who was performing.
    Type `Reference` (represented as `dict` in JSON).
    """




class ChargeItemDefinitionApplicability(BackboneElement):
    """ Whether or not the billing code is applicable.

    Expressions that describe applicability criteria for the billing code.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ChargeItemDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    description: typing.Optional[FHIRString]

    """ Natural language description of the condition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    language: typing.Optional[FHIRString]

    """ Language of the expression.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    language__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_language`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    expression: typing.Optional[FHIRString]

    """ Boolean-valued expression.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    expression__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_expression`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_language = get_primitive_field_root_validator("language")
    
    _validate_primitive_expression = get_primitive_field_root_validator("expression")
    


class ChargeItemDefinitionPropertyGroup(BackboneElement):
    """ Group of properties which are applicable under the same conditions.

    Group of properties which are applicable under the same conditions. If no
    applicability rules are established for the group, then all properties
    always apply.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ChargeItemDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    applicability: typing.Optional[typing.List["ChargeItemDefinitionApplicability"]]

    """ Conditions under which the priceComponent is applicable.
    List of `ChargeItemDefinitionApplicability` items (represented as `dict` in JSON).
    """

    price_component: typing.Optional[typing.List["ChargeItemDefinitionPropertyGroupPriceComponent"]]

    """ Components of total line item price.
    List of `ChargeItemDefinitionPropertyGroupPriceComponent` items (represented as `dict` in JSON).
    """




class ChargeItemDefinitionPropertyGroupPriceComponent(BackboneElement):
    """ Components of total line item price.

    The price for a ChargeItem may be calculated as a base price with
    surcharges/deductions that apply in certain conditions. A
    ChargeItemDefinition resource that defines the prices, factors and
    conditions that apply to a billing code is currently under development. The
    priceComponent element can be used to offer transparency to the recipient
    of the Invoice of how the prices have been calculated.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ChargeItemDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    type: "InvoicePriceComponentType"

    """ base | surcharge | deduction | discount | tax | informational.
    Type `InvoicePriceComponentType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code: typing.Optional["CodeableConcept"]

    """ Code identifying the specific component.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    factor: typing.Optional[decimal.Decimal]

    """ Factor used for calculating this component.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    factor__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_factor`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    amount: typing.Optional["Money"]

    """ Monetary amount associated with this component.
    Type `Money` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in InvoicePriceComponentType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_factor = get_primitive_field_root_validator("factor")
    


class ClaimRelated(BackboneElement):
    """ Prior or corollary claims.

    Other claims which are related to this claim such as prior submissions or
    claims for related services or for the same event.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Claim",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    claim: typing.Optional["Reference"]

    """ Reference to the related claim.
    Type `Reference` (represented as `dict` in JSON).
    """

    relationship: typing.Optional["CodeableConcept"]

    """ How the reference claim is related.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    reference: typing.Optional["Identifier"]

    """ File or case reference.
    Type `Identifier` (represented as `dict` in JSON).
    """




class ClaimPayee(BackboneElement):
    """ Recipient of benefits payable.

    The party to be reimbursed for cost of the products and services according
    to the terms of the policy.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Claim",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: "CodeableConcept"

    """ Category of recipient.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    party: typing.Optional["Reference"]

    """ Recipient reference.
    Type `Reference` (represented as `dict` in JSON).
    """




class ClaimCareTeam(BackboneElement):
    """ Members of the care team.

    The members of the team who provided the products and services.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Claim",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    sequence: FHIRPositiveInt

    """ Order of care team.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    provider: "Reference"

    """ Practitioner or organization.
    Type `Reference` (represented as `dict` in JSON).
    """

    responsible: typing.Optional[bool]

    """ Indicator of the lead practitioner.
    Type `bool`. Is a JSON Primitive element.
    """
    

    responsible__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_responsible`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    role: typing.Optional["CodeableConcept"]

    """ Function within the team.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    qualification: typing.Optional["CodeableConcept"]

    """ Practitioner credential or specialization.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """



    _validate_primitive_sequence = get_primitive_field_root_validator("sequence")
    
    _validate_primitive_responsible = get_primitive_field_root_validator("responsible")
    


class ClaimSupportingInfo(BackboneElement):
    """ Supporting information.

    Additional information codes regarding exceptions, special considerations,
    the condition, situation, prior or concurrent issues.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Claim",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    sequence: FHIRPositiveInt

    """ Information instance identifier.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    category: "CodeableConcept"

    """ Classification of the supplied information.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    code: typing.Optional["CodeableConcept"]

    """ Type of information.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    timing_date: typing.Optional[FHIRDate]

    """ When it occurred.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    timing_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_timing_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    timing_period: typing.Optional["Period"]

    """ When it occurred.
    Type `Period` (represented as `dict` in JSON).
    """

    value_boolean: typing.Optional[bool]

    """ Data to be provided.
    Type `bool`. Is a JSON Primitive element.
    """
    

    value_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_string: typing.Optional[FHIRString]

    """ Data to be provided.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_quantity: typing.Optional["Quantity"]

    """ Data to be provided.
    Type `Quantity` (represented as `dict` in JSON).
    """

    value_attachment: typing.Optional["Attachment"]

    """ Data to be provided.
    Type `Attachment` (represented as `dict` in JSON).
    """

    value_reference: typing.Optional["Reference"]

    """ Data to be provided.
    Type `Reference` (represented as `dict` in JSON).
    """

    reason: typing.Optional["CodeableConcept"]

    """ Explanation for the information.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """



#   {'path': 'Claim.supportingInfo.timing[x]', 'choice_of_type': 'timing', 'orig_name': 'timingDate', 'name': 'timingDate', 'parent_name': 'Claim.supportingInfo', 'class_name': 'FHIRDate', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'When it occurred', 'formal': 'The date when or period to which this information refers.', 'representation': None}
    _timing_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['timing_date', 'timing_period']), True))

#   {'path': 'Claim.supportingInfo.value[x]', 'choice_of_type': 'value', 'orig_name': 'valueBoolean', 'name': 'valueBoolean', 'parent_name': 'Claim.supportingInfo', 'class_name': 'bool', 'enum': None, 'module_name': None, 'json_class': 'bool', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Data to be provided', 'formal': 'Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.', 'representation': None}
    _value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['value_boolean', 'value_string', 'value_quantity', 'value_attachment', 'value_reference']), True))

    _validate_primitive_sequence = get_primitive_field_root_validator("sequence")
    
    _validate_primitive_timing_date = get_primitive_field_root_validator("timing_date")
    
    _validate_primitive_value_boolean = get_primitive_field_root_validator("value_boolean")
    
    _validate_primitive_value_string = get_primitive_field_root_validator("value_string")
    


class ClaimDiagnosis(BackboneElement):
    """ Pertinent diagnosis information.

    Information about diagnoses relevant to the claim items.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Claim",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    sequence: FHIRPositiveInt

    """ Diagnosis instance identifier.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    diagnosis_codeable_concept: typing.Optional["CodeableConcept"]

    """ Nature of illness or problem.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    diagnosis_reference: typing.Optional["Reference"]

    """ Nature of illness or problem.
    Type `Reference` (represented as `dict` in JSON).
    """

    type: typing.Optional[typing.List["CodeableConcept"]]

    """ Timing or nature of the diagnosis.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    on_admission: typing.Optional["CodeableConcept"]

    """ Present on admission.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    package_code: typing.Optional["CodeableConcept"]

    """ Package billing code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """



#   {'path': 'Claim.diagnosis.diagnosis[x]', 'choice_of_type': 'diagnosis', 'orig_name': 'diagnosisCodeableConcept', 'name': 'diagnosisCodeableConcept', 'parent_name': 'Claim.diagnosis', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Nature of illness or problem', 'formal': 'The nature of illness or problem in a coded form or as a reference to an external defined Condition.', 'representation': None}
    _diagnosis_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['diagnosis_codeable_concept', 'diagnosis_reference']), False))

    _validate_primitive_sequence = get_primitive_field_root_validator("sequence")
    


class ClaimProcedure(BackboneElement):
    """ Clinical procedures performed.

    Procedures performed on the patient relevant to the billing items with the
    claim.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Claim",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    sequence: FHIRPositiveInt

    """ Procedure instance identifier.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional[typing.List["CodeableConcept"]]

    """ Category of Procedure.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    date: typing.Optional[FHIRDateTime]

    """ When the procedure was performed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    procedure_codeable_concept: typing.Optional["CodeableConcept"]

    """ Specific clinical procedure.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    procedure_reference: typing.Optional["Reference"]

    """ Specific clinical procedure.
    Type `Reference` (represented as `dict` in JSON).
    """

    udi: typing.Optional[typing.List["Reference"]]

    """ Unique device identifier.
    List of `Reference` items (represented as `dict` in JSON).
    """



#   {'path': 'Claim.procedure.procedure[x]', 'choice_of_type': 'procedure', 'orig_name': 'procedureCodeableConcept', 'name': 'procedureCodeableConcept', 'parent_name': 'Claim.procedure', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Specific clinical procedure', 'formal': 'The code or reference to a Procedure resource which identifies the clinical intervention performed.', 'representation': None}
    _procedure_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['procedure_codeable_concept', 'procedure_reference']), False))

    _validate_primitive_sequence = get_primitive_field_root_validator("sequence")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    


class ClaimInsurance(BackboneElement):
    """ Patient insurance information.

    Financial instruments for reimbursement for the health care products and
    services specified on the claim.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Claim",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    sequence: FHIRPositiveInt

    """ Insurance instance identifier.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    focal: bool

    """ Coverage to be used for adjudication.
    Type `bool`. Is a JSON Primitive element.
    """
    

    focal__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_focal`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    identifier: typing.Optional["Identifier"]

    """ Pre-assigned Claim number.
    Type `Identifier` (represented as `dict` in JSON).
    """

    coverage: "Reference"

    """ Insurance information.
    Type `Reference` (represented as `dict` in JSON).
    """

    business_arrangement: typing.Optional[FHIRString]

    """ Additional provider contract number.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    business_arrangement__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_business_arrangement`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    pre_auth_ref: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Prior authorization reference number.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    pre_auth_ref__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pre_auth_ref`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    claim_response: typing.Optional["Reference"]

    """ Adjudication results.
    Type `Reference` (represented as `dict` in JSON).
    """



    _validate_primitive_sequence = get_primitive_field_root_validator("sequence")
    
    _validate_primitive_focal = get_primitive_field_root_validator("focal")
    
    _validate_primitive_business_arrangement = get_primitive_field_root_validator("business_arrangement")
    
    _validate_primitive_pre_auth_ref = get_primitive_field_root_validator("pre_auth_ref")
    


class ClaimAccident(BackboneElement):
    """ Details of the event.

    Details of an accident which resulted in injuries which required the
    products and services listed in the claim.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Claim",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    date: FHIRDate

    """ When the incident occurred.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional["CodeableConcept"]

    """ The nature of the accident.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    location_address: typing.Optional["Address"]

    """ Where the event occurred.
    Type `Address` (represented as `dict` in JSON).
    """

    location_reference: typing.Optional["Reference"]

    """ Where the event occurred.
    Type `Reference` (represented as `dict` in JSON).
    """



#   {'path': 'Claim.accident.location[x]', 'choice_of_type': 'location', 'orig_name': 'locationAddress', 'name': 'locationAddress', 'parent_name': 'Claim.accident', 'class_name': 'Address', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Where the event occurred', 'formal': 'The physical location of the accident event.', 'representation': None}
    _location_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['location_address', 'location_reference']), True))

    _validate_primitive_date = get_primitive_field_root_validator("date")
    


class ClaimItem(BackboneElement):
    """ Product or service provided.

    A claim line. Either a simple  product or service or a 'group' of details
    which can each be a simple items or groups of sub-details.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Claim",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    sequence: FHIRPositiveInt

    """ Item instance identifier.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    care_team_sequence: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Applicable careTeam members.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    care_team_sequence__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_care_team_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    diagnosis_sequence: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Applicable diagnoses.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    diagnosis_sequence__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_diagnosis_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    procedure_sequence: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Applicable procedures.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    procedure_sequence__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_procedure_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    information_sequence: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Applicable exception and supporting information.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    information_sequence__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_information_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    revenue: typing.Optional["CodeableConcept"]

    """ Revenue or cost center code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    category: typing.Optional["CodeableConcept"]

    """ Benefit classification.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    product_or_service: "CodeableConcept"

    """ Billing, service, product, or drug code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    modifier: typing.Optional[typing.List["CodeableConcept"]]

    """ Product or service billing modifiers.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    program_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Program the product or service is provided under.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    serviced_date: typing.Optional[FHIRDate]

    """ Date or dates of service or product delivery.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    serviced_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_serviced_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    serviced_period: typing.Optional["Period"]

    """ Date or dates of service or product delivery.
    Type `Period` (represented as `dict` in JSON).
    """

    location_codeable_concept: typing.Optional["CodeableConcept"]

    """ Place of service or where product was supplied.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    location_address: typing.Optional["Address"]

    """ Place of service or where product was supplied.
    Type `Address` (represented as `dict` in JSON).
    """

    location_reference: typing.Optional["Reference"]

    """ Place of service or where product was supplied.
    Type `Reference` (represented as `dict` in JSON).
    """

    quantity: typing.Optional["Quantity"]

    """ Count of products or services.
    Type `Quantity` (represented as `dict` in JSON).
    """

    unit_price: typing.Optional["Money"]

    """ Fee, charge or cost per item.
    Type `Money` (represented as `dict` in JSON).
    """

    factor: typing.Optional[decimal.Decimal]

    """ Price scaling factor.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    factor__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_factor`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    net: typing.Optional["Money"]

    """ Total item cost.
    Type `Money` (represented as `dict` in JSON).
    """

    udi: typing.Optional[typing.List["Reference"]]

    """ Unique device identifier.
    List of `Reference` items (represented as `dict` in JSON).
    """

    body_site: typing.Optional["CodeableConcept"]

    """ Anatomical location.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    sub_site: typing.Optional[typing.List["CodeableConcept"]]

    """ Anatomical sub-location.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    encounter: typing.Optional[typing.List["Reference"]]

    """ Encounters related to this billed item.
    List of `Reference` items (represented as `dict` in JSON).
    """

    detail: typing.Optional[typing.List["ClaimItemDetail"]]

    """ Product or service provided.
    List of `ClaimItemDetail` items (represented as `dict` in JSON).
    """



#   {'path': 'Claim.item.serviced[x]', 'choice_of_type': 'serviced', 'orig_name': 'servicedDate', 'name': 'servicedDate', 'parent_name': 'Claim.item', 'class_name': 'FHIRDate', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Date or dates of service or product delivery', 'formal': 'The date or dates when the service or product was supplied, performed or completed.', 'representation': None}
    _serviced_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['serviced_date', 'serviced_period']), True))

#   {'path': 'Claim.item.location[x]', 'choice_of_type': 'location', 'orig_name': 'locationCodeableConcept', 'name': 'locationCodeableConcept', 'parent_name': 'Claim.item', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Place of service or where product was supplied', 'formal': 'Where the product or service was provided.', 'representation': None}
    _location_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['location_codeable_concept', 'location_address', 'location_reference']), True))

    _validate_primitive_sequence = get_primitive_field_root_validator("sequence")
    
    _validate_primitive_care_team_sequence = get_primitive_field_root_validator("care_team_sequence")
    
    _validate_primitive_diagnosis_sequence = get_primitive_field_root_validator("diagnosis_sequence")
    
    _validate_primitive_procedure_sequence = get_primitive_field_root_validator("procedure_sequence")
    
    _validate_primitive_information_sequence = get_primitive_field_root_validator("information_sequence")
    
    _validate_primitive_serviced_date = get_primitive_field_root_validator("serviced_date")
    
    _validate_primitive_factor = get_primitive_field_root_validator("factor")
    


class ClaimItemDetail(BackboneElement):
    """ Product or service provided.

    A claim detail line. Either a simple (a product or service) or a 'group' of
    sub-details which are simple items.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Claim",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    sequence: FHIRPositiveInt

    """ Item instance identifier.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    revenue: typing.Optional["CodeableConcept"]

    """ Revenue or cost center code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    category: typing.Optional["CodeableConcept"]

    """ Benefit classification.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    product_or_service: "CodeableConcept"

    """ Billing, service, product, or drug code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    modifier: typing.Optional[typing.List["CodeableConcept"]]

    """ Service/Product billing modifiers.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    program_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Program the product or service is provided under.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    quantity: typing.Optional["Quantity"]

    """ Count of products or services.
    Type `Quantity` (represented as `dict` in JSON).
    """

    unit_price: typing.Optional["Money"]

    """ Fee, charge or cost per item.
    Type `Money` (represented as `dict` in JSON).
    """

    factor: typing.Optional[decimal.Decimal]

    """ Price scaling factor.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    factor__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_factor`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    net: typing.Optional["Money"]

    """ Total item cost.
    Type `Money` (represented as `dict` in JSON).
    """

    udi: typing.Optional[typing.List["Reference"]]

    """ Unique device identifier.
    List of `Reference` items (represented as `dict` in JSON).
    """

    sub_detail: typing.Optional[typing.List["ClaimItemDetailSubDetail"]]

    """ Product or service provided.
    List of `ClaimItemDetailSubDetail` items (represented as `dict` in JSON).
    """



    _validate_primitive_sequence = get_primitive_field_root_validator("sequence")
    
    _validate_primitive_factor = get_primitive_field_root_validator("factor")
    


class ClaimItemDetailSubDetail(BackboneElement):
    """ Product or service provided.

    A claim detail line. Either a simple (a product or service) or a 'group' of
    sub-details which are simple items.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Claim",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    sequence: FHIRPositiveInt

    """ Item instance identifier.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    revenue: typing.Optional["CodeableConcept"]

    """ Revenue or cost center code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    category: typing.Optional["CodeableConcept"]

    """ Benefit classification.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    product_or_service: "CodeableConcept"

    """ Billing, service, product, or drug code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    modifier: typing.Optional[typing.List["CodeableConcept"]]

    """ Service/Product billing modifiers.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    program_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Program the product or service is provided under.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    quantity: typing.Optional["Quantity"]

    """ Count of products or services.
    Type `Quantity` (represented as `dict` in JSON).
    """

    unit_price: typing.Optional["Money"]

    """ Fee, charge or cost per item.
    Type `Money` (represented as `dict` in JSON).
    """

    factor: typing.Optional[decimal.Decimal]

    """ Price scaling factor.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    factor__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_factor`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    net: typing.Optional["Money"]

    """ Total item cost.
    Type `Money` (represented as `dict` in JSON).
    """

    udi: typing.Optional[typing.List["Reference"]]

    """ Unique device identifier.
    List of `Reference` items (represented as `dict` in JSON).
    """



    _validate_primitive_sequence = get_primitive_field_root_validator("sequence")
    
    _validate_primitive_factor = get_primitive_field_root_validator("factor")
    


class ClaimResponseItem(BackboneElement):
    """ Adjudication for claim line items.

    A claim line. Either a simple (a product or service) or a 'group' of
    details which can also be a simple items or groups of sub-details.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ClaimResponse",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    item_sequence: FHIRPositiveInt

    """ Claim item instance identifier.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    item_sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_item_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    note_number: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Applicable note numbers.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    note_number__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_note_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    adjudication: typing.List["ClaimResponseItemAdjudication"]

    """ Adjudication details.
    List of `ClaimResponseItemAdjudication` items (represented as `dict` in JSON).
    """

    detail: typing.Optional[typing.List["ClaimResponseItemDetail"]]

    """ Adjudication for claim details.
    List of `ClaimResponseItemDetail` items (represented as `dict` in JSON).
    """



    _validate_primitive_item_sequence = get_primitive_field_root_validator("item_sequence")
    
    _validate_primitive_note_number = get_primitive_field_root_validator("note_number")
    


class ClaimResponseItemAdjudication(BackboneElement):
    """ Adjudication details.

    If this item is a group then the values here are a summary of the
    adjudication of the detail items. If this item is a simple product or
    service then this is the result of the adjudication of this item.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ClaimResponse",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    category: "CodeableConcept"

    """ Type of adjudication information.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    reason: typing.Optional["CodeableConcept"]

    """ Explanation of adjudication outcome.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    amount: typing.Optional["Money"]

    """ Monetary amount.
    Type `Money` (represented as `dict` in JSON).
    """

    value: typing.Optional[decimal.Decimal]

    """ Non-monetary value.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    value__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_value = get_primitive_field_root_validator("value")
    


class ClaimResponseItemDetail(BackboneElement):
    """ Adjudication for claim details.

    A claim detail. Either a simple (a product or service) or a 'group' of sub-
    details which are simple items.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ClaimResponse",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    detail_sequence: FHIRPositiveInt

    """ Claim detail instance identifier.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    detail_sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_detail_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    note_number: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Applicable note numbers.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    note_number__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_note_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    adjudication: typing.List["ClaimResponseItemAdjudication"]

    """ Detail level adjudication details.
    List of `ClaimResponseItemAdjudication` items (represented as `dict` in JSON).
    """

    sub_detail: typing.Optional[typing.List["ClaimResponseItemDetailSubDetail"]]

    """ Adjudication for claim sub-details.
    List of `ClaimResponseItemDetailSubDetail` items (represented as `dict` in JSON).
    """



    _validate_primitive_detail_sequence = get_primitive_field_root_validator("detail_sequence")
    
    _validate_primitive_note_number = get_primitive_field_root_validator("note_number")
    


class ClaimResponseItemDetailSubDetail(BackboneElement):
    """ Adjudication for claim sub-details.

    A sub-detail adjudication of a simple product or service.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ClaimResponse",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    sub_detail_sequence: FHIRPositiveInt

    """ Claim sub-detail instance identifier.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    sub_detail_sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sub_detail_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    note_number: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Applicable note numbers.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    note_number__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_note_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    adjudication: typing.Optional[typing.List["ClaimResponseItemAdjudication"]]

    """ Subdetail level adjudication details.
    List of `ClaimResponseItemAdjudication` items (represented as `dict` in JSON).
    """



    _validate_primitive_sub_detail_sequence = get_primitive_field_root_validator("sub_detail_sequence")
    
    _validate_primitive_note_number = get_primitive_field_root_validator("note_number")
    


class ClaimResponseAddItem(BackboneElement):
    """ Insurer added line items.

    The first-tier service adjudications for payor added product or service
    lines.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ClaimResponse",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    item_sequence: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Item sequence number.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    item_sequence__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_item_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    detail_sequence: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Detail sequence number.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    detail_sequence__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_detail_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subdetail_sequence: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Subdetail sequence number.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    subdetail_sequence__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_subdetail_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    provider: typing.Optional[typing.List["Reference"]]

    """ Authorized providers.
    List of `Reference` items (represented as `dict` in JSON).
    """

    product_or_service: "CodeableConcept"

    """ Billing, service, product, or drug code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    modifier: typing.Optional[typing.List["CodeableConcept"]]

    """ Service/Product billing modifiers.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    program_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Program the product or service is provided under.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    serviced_date: typing.Optional[FHIRDate]

    """ Date or dates of service or product delivery.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    serviced_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_serviced_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    serviced_period: typing.Optional["Period"]

    """ Date or dates of service or product delivery.
    Type `Period` (represented as `dict` in JSON).
    """

    location_codeable_concept: typing.Optional["CodeableConcept"]

    """ Place of service or where product was supplied.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    location_address: typing.Optional["Address"]

    """ Place of service or where product was supplied.
    Type `Address` (represented as `dict` in JSON).
    """

    location_reference: typing.Optional["Reference"]

    """ Place of service or where product was supplied.
    Type `Reference` (represented as `dict` in JSON).
    """

    quantity: typing.Optional["Quantity"]

    """ Count of products or services.
    Type `Quantity` (represented as `dict` in JSON).
    """

    unit_price: typing.Optional["Money"]

    """ Fee, charge or cost per item.
    Type `Money` (represented as `dict` in JSON).
    """

    factor: typing.Optional[decimal.Decimal]

    """ Price scaling factor.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    factor__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_factor`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    net: typing.Optional["Money"]

    """ Total item cost.
    Type `Money` (represented as `dict` in JSON).
    """

    body_site: typing.Optional["CodeableConcept"]

    """ Anatomical location.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    sub_site: typing.Optional[typing.List["CodeableConcept"]]

    """ Anatomical sub-location.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    note_number: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Applicable note numbers.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    note_number__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_note_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    adjudication: typing.List["ClaimResponseItemAdjudication"]

    """ Added items adjudication.
    List of `ClaimResponseItemAdjudication` items (represented as `dict` in JSON).
    """

    detail: typing.Optional[typing.List["ClaimResponseAddItemDetail"]]

    """ Insurer added line details.
    List of `ClaimResponseAddItemDetail` items (represented as `dict` in JSON).
    """



#   {'path': 'ClaimResponse.addItem.serviced[x]', 'choice_of_type': 'serviced', 'orig_name': 'servicedDate', 'name': 'servicedDate', 'parent_name': 'ClaimResponse.addItem', 'class_name': 'FHIRDate', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Date or dates of service or product delivery', 'formal': 'The date or dates when the service or product was supplied, performed or completed.', 'representation': None}
    _serviced_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['serviced_date', 'serviced_period']), True))

#   {'path': 'ClaimResponse.addItem.location[x]', 'choice_of_type': 'location', 'orig_name': 'locationCodeableConcept', 'name': 'locationCodeableConcept', 'parent_name': 'ClaimResponse.addItem', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Place of service or where product was supplied', 'formal': 'Where the product or service was provided.', 'representation': None}
    _location_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['location_codeable_concept', 'location_address', 'location_reference']), True))

    _validate_primitive_item_sequence = get_primitive_field_root_validator("item_sequence")
    
    _validate_primitive_detail_sequence = get_primitive_field_root_validator("detail_sequence")
    
    _validate_primitive_subdetail_sequence = get_primitive_field_root_validator("subdetail_sequence")
    
    _validate_primitive_serviced_date = get_primitive_field_root_validator("serviced_date")
    
    _validate_primitive_factor = get_primitive_field_root_validator("factor")
    
    _validate_primitive_note_number = get_primitive_field_root_validator("note_number")
    


class ClaimResponseAddItemDetail(BackboneElement):
    """ Insurer added line details.

    The second-tier service adjudications for payor added services.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ClaimResponse",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    product_or_service: "CodeableConcept"

    """ Billing, service, product, or drug code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    modifier: typing.Optional[typing.List["CodeableConcept"]]

    """ Service/Product billing modifiers.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    quantity: typing.Optional["Quantity"]

    """ Count of products or services.
    Type `Quantity` (represented as `dict` in JSON).
    """

    unit_price: typing.Optional["Money"]

    """ Fee, charge or cost per item.
    Type `Money` (represented as `dict` in JSON).
    """

    factor: typing.Optional[decimal.Decimal]

    """ Price scaling factor.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    factor__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_factor`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    net: typing.Optional["Money"]

    """ Total item cost.
    Type `Money` (represented as `dict` in JSON).
    """

    note_number: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Applicable note numbers.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    note_number__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_note_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    adjudication: typing.List["ClaimResponseItemAdjudication"]

    """ Added items detail adjudication.
    List of `ClaimResponseItemAdjudication` items (represented as `dict` in JSON).
    """

    sub_detail: typing.Optional[typing.List["ClaimResponseAddItemDetailSubDetail"]]

    """ Insurer added line items.
    List of `ClaimResponseAddItemDetailSubDetail` items (represented as `dict` in JSON).
    """



    _validate_primitive_factor = get_primitive_field_root_validator("factor")
    
    _validate_primitive_note_number = get_primitive_field_root_validator("note_number")
    


class ClaimResponseAddItemDetailSubDetail(BackboneElement):
    """ Insurer added line items.

    The third-tier service adjudications for payor added services.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ClaimResponse",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    product_or_service: "CodeableConcept"

    """ Billing, service, product, or drug code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    modifier: typing.Optional[typing.List["CodeableConcept"]]

    """ Service/Product billing modifiers.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    quantity: typing.Optional["Quantity"]

    """ Count of products or services.
    Type `Quantity` (represented as `dict` in JSON).
    """

    unit_price: typing.Optional["Money"]

    """ Fee, charge or cost per item.
    Type `Money` (represented as `dict` in JSON).
    """

    factor: typing.Optional[decimal.Decimal]

    """ Price scaling factor.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    factor__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_factor`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    net: typing.Optional["Money"]

    """ Total item cost.
    Type `Money` (represented as `dict` in JSON).
    """

    note_number: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Applicable note numbers.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    note_number__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_note_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    adjudication: typing.List["ClaimResponseItemAdjudication"]

    """ Added items detail adjudication.
    List of `ClaimResponseItemAdjudication` items (represented as `dict` in JSON).
    """



    _validate_primitive_factor = get_primitive_field_root_validator("factor")
    
    _validate_primitive_note_number = get_primitive_field_root_validator("note_number")
    


class ClaimResponseTotal(BackboneElement):
    """ Adjudication totals.

    Categorized monetary totals for the adjudication.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ClaimResponse",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    category: "CodeableConcept"

    """ Type of adjudication information.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    amount: "Money"

    """ Financial total for the category.
    Type `Money` (represented as `dict` in JSON).
    """




class ClaimResponsePayment(BackboneElement):
    """ Payment Details.

    Payment details for the adjudication of the claim.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ClaimResponse",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: "CodeableConcept"

    """ Partial or complete payment.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    adjustment: typing.Optional["Money"]

    """ Payment adjustment for non-claim issues.
    Type `Money` (represented as `dict` in JSON).
    """

    adjustment_reason: typing.Optional["CodeableConcept"]

    """ Explanation for the adjustment.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    date: typing.Optional[FHIRDate]

    """ Expected date of payment.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    amount: "Money"

    """ Payable amount after adjustment.
    Type `Money` (represented as `dict` in JSON).
    """

    identifier: typing.Optional["Identifier"]

    """ Business identifier for the payment.
    Type `Identifier` (represented as `dict` in JSON).
    """



    _validate_primitive_date = get_primitive_field_root_validator("date")
    


class ClaimResponseProcessNote(BackboneElement):
    """ Note concerning adjudication.

    A note that describes or explains adjudication results in a human readable
    form.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ClaimResponse",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    number: typing.Optional[FHIRPositiveInt]

    """ Note instance identifier.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    number__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    type: typing.Optional["NoteType"]

    """ display | print | printoper.
    Type `NoteType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    text: FHIRRequiredString

    """ Note explanatory text.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    text__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_text`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    language: typing.Optional["CodeableConcept"]

    """ Language of the text.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in NoteType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_number = get_primitive_field_root_validator("number")
    
    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_text = get_primitive_field_root_validator("text")
    


class ClaimResponseInsurance(BackboneElement):
    """ Patient insurance information.

    Financial instruments for reimbursement for the health care products and
    services specified on the claim.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ClaimResponse",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    sequence: FHIRPositiveInt

    """ Insurance instance identifier.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    focal: bool

    """ Coverage to be used for adjudication.
    Type `bool`. Is a JSON Primitive element.
    """
    

    focal__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_focal`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    coverage: "Reference"

    """ Insurance information.
    Type `Reference` (represented as `dict` in JSON).
    """

    business_arrangement: typing.Optional[FHIRString]

    """ Additional provider contract number.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    business_arrangement__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_business_arrangement`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    claim_response: typing.Optional["Reference"]

    """ Adjudication results.
    Type `Reference` (represented as `dict` in JSON).
    """



    _validate_primitive_sequence = get_primitive_field_root_validator("sequence")
    
    _validate_primitive_focal = get_primitive_field_root_validator("focal")
    
    _validate_primitive_business_arrangement = get_primitive_field_root_validator("business_arrangement")
    


class ClaimResponseError(BackboneElement):
    """ Processing errors.

    Errors encountered during the processing of the adjudication.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ClaimResponse",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    item_sequence: typing.Optional[FHIRPositiveInt]

    """ Item sequence number.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    item_sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_item_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    detail_sequence: typing.Optional[FHIRPositiveInt]

    """ Detail sequence number.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    detail_sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_detail_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    sub_detail_sequence: typing.Optional[FHIRPositiveInt]

    """ Subdetail sequence number.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    sub_detail_sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sub_detail_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code: "CodeableConcept"

    """ Error code detailing processing issues.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """



    _validate_primitive_item_sequence = get_primitive_field_root_validator("item_sequence")
    
    _validate_primitive_detail_sequence = get_primitive_field_root_validator("detail_sequence")
    
    _validate_primitive_sub_detail_sequence = get_primitive_field_root_validator("sub_detail_sequence")
    


class ClinicalImpressionInvestigation(BackboneElement):
    """ One or more sets of investigations (signs, symptoms, etc.).

    One or more sets of investigations (signs, symptoms, etc.). The actual
    grouping of investigations varies greatly depending on the type and context
    of the assessment. These investigations may include data generated during
    the assessment process, or data previously generated and recorded that is
    pertinent to the outcomes.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ClinicalImpression",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: "CodeableConcept"

    """ A name/code for the set.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    item: typing.Optional[typing.List["Reference"]]

    """ Record of a specific investigation.
    List of `Reference` items (represented as `dict` in JSON).
    """




class ClinicalImpressionFinding(BackboneElement):
    """ Possible or likely findings and diagnoses.

    Specific findings or diagnoses that were considered likely or relevant to
    ongoing treatment.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ClinicalImpression",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    item_codeable_concept: typing.Optional["CodeableConcept"]

    """ What was found.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    item_reference: typing.Optional["Reference"]

    """ What was found.
    Type `Reference` (represented as `dict` in JSON).
    """

    basis: typing.Optional[FHIRString]

    """ Which investigations support finding.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    basis__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_basis`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_basis = get_primitive_field_root_validator("basis")
    


class CodeSystemFilter(BackboneElement):
    """ Filter that can be used in a value set.

    A filter that can be used in a value set compose statement when selecting
    concepts using a filter.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CodeSystem",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: FHIRCode

    """ Code that identifies the filter.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ How or why the filter is used.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    operator: typing.List[typing.Optional["FilterOperator"]]

    """ = | is-a | descendent-of | is-not-a | regex | in | not-in |
        generalizes | exists.
    List of `FilterOperator` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    operator__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_operator`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value: FHIRRequiredString

    """ What to use for the value.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["operator"]["enum"]
            enums.clear()
            for item in FilterOperator:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_code = get_primitive_field_root_validator("code")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_operator = get_primitive_field_root_validator("operator")
    
    _validate_primitive_value = get_primitive_field_root_validator("value")
    


class CodeSystemProperty(BackboneElement):
    """ Additional information supplied about each concept.

    A property defines an additional slot through which additional information
    can be provided about a concept.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CodeSystem",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: FHIRCode

    """ Identifies the property on the concepts, and when referred to in
        operations.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    uri: typing.Optional[FHIRString]

    """ Formal identifier for the property.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ Why the property is defined, and/or what it conveys.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    type: "PropertyType"

    """ code | Coding | string | integer | boolean | dateTime | decimal.
    Type `PropertyType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in PropertyType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_code = get_primitive_field_root_validator("code")
    
    _validate_primitive_uri = get_primitive_field_root_validator("uri")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_type = get_primitive_field_root_validator("type")
    


class CodeSystemConcept(BackboneElement):
    """ Concepts in the code system.

    Concepts that are in the code system. The concept definitions are
    inherently hierarchical, but the definitions must be consulted to determine
    what the meanings of the hierarchical relationships are.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CodeSystem",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: FHIRCode

    """ Code that identifies concept.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    display: typing.Optional[FHIRString]

    """ Text to display to the user.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    display__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_display`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    definition: typing.Optional[FHIRString]

    """ Formal definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    definition__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_definition`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    designation: typing.Optional[typing.List["CodeSystemConceptDesignation"]]

    """ Additional representations for the concept.
    List of `CodeSystemConceptDesignation` items (represented as `dict` in JSON).
    """

    property: typing.Optional[typing.List["CodeSystemConceptProperty"]]

    """ Property value for the concept.
    List of `CodeSystemConceptProperty` items (represented as `dict` in JSON).
    """

    concept: typing.Optional[typing.List["CodeSystemConcept"]]

    """ Child Concepts (is-a/contains/categorizes).
    List of `CodeSystemConcept` items (represented as `dict` in JSON).
    """



    _validate_primitive_code = get_primitive_field_root_validator("code")
    
    _validate_primitive_display = get_primitive_field_root_validator("display")
    
    _validate_primitive_definition = get_primitive_field_root_validator("definition")
    


class CodeSystemConceptDesignation(BackboneElement):
    """ Additional representations for the concept.

    Additional representations for the concept - other languages, aliases,
    specialized purposes, used for particular purposes, etc.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CodeSystem",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    language: typing.Optional[FHIRCode]

    """ Human language of the designation.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    language__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_language`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use: typing.Optional["Coding"]

    """ Details how this designation would be used.
    Type `Coding` (represented as `dict` in JSON).
    """

    value: FHIRRequiredString

    """ The text value for this designation.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_language = get_primitive_field_root_validator("language")
    
    _validate_primitive_value = get_primitive_field_root_validator("value")
    


class CodeSystemConceptProperty(BackboneElement):
    """ Property value for the concept.

    A property value for this concept.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CodeSystem",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: FHIRCode

    """ Reference to CodeSystem.property.code.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_code: typing.Optional[FHIRCode]

    """ Value of the property for this concept.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_coding: typing.Optional["Coding"]

    """ Value of the property for this concept.
    Type `Coding` (represented as `dict` in JSON).
    """

    value_string: typing.Optional[FHIRString]

    """ Value of the property for this concept.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_integer: typing.Optional[FHIRInt]

    """ Value of the property for this concept.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_integer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_integer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_boolean: typing.Optional[bool]

    """ Value of the property for this concept.
    Type `bool`. Is a JSON Primitive element.
    """
    

    value_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_date_time: typing.Optional[FHIRDateTime]

    """ Value of the property for this concept.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_decimal: typing.Optional[decimal.Decimal]

    """ Value of the property for this concept.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    value_decimal__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_decimal`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'CodeSystem.concept.property.value[x]', 'choice_of_type': 'value', 'orig_name': 'valueCode', 'name': 'valueCode', 'parent_name': 'CodeSystem.concept.property', 'class_name': 'FHIRCode', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Value of the property for this concept', 'formal': 'The value of this property.', 'representation': None}
    _value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['value_code', 'value_coding', 'value_string', 'value_integer', 'value_boolean', 'value_date_time', 'value_decimal']), False))

    _validate_primitive_code = get_primitive_field_root_validator("code")
    
    _validate_primitive_value_code = get_primitive_field_root_validator("value_code")
    
    _validate_primitive_value_string = get_primitive_field_root_validator("value_string")
    
    _validate_primitive_value_integer = get_primitive_field_root_validator("value_integer")
    
    _validate_primitive_value_boolean = get_primitive_field_root_validator("value_boolean")
    
    _validate_primitive_value_date_time = get_primitive_field_root_validator("value_date_time")
    
    _validate_primitive_value_decimal = get_primitive_field_root_validator("value_decimal")
    


class CommunicationPayload(BackboneElement):
    """ Message payload.

    Text, attachment(s), or resource(s) that was communicated to the recipient.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Communication",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    content_string: typing.Optional[FHIRString]

    """ Message part content.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    content_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_content_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    content_attachment: typing.Optional["Attachment"]

    """ Message part content.
    Type `Attachment` (represented as `dict` in JSON).
    """

    content_reference: typing.Optional["Reference"]

    """ Message part content.
    Type `Reference` (represented as `dict` in JSON).
    """



#   {'path': 'Communication.payload.content[x]', 'choice_of_type': 'content', 'orig_name': 'contentString', 'name': 'contentString', 'parent_name': 'Communication.payload', 'class_name': 'FHIRString', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Message part content', 'formal': 'A communicated content (or for multi-part communications, one portion of the communication).', 'representation': None}
    _content_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['content_string', 'content_attachment', 'content_reference']), False))

    _validate_primitive_content_string = get_primitive_field_root_validator("content_string")
    


class CommunicationRequestPayload(BackboneElement):
    """ Message payload.

    Text, attachment(s), or resource(s) to be communicated to the recipient.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CommunicationRequest",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    content_string: typing.Optional[FHIRString]

    """ Message part content.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    content_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_content_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    content_attachment: typing.Optional["Attachment"]

    """ Message part content.
    Type `Attachment` (represented as `dict` in JSON).
    """

    content_reference: typing.Optional["Reference"]

    """ Message part content.
    Type `Reference` (represented as `dict` in JSON).
    """



#   {'path': 'CommunicationRequest.payload.content[x]', 'choice_of_type': 'content', 'orig_name': 'contentString', 'name': 'contentString', 'parent_name': 'CommunicationRequest.payload', 'class_name': 'FHIRString', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Message part content', 'formal': 'The communicated content (or for multi-part communications, one portion of the communication).', 'representation': None}
    _content_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['content_string', 'content_attachment', 'content_reference']), False))

    _validate_primitive_content_string = get_primitive_field_root_validator("content_string")
    


class CompartmentDefinitionResource(BackboneElement):
    """ How a resource is related to the compartment.

    Information about how a resource is related to the compartment.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CompartmentDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    code: "ResourceType"

    """ Name of resource type.
    Type `ResourceType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    param: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Search Parameter Name, or chained parameters.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    param__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_param`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    documentation: typing.Optional[FHIRString]

    """ Additional documentation about the resource and compartment.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    documentation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_documentation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["code"]["enum"]
            enums.clear()
            for item in ResourceType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_code = get_primitive_field_root_validator("code")
    
    _validate_primitive_param = get_primitive_field_root_validator("param")
    
    _validate_primitive_documentation = get_primitive_field_root_validator("documentation")
    


class CompositionAttester(BackboneElement):
    """ Attests to accuracy of composition.

    A participant who has attested to the accuracy of the composition/document.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Composition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    mode: "CompositionAttestationMode"

    """ personal | professional | legal | official.
    Type `CompositionAttestationMode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    mode__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_mode`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    time: typing.Optional[FHIRDateTime]

    """ When the composition was attested.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    party: typing.Optional["Reference"]

    """ Who attested the composition.
    Type `Reference` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["mode"]["enum"]
            enums.clear()
            for item in CompositionAttestationMode:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_mode = get_primitive_field_root_validator("mode")
    
    _validate_primitive_time = get_primitive_field_root_validator("time")
    


class CompositionRelatesTo(BackboneElement):
    """ Relationships to other compositions/documents.

    Relationships that this composition has with other compositions or
    documents that already exist.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Composition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    code: "DocumentRelationshipType"

    """ replaces | transforms | signs | appends.
    Type `DocumentRelationshipType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    target_identifier: typing.Optional["Identifier"]

    """ Target of the relationship.
    Type `Identifier` (represented as `dict` in JSON).
    """

    target_reference: typing.Optional["Reference"]

    """ Target of the relationship.
    Type `Reference` (represented as `dict` in JSON).
    """



#   {'path': 'Composition.relatesTo.target[x]', 'choice_of_type': 'target', 'orig_name': 'targetIdentifier', 'name': 'targetIdentifier', 'parent_name': 'Composition.relatesTo', 'class_name': 'Identifier', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Target of the relationship', 'formal': 'The target composition/document of this relationship.', 'representation': None}
    _target_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['target_identifier', 'target_reference']), False))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["code"]["enum"]
            enums.clear()
            for item in DocumentRelationshipType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_code = get_primitive_field_root_validator("code")
    


class CompositionEvent(BackboneElement):
    """ The clinical service(s) being documented.

    The clinical service, such as a colonoscopy or an appendectomy, being
    documented.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Composition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: typing.Optional[typing.List["CodeableConcept"]]

    """ Code(s) that apply to the event being documented.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    period: typing.Optional["Period"]

    """ The period covered by the documentation.
    Type `Period` (represented as `dict` in JSON).
    """

    detail: typing.Optional[typing.List["Reference"]]

    """ The event(s) being documented.
    List of `Reference` items (represented as `dict` in JSON).
    """




class CompositionSection(BackboneElement):
    """ Composition is broken into sections.

    The root of the sections that make up the composition.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Composition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    title: typing.Optional[FHIRString]

    """ Label for section (e.g. for ToC).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code: typing.Optional["CodeableConcept"]

    """ Classification of section (recommended).
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    author: typing.Optional[typing.List["Reference"]]

    """ Who and/or what authored the section.
    List of `Reference` items (represented as `dict` in JSON).
    """

    focus: typing.Optional["Reference"]

    """ Who/what the section is about, when it is not about the subject of
        composition.
    Type `Reference` (represented as `dict` in JSON).
    """

    text: typing.Optional["Narrative"]

    """ Text summary of the section, for human interpretation.
    Type `Narrative` (represented as `dict` in JSON).
    """

            
    
    
    mode: typing.Optional["ListMode"]

    """ working | snapshot | changes.
    Type `ListMode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    mode__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_mode`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    ordered_by: typing.Optional["CodeableConcept"]

    """ Order of section entries.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    entry: typing.Optional[typing.List["Reference"]]

    """ A reference to data that supports this section.
    List of `Reference` items (represented as `dict` in JSON).
    """

    empty_reason: typing.Optional["CodeableConcept"]

    """ Why the section is empty.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    section: typing.Optional[typing.List["CompositionSection"]]

    """ Nested Section.
    List of `CompositionSection` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["mode"]["enum"]
            enums.clear()
            for item in ListMode:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_mode = get_primitive_field_root_validator("mode")
    


class ConceptMapGroup(BackboneElement):
    """ Same source and target systems.

    A group of mappings that all have the same source and target system.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ConceptMap",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    source: typing.Optional[FHIRString]

    """ Source system where concepts to be mapped are defined.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    source__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_source`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    source_version: typing.Optional[FHIRString]

    """ Specific version of the  code system.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    source_version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_source_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    target: typing.Optional[FHIRString]

    """ Target system that the concepts are to be mapped to.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    target__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_target`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    target_version: typing.Optional[FHIRString]

    """ Specific version of the  code system.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    target_version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_target_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    element: typing.List["ConceptMapGroupElement"]

    """ Mappings for a concept from the source set.
    List of `ConceptMapGroupElement` items (represented as `dict` in JSON).
    """

    unmapped: typing.Optional["ConceptMapGroupUnmapped"]

    """ What to do when there is no mapping for the source concept.
    Type `ConceptMapGroupUnmapped` (represented as `dict` in JSON).
    """



    _validate_primitive_source = get_primitive_field_root_validator("source")
    
    _validate_primitive_source_version = get_primitive_field_root_validator("source_version")
    
    _validate_primitive_target = get_primitive_field_root_validator("target")
    
    _validate_primitive_target_version = get_primitive_field_root_validator("target_version")
    


class ConceptMapGroupElement(BackboneElement):
    """ Mappings for a concept from the source set.

    Mappings for an individual concept in the source to one or more concepts in
    the target.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ConceptMap",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: typing.Optional[FHIRCode]

    """ Identifies element being mapped.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    display: typing.Optional[FHIRString]

    """ Display for the code.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    display__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_display`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    target: typing.Optional[typing.List["ConceptMapGroupElementTarget"]]

    """ Concept in target system for element.
    List of `ConceptMapGroupElementTarget` items (represented as `dict` in JSON).
    """



    _validate_primitive_code = get_primitive_field_root_validator("code")
    
    _validate_primitive_display = get_primitive_field_root_validator("display")
    


class ConceptMapGroupElementTarget(BackboneElement):
    """ Concept in target system for element.

    A concept from the target value set that this concept maps to.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ConceptMap",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: typing.Optional[FHIRCode]

    """ Code that identifies the target element.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    display: typing.Optional[FHIRString]

    """ Display for the code.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    display__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_display`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    equivalence: "ConceptMapEquivalence"

    """ relatedto | equivalent | equal | wider | subsumes | narrower |
        specializes | inexact | unmatched | disjoint.
    Type `ConceptMapEquivalence` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    equivalence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_equivalence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    comment: typing.Optional[FHIRString]

    """ Description of status/issues in mapping.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    comment__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_comment`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    depends_on: typing.Optional[typing.List["ConceptMapGroupElementTargetDependsOn"]]

    """ Other elements required for this mapping (from context).
    List of `ConceptMapGroupElementTargetDependsOn` items (represented as `dict` in JSON).
    """

    product: typing.Optional[typing.List["ConceptMapGroupElementTargetDependsOn"]]

    """ Other concepts that this mapping also produces.
    List of `ConceptMapGroupElementTargetDependsOn` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["equivalence"]["enum"]
            enums.clear()
            for item in ConceptMapEquivalence:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_code = get_primitive_field_root_validator("code")
    
    _validate_primitive_display = get_primitive_field_root_validator("display")
    
    _validate_primitive_equivalence = get_primitive_field_root_validator("equivalence")
    
    _validate_primitive_comment = get_primitive_field_root_validator("comment")
    


class ConceptMapGroupElementTargetDependsOn(BackboneElement):
    """ Other elements required for this mapping (from context).

    A set of additional dependencies for this mapping to hold. This mapping is
    only applicable if the specified element can be resolved, and it has the
    specified value.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ConceptMap",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    property: FHIRRequiredString

    """ Reference to property mapping depends on.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    property__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_property`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    system: typing.Optional[FHIRString]

    """ Code System (if necessary).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    system__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_system`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value: FHIRRequiredString

    """ Value of the referenced element.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    display: typing.Optional[FHIRString]

    """ Display for the code (if value is a code).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    display__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_display`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_property = get_primitive_field_root_validator("property")
    
    _validate_primitive_system = get_primitive_field_root_validator("system")
    
    _validate_primitive_value = get_primitive_field_root_validator("value")
    
    _validate_primitive_display = get_primitive_field_root_validator("display")
    


class ConceptMapGroupUnmapped(BackboneElement):
    """ What to do when there is no mapping for the source concept.

    What to do when there is no mapping for the source concept. "Unmapped" does
    not include codes that are unmatched, and the unmapped element is ignored
    in a code is specified to have equivalence = unmatched.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ConceptMap",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    mode: "ConceptMapGroupUnmappedMode"

    """ provided | fixed | other-map.
    Type `ConceptMapGroupUnmappedMode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    mode__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_mode`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code: typing.Optional[FHIRCode]

    """ Fixed code when mode = fixed.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    display: typing.Optional[FHIRString]

    """ Display for the code.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    display__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_display`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    url: typing.Optional[FHIRString]

    """ canonical reference to an additional ConceptMap to use for mapping
        if the source concept is unmapped.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["mode"]["enum"]
            enums.clear()
            for item in ConceptMapGroupUnmappedMode:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_mode = get_primitive_field_root_validator("mode")
    
    _validate_primitive_code = get_primitive_field_root_validator("code")
    
    _validate_primitive_display = get_primitive_field_root_validator("display")
    
    _validate_primitive_url = get_primitive_field_root_validator("url")
    


class ConditionStage(BackboneElement):
    """ Stage/grade, usually assessed formally.

    Clinical stage or grade of a condition. May include formal severity
    assessments.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Condition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    summary: typing.Optional["CodeableConcept"]

    """ Simple summary (disease specific).
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    assessment: typing.Optional[typing.List["Reference"]]

    """ Formal record of assessment.
    List of `Reference` items (represented as `dict` in JSON).
    """

    type: typing.Optional["CodeableConcept"]

    """ Kind of staging.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """




class ConditionEvidence(BackboneElement):
    """ Supporting evidence.

    Supporting evidence / manifestations that are the basis of the Condition's
    verification status, such as evidence that confirmed or refuted the
    condition.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Condition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: typing.Optional[typing.List["CodeableConcept"]]

    """ Manifestation/symptom.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    detail: typing.Optional[typing.List["Reference"]]

    """ Supporting information found elsewhere.
    List of `Reference` items (represented as `dict` in JSON).
    """




class ConsentPolicy(BackboneElement):
    """ Policies covered by this consent.

    The references to the policies that are included in this consent scope.
    Policies may be organizational, but are often defined jurisdictionally, or
    in law.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Consent",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    authority: typing.Optional[FHIRString]

    """ Enforcement source for policy.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    authority__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_authority`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    uri: typing.Optional[FHIRString]

    """ Specific policy covered by this consent.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_authority = get_primitive_field_root_validator("authority")
    
    _validate_primitive_uri = get_primitive_field_root_validator("uri")
    


class ConsentVerification(BackboneElement):
    """ Consent Verified by patient or family.

    Whether a treatment instruction (e.g. artificial respiration yes or no) was
    verified with the patient, his/her family or another authorized person.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Consent",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    verified: bool

    """ Has been verified.
    Type `bool`. Is a JSON Primitive element.
    """
    

    verified__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_verified`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    verified_with: typing.Optional["Reference"]

    """ Person who verified.
    Type `Reference` (represented as `dict` in JSON).
    """

    verification_date: typing.Optional[FHIRDateTime]

    """ When consent verified.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    verification_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_verification_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_verified = get_primitive_field_root_validator("verified")
    
    _validate_primitive_verification_date = get_primitive_field_root_validator("verification_date")
    


class ConsentProvision(BackboneElement):
    """ Constraints to the base Consent.policyRule.

    An exception to the base policy of this consent. An exception can be an
    addition or removal of access permissions.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Consent",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    type: typing.Optional["ConsentProvisionType"]

    """ deny | permit.
    Type `ConsentProvisionType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    period: typing.Optional["Period"]

    """ Timeframe for this rule.
    Type `Period` (represented as `dict` in JSON).
    """

    actor: typing.Optional[typing.List["ConsentProvisionActor"]]

    """ Who|what controlled by this rule (or group, by role).
    List of `ConsentProvisionActor` items (represented as `dict` in JSON).
    """

    action: typing.Optional[typing.List["CodeableConcept"]]

    """ Actions controlled by this rule.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    security_label: typing.Optional[typing.List["Coding"]]

    """ Security Labels that define affected resources.
    List of `Coding` items (represented as `dict` in JSON).
    """

    purpose: typing.Optional[typing.List["Coding"]]

    """ Context of activities covered by this rule.
    List of `Coding` items (represented as `dict` in JSON).
    """

    class_: typing.Optional[typing.List["Coding"]]

    """ e.g. Resource Type, Profile, CDA, etc..
    List of `Coding` items (represented as `dict` in JSON).
    """

    code: typing.Optional[typing.List["CodeableConcept"]]

    """ e.g. LOINC or SNOMED CT code, etc. in the content.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    data_period: typing.Optional["Period"]

    """ Timeframe for data controlled by this rule.
    Type `Period` (represented as `dict` in JSON).
    """

    data: typing.Optional[typing.List["ConsentProvisionData"]]

    """ Data controlled by this rule.
    List of `ConsentProvisionData` items (represented as `dict` in JSON).
    """

    provision: typing.Optional[typing.List["ConsentProvision"]]

    """ Nested Exception Rules.
    List of `ConsentProvision` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in ConsentProvisionType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_type = get_primitive_field_root_validator("type")
    


class ConsentProvisionActor(BackboneElement):
    """ Who|what controlled by this rule (or group, by role).

    Who or what is controlled by this rule. Use group to identify a set of
    actors by some property they share (e.g. 'admitting officers').
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Consent",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    role: "CodeableConcept"

    """ How the actor is involved.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    reference: "Reference"

    """ Resource for the actor (or group, by role).
    Type `Reference` (represented as `dict` in JSON).
    """




class ConsentProvisionData(BackboneElement):
    """ Data controlled by this rule.

    The resources controlled by this rule if specific resources are referenced.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Consent",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    meaning: "ConsentDataMeaning"

    """ instance | related | dependents | authoredby.
    Type `ConsentDataMeaning` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    meaning__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_meaning`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    reference: "Reference"

    """ The actual data reference.
    Type `Reference` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["meaning"]["enum"]
            enums.clear()
            for item in ConsentDataMeaning:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_meaning = get_primitive_field_root_validator("meaning")
    


class ContractContentDefinition(BackboneElement):
    """ Contract precursor content.

    Precusory content developed with a focus and intent of supporting the
    formation a Contract instance, which may be associated with and
    transformable into a Contract.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Contract",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: "CodeableConcept"

    """ Content structure and use.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    sub_type: typing.Optional["CodeableConcept"]

    """ Detailed Content Type Definition.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    publisher: typing.Optional["Reference"]

    """ Publisher Entity.
    Type `Reference` (represented as `dict` in JSON).
    """

    publication_date: typing.Optional[FHIRDateTime]

    """ When published.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publication_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publication_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    publication_status: "ContractResourcePublicationStatusCodes"

    """ amended | appended | cancelled | disputed | entered-in-error |
        executable | executed | negotiable | offered | policy | rejected |
        renewed | revoked | resolved | terminated.
    Type `ContractResourcePublicationStatusCodes` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publication_status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publication_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    copyright: typing.Optional[FHIRString]

    """ Publication Ownership.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    copyright__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_copyright`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["publicationStatus"]["enum"]
            enums.clear()
            for item in ContractResourcePublicationStatusCodes:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_publication_date = get_primitive_field_root_validator("publication_date")
    
    _validate_primitive_publication_status = get_primitive_field_root_validator("publication_status")
    
    _validate_primitive_copyright = get_primitive_field_root_validator("copyright")
    


class ContractTerm(BackboneElement):
    """ Contract Term List.

    One or more Contract Provisions, which may be related and conveyed as a
    group, and may contain nested groups.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Contract",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional["Identifier"]

    """ Contract Term Number.
    Type `Identifier` (represented as `dict` in JSON).
    """

    issued: typing.Optional[FHIRDateTime]

    """ Contract Term Issue Date Time.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    issued__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_issued`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    applies: typing.Optional["Period"]

    """ Contract Term Effective Time.
    Type `Period` (represented as `dict` in JSON).
    """

    topic_codeable_concept: typing.Optional["CodeableConcept"]

    """ Term Concern.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    topic_reference: typing.Optional["Reference"]

    """ Term Concern.
    Type `Reference` (represented as `dict` in JSON).
    """

    type: typing.Optional["CodeableConcept"]

    """ Contract Term Type or Form.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    sub_type: typing.Optional["CodeableConcept"]

    """ Contract Term Type specific classification.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    text: typing.Optional[FHIRString]

    """ Term Statement.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    text__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_text`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    security_label: typing.Optional[typing.List["ContractTermSecurityLabel"]]

    """ Protection for the Term.
    List of `ContractTermSecurityLabel` items (represented as `dict` in JSON).
    """

    offer: "ContractTermOffer"

    """ Context of the Contract term.
    Type `ContractTermOffer` (represented as `dict` in JSON).
    """

    asset: typing.Optional[typing.List["ContractTermAsset"]]

    """ Contract Term Asset List.
    List of `ContractTermAsset` items (represented as `dict` in JSON).
    """

    action: typing.Optional[typing.List["ContractTermAction"]]

    """ Entity being ascribed responsibility.
    List of `ContractTermAction` items (represented as `dict` in JSON).
    """

    group: typing.Optional[typing.List["ContractTerm"]]

    """ Nested Contract Term Group.
    List of `ContractTerm` items (represented as `dict` in JSON).
    """



#   {'path': 'Contract.term.topic[x]', 'choice_of_type': 'topic', 'orig_name': 'topicCodeableConcept', 'name': 'topicCodeableConcept', 'parent_name': 'Contract.term', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Term Concern', 'formal': 'The entity that the term applies to.', 'representation': None}
    _topic_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['topic_codeable_concept', 'topic_reference']), True))

    _validate_primitive_issued = get_primitive_field_root_validator("issued")
    
    _validate_primitive_text = get_primitive_field_root_validator("text")
    


class ContractTermSecurityLabel(BackboneElement):
    """ Protection for the Term.

    Security labels that protect the handling of information about the term and
    its elements, which may be specifically identified..
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Contract",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    number: typing.Optional[typing.List[typing.Optional[FHIRUnsignedInt]]]

    """ Link to Security Labels.
    List of `FHIRUnsignedInt` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    number__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    classification: "Coding"

    """ Confidentiality Protection.
    Type `Coding` (represented as `dict` in JSON).
    """

    category: typing.Optional[typing.List["Coding"]]

    """ Applicable Policy.
    List of `Coding` items (represented as `dict` in JSON).
    """

    control: typing.Optional[typing.List["Coding"]]

    """ Handling Instructions.
    List of `Coding` items (represented as `dict` in JSON).
    """



    _validate_primitive_number = get_primitive_field_root_validator("number")
    


class ContractTermOffer(BackboneElement):
    """ Context of the Contract term.

    The matter of concern in the context of this provision of the agrement.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Contract",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Offer business ID.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    party: typing.Optional[typing.List["ContractTermOfferParty"]]

    """ Offer Recipient.
    List of `ContractTermOfferParty` items (represented as `dict` in JSON).
    """

    topic: typing.Optional["Reference"]

    """ Negotiable offer asset.
    Type `Reference` (represented as `dict` in JSON).
    """

    type: typing.Optional["CodeableConcept"]

    """ Contract Offer Type or Form.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    decision: typing.Optional["CodeableConcept"]

    """ Accepting party choice.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    decision_mode: typing.Optional[typing.List["CodeableConcept"]]

    """ How decision is conveyed.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    answer: typing.Optional[typing.List["ContractTermOfferAnswer"]]

    """ Response to offer text.
    List of `ContractTermOfferAnswer` items (represented as `dict` in JSON).
    """

    text: typing.Optional[FHIRString]

    """ Human readable offer text.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    text__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_text`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    link_id: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Pointer to text.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    link_id__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_link_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    security_label_number: typing.Optional[typing.List[typing.Optional[FHIRUnsignedInt]]]

    """ Offer restriction numbers.
    List of `FHIRUnsignedInt` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    security_label_number__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_security_label_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_text = get_primitive_field_root_validator("text")
    
    _validate_primitive_link_id = get_primitive_field_root_validator("link_id")
    
    _validate_primitive_security_label_number = get_primitive_field_root_validator("security_label_number")
    


class ContractTermOfferParty(BackboneElement):
    """ Offer Recipient.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Contract",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    reference: typing.List["Reference"]

    """ Referenced entity.
    List of `Reference` items (represented as `dict` in JSON).
    """

    role: "CodeableConcept"

    """ Participant engagement type.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """




class ContractTermOfferAnswer(BackboneElement):
    """ Response to offer text.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Contract",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    value_boolean: typing.Optional[bool]

    """ The actual answer response.
    Type `bool`. Is a JSON Primitive element.
    """
    

    value_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_decimal: typing.Optional[decimal.Decimal]

    """ The actual answer response.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    value_decimal__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_decimal`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_integer: typing.Optional[FHIRInt]

    """ The actual answer response.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_integer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_integer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_date: typing.Optional[FHIRDate]

    """ The actual answer response.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_date_time: typing.Optional[FHIRDateTime]

    """ The actual answer response.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_time: typing.Optional[FHIRTime]

    """ The actual answer response.
    Type `FHIRTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_string: typing.Optional[FHIRString]

    """ The actual answer response.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_uri: typing.Optional[FHIRString]

    """ The actual answer response.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_attachment: typing.Optional["Attachment"]

    """ The actual answer response.
    Type `Attachment` (represented as `dict` in JSON).
    """

    value_coding: typing.Optional["Coding"]

    """ The actual answer response.
    Type `Coding` (represented as `dict` in JSON).
    """

    value_quantity: typing.Optional["Quantity"]

    """ The actual answer response.
    Type `Quantity` (represented as `dict` in JSON).
    """

    value_reference: typing.Optional["Reference"]

    """ The actual answer response.
    Type `Reference` (represented as `dict` in JSON).
    """



#   {'path': 'Contract.term.offer.answer.value[x]', 'choice_of_type': 'value', 'orig_name': 'valueBoolean', 'name': 'valueBoolean', 'parent_name': 'Contract.term.offer.answer', 'class_name': 'bool', 'enum': None, 'module_name': None, 'json_class': 'bool', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'The actual answer response', 'formal': 'Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.', 'representation': None}
    _value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['value_boolean', 'value_decimal', 'value_integer', 'value_date', 'value_date_time', 'value_time', 'value_string', 'value_uri', 'value_attachment', 'value_coding', 'value_quantity', 'value_reference']), False))

    _validate_primitive_value_boolean = get_primitive_field_root_validator("value_boolean")
    
    _validate_primitive_value_decimal = get_primitive_field_root_validator("value_decimal")
    
    _validate_primitive_value_integer = get_primitive_field_root_validator("value_integer")
    
    _validate_primitive_value_date = get_primitive_field_root_validator("value_date")
    
    _validate_primitive_value_date_time = get_primitive_field_root_validator("value_date_time")
    
    _validate_primitive_value_time = get_primitive_field_root_validator("value_time")
    
    _validate_primitive_value_string = get_primitive_field_root_validator("value_string")
    
    _validate_primitive_value_uri = get_primitive_field_root_validator("value_uri")
    


class ContractTermAsset(BackboneElement):
    """ Contract Term Asset List.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Contract",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    scope: typing.Optional["CodeableConcept"]

    """ Range of asset.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    type: typing.Optional[typing.List["CodeableConcept"]]

    """ Asset category.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    type_reference: typing.Optional[typing.List["Reference"]]

    """ Associated entities.
    List of `Reference` items (represented as `dict` in JSON).
    """

    subtype: typing.Optional[typing.List["CodeableConcept"]]

    """ Asset sub-category.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    relationship: typing.Optional["Coding"]

    """ Kinship of the asset.
    Type `Coding` (represented as `dict` in JSON).
    """

    context: typing.Optional[typing.List["ContractTermAssetContext"]]

    """ Circumstance of the asset.
    List of `ContractTermAssetContext` items (represented as `dict` in JSON).
    """

    condition: typing.Optional[FHIRString]

    """ Quality desctiption of asset.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    condition__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_condition`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    period_type: typing.Optional[typing.List["CodeableConcept"]]

    """ Asset availability types.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    period: typing.Optional[typing.List["Period"]]

    """ Time period of the asset.
    List of `Period` items (represented as `dict` in JSON).
    """

    use_period: typing.Optional[typing.List["Period"]]

    """ Time period.
    List of `Period` items (represented as `dict` in JSON).
    """

    text: typing.Optional[FHIRString]

    """ Asset clause or question text.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    text__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_text`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    link_id: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Pointer to asset text.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    link_id__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_link_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    answer: typing.Optional[typing.List["ContractTermOfferAnswer"]]

    """ Response to assets.
    List of `ContractTermOfferAnswer` items (represented as `dict` in JSON).
    """

    security_label_number: typing.Optional[typing.List[typing.Optional[FHIRUnsignedInt]]]

    """ Asset restriction numbers.
    List of `FHIRUnsignedInt` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    security_label_number__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_security_label_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    valued_item: typing.Optional[typing.List["ContractTermAssetValuedItem"]]

    """ Contract Valued Item List.
    List of `ContractTermAssetValuedItem` items (represented as `dict` in JSON).
    """



    _validate_primitive_condition = get_primitive_field_root_validator("condition")
    
    _validate_primitive_text = get_primitive_field_root_validator("text")
    
    _validate_primitive_link_id = get_primitive_field_root_validator("link_id")
    
    _validate_primitive_security_label_number = get_primitive_field_root_validator("security_label_number")
    


class ContractTermAssetContext(BackboneElement):
    """ Circumstance of the asset.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Contract",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    reference: typing.Optional["Reference"]

    """ Creator,custodian or owner.
    Type `Reference` (represented as `dict` in JSON).
    """

    code: typing.Optional[typing.List["CodeableConcept"]]

    """ Codeable asset context.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    text: typing.Optional[FHIRString]

    """ Context description.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    text__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_text`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_text = get_primitive_field_root_validator("text")
    


class ContractTermAssetValuedItem(BackboneElement):
    """ Contract Valued Item List.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Contract",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    entity_codeable_concept: typing.Optional["CodeableConcept"]

    """ Contract Valued Item Type.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    entity_reference: typing.Optional["Reference"]

    """ Contract Valued Item Type.
    Type `Reference` (represented as `dict` in JSON).
    """

    identifier: typing.Optional["Identifier"]

    """ Contract Valued Item Number.
    Type `Identifier` (represented as `dict` in JSON).
    """

    effective_time: typing.Optional[FHIRDateTime]

    """ Contract Valued Item Effective Tiem.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    effective_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_effective_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    quantity: typing.Optional["Quantity"]

    """ Count of Contract Valued Items.
    Type `Quantity` (represented as `dict` in JSON).
    """

    unit_price: typing.Optional["Money"]

    """ Contract Valued Item fee, charge, or cost.
    Type `Money` (represented as `dict` in JSON).
    """

    factor: typing.Optional[decimal.Decimal]

    """ Contract Valued Item Price Scaling Factor.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    factor__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_factor`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    points: typing.Optional[decimal.Decimal]

    """ Contract Valued Item Difficulty Scaling Factor.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    points__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_points`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    net: typing.Optional["Money"]

    """ Total Contract Valued Item Value.
    Type `Money` (represented as `dict` in JSON).
    """

    payment: typing.Optional[FHIRString]

    """ Terms of valuation.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    payment__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_payment`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    payment_date: typing.Optional[FHIRDateTime]

    """ When payment is due.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    payment_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_payment_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    responsible: typing.Optional["Reference"]

    """ Who will make payment.
    Type `Reference` (represented as `dict` in JSON).
    """

    recipient: typing.Optional["Reference"]

    """ Who will receive payment.
    Type `Reference` (represented as `dict` in JSON).
    """

    link_id: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Pointer to specific item.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    link_id__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_link_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    security_label_number: typing.Optional[typing.List[typing.Optional[FHIRUnsignedInt]]]

    """ Security Labels that define affected terms.
    List of `FHIRUnsignedInt` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    security_label_number__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_security_label_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'Contract.term.asset.valuedItem.entity[x]', 'choice_of_type': 'entity', 'orig_name': 'entityCodeableConcept', 'name': 'entityCodeableConcept', 'parent_name': 'Contract.term.asset.valuedItem', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Contract Valued Item Type', 'formal': 'Specific type of Contract Valued Item that may be priced.', 'representation': None}
    _entity_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['entity_codeable_concept', 'entity_reference']), True))

    _validate_primitive_effective_time = get_primitive_field_root_validator("effective_time")
    
    _validate_primitive_factor = get_primitive_field_root_validator("factor")
    
    _validate_primitive_points = get_primitive_field_root_validator("points")
    
    _validate_primitive_payment = get_primitive_field_root_validator("payment")
    
    _validate_primitive_payment_date = get_primitive_field_root_validator("payment_date")
    
    _validate_primitive_link_id = get_primitive_field_root_validator("link_id")
    
    _validate_primitive_security_label_number = get_primitive_field_root_validator("security_label_number")
    


class ContractTermAction(BackboneElement):
    """ Entity being ascribed responsibility.

    An actor taking a role in an activity for which it can be assigned some
    degree of responsibility for the activity taking place.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Contract",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    do_not_perform: typing.Optional[bool]

    """ True if the term prohibits the  action.
    Type `bool`. Is a JSON Primitive element.
    """
    

    do_not_perform__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_do_not_perform`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: "CodeableConcept"

    """ Type or form of the action.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject: typing.Optional[typing.List["ContractTermActionSubject"]]

    """ Entity of the action.
    List of `ContractTermActionSubject` items (represented as `dict` in JSON).
    """

    intent: "CodeableConcept"

    """ Purpose for the Contract Term Action.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    link_id: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Pointer to specific item.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    link_id__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_link_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    status: "CodeableConcept"

    """ State of the action.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    context: typing.Optional["Reference"]

    """ Episode associated with action.
    Type `Reference` (represented as `dict` in JSON).
    """

    context_link_id: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Pointer to specific item.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    context_link_id__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_context_link_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    occurrence_date_time: typing.Optional[FHIRDateTime]

    """ When action happens.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    occurrence_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_occurrence_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    occurrence_period: typing.Optional["Period"]

    """ When action happens.
    Type `Period` (represented as `dict` in JSON).
    """

    occurrence_timing: typing.Optional["Timing"]

    """ When action happens.
    Type `Timing` (represented as `dict` in JSON).
    """

    requester: typing.Optional[typing.List["Reference"]]

    """ Who asked for action.
    List of `Reference` items (represented as `dict` in JSON).
    """

    requester_link_id: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Pointer to specific item.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    requester_link_id__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_requester_link_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    performer_type: typing.Optional[typing.List["CodeableConcept"]]

    """ Kind of service performer.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    performer_role: typing.Optional["CodeableConcept"]

    """ Competency of the performer.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    performer: typing.Optional["Reference"]

    """ Actor that wil execute (or not) the action.
    Type `Reference` (represented as `dict` in JSON).
    """

    performer_link_id: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Pointer to specific item.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    performer_link_id__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_performer_link_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    reason_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Why is action (not) needed?.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    reason_reference: typing.Optional[typing.List["Reference"]]

    """ Why is action (not) needed?.
    List of `Reference` items (represented as `dict` in JSON).
    """

    reason: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Why action is to be performed.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    reason__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_reason`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    reason_link_id: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Pointer to specific item.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    reason_link_id__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_reason_link_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    note: typing.Optional[typing.List["Annotation"]]

    """ Comments about the action.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    security_label_number: typing.Optional[typing.List[typing.Optional[FHIRUnsignedInt]]]

    """ Action restriction numbers.
    List of `FHIRUnsignedInt` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    security_label_number__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_security_label_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'Contract.term.action.occurrence[x]', 'choice_of_type': 'occurrence', 'orig_name': 'occurrenceDateTime', 'name': 'occurrenceDateTime', 'parent_name': 'Contract.term.action', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'When action happens', 'formal': None, 'representation': None}
    _occurrence_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['occurrence_date_time', 'occurrence_period', 'occurrence_timing']), True))

    _validate_primitive_do_not_perform = get_primitive_field_root_validator("do_not_perform")
    
    _validate_primitive_link_id = get_primitive_field_root_validator("link_id")
    
    _validate_primitive_context_link_id = get_primitive_field_root_validator("context_link_id")
    
    _validate_primitive_occurrence_date_time = get_primitive_field_root_validator("occurrence_date_time")
    
    _validate_primitive_requester_link_id = get_primitive_field_root_validator("requester_link_id")
    
    _validate_primitive_performer_link_id = get_primitive_field_root_validator("performer_link_id")
    
    _validate_primitive_reason = get_primitive_field_root_validator("reason")
    
    _validate_primitive_reason_link_id = get_primitive_field_root_validator("reason_link_id")
    
    _validate_primitive_security_label_number = get_primitive_field_root_validator("security_label_number")
    


class ContractTermActionSubject(BackboneElement):
    """ Entity of the action.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Contract",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    reference: typing.List["Reference"]

    """ Entity of the action.
    List of `Reference` items (represented as `dict` in JSON).
    """

    role: typing.Optional["CodeableConcept"]

    """ Role type of the agent.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """




class ContractSigner(BackboneElement):
    """ Contract Signatory.

    Parties with legal standing in the Contract, including the principal
    parties, the grantor(s) and grantee(s), which are any person or
    organization bound by the contract, and any ancillary parties, which
    facilitate the execution of the contract such as a notary or witness.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Contract",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: "Coding"

    """ Contract Signatory Role.
    Type `Coding` (represented as `dict` in JSON).
    """

    party: "Reference"

    """ Contract Signatory Party.
    Type `Reference` (represented as `dict` in JSON).
    """

    signature: typing.List["Signature"]

    """ Contract Documentation Signature.
    List of `Signature` items (represented as `dict` in JSON).
    """




class ContractFriendly(BackboneElement):
    """ Contract Friendly Language.

    The "patient friendly language" versionof the Contract in whole or in
    parts. "Patient friendly language" means the representation of the Contract
    and Contract Provisions in a manner that is readily accessible and
    understandable by a layperson in accordance with best practices for
    communication styles that ensure that those agreeing to or signing the
    Contract understand the roles, actions, obligations, responsibilities, and
    implication of the agreement.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Contract",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    content_attachment: typing.Optional["Attachment"]

    """ Easily comprehended representation of this Contract.
    Type `Attachment` (represented as `dict` in JSON).
    """

    content_reference: typing.Optional["Reference"]

    """ Easily comprehended representation of this Contract.
    Type `Reference` (represented as `dict` in JSON).
    """



#   {'path': 'Contract.friendly.content[x]', 'choice_of_type': 'content', 'orig_name': 'contentAttachment', 'name': 'contentAttachment', 'parent_name': 'Contract.friendly', 'class_name': 'Attachment', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Easily comprehended representation of this Contract', 'formal': 'Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.', 'representation': None}
    _content_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['content_attachment', 'content_reference']), False))


class ContractLegal(BackboneElement):
    """ Contract Legal Language.

    List of Legal expressions or representations of this Contract.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Contract",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    content_attachment: typing.Optional["Attachment"]

    """ Contract Legal Text.
    Type `Attachment` (represented as `dict` in JSON).
    """

    content_reference: typing.Optional["Reference"]

    """ Contract Legal Text.
    Type `Reference` (represented as `dict` in JSON).
    """



#   {'path': 'Contract.legal.content[x]', 'choice_of_type': 'content', 'orig_name': 'contentAttachment', 'name': 'contentAttachment', 'parent_name': 'Contract.legal', 'class_name': 'Attachment', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Contract Legal Text', 'formal': 'Contract legal text in human renderable form.', 'representation': None}
    _content_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['content_attachment', 'content_reference']), False))


class ContractRule(BackboneElement):
    """ Computable Contract Language.

    List of Computable Policy Rule Language Representations of this Contract.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Contract",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    content_attachment: typing.Optional["Attachment"]

    """ Computable Contract Rules.
    Type `Attachment` (represented as `dict` in JSON).
    """

    content_reference: typing.Optional["Reference"]

    """ Computable Contract Rules.
    Type `Reference` (represented as `dict` in JSON).
    """



#   {'path': 'Contract.rule.content[x]', 'choice_of_type': 'content', 'orig_name': 'contentAttachment', 'name': 'contentAttachment', 'parent_name': 'Contract.rule', 'class_name': 'Attachment', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Computable Contract Rules', 'formal': 'Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).', 'representation': None}
    _content_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['content_attachment', 'content_reference']), False))


class CoverageClass(BackboneElement):
    """ Additional coverage classifications.

    A suite of underwriter specific classifiers.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Coverage",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: "CodeableConcept"

    """ Type of class such as 'group' or 'plan'.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value: FHIRRequiredString

    """ Value associated with the type.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Human readable description of the type and value.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_value = get_primitive_field_root_validator("value")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    


class CoverageCostToBeneficiary(BackboneElement):
    """ Patient payments for services/products.

    A suite of codes indicating the cost category and associated amount which
    have been detailed in the policy and may have been  included on the health
    card.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Coverage",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: typing.Optional["CodeableConcept"]

    """ Cost category.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value_quantity: typing.Optional["Quantity"]

    """ The amount or percentage due from the beneficiary.
    Type `Quantity` (represented as `dict` in JSON).
    """

    value_money: typing.Optional["Money"]

    """ The amount or percentage due from the beneficiary.
    Type `Money` (represented as `dict` in JSON).
    """

    exception: typing.Optional[typing.List["CoverageCostToBeneficiaryException"]]

    """ Exceptions for patient payments.
    List of `CoverageCostToBeneficiaryException` items (represented as `dict` in JSON).
    """



#   {'path': 'Coverage.costToBeneficiary.value[x]', 'choice_of_type': 'value', 'orig_name': 'valueQuantity', 'name': 'valueQuantity', 'parent_name': 'Coverage.costToBeneficiary', 'class_name': 'Quantity', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'The amount or percentage due from the beneficiary', 'formal': 'The amount due from the patient for the cost category.', 'representation': None}
    _value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['value_quantity', 'value_money']), False))


class CoverageCostToBeneficiaryException(BackboneElement):
    """ Exceptions for patient payments.

    A suite of codes indicating exceptions or reductions to patient costs and
    their effective periods.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Coverage",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: "CodeableConcept"

    """ Exception category.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    period: typing.Optional["Period"]

    """ The effective period of the exception.
    Type `Period` (represented as `dict` in JSON).
    """




class CoverageEligibilityRequestSupportingInfo(BackboneElement):
    """ Supporting information.

    Additional information codes regarding exceptions, special considerations,
    the condition, situation, prior or concurrent issues.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CoverageEligibilityRequest",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    sequence: FHIRPositiveInt

    """ Information instance identifier.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    information: "Reference"

    """ Data to be provided.
    Type `Reference` (represented as `dict` in JSON).
    """

    applies_to_all: typing.Optional[bool]

    """ Applies to all items.
    Type `bool`. Is a JSON Primitive element.
    """
    

    applies_to_all__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_applies_to_all`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_sequence = get_primitive_field_root_validator("sequence")
    
    _validate_primitive_applies_to_all = get_primitive_field_root_validator("applies_to_all")
    


class CoverageEligibilityRequestInsurance(BackboneElement):
    """ Patient insurance information.

    Financial instruments for reimbursement for the health care products and
    services.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CoverageEligibilityRequest",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    focal: typing.Optional[bool]

    """ Applicable coverage.
    Type `bool`. Is a JSON Primitive element.
    """
    

    focal__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_focal`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    coverage: "Reference"

    """ Insurance information.
    Type `Reference` (represented as `dict` in JSON).
    """

    business_arrangement: typing.Optional[FHIRString]

    """ Additional provider contract number.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    business_arrangement__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_business_arrangement`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_focal = get_primitive_field_root_validator("focal")
    
    _validate_primitive_business_arrangement = get_primitive_field_root_validator("business_arrangement")
    


class CoverageEligibilityRequestItem(BackboneElement):
    """ Item to be evaluated for eligibiity.

    Service categories or billable services for which benefit details and/or an
    authorization prior to service delivery may be required by the payor.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CoverageEligibilityRequest",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    supporting_info_sequence: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Applicable exception or supporting information.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    supporting_info_sequence__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_supporting_info_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    category: typing.Optional["CodeableConcept"]

    """ Benefit classification.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    product_or_service: typing.Optional["CodeableConcept"]

    """ Billing, service, product, or drug code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    modifier: typing.Optional[typing.List["CodeableConcept"]]

    """ Product or service billing modifiers.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    provider: typing.Optional["Reference"]

    """ Perfoming practitioner.
    Type `Reference` (represented as `dict` in JSON).
    """

    quantity: typing.Optional["Quantity"]

    """ Count of products or services.
    Type `Quantity` (represented as `dict` in JSON).
    """

    unit_price: typing.Optional["Money"]

    """ Fee, charge or cost per item.
    Type `Money` (represented as `dict` in JSON).
    """

    facility: typing.Optional["Reference"]

    """ Servicing facility.
    Type `Reference` (represented as `dict` in JSON).
    """

    diagnosis: typing.Optional[typing.List["CoverageEligibilityRequestItemDiagnosis"]]

    """ Applicable diagnosis.
    List of `CoverageEligibilityRequestItemDiagnosis` items (represented as `dict` in JSON).
    """

    detail: typing.Optional[typing.List["Reference"]]

    """ Product or service details.
    List of `Reference` items (represented as `dict` in JSON).
    """



    _validate_primitive_supporting_info_sequence = get_primitive_field_root_validator("supporting_info_sequence")
    


class CoverageEligibilityRequestItemDiagnosis(BackboneElement):
    """ Applicable diagnosis.

    Patient diagnosis for which care is sought.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CoverageEligibilityRequest",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    diagnosis_codeable_concept: typing.Optional["CodeableConcept"]

    """ Nature of illness or problem.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    diagnosis_reference: typing.Optional["Reference"]

    """ Nature of illness or problem.
    Type `Reference` (represented as `dict` in JSON).
    """



#   {'path': 'CoverageEligibilityRequest.item.diagnosis.diagnosis[x]', 'choice_of_type': 'diagnosis', 'orig_name': 'diagnosisCodeableConcept', 'name': 'diagnosisCodeableConcept', 'parent_name': 'CoverageEligibilityRequest.item.diagnosis', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Nature of illness or problem', 'formal': 'The nature of illness or problem in a coded form or as a reference to an external defined Condition.', 'representation': None}
    _diagnosis_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['diagnosis_codeable_concept', 'diagnosis_reference']), True))


class CoverageEligibilityResponseInsurance(BackboneElement):
    """ Patient insurance information.

    Financial instruments for reimbursement for the health care products and
    services.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CoverageEligibilityResponse",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    coverage: "Reference"

    """ Insurance information.
    Type `Reference` (represented as `dict` in JSON).
    """

    inforce: typing.Optional[bool]

    """ Coverage inforce indicator.
    Type `bool`. Is a JSON Primitive element.
    """
    

    inforce__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_inforce`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    benefit_period: typing.Optional["Period"]

    """ When the benefits are applicable.
    Type `Period` (represented as `dict` in JSON).
    """

    item: typing.Optional[typing.List["CoverageEligibilityResponseInsuranceItem"]]

    """ Benefits and authorization details.
    List of `CoverageEligibilityResponseInsuranceItem` items (represented as `dict` in JSON).
    """



    _validate_primitive_inforce = get_primitive_field_root_validator("inforce")
    


class CoverageEligibilityResponseInsuranceItem(BackboneElement):
    """ Benefits and authorization details.

    Benefits and optionally current balances, and authorization details by
    category or service.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CoverageEligibilityResponse",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    category: typing.Optional["CodeableConcept"]

    """ Benefit classification.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    product_or_service: typing.Optional["CodeableConcept"]

    """ Billing, service, product, or drug code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    modifier: typing.Optional[typing.List["CodeableConcept"]]

    """ Product or service billing modifiers.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    provider: typing.Optional["Reference"]

    """ Performing practitioner.
    Type `Reference` (represented as `dict` in JSON).
    """

    excluded: typing.Optional[bool]

    """ Excluded from the plan.
    Type `bool`. Is a JSON Primitive element.
    """
    

    excluded__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_excluded`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Short name for the benefit.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ Description of the benefit or services covered.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    network: typing.Optional["CodeableConcept"]

    """ In or out of network.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    unit: typing.Optional["CodeableConcept"]

    """ Individual or family.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    term: typing.Optional["CodeableConcept"]

    """ Annual or lifetime.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    benefit: typing.Optional[typing.List["CoverageEligibilityResponseInsuranceItemBenefit"]]

    """ Benefit Summary.
    List of `CoverageEligibilityResponseInsuranceItemBenefit` items (represented as `dict` in JSON).
    """

    authorization_required: typing.Optional[bool]

    """ Authorization required flag.
    Type `bool`. Is a JSON Primitive element.
    """
    

    authorization_required__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_authorization_required`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    authorization_supporting: typing.Optional[typing.List["CodeableConcept"]]

    """ Type of required supporting materials.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    authorization_url: typing.Optional[FHIRString]

    """ Preauthorization requirements endpoint.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    authorization_url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_authorization_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_excluded = get_primitive_field_root_validator("excluded")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_authorization_required = get_primitive_field_root_validator("authorization_required")
    
    _validate_primitive_authorization_url = get_primitive_field_root_validator("authorization_url")
    


class CoverageEligibilityResponseInsuranceItemBenefit(BackboneElement):
    """ Benefit Summary.

    Benefits used to date.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CoverageEligibilityResponse",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: "CodeableConcept"

    """ Benefit classification.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    allowed_unsigned_int: typing.Optional[FHIRUnsignedInt]

    """ Benefits allowed.
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    allowed_unsigned_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_allowed_unsigned_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    allowed_string: typing.Optional[FHIRString]

    """ Benefits allowed.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    allowed_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_allowed_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    allowed_money: typing.Optional["Money"]

    """ Benefits allowed.
    Type `Money` (represented as `dict` in JSON).
    """

    used_unsigned_int: typing.Optional[FHIRUnsignedInt]

    """ Benefits used.
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    used_unsigned_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_used_unsigned_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    used_string: typing.Optional[FHIRString]

    """ Benefits used.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    used_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_used_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    used_money: typing.Optional["Money"]

    """ Benefits used.
    Type `Money` (represented as `dict` in JSON).
    """



#   {'path': 'CoverageEligibilityResponse.insurance.item.benefit.allowed[x]', 'choice_of_type': 'allowed', 'orig_name': 'allowedUnsignedInt', 'name': 'allowedUnsignedInt', 'parent_name': 'CoverageEligibilityResponse.insurance.item.benefit', 'class_name': 'FHIRUnsignedInt', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Benefits allowed', 'formal': 'The quantity of the benefit which is permitted under the coverage.', 'representation': None}
    _allowed_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['allowed_unsigned_int', 'allowed_string', 'allowed_money']), True))

#   {'path': 'CoverageEligibilityResponse.insurance.item.benefit.used[x]', 'choice_of_type': 'used', 'orig_name': 'usedUnsignedInt', 'name': 'usedUnsignedInt', 'parent_name': 'CoverageEligibilityResponse.insurance.item.benefit', 'class_name': 'FHIRUnsignedInt', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Benefits used', 'formal': 'The quantity of the benefit which have been consumed to date.', 'representation': None}
    _used_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['used_unsigned_int', 'used_string', 'used_money']), True))

    _validate_primitive_allowed_unsigned_int = get_primitive_field_root_validator("allowed_unsigned_int")
    
    _validate_primitive_allowed_string = get_primitive_field_root_validator("allowed_string")
    
    _validate_primitive_used_unsigned_int = get_primitive_field_root_validator("used_unsigned_int")
    
    _validate_primitive_used_string = get_primitive_field_root_validator("used_string")
    


class CoverageEligibilityResponseError(BackboneElement):
    """ Processing errors.

    Errors encountered during the processing of the request.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/CoverageEligibilityResponse",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: "CodeableConcept"

    """ Error code detailing processing issues.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """




class DetectedIssueEvidence(BackboneElement):
    """ Supporting evidence.

    Supporting evidence or manifestations that provide the basis for
    identifying the detected issue such as a GuidanceResponse or MeasureReport.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DetectedIssue",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: typing.Optional[typing.List["CodeableConcept"]]

    """ Manifestation.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    detail: typing.Optional[typing.List["Reference"]]

    """ Supporting information.
    List of `Reference` items (represented as `dict` in JSON).
    """




class DetectedIssueMitigation(BackboneElement):
    """ Step taken to address.

    Indicates an action that has been taken or is committed to reduce or
    eliminate the likelihood of the risk identified by the detected issue from
    manifesting.  Can also reflect an observation of known mitigating factors
    that may reduce/eliminate the need for any action.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DetectedIssue",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    action: "CodeableConcept"

    """ What mitigation?.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    date: typing.Optional[FHIRDateTime]

    """ Date committed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    author: typing.Optional["Reference"]

    """ Who is committing?.
    Type `Reference` (represented as `dict` in JSON).
    """



    _validate_primitive_date = get_primitive_field_root_validator("date")
    


class DeviceUdiCarrier(BackboneElement):
    """ Unique Device Identifier (UDI) Barcode string.

    Unique device identifier (UDI) assigned to device label or package.  Note
    that the Device may include multiple udiCarriers as it either may include
    just the udiCarrier for the jurisdiction it is sold, or for multiple
    jurisdictions it could have been sold.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Device",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    device_identifier: typing.Optional[FHIRString]

    """ Mandatory fixed portion of UDI.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    device_identifier__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_device_identifier`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    issuer: typing.Optional[FHIRString]

    """ UDI Issuing Organization.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    issuer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_issuer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    jurisdiction: typing.Optional[FHIRString]

    """ Regional UDI authority.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    jurisdiction__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_jurisdiction`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    carrier_a_i_d_c: typing.Optional[FHIRBase64Binary]

    """ UDI Machine Readable Barcode String.
    Type `FHIRBase64Binary` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    carrier_a_i_d_c__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_carrier_a_i_d_c`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    carrier_h_r_f: typing.Optional[FHIRString]

    """ UDI Human Readable Barcode String.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    carrier_h_r_f__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_carrier_h_r_f`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    entry_type: typing.Optional["UDIEntryType"]

    """ barcode | rfid | manual +.
    Type `UDIEntryType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    entry_type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_entry_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["entryType"]["enum"]
            enums.clear()
            for item in UDIEntryType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_device_identifier = get_primitive_field_root_validator("device_identifier")
    
    _validate_primitive_issuer = get_primitive_field_root_validator("issuer")
    
    _validate_primitive_jurisdiction = get_primitive_field_root_validator("jurisdiction")
    
    _validate_primitive_carrier_a_i_d_c = get_primitive_field_root_validator("carrier_a_i_d_c")
    
    _validate_primitive_carrier_h_r_f = get_primitive_field_root_validator("carrier_h_r_f")
    
    _validate_primitive_entry_type = get_primitive_field_root_validator("entry_type")
    


class DeviceDeviceName(BackboneElement):
    """ The name of the device as given by the manufacturer.

    This represents the manufacturer's name of the device as provided by the
    device, from a UDI label, or by a person describing the Device.  This
    typically would be used when a person provides the name(s) or when the
    device represents one of the names available from DeviceDefinition.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Device",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: FHIRRequiredString

    """ The name of the device.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    type: "DeviceNameType"

    """ udi-label-name | user-friendly-name | patient-reported-name |
        manufacturer-name | model-name | other.
    Type `DeviceNameType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in DeviceNameType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_type = get_primitive_field_root_validator("type")
    


class DeviceSpecialization(BackboneElement):
    """ The capabilities supported on a  device, the standards to which the device
    conforms for a particular purpose, and used for the communication.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Device",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    system_type: "CodeableConcept"

    """ The standard that is used to operate and communicate.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    version: typing.Optional[FHIRString]

    """ The version of the standard that is used to operate and communicate.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_version = get_primitive_field_root_validator("version")
    


class DeviceVersion(BackboneElement):
    """ The actual design of the device or software version running on the device.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Device",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: typing.Optional["CodeableConcept"]

    """ The type of the device version.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    component: typing.Optional["Identifier"]

    """ A single component of the device version.
    Type `Identifier` (represented as `dict` in JSON).
    """

    value: FHIRRequiredString

    """ The version text.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_value = get_primitive_field_root_validator("value")
    


class DeviceProperty(BackboneElement):
    """ The actual configuration settings of a device as it actually operates,
    e.g., regulation status, time properties.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Device",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: "CodeableConcept"

    """ Code that specifies the property DeviceDefinitionPropetyCode
        (Extensible).
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value_quantity: typing.Optional[typing.List["Quantity"]]

    """ Property value as a quantity.
    List of `Quantity` items (represented as `dict` in JSON).
    """

    value_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Property value as a code, e.g., NTP4 (synced to NTP).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """




class DeviceDefinitionUdiDeviceIdentifier(BackboneElement):
    """ Unique Device Identifier (UDI) Barcode string.

    Unique device identifier (UDI) assigned to device label or package.  Note
    that the Device may include multiple udiCarriers as it either may include
    just the udiCarrier for the jurisdiction it is sold, or for multiple
    jurisdictions it could have been sold.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DeviceDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    device_identifier: FHIRRequiredString

    """ The identifier that is to be associated with every Device that
        references this DeviceDefintiion for the issuer and jurisdication
        porvided in the DeviceDefinition.udiDeviceIdentifier.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    device_identifier__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_device_identifier`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    issuer: FHIRRequiredString

    """ The organization that assigns the identifier algorithm.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    issuer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_issuer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    jurisdiction: FHIRRequiredString

    """ The jurisdiction to which the deviceIdentifier applies.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    jurisdiction__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_jurisdiction`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_device_identifier = get_primitive_field_root_validator("device_identifier")
    
    _validate_primitive_issuer = get_primitive_field_root_validator("issuer")
    
    _validate_primitive_jurisdiction = get_primitive_field_root_validator("jurisdiction")
    


class DeviceDefinitionDeviceName(BackboneElement):
    """ A name given to the device to identify it.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DeviceDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: FHIRRequiredString

    """ The name of the device.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    type: "DeviceNameType"

    """ udi-label-name | user-friendly-name | patient-reported-name |
        manufacturer-name | model-name | other.
    Type `DeviceNameType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in DeviceNameType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_type = get_primitive_field_root_validator("type")
    


class DeviceDefinitionSpecialization(BackboneElement):
    """ The capabilities supported on a  device, the standards to which the device
    conforms for a particular purpose, and used for the communication.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DeviceDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    system_type: FHIRRequiredString

    """ The standard that is used to operate and communicate.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    system_type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_system_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    version: typing.Optional[FHIRString]

    """ The version of the standard that is used to operate and communicate.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_system_type = get_primitive_field_root_validator("system_type")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    


class DeviceDefinitionCapability(BackboneElement):
    """ Device capabilities.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DeviceDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: "CodeableConcept"

    """ Type of capability.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    description: typing.Optional[typing.List["CodeableConcept"]]

    """ Description of capability.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """




class DeviceDefinitionProperty(BackboneElement):
    """ The actual configuration settings of a device as it actually operates,
    e.g., regulation status, time properties.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DeviceDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: "CodeableConcept"

    """ Code that specifies the property DeviceDefinitionPropetyCode
        (Extensible).
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value_quantity: typing.Optional[typing.List["Quantity"]]

    """ Property value as a quantity.
    List of `Quantity` items (represented as `dict` in JSON).
    """

    value_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Property value as a code, e.g., NTP4 (synced to NTP).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """




class DeviceDefinitionMaterial(BackboneElement):
    """ A substance used to create the material(s) of which the device is made.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DeviceDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    substance: "CodeableConcept"

    """ The substance.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    alternate: typing.Optional[bool]

    """ Indicates an alternative material of the device.
    Type `bool`. Is a JSON Primitive element.
    """
    

    alternate__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_alternate`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    allergenic_indicator: typing.Optional[bool]

    """ Whether the substance is a known or suspected allergen.
    Type `bool`. Is a JSON Primitive element.
    """
    

    allergenic_indicator__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_allergenic_indicator`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_alternate = get_primitive_field_root_validator("alternate")
    
    _validate_primitive_allergenic_indicator = get_primitive_field_root_validator("allergenic_indicator")
    


class DeviceMetricCalibration(BackboneElement):
    """ Describes the calibrations that have been performed or that are required to
    be performed.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DeviceMetric",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    type: typing.Optional["DeviceMetricCalibrationType"]

    """ unspecified | offset | gain | two-point.
    Type `DeviceMetricCalibrationType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    state: typing.Optional["DeviceMetricCalibrationState"]

    """ not-calibrated | calibration-required | calibrated | unspecified.
    Type `DeviceMetricCalibrationState` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    state__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_state`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    time: typing.Optional[FHIRInstant]

    """ Describes the time last calibration has been performed.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in DeviceMetricCalibrationType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["state"]["enum"]
            enums.clear()
            for item in DeviceMetricCalibrationState:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_state = get_primitive_field_root_validator("state")
    
    _validate_primitive_time = get_primitive_field_root_validator("time")
    


class DeviceRequestParameter(BackboneElement):
    """ Device details.

    Specific parameters for the ordered item.  For example, the prism value for
    lenses.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DeviceRequest",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: typing.Optional["CodeableConcept"]

    """ Device detail.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value_codeable_concept: typing.Optional["CodeableConcept"]

    """ Value of detail.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value_quantity: typing.Optional["Quantity"]

    """ Value of detail.
    Type `Quantity` (represented as `dict` in JSON).
    """

    value_range: typing.Optional["Range"]

    """ Value of detail.
    Type `Range` (represented as `dict` in JSON).
    """

    value_boolean: typing.Optional[bool]

    """ Value of detail.
    Type `bool`. Is a JSON Primitive element.
    """
    

    value_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'DeviceRequest.parameter.value[x]', 'choice_of_type': 'value', 'orig_name': 'valueCodeableConcept', 'name': 'valueCodeableConcept', 'parent_name': 'DeviceRequest.parameter', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Value of detail', 'formal': 'The value of the device detail.', 'representation': None}
    _value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['value_codeable_concept', 'value_quantity', 'value_range', 'value_boolean']), True))

    _validate_primitive_value_boolean = get_primitive_field_root_validator("value_boolean")
    


class DiagnosticReportMedia(BackboneElement):
    """ Key images associated with this report.

    A list of key images associated with this report. The images are generally
    created during the diagnostic process, and may be directly of the patient,
    or of treated specimens (i.e. slides of interest).
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DiagnosticReport",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    comment: typing.Optional[FHIRString]

    """ Comment about the image (e.g. explanation).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    comment__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_comment`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    link: "Reference"

    """ Reference to the image source.
    Type `Reference` (represented as `dict` in JSON).
    """



    _validate_primitive_comment = get_primitive_field_root_validator("comment")
    


class DocumentManifestRelated(BackboneElement):
    """ Related things.

    Related identifiers or resources associated with the DocumentManifest.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DocumentManifest",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional["Identifier"]

    """ Identifiers of things that are related.
    Type `Identifier` (represented as `dict` in JSON).
    """

    ref: typing.Optional["Reference"]

    """ Related Resource.
    Type `Reference` (represented as `dict` in JSON).
    """




class DocumentReferenceRelatesTo(BackboneElement):
    """ Relationships to other documents.

    Relationships that this document has with other document references that
    already exist.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DocumentReference",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    code: "DocumentRelationshipType"

    """ replaces | transforms | signs | appends.
    Type `DocumentRelationshipType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    target: "Reference"

    """ Target of the relationship.
    Type `Reference` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["code"]["enum"]
            enums.clear()
            for item in DocumentRelationshipType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_code = get_primitive_field_root_validator("code")
    


class DocumentReferenceContent(BackboneElement):
    """ Document referenced.

    The document and format referenced. There may be multiple content element
    repetitions, each with a different format.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DocumentReference",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    attachment: "Attachment"

    """ Where to access the document.
    Type `Attachment` (represented as `dict` in JSON).
    """

    format: typing.Optional["Coding"]

    """ Format/content rules for the document.
    Type `Coding` (represented as `dict` in JSON).
    """




class DocumentReferenceContext(BackboneElement):
    """ Clinical context of document.

    The clinical context in which the document was prepared.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/DocumentReference",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    encounter: typing.Optional[typing.List["Reference"]]

    """ Context of the document  content.
    List of `Reference` items (represented as `dict` in JSON).
    """

    event: typing.Optional[typing.List["CodeableConcept"]]

    """ Main clinical acts documented.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    period: typing.Optional["Period"]

    """ Time of service that is being documented.
    Type `Period` (represented as `dict` in JSON).
    """

    facility_type: typing.Optional["CodeableConcept"]

    """ Kind of facility where patient was seen.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    practice_setting: typing.Optional["CodeableConcept"]

    """ Additional details about where the content was created (e.g.
        clinical specialty).
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    source_patient_info: typing.Optional["Reference"]

    """ Patient demographics from source.
    Type `Reference` (represented as `dict` in JSON).
    """

    related: typing.Optional[typing.List["Reference"]]

    """ Related identifiers or resources.
    List of `Reference` items (represented as `dict` in JSON).
    """




class EffectEvidenceSynthesisSampleSize(BackboneElement):
    """ What sample size was involved?.

    A description of the size of the sample involved in the synthesis.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/EffectEvidenceSynthesis",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    description: typing.Optional[FHIRString]

    """ Description of sample size.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    number_of_studies: typing.Optional[FHIRInt]

    """ How many studies?.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    number_of_studies__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_number_of_studies`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    number_of_participants: typing.Optional[FHIRInt]

    """ How many participants?.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    number_of_participants__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_number_of_participants`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_number_of_studies = get_primitive_field_root_validator("number_of_studies")
    
    _validate_primitive_number_of_participants = get_primitive_field_root_validator("number_of_participants")
    


class EffectEvidenceSynthesisResultsByExposure(BackboneElement):
    """ What was the result per exposure?.

    A description of the results for each exposure considered in the effect
    estimate.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/EffectEvidenceSynthesis",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    description: typing.Optional[FHIRString]

    """ Description of results by exposure.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    exposure_state: typing.Optional["ExposureState"]

    """ exposure | exposure-alternative.
    Type `ExposureState` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    exposure_state__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_exposure_state`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    variant_state: typing.Optional["CodeableConcept"]

    """ Variant exposure states.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    risk_evidence_synthesis: "Reference"

    """ Risk evidence synthesis.
    Type `Reference` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["exposureState"]["enum"]
            enums.clear()
            for item in ExposureState:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_exposure_state = get_primitive_field_root_validator("exposure_state")
    


class EffectEvidenceSynthesisEffectEstimate(BackboneElement):
    """ What was the estimated effect.

    The estimated effect of the exposure variant.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/EffectEvidenceSynthesis",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    description: typing.Optional[FHIRString]

    """ Description of effect estimate.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional["CodeableConcept"]

    """ Type of efffect estimate.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    variant_state: typing.Optional["CodeableConcept"]

    """ Variant exposure states.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value: typing.Optional[decimal.Decimal]

    """ Point estimate.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    value__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    unit_of_measure: typing.Optional["CodeableConcept"]

    """ What unit is the outcome described in?.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    precision_estimate: typing.Optional[typing.List["EffectEvidenceSynthesisEffectEstimatePrecisionEstimate"]]

    """ How precise the estimate is.
    List of `EffectEvidenceSynthesisEffectEstimatePrecisionEstimate` items (represented as `dict` in JSON).
    """



    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_value = get_primitive_field_root_validator("value")
    


class EffectEvidenceSynthesisEffectEstimatePrecisionEstimate(BackboneElement):
    """ How precise the estimate is.

    A description of the precision of the estimate for the effect.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/EffectEvidenceSynthesis",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: typing.Optional["CodeableConcept"]

    """ Type of precision estimate.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    level: typing.Optional[decimal.Decimal]

    """ Level of confidence interval.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    level__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_level`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    from_: typing.Optional[decimal.Decimal]

    """ Lower bound.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    from___extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_from_`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    to: typing.Optional[decimal.Decimal]

    """ Upper bound.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    to__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_to`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_level = get_primitive_field_root_validator("level")
    
    _validate_primitive_from_ = get_primitive_field_root_validator("from_")
    
    _validate_primitive_to = get_primitive_field_root_validator("to")
    


class EffectEvidenceSynthesisCertainty(BackboneElement):
    """ How certain is the effect.

    A description of the certainty of the effect estimate.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/EffectEvidenceSynthesis",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    rating: typing.Optional[typing.List["CodeableConcept"]]

    """ Certainty rating.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Used for footnotes or explanatory notes.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    certainty_subcomponent: typing.Optional[typing.List["EffectEvidenceSynthesisCertaintyCertaintySubcomponent"]]

    """ A component that contributes to the overall certainty.
    List of `EffectEvidenceSynthesisCertaintyCertaintySubcomponent` items (represented as `dict` in JSON).
    """




class EffectEvidenceSynthesisCertaintyCertaintySubcomponent(BackboneElement):
    """ A component that contributes to the overall certainty.

    A description of a component of the overall certainty.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/EffectEvidenceSynthesis",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: typing.Optional["CodeableConcept"]

    """ Type of subcomponent of certainty rating.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    rating: typing.Optional[typing.List["CodeableConcept"]]

    """ Subcomponent certainty rating.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Used for footnotes or explanatory notes.
    List of `Annotation` items (represented as `dict` in JSON).
    """




class EncounterStatusHistory(BackboneElement):
    """ List of past encounter statuses.

    The status history permits the encounter resource to contain the status
    history without needing to read through the historical versions of the
    resource, or even have the server store them.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Encounter",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    status: "EncounterStatus"

    """ planned | arrived | triaged | in-progress | onleave | finished |
        cancelled +.
    Type `EncounterStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    period: "Period"

    """ The time that the episode was in the specified status.
    Type `Period` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in EncounterStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    


class EncounterClassHistory(BackboneElement):
    """ List of past encounter classes.

    The class history permits the tracking of the encounters transitions
    without needing to go  through the resource history.  This would be used
    for a case where an admission starts of as an emergency encounter, then
    transitions into an inpatient scenario. Doing this and not restarting a new
    encounter ensures that any lab/diagnostic results can more easily follow
    the patient and not require re-processing and not get lost or cancelled
    during a kind of discharge from emergency to inpatient.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Encounter",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    class_: "Coding"

    """ inpatient | outpatient | ambulatory | emergency +.
    Type `Coding` (represented as `dict` in JSON).
    """

    period: "Period"

    """ The time that the episode was in the specified class.
    Type `Period` (represented as `dict` in JSON).
    """




class EncounterParticipant(BackboneElement):
    """ List of participants involved in the encounter.

    The list of people responsible for providing the service.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Encounter",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: typing.Optional[typing.List["CodeableConcept"]]

    """ Role of participant in encounter.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    period: typing.Optional["Period"]

    """ Period of time during the encounter that the participant
        participated.
    Type `Period` (represented as `dict` in JSON).
    """

    individual: typing.Optional["Reference"]

    """ Persons involved in the encounter other than the patient.
    Type `Reference` (represented as `dict` in JSON).
    """




class EncounterDiagnosis(BackboneElement):
    """ The list of diagnosis relevant to this encounter.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Encounter",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    condition: "Reference"

    """ The diagnosis or procedure relevant to the encounter.
    Type `Reference` (represented as `dict` in JSON).
    """

    use: typing.Optional["CodeableConcept"]

    """ Role that this diagnosis has within the encounter (e.g. admission,
        billing, discharge …).
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    rank: typing.Optional[FHIRPositiveInt]

    """ Ranking of the diagnosis (for each role type).
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    rank__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_rank`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_rank = get_primitive_field_root_validator("rank")
    


class EncounterHospitalization(BackboneElement):
    """ Details about the admission to a healthcare service.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Encounter",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    pre_admission_identifier: typing.Optional["Identifier"]

    """ Pre-admission identifier.
    Type `Identifier` (represented as `dict` in JSON).
    """

    origin: typing.Optional["Reference"]

    """ The location/organization from which the patient came before
        admission.
    Type `Reference` (represented as `dict` in JSON).
    """

    admit_source: typing.Optional["CodeableConcept"]

    """ From where patient was admitted (physician referral, transfer).
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    re_admission: typing.Optional["CodeableConcept"]

    """ The type of hospital re-admission that has occurred (if any). If
        the value is absent, then this is not identified as a readmission.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    diet_preference: typing.Optional[typing.List["CodeableConcept"]]

    """ Diet preferences reported by the patient.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    special_courtesy: typing.Optional[typing.List["CodeableConcept"]]

    """ Special courtesies (VIP, board member).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    special_arrangement: typing.Optional[typing.List["CodeableConcept"]]

    """ Wheelchair, translator, stretcher, etc..
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    destination: typing.Optional["Reference"]

    """ Location/organization to which the patient is discharged.
    Type `Reference` (represented as `dict` in JSON).
    """

    discharge_disposition: typing.Optional["CodeableConcept"]

    """ Category or kind of location after discharge.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """




class EncounterLocation(BackboneElement):
    """ List of locations where the patient has been.

    List of locations where  the patient has been during this encounter.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Encounter",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    location: "Reference"

    """ Location the encounter takes place.
    Type `Reference` (represented as `dict` in JSON).
    """

            
    
    
    status: typing.Optional["EncounterLocationStatus"]

    """ planned | active | reserved | completed.
    Type `EncounterLocationStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    physical_type: typing.Optional["CodeableConcept"]

    """ The physical type of the location (usually the level in the
        location hierachy - bed room ward etc.).
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    period: typing.Optional["Period"]

    """ Time period during which the patient was present at the location.
    Type `Period` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in EncounterLocationStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    


class EpisodeOfCareStatusHistory(BackboneElement):
    """ Past list of status codes (the current status may be included to cover the
    start date of the status).

    The history of statuses that the EpisodeOfCare has been through (without
    requiring processing the history of the resource).
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/EpisodeOfCare",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    status: "EpisodeOfCareStatus"

    """ planned | waitlist | active | onhold | finished | cancelled |
        entered-in-error.
    Type `EpisodeOfCareStatus` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    period: "Period"

    """ Duration the EpisodeOfCare was in the specified status.
    Type `Period` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["status"]["enum"]
            enums.clear()
            for item in EpisodeOfCareStatus:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_status = get_primitive_field_root_validator("status")
    


class EpisodeOfCareDiagnosis(BackboneElement):
    """ The list of diagnosis relevant to this episode of care.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/EpisodeOfCare",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    condition: "Reference"

    """ Conditions/problems/diagnoses this episode of care is for.
    Type `Reference` (represented as `dict` in JSON).
    """

    role: typing.Optional["CodeableConcept"]

    """ Role that this diagnosis has within the episode of care (e.g.
        admission, billing, discharge …).
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    rank: typing.Optional[FHIRPositiveInt]

    """ Ranking of the diagnosis (for each role type).
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    rank__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_rank`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_rank = get_primitive_field_root_validator("rank")
    


class EvidenceVariableCharacteristic(BackboneElement):
    """ What defines the members of the evidence element.

    A characteristic that defines the members of the evidence element. Multiple
    characteristics are applied with "and" semantics.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/EvidenceVariable",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    description: typing.Optional[FHIRString]

    """ Natural language description of the characteristic.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    definition_reference: typing.Optional["Reference"]

    """ What code or expression defines members?.
    Type `Reference` (represented as `dict` in JSON).
    """

    definition_canonical: typing.Optional[FHIRString]

    """ What code or expression defines members?.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    definition_canonical__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_definition_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    definition_codeable_concept: typing.Optional["CodeableConcept"]

    """ What code or expression defines members?.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    definition_expression: typing.Optional["Expression"]

    """ What code or expression defines members?.
    Type `Expression` (represented as `dict` in JSON).
    """

    definition_data_requirement: typing.Optional["DataRequirement"]

    """ What code or expression defines members?.
    Type `DataRequirement` (represented as `dict` in JSON).
    """

    definition_trigger_definition: typing.Optional["TriggerDefinition"]

    """ What code or expression defines members?.
    Type `TriggerDefinition` (represented as `dict` in JSON).
    """

    usage_context: typing.Optional[typing.List["UsageContext"]]

    """ What code/value pairs define members?.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    exclude: typing.Optional[bool]

    """ Whether the characteristic includes or excludes members.
    Type `bool`. Is a JSON Primitive element.
    """
    

    exclude__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_exclude`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    participant_effective_date_time: typing.Optional[FHIRDateTime]

    """ What time period do participants cover.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    participant_effective_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_participant_effective_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    participant_effective_period: typing.Optional["Period"]

    """ What time period do participants cover.
    Type `Period` (represented as `dict` in JSON).
    """

    participant_effective_duration: typing.Optional["Duration"]

    """ What time period do participants cover.
    Type `Duration` (represented as `dict` in JSON).
    """

    participant_effective_timing: typing.Optional["Timing"]

    """ What time period do participants cover.
    Type `Timing` (represented as `dict` in JSON).
    """

    time_from_start: typing.Optional["Duration"]

    """ Observation time from study start.
    Type `Duration` (represented as `dict` in JSON).
    """

            
    
    
    group_measure: typing.Optional["GroupMeasure"]

    """ mean | median | mean-of-mean | mean-of-median | median-of-mean |
        median-of-median.
    Type `GroupMeasure` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    group_measure__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_group_measure`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'EvidenceVariable.characteristic.definition[x]', 'choice_of_type': 'definition', 'orig_name': 'definitionReference', 'name': 'definitionReference', 'parent_name': 'EvidenceVariable.characteristic', 'class_name': 'Reference', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'What code or expression defines members?', 'formal': 'Define members of the evidence element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).', 'representation': None}
    _definition_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['definition_reference', 'definition_canonical', 'definition_codeable_concept', 'definition_expression', 'definition_data_requirement', 'definition_trigger_definition']), False))

#   {'path': 'EvidenceVariable.characteristic.participantEffective[x]', 'choice_of_type': 'participantEffective', 'orig_name': 'participantEffectiveDateTime', 'name': 'participantEffectiveDateTime', 'parent_name': 'EvidenceVariable.characteristic', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'What time period do participants cover', 'formal': 'Indicates what effective period the study covers.', 'representation': None}
    _participant_effective_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['participant_effective_date_time', 'participant_effective_period', 'participant_effective_duration', 'participant_effective_timing']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["groupMeasure"]["enum"]
            enums.clear()
            for item in GroupMeasure:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_definition_canonical = get_primitive_field_root_validator("definition_canonical")
    
    _validate_primitive_exclude = get_primitive_field_root_validator("exclude")
    
    _validate_primitive_participant_effective_date_time = get_primitive_field_root_validator("participant_effective_date_time")
    
    _validate_primitive_group_measure = get_primitive_field_root_validator("group_measure")
    


class ExampleScenarioActor(BackboneElement):
    """ Actor participating in the resource.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExampleScenario",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    actor_id: FHIRRequiredString

    """ ID or acronym of the actor.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    actor_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_actor_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    type: "ExampleScenarioActorType"

    """ person | entity.
    Type `ExampleScenarioActorType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ The name of the actor as shown in the page.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ The description of the actor.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in ExampleScenarioActorType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_actor_id = get_primitive_field_root_validator("actor_id")
    
    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class ExampleScenarioInstance(BackboneElement):
    """ Each resource and each version that is present in the workflow.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExampleScenario",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    resource_id: FHIRRequiredString

    """ The id of the resource for referencing.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    resource_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_resource_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    resource_type: "ResourceType"

    """ The type of the resource.
    Type `ResourceType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    resource_type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_resource_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ A short name for the resource instance.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ Human-friendly description of the resource instance.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    version: typing.Optional[typing.List["ExampleScenarioInstanceVersion"]]

    """ A specific version of the resource.
    List of `ExampleScenarioInstanceVersion` items (represented as `dict` in JSON).
    """

    contained_instance: typing.Optional[typing.List["ExampleScenarioInstanceContainedInstance"]]

    """ Resources contained in the instance.
    List of `ExampleScenarioInstanceContainedInstance` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["resourceType"]["enum"]
            enums.clear()
            for item in ResourceType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_resource_id = get_primitive_field_root_validator("resource_id")
    
    _validate_primitive_resource_type = get_primitive_field_root_validator("resource_type")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class ExampleScenarioInstanceVersion(BackboneElement):
    """ A specific version of the resource.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExampleScenario",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    version_id: FHIRRequiredString

    """ The identifier of a specific version of a resource.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: FHIRRequiredString

    """ The description of the resource version.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_version_id = get_primitive_field_root_validator("version_id")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class ExampleScenarioInstanceContainedInstance(BackboneElement):
    """ Resources contained in the instance.

    Resources contained in the instance (e.g. the observations contained in a
    bundle).
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExampleScenario",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    resource_id: FHIRRequiredString

    """ Each resource contained in the instance.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    resource_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_resource_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    version_id: typing.Optional[FHIRString]

    """ A specific version of a resource contained in the instance.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_resource_id = get_primitive_field_root_validator("resource_id")
    
    _validate_primitive_version_id = get_primitive_field_root_validator("version_id")
    


class ExampleScenarioProcess(BackboneElement):
    """ Each major process - a group of operations.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExampleScenario",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    title: FHIRRequiredString

    """ The diagram title of the group of operations.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ A longer description of the group of operations.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    pre_conditions: typing.Optional[FHIRString]

    """ Description of initial status before the process starts.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    pre_conditions__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pre_conditions`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    post_conditions: typing.Optional[FHIRString]

    """ Description of final status after the process ends.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    post_conditions__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_post_conditions`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    step: typing.Optional[typing.List["ExampleScenarioProcessStep"]]

    """ Each step of the process.
    List of `ExampleScenarioProcessStep` items (represented as `dict` in JSON).
    """



    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_pre_conditions = get_primitive_field_root_validator("pre_conditions")
    
    _validate_primitive_post_conditions = get_primitive_field_root_validator("post_conditions")
    


class ExampleScenarioProcessStep(BackboneElement):
    """ Each step of the process.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExampleScenario",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    process: typing.Optional[typing.List["ExampleScenarioProcess"]]

    """ Nested process.
    List of `ExampleScenarioProcess` items (represented as `dict` in JSON).
    """

    pause: typing.Optional[bool]

    """ If there is a pause in the flow.
    Type `bool`. Is a JSON Primitive element.
    """
    

    pause__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pause`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    operation: typing.Optional["ExampleScenarioProcessStepOperation"]

    """ Each interaction or action.
    Type `ExampleScenarioProcessStepOperation` (represented as `dict` in JSON).
    """

    alternative: typing.Optional[typing.List["ExampleScenarioProcessStepAlternative"]]

    """ Alternate non-typical step action.
    List of `ExampleScenarioProcessStepAlternative` items (represented as `dict` in JSON).
    """



    _validate_primitive_pause = get_primitive_field_root_validator("pause")
    


class ExampleScenarioProcessStepOperation(BackboneElement):
    """ Each interaction or action.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExampleScenario",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    number: FHIRRequiredString

    """ The sequential number of the interaction.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    number__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional[FHIRString]

    """ The type of operation - CRUD.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ The human-friendly name of the interaction.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    initiator: typing.Optional[FHIRString]

    """ Who starts the transaction.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    initiator__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_initiator`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    receiver: typing.Optional[FHIRString]

    """ Who receives the transaction.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    receiver__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_receiver`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ A comment to be inserted in the diagram.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    initiator_active: typing.Optional[bool]

    """ Whether the initiator is deactivated right after the transaction.
    Type `bool`. Is a JSON Primitive element.
    """
    

    initiator_active__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_initiator_active`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    receiver_active: typing.Optional[bool]

    """ Whether the receiver is deactivated right after the transaction.
    Type `bool`. Is a JSON Primitive element.
    """
    

    receiver_active__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_receiver_active`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    request: typing.Optional["ExampleScenarioInstanceContainedInstance"]

    """ Each resource instance used by the initiator.
    Type `ExampleScenarioInstanceContainedInstance` (represented as `dict` in JSON).
    """

    response: typing.Optional["ExampleScenarioInstanceContainedInstance"]

    """ Each resource instance used by the responder.
    Type `ExampleScenarioInstanceContainedInstance` (represented as `dict` in JSON).
    """



    _validate_primitive_number = get_primitive_field_root_validator("number")
    
    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_initiator = get_primitive_field_root_validator("initiator")
    
    _validate_primitive_receiver = get_primitive_field_root_validator("receiver")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_initiator_active = get_primitive_field_root_validator("initiator_active")
    
    _validate_primitive_receiver_active = get_primitive_field_root_validator("receiver_active")
    


class ExampleScenarioProcessStepAlternative(BackboneElement):
    """ Alternate non-typical step action.

    Indicates an alternative step that can be taken instead of the operations
    on the base step in exceptional/atypical circumstances.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExampleScenario",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    title: FHIRRequiredString

    """ Label for alternative.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ A human-readable description of each option.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    step: typing.Optional[typing.List["ExampleScenarioProcessStep"]]

    """ What happens in each alternative option.
    List of `ExampleScenarioProcessStep` items (represented as `dict` in JSON).
    """



    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class ExplanationOfBenefitRelated(BackboneElement):
    """ Prior or corollary claims.

    Other claims which are related to this claim such as prior submissions or
    claims for related services or for the same event.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    claim: typing.Optional["Reference"]

    """ Reference to the related claim.
    Type `Reference` (represented as `dict` in JSON).
    """

    relationship: typing.Optional["CodeableConcept"]

    """ How the reference claim is related.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    reference: typing.Optional["Identifier"]

    """ File or case reference.
    Type `Identifier` (represented as `dict` in JSON).
    """




class ExplanationOfBenefitPayee(BackboneElement):
    """ Recipient of benefits payable.

    The party to be reimbursed for cost of the products and services according
    to the terms of the policy.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: typing.Optional["CodeableConcept"]

    """ Category of recipient.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    party: typing.Optional["Reference"]

    """ Recipient reference.
    Type `Reference` (represented as `dict` in JSON).
    """




class ExplanationOfBenefitCareTeam(BackboneElement):
    """ Care Team members.

    The members of the team who provided the products and services.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    sequence: FHIRPositiveInt

    """ Order of care team.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    provider: "Reference"

    """ Practitioner or organization.
    Type `Reference` (represented as `dict` in JSON).
    """

    responsible: typing.Optional[bool]

    """ Indicator of the lead practitioner.
    Type `bool`. Is a JSON Primitive element.
    """
    

    responsible__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_responsible`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    role: typing.Optional["CodeableConcept"]

    """ Function within the team.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    qualification: typing.Optional["CodeableConcept"]

    """ Practitioner credential or specialization.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """



    _validate_primitive_sequence = get_primitive_field_root_validator("sequence")
    
    _validate_primitive_responsible = get_primitive_field_root_validator("responsible")
    


class ExplanationOfBenefitSupportingInfo(BackboneElement):
    """ Supporting information.

    Additional information codes regarding exceptions, special considerations,
    the condition, situation, prior or concurrent issues.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    sequence: FHIRPositiveInt

    """ Information instance identifier.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    category: "CodeableConcept"

    """ Classification of the supplied information.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    code: typing.Optional["CodeableConcept"]

    """ Type of information.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    timing_date: typing.Optional[FHIRDate]

    """ When it occurred.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    timing_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_timing_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    timing_period: typing.Optional["Period"]

    """ When it occurred.
    Type `Period` (represented as `dict` in JSON).
    """

    value_boolean: typing.Optional[bool]

    """ Data to be provided.
    Type `bool`. Is a JSON Primitive element.
    """
    

    value_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_string: typing.Optional[FHIRString]

    """ Data to be provided.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_quantity: typing.Optional["Quantity"]

    """ Data to be provided.
    Type `Quantity` (represented as `dict` in JSON).
    """

    value_attachment: typing.Optional["Attachment"]

    """ Data to be provided.
    Type `Attachment` (represented as `dict` in JSON).
    """

    value_reference: typing.Optional["Reference"]

    """ Data to be provided.
    Type `Reference` (represented as `dict` in JSON).
    """

    reason: typing.Optional["Coding"]

    """ Explanation for the information.
    Type `Coding` (represented as `dict` in JSON).
    """



#   {'path': 'ExplanationOfBenefit.supportingInfo.timing[x]', 'choice_of_type': 'timing', 'orig_name': 'timingDate', 'name': 'timingDate', 'parent_name': 'ExplanationOfBenefit.supportingInfo', 'class_name': 'FHIRDate', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'When it occurred', 'formal': 'The date when or period to which this information refers.', 'representation': None}
    _timing_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['timing_date', 'timing_period']), True))

#   {'path': 'ExplanationOfBenefit.supportingInfo.value[x]', 'choice_of_type': 'value', 'orig_name': 'valueBoolean', 'name': 'valueBoolean', 'parent_name': 'ExplanationOfBenefit.supportingInfo', 'class_name': 'bool', 'enum': None, 'module_name': None, 'json_class': 'bool', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Data to be provided', 'formal': 'Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.', 'representation': None}
    _value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['value_boolean', 'value_string', 'value_quantity', 'value_attachment', 'value_reference']), True))

    _validate_primitive_sequence = get_primitive_field_root_validator("sequence")
    
    _validate_primitive_timing_date = get_primitive_field_root_validator("timing_date")
    
    _validate_primitive_value_boolean = get_primitive_field_root_validator("value_boolean")
    
    _validate_primitive_value_string = get_primitive_field_root_validator("value_string")
    


class ExplanationOfBenefitDiagnosis(BackboneElement):
    """ Pertinent diagnosis information.

    Information about diagnoses relevant to the claim items.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    sequence: FHIRPositiveInt

    """ Diagnosis instance identifier.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    diagnosis_codeable_concept: typing.Optional["CodeableConcept"]

    """ Nature of illness or problem.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    diagnosis_reference: typing.Optional["Reference"]

    """ Nature of illness or problem.
    Type `Reference` (represented as `dict` in JSON).
    """

    type: typing.Optional[typing.List["CodeableConcept"]]

    """ Timing or nature of the diagnosis.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    on_admission: typing.Optional["CodeableConcept"]

    """ Present on admission.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    package_code: typing.Optional["CodeableConcept"]

    """ Package billing code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """



#   {'path': 'ExplanationOfBenefit.diagnosis.diagnosis[x]', 'choice_of_type': 'diagnosis', 'orig_name': 'diagnosisCodeableConcept', 'name': 'diagnosisCodeableConcept', 'parent_name': 'ExplanationOfBenefit.diagnosis', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Nature of illness or problem', 'formal': 'The nature of illness or problem in a coded form or as a reference to an external defined Condition.', 'representation': None}
    _diagnosis_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['diagnosis_codeable_concept', 'diagnosis_reference']), False))

    _validate_primitive_sequence = get_primitive_field_root_validator("sequence")
    


class ExplanationOfBenefitProcedure(BackboneElement):
    """ Clinical procedures performed.

    Procedures performed on the patient relevant to the billing items with the
    claim.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    sequence: FHIRPositiveInt

    """ Procedure instance identifier.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional[typing.List["CodeableConcept"]]

    """ Category of Procedure.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    date: typing.Optional[FHIRDateTime]

    """ When the procedure was performed.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    procedure_codeable_concept: typing.Optional["CodeableConcept"]

    """ Specific clinical procedure.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    procedure_reference: typing.Optional["Reference"]

    """ Specific clinical procedure.
    Type `Reference` (represented as `dict` in JSON).
    """

    udi: typing.Optional[typing.List["Reference"]]

    """ Unique device identifier.
    List of `Reference` items (represented as `dict` in JSON).
    """



#   {'path': 'ExplanationOfBenefit.procedure.procedure[x]', 'choice_of_type': 'procedure', 'orig_name': 'procedureCodeableConcept', 'name': 'procedureCodeableConcept', 'parent_name': 'ExplanationOfBenefit.procedure', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Specific clinical procedure', 'formal': 'The code or reference to a Procedure resource which identifies the clinical intervention performed.', 'representation': None}
    _procedure_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['procedure_codeable_concept', 'procedure_reference']), False))

    _validate_primitive_sequence = get_primitive_field_root_validator("sequence")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    


class ExplanationOfBenefitInsurance(BackboneElement):
    """ Patient insurance information.

    Financial instruments for reimbursement for the health care products and
    services specified on the claim.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    focal: bool

    """ Coverage to be used for adjudication.
    Type `bool`. Is a JSON Primitive element.
    """
    

    focal__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_focal`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    coverage: "Reference"

    """ Insurance information.
    Type `Reference` (represented as `dict` in JSON).
    """

    pre_auth_ref: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Prior authorization reference number.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    pre_auth_ref__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_pre_auth_ref`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_focal = get_primitive_field_root_validator("focal")
    
    _validate_primitive_pre_auth_ref = get_primitive_field_root_validator("pre_auth_ref")
    


class ExplanationOfBenefitAccident(BackboneElement):
    """ Details of the event.

    Details of a accident which resulted in injuries which required the
    products and services listed in the claim.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    date: typing.Optional[FHIRDate]

    """ When the incident occurred.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional["CodeableConcept"]

    """ The nature of the accident.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    location_address: typing.Optional["Address"]

    """ Where the event occurred.
    Type `Address` (represented as `dict` in JSON).
    """

    location_reference: typing.Optional["Reference"]

    """ Where the event occurred.
    Type `Reference` (represented as `dict` in JSON).
    """



#   {'path': 'ExplanationOfBenefit.accident.location[x]', 'choice_of_type': 'location', 'orig_name': 'locationAddress', 'name': 'locationAddress', 'parent_name': 'ExplanationOfBenefit.accident', 'class_name': 'Address', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Where the event occurred', 'formal': 'The physical location of the accident event.', 'representation': None}
    _location_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['location_address', 'location_reference']), True))

    _validate_primitive_date = get_primitive_field_root_validator("date")
    


class ExplanationOfBenefitItem(BackboneElement):
    """ Product or service provided.

    A claim line. Either a simple (a product or service) or a 'group' of
    details which can also be a simple items or groups of sub-details.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    sequence: FHIRPositiveInt

    """ Item instance identifier.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    care_team_sequence: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Applicable care team members.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    care_team_sequence__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_care_team_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    diagnosis_sequence: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Applicable diagnoses.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    diagnosis_sequence__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_diagnosis_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    procedure_sequence: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Applicable procedures.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    procedure_sequence__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_procedure_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    information_sequence: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Applicable exception and supporting information.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    information_sequence__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_information_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    revenue: typing.Optional["CodeableConcept"]

    """ Revenue or cost center code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    category: typing.Optional["CodeableConcept"]

    """ Benefit classification.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    product_or_service: "CodeableConcept"

    """ Billing, service, product, or drug code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    modifier: typing.Optional[typing.List["CodeableConcept"]]

    """ Product or service billing modifiers.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    program_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Program the product or service is provided under.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    serviced_date: typing.Optional[FHIRDate]

    """ Date or dates of service or product delivery.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    serviced_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_serviced_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    serviced_period: typing.Optional["Period"]

    """ Date or dates of service or product delivery.
    Type `Period` (represented as `dict` in JSON).
    """

    location_codeable_concept: typing.Optional["CodeableConcept"]

    """ Place of service or where product was supplied.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    location_address: typing.Optional["Address"]

    """ Place of service or where product was supplied.
    Type `Address` (represented as `dict` in JSON).
    """

    location_reference: typing.Optional["Reference"]

    """ Place of service or where product was supplied.
    Type `Reference` (represented as `dict` in JSON).
    """

    quantity: typing.Optional["Quantity"]

    """ Count of products or services.
    Type `Quantity` (represented as `dict` in JSON).
    """

    unit_price: typing.Optional["Money"]

    """ Fee, charge or cost per item.
    Type `Money` (represented as `dict` in JSON).
    """

    factor: typing.Optional[decimal.Decimal]

    """ Price scaling factor.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    factor__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_factor`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    net: typing.Optional["Money"]

    """ Total item cost.
    Type `Money` (represented as `dict` in JSON).
    """

    udi: typing.Optional[typing.List["Reference"]]

    """ Unique device identifier.
    List of `Reference` items (represented as `dict` in JSON).
    """

    body_site: typing.Optional["CodeableConcept"]

    """ Anatomical location.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    sub_site: typing.Optional[typing.List["CodeableConcept"]]

    """ Anatomical sub-location.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    encounter: typing.Optional[typing.List["Reference"]]

    """ Encounters related to this billed item.
    List of `Reference` items (represented as `dict` in JSON).
    """

    note_number: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Applicable note numbers.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    note_number__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_note_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    adjudication: typing.Optional[typing.List["ExplanationOfBenefitItemAdjudication"]]

    """ Adjudication details.
    List of `ExplanationOfBenefitItemAdjudication` items (represented as `dict` in JSON).
    """

    detail: typing.Optional[typing.List["ExplanationOfBenefitItemDetail"]]

    """ Additional items.
    List of `ExplanationOfBenefitItemDetail` items (represented as `dict` in JSON).
    """



#   {'path': 'ExplanationOfBenefit.item.serviced[x]', 'choice_of_type': 'serviced', 'orig_name': 'servicedDate', 'name': 'servicedDate', 'parent_name': 'ExplanationOfBenefit.item', 'class_name': 'FHIRDate', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Date or dates of service or product delivery', 'formal': 'The date or dates when the service or product was supplied, performed or completed.', 'representation': None}
    _serviced_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['serviced_date', 'serviced_period']), True))

#   {'path': 'ExplanationOfBenefit.item.location[x]', 'choice_of_type': 'location', 'orig_name': 'locationCodeableConcept', 'name': 'locationCodeableConcept', 'parent_name': 'ExplanationOfBenefit.item', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Place of service or where product was supplied', 'formal': 'Where the product or service was provided.', 'representation': None}
    _location_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['location_codeable_concept', 'location_address', 'location_reference']), True))

    _validate_primitive_sequence = get_primitive_field_root_validator("sequence")
    
    _validate_primitive_care_team_sequence = get_primitive_field_root_validator("care_team_sequence")
    
    _validate_primitive_diagnosis_sequence = get_primitive_field_root_validator("diagnosis_sequence")
    
    _validate_primitive_procedure_sequence = get_primitive_field_root_validator("procedure_sequence")
    
    _validate_primitive_information_sequence = get_primitive_field_root_validator("information_sequence")
    
    _validate_primitive_serviced_date = get_primitive_field_root_validator("serviced_date")
    
    _validate_primitive_factor = get_primitive_field_root_validator("factor")
    
    _validate_primitive_note_number = get_primitive_field_root_validator("note_number")
    


class ExplanationOfBenefitItemAdjudication(BackboneElement):
    """ Adjudication details.

    If this item is a group then the values here are a summary of the
    adjudication of the detail items. If this item is a simple product or
    service then this is the result of the adjudication of this item.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    category: "CodeableConcept"

    """ Type of adjudication information.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    reason: typing.Optional["CodeableConcept"]

    """ Explanation of adjudication outcome.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    amount: typing.Optional["Money"]

    """ Monetary amount.
    Type `Money` (represented as `dict` in JSON).
    """

    value: typing.Optional[decimal.Decimal]

    """ Non-monitary value.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    value__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_value = get_primitive_field_root_validator("value")
    


class ExplanationOfBenefitItemDetail(BackboneElement):
    """ Additional items.

    Second-tier of goods and services.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    sequence: FHIRPositiveInt

    """ Product or service provided.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    revenue: typing.Optional["CodeableConcept"]

    """ Revenue or cost center code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    category: typing.Optional["CodeableConcept"]

    """ Benefit classification.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    product_or_service: "CodeableConcept"

    """ Billing, service, product, or drug code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    modifier: typing.Optional[typing.List["CodeableConcept"]]

    """ Service/Product billing modifiers.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    program_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Program the product or service is provided under.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    quantity: typing.Optional["Quantity"]

    """ Count of products or services.
    Type `Quantity` (represented as `dict` in JSON).
    """

    unit_price: typing.Optional["Money"]

    """ Fee, charge or cost per item.
    Type `Money` (represented as `dict` in JSON).
    """

    factor: typing.Optional[decimal.Decimal]

    """ Price scaling factor.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    factor__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_factor`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    net: typing.Optional["Money"]

    """ Total item cost.
    Type `Money` (represented as `dict` in JSON).
    """

    udi: typing.Optional[typing.List["Reference"]]

    """ Unique device identifier.
    List of `Reference` items (represented as `dict` in JSON).
    """

    note_number: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Applicable note numbers.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    note_number__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_note_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    adjudication: typing.Optional[typing.List["ExplanationOfBenefitItemAdjudication"]]

    """ Detail level adjudication details.
    List of `ExplanationOfBenefitItemAdjudication` items (represented as `dict` in JSON).
    """

    sub_detail: typing.Optional[typing.List["ExplanationOfBenefitItemDetailSubDetail"]]

    """ Additional items.
    List of `ExplanationOfBenefitItemDetailSubDetail` items (represented as `dict` in JSON).
    """



    _validate_primitive_sequence = get_primitive_field_root_validator("sequence")
    
    _validate_primitive_factor = get_primitive_field_root_validator("factor")
    
    _validate_primitive_note_number = get_primitive_field_root_validator("note_number")
    


class ExplanationOfBenefitItemDetailSubDetail(BackboneElement):
    """ Additional items.

    Third-tier of goods and services.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    sequence: FHIRPositiveInt

    """ Product or service provided.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    revenue: typing.Optional["CodeableConcept"]

    """ Revenue or cost center code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    category: typing.Optional["CodeableConcept"]

    """ Benefit classification.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    product_or_service: "CodeableConcept"

    """ Billing, service, product, or drug code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    modifier: typing.Optional[typing.List["CodeableConcept"]]

    """ Service/Product billing modifiers.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    program_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Program the product or service is provided under.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    quantity: typing.Optional["Quantity"]

    """ Count of products or services.
    Type `Quantity` (represented as `dict` in JSON).
    """

    unit_price: typing.Optional["Money"]

    """ Fee, charge or cost per item.
    Type `Money` (represented as `dict` in JSON).
    """

    factor: typing.Optional[decimal.Decimal]

    """ Price scaling factor.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    factor__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_factor`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    net: typing.Optional["Money"]

    """ Total item cost.
    Type `Money` (represented as `dict` in JSON).
    """

    udi: typing.Optional[typing.List["Reference"]]

    """ Unique device identifier.
    List of `Reference` items (represented as `dict` in JSON).
    """

    note_number: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Applicable note numbers.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    note_number__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_note_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    adjudication: typing.Optional[typing.List["ExplanationOfBenefitItemAdjudication"]]

    """ Subdetail level adjudication details.
    List of `ExplanationOfBenefitItemAdjudication` items (represented as `dict` in JSON).
    """



    _validate_primitive_sequence = get_primitive_field_root_validator("sequence")
    
    _validate_primitive_factor = get_primitive_field_root_validator("factor")
    
    _validate_primitive_note_number = get_primitive_field_root_validator("note_number")
    


class ExplanationOfBenefitAddItem(BackboneElement):
    """ Insurer added line items.

    The first-tier service adjudications for payor added product or service
    lines.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    item_sequence: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Item sequence number.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    item_sequence__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_item_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    detail_sequence: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Detail sequence number.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    detail_sequence__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_detail_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    sub_detail_sequence: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Subdetail sequence number.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    sub_detail_sequence__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sub_detail_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    provider: typing.Optional[typing.List["Reference"]]

    """ Authorized providers.
    List of `Reference` items (represented as `dict` in JSON).
    """

    product_or_service: "CodeableConcept"

    """ Billing, service, product, or drug code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    modifier: typing.Optional[typing.List["CodeableConcept"]]

    """ Service/Product billing modifiers.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    program_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Program the product or service is provided under.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    serviced_date: typing.Optional[FHIRDate]

    """ Date or dates of service or product delivery.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    serviced_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_serviced_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    serviced_period: typing.Optional["Period"]

    """ Date or dates of service or product delivery.
    Type `Period` (represented as `dict` in JSON).
    """

    location_codeable_concept: typing.Optional["CodeableConcept"]

    """ Place of service or where product was supplied.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    location_address: typing.Optional["Address"]

    """ Place of service or where product was supplied.
    Type `Address` (represented as `dict` in JSON).
    """

    location_reference: typing.Optional["Reference"]

    """ Place of service or where product was supplied.
    Type `Reference` (represented as `dict` in JSON).
    """

    quantity: typing.Optional["Quantity"]

    """ Count of products or services.
    Type `Quantity` (represented as `dict` in JSON).
    """

    unit_price: typing.Optional["Money"]

    """ Fee, charge or cost per item.
    Type `Money` (represented as `dict` in JSON).
    """

    factor: typing.Optional[decimal.Decimal]

    """ Price scaling factor.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    factor__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_factor`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    net: typing.Optional["Money"]

    """ Total item cost.
    Type `Money` (represented as `dict` in JSON).
    """

    body_site: typing.Optional["CodeableConcept"]

    """ Anatomical location.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    sub_site: typing.Optional[typing.List["CodeableConcept"]]

    """ Anatomical sub-location.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    note_number: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Applicable note numbers.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    note_number__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_note_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    adjudication: typing.Optional[typing.List["ExplanationOfBenefitItemAdjudication"]]

    """ Added items adjudication.
    List of `ExplanationOfBenefitItemAdjudication` items (represented as `dict` in JSON).
    """

    detail: typing.Optional[typing.List["ExplanationOfBenefitAddItemDetail"]]

    """ Insurer added line items.
    List of `ExplanationOfBenefitAddItemDetail` items (represented as `dict` in JSON).
    """



#   {'path': 'ExplanationOfBenefit.addItem.serviced[x]', 'choice_of_type': 'serviced', 'orig_name': 'servicedDate', 'name': 'servicedDate', 'parent_name': 'ExplanationOfBenefit.addItem', 'class_name': 'FHIRDate', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Date or dates of service or product delivery', 'formal': 'The date or dates when the service or product was supplied, performed or completed.', 'representation': None}
    _serviced_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['serviced_date', 'serviced_period']), True))

#   {'path': 'ExplanationOfBenefit.addItem.location[x]', 'choice_of_type': 'location', 'orig_name': 'locationCodeableConcept', 'name': 'locationCodeableConcept', 'parent_name': 'ExplanationOfBenefit.addItem', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Place of service or where product was supplied', 'formal': 'Where the product or service was provided.', 'representation': None}
    _location_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['location_codeable_concept', 'location_address', 'location_reference']), True))

    _validate_primitive_item_sequence = get_primitive_field_root_validator("item_sequence")
    
    _validate_primitive_detail_sequence = get_primitive_field_root_validator("detail_sequence")
    
    _validate_primitive_sub_detail_sequence = get_primitive_field_root_validator("sub_detail_sequence")
    
    _validate_primitive_serviced_date = get_primitive_field_root_validator("serviced_date")
    
    _validate_primitive_factor = get_primitive_field_root_validator("factor")
    
    _validate_primitive_note_number = get_primitive_field_root_validator("note_number")
    


class ExplanationOfBenefitAddItemDetail(BackboneElement):
    """ Insurer added line items.

    The second-tier service adjudications for payor added services.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    product_or_service: "CodeableConcept"

    """ Billing, service, product, or drug code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    modifier: typing.Optional[typing.List["CodeableConcept"]]

    """ Service/Product billing modifiers.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    quantity: typing.Optional["Quantity"]

    """ Count of products or services.
    Type `Quantity` (represented as `dict` in JSON).
    """

    unit_price: typing.Optional["Money"]

    """ Fee, charge or cost per item.
    Type `Money` (represented as `dict` in JSON).
    """

    factor: typing.Optional[decimal.Decimal]

    """ Price scaling factor.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    factor__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_factor`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    net: typing.Optional["Money"]

    """ Total item cost.
    Type `Money` (represented as `dict` in JSON).
    """

    note_number: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Applicable note numbers.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    note_number__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_note_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    adjudication: typing.Optional[typing.List["ExplanationOfBenefitItemAdjudication"]]

    """ Added items adjudication.
    List of `ExplanationOfBenefitItemAdjudication` items (represented as `dict` in JSON).
    """

    sub_detail: typing.Optional[typing.List["ExplanationOfBenefitAddItemDetailSubDetail"]]

    """ Insurer added line items.
    List of `ExplanationOfBenefitAddItemDetailSubDetail` items (represented as `dict` in JSON).
    """



    _validate_primitive_factor = get_primitive_field_root_validator("factor")
    
    _validate_primitive_note_number = get_primitive_field_root_validator("note_number")
    


class ExplanationOfBenefitAddItemDetailSubDetail(BackboneElement):
    """ Insurer added line items.

    The third-tier service adjudications for payor added services.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    product_or_service: "CodeableConcept"

    """ Billing, service, product, or drug code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    modifier: typing.Optional[typing.List["CodeableConcept"]]

    """ Service/Product billing modifiers.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    quantity: typing.Optional["Quantity"]

    """ Count of products or services.
    Type `Quantity` (represented as `dict` in JSON).
    """

    unit_price: typing.Optional["Money"]

    """ Fee, charge or cost per item.
    Type `Money` (represented as `dict` in JSON).
    """

    factor: typing.Optional[decimal.Decimal]

    """ Price scaling factor.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    factor__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_factor`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    net: typing.Optional["Money"]

    """ Total item cost.
    Type `Money` (represented as `dict` in JSON).
    """

    note_number: typing.Optional[typing.List[typing.Optional[FHIRPositiveInt]]]

    """ Applicable note numbers.
    List of `FHIRPositiveInt` items (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    note_number__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_note_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    adjudication: typing.Optional[typing.List["ExplanationOfBenefitItemAdjudication"]]

    """ Added items adjudication.
    List of `ExplanationOfBenefitItemAdjudication` items (represented as `dict` in JSON).
    """



    _validate_primitive_factor = get_primitive_field_root_validator("factor")
    
    _validate_primitive_note_number = get_primitive_field_root_validator("note_number")
    


class ExplanationOfBenefitTotal(BackboneElement):
    """ Adjudication totals.

    Categorized monetary totals for the adjudication.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    category: "CodeableConcept"

    """ Type of adjudication information.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    amount: "Money"

    """ Financial total for the category.
    Type `Money` (represented as `dict` in JSON).
    """




class ExplanationOfBenefitPayment(BackboneElement):
    """ Payment Details.

    Payment details for the adjudication of the claim.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: typing.Optional["CodeableConcept"]

    """ Partial or complete payment.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    adjustment: typing.Optional["Money"]

    """ Payment adjustment for non-claim issues.
    Type `Money` (represented as `dict` in JSON).
    """

    adjustment_reason: typing.Optional["CodeableConcept"]

    """ Explanation for the variance.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    date: typing.Optional[FHIRDate]

    """ Expected date of payment.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    amount: typing.Optional["Money"]

    """ Payable amount after adjustment.
    Type `Money` (represented as `dict` in JSON).
    """

    identifier: typing.Optional["Identifier"]

    """ Business identifier for the payment.
    Type `Identifier` (represented as `dict` in JSON).
    """



    _validate_primitive_date = get_primitive_field_root_validator("date")
    


class ExplanationOfBenefitProcessNote(BackboneElement):
    """ Note concerning adjudication.

    A note that describes or explains adjudication results in a human readable
    form.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    number: typing.Optional[FHIRPositiveInt]

    """ Note instance identifier.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    number__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    type: typing.Optional["NoteType"]

    """ display | print | printoper.
    Type `NoteType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    text: typing.Optional[FHIRString]

    """ Note explanatory text.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    text__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_text`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    language: typing.Optional["CodeableConcept"]

    """ Language of the text.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in NoteType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_number = get_primitive_field_root_validator("number")
    
    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_text = get_primitive_field_root_validator("text")
    


class ExplanationOfBenefitBenefitBalance(BackboneElement):
    """ Balance by Benefit Category.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    category: "CodeableConcept"

    """ Benefit classification.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    excluded: typing.Optional[bool]

    """ Excluded from the plan.
    Type `bool`. Is a JSON Primitive element.
    """
    

    excluded__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_excluded`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Short name for the benefit.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ Description of the benefit or services covered.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    network: typing.Optional["CodeableConcept"]

    """ In or out of network.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    unit: typing.Optional["CodeableConcept"]

    """ Individual or family.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    term: typing.Optional["CodeableConcept"]

    """ Annual or lifetime.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    financial: typing.Optional[typing.List["ExplanationOfBenefitBenefitBalanceFinancial"]]

    """ Benefit Summary.
    List of `ExplanationOfBenefitBenefitBalanceFinancial` items (represented as `dict` in JSON).
    """



    _validate_primitive_excluded = get_primitive_field_root_validator("excluded")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class ExplanationOfBenefitBenefitBalanceFinancial(BackboneElement):
    """ Benefit Summary.

    Benefits Used to date.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: "CodeableConcept"

    """ Benefit classification.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    allowed_unsigned_int: typing.Optional[FHIRUnsignedInt]

    """ Benefits allowed.
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    allowed_unsigned_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_allowed_unsigned_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    allowed_string: typing.Optional[FHIRString]

    """ Benefits allowed.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    allowed_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_allowed_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    allowed_money: typing.Optional["Money"]

    """ Benefits allowed.
    Type `Money` (represented as `dict` in JSON).
    """

    used_unsigned_int: typing.Optional[FHIRUnsignedInt]

    """ Benefits used.
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    used_unsigned_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_used_unsigned_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    used_money: typing.Optional["Money"]

    """ Benefits used.
    Type `Money` (represented as `dict` in JSON).
    """



#   {'path': 'ExplanationOfBenefit.benefitBalance.financial.allowed[x]', 'choice_of_type': 'allowed', 'orig_name': 'allowedUnsignedInt', 'name': 'allowedUnsignedInt', 'parent_name': 'ExplanationOfBenefit.benefitBalance.financial', 'class_name': 'FHIRUnsignedInt', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Benefits allowed', 'formal': 'The quantity of the benefit which is permitted under the coverage.', 'representation': None}
    _allowed_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['allowed_unsigned_int', 'allowed_string', 'allowed_money']), True))

#   {'path': 'ExplanationOfBenefit.benefitBalance.financial.used[x]', 'choice_of_type': 'used', 'orig_name': 'usedUnsignedInt', 'name': 'usedUnsignedInt', 'parent_name': 'ExplanationOfBenefit.benefitBalance.financial', 'class_name': 'FHIRUnsignedInt', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Benefits used', 'formal': 'The quantity of the benefit which have been consumed to date.', 'representation': None}
    _used_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['used_unsigned_int', 'used_money']), True))

    _validate_primitive_allowed_unsigned_int = get_primitive_field_root_validator("allowed_unsigned_int")
    
    _validate_primitive_allowed_string = get_primitive_field_root_validator("allowed_string")
    
    _validate_primitive_used_unsigned_int = get_primitive_field_root_validator("used_unsigned_int")
    


class FamilyMemberHistoryCondition(BackboneElement):
    """ Condition that the related person had.

    The significant Conditions (or condition) that the family member had. This
    is a repeating section to allow a system to represent more than one
    condition per resource, though there is nothing stopping multiple resources
    - one per condition.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/FamilyMemberHistory",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: "CodeableConcept"

    """ Condition suffered by relation.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    outcome: typing.Optional["CodeableConcept"]

    """ deceased | permanent disability | etc..
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    contributed_to_death: typing.Optional[bool]

    """ Whether the condition contributed to the cause of death.
    Type `bool`. Is a JSON Primitive element.
    """
    

    contributed_to_death__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_contributed_to_death`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    onset_age: typing.Optional["Age"]

    """ When condition first manifested.
    Type `Age` (represented as `dict` in JSON).
    """

    onset_range: typing.Optional["Range"]

    """ When condition first manifested.
    Type `Range` (represented as `dict` in JSON).
    """

    onset_period: typing.Optional["Period"]

    """ When condition first manifested.
    Type `Period` (represented as `dict` in JSON).
    """

    onset_string: typing.Optional[FHIRString]

    """ When condition first manifested.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    onset_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_onset_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    note: typing.Optional[typing.List["Annotation"]]

    """ Extra information about condition.
    List of `Annotation` items (represented as `dict` in JSON).
    """



#   {'path': 'FamilyMemberHistory.condition.onset[x]', 'choice_of_type': 'onset', 'orig_name': 'onsetAge', 'name': 'onsetAge', 'parent_name': 'FamilyMemberHistory.condition', 'class_name': 'Age', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'When condition first manifested', 'formal': 'Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.', 'representation': None}
    _onset_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['onset_age', 'onset_range', 'onset_period', 'onset_string']), True))

    _validate_primitive_contributed_to_death = get_primitive_field_root_validator("contributed_to_death")
    
    _validate_primitive_onset_string = get_primitive_field_root_validator("onset_string")
    


class GoalTarget(BackboneElement):
    """ Target outcome for the goal.

    Indicates what should be done by when.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Goal",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    measure: typing.Optional["CodeableConcept"]

    """ The parameter whose value is being tracked.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    detail_quantity: typing.Optional["Quantity"]

    """ The target value to be achieved.
    Type `Quantity` (represented as `dict` in JSON).
    """

    detail_range: typing.Optional["Range"]

    """ The target value to be achieved.
    Type `Range` (represented as `dict` in JSON).
    """

    detail_codeable_concept: typing.Optional["CodeableConcept"]

    """ The target value to be achieved.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    detail_string: typing.Optional[FHIRString]

    """ The target value to be achieved.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    detail_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_detail_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    detail_boolean: typing.Optional[bool]

    """ The target value to be achieved.
    Type `bool`. Is a JSON Primitive element.
    """
    

    detail_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_detail_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    detail_integer: typing.Optional[FHIRInt]

    """ The target value to be achieved.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    detail_integer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_detail_integer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    detail_ratio: typing.Optional["Ratio"]

    """ The target value to be achieved.
    Type `Ratio` (represented as `dict` in JSON).
    """

    due_date: typing.Optional[FHIRDate]

    """ Reach goal on or before.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    due_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_due_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    due_duration: typing.Optional["Duration"]

    """ Reach goal on or before.
    Type `Duration` (represented as `dict` in JSON).
    """



#   {'path': 'Goal.target.detail[x]', 'choice_of_type': 'detail', 'orig_name': 'detailQuantity', 'name': 'detailQuantity', 'parent_name': 'Goal.target', 'class_name': 'Quantity', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'The target value to be achieved', 'formal': 'The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.', 'representation': None}
    _detail_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['detail_quantity', 'detail_range', 'detail_codeable_concept', 'detail_string', 'detail_boolean', 'detail_integer', 'detail_ratio']), True))

#   {'path': 'Goal.target.due[x]', 'choice_of_type': 'due', 'orig_name': 'dueDate', 'name': 'dueDate', 'parent_name': 'Goal.target', 'class_name': 'FHIRDate', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Reach goal on or before', 'formal': 'Indicates either the date or the duration after start by which the goal should be met.', 'representation': None}
    _due_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['due_date', 'due_duration']), True))

    _validate_primitive_detail_string = get_primitive_field_root_validator("detail_string")
    
    _validate_primitive_detail_boolean = get_primitive_field_root_validator("detail_boolean")
    
    _validate_primitive_detail_integer = get_primitive_field_root_validator("detail_integer")
    
    _validate_primitive_due_date = get_primitive_field_root_validator("due_date")
    


class GraphDefinitionLink(BackboneElement):
    """ Links this graph makes rules about.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/GraphDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    path: typing.Optional[FHIRString]

    """ Path in the resource that contains the link.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    path__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_path`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    slice_name: typing.Optional[FHIRString]

    """ Which slice (if profiled).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    slice_name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_slice_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    min: typing.Optional[FHIRInt]

    """ Minimum occurrences for this link.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    min__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_min`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    max: typing.Optional[FHIRString]

    """ Maximum occurrences for this link.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    max__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_max`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ Why this link is specified.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    target: typing.Optional[typing.List["GraphDefinitionLinkTarget"]]

    """ Potential target for the link.
    List of `GraphDefinitionLinkTarget` items (represented as `dict` in JSON).
    """



    _validate_primitive_path = get_primitive_field_root_validator("path")
    
    _validate_primitive_slice_name = get_primitive_field_root_validator("slice_name")
    
    _validate_primitive_min = get_primitive_field_root_validator("min")
    
    _validate_primitive_max = get_primitive_field_root_validator("max")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class GraphDefinitionLinkTarget(BackboneElement):
    """ Potential target for the link.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/GraphDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    type: "ResourceType"

    """ Type of resource this link refers to.
    Type `ResourceType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    params: typing.Optional[FHIRString]

    """ Criteria for reverse lookup.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    params__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_params`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    profile: typing.Optional[FHIRString]

    """ Profile for the target resource.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    profile__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_profile`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    compartment: typing.Optional[typing.List["GraphDefinitionLinkTargetCompartment"]]

    """ Compartment Consistency Rules.
    List of `GraphDefinitionLinkTargetCompartment` items (represented as `dict` in JSON).
    """

    link: typing.Optional[typing.List["GraphDefinitionLink"]]

    """ Additional links from target resource.
    List of `GraphDefinitionLink` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in ResourceType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_params = get_primitive_field_root_validator("params")
    
    _validate_primitive_profile = get_primitive_field_root_validator("profile")
    


class GraphDefinitionLinkTargetCompartment(BackboneElement):
    """ Compartment Consistency Rules.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/GraphDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    use: "GraphCompartmentUse"

    """ condition | requirement.
    Type `GraphCompartmentUse` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    use__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_use`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    code: "CompartmentType"

    """ Patient | Encounter | RelatedPerson | Practitioner | Device.
    Type `CompartmentType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    rule: "GraphCompartmentRule"

    """ identical | matching | different | custom.
    Type `GraphCompartmentRule` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    rule__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_rule`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    expression: typing.Optional[FHIRString]

    """ Custom rule, as a FHIRPath expression.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    expression__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_expression`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ Documentation for FHIRPath expression.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["use"]["enum"]
            enums.clear()
            for item in GraphCompartmentUse:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["code"]["enum"]
            enums.clear()
            for item in CompartmentType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["rule"]["enum"]
            enums.clear()
            for item in GraphCompartmentRule:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_use = get_primitive_field_root_validator("use")
    
    _validate_primitive_code = get_primitive_field_root_validator("code")
    
    _validate_primitive_rule = get_primitive_field_root_validator("rule")
    
    _validate_primitive_expression = get_primitive_field_root_validator("expression")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class GroupCharacteristic(BackboneElement):
    """ Include / Exclude group members by Trait.

    Identifies traits whose presence r absence is shared by members of the
    group.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Group",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: "CodeableConcept"

    """ Kind of characteristic.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value_codeable_concept: typing.Optional["CodeableConcept"]

    """ Value held by characteristic.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value_boolean: typing.Optional[bool]

    """ Value held by characteristic.
    Type `bool`. Is a JSON Primitive element.
    """
    

    value_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_quantity: typing.Optional["Quantity"]

    """ Value held by characteristic.
    Type `Quantity` (represented as `dict` in JSON).
    """

    value_range: typing.Optional["Range"]

    """ Value held by characteristic.
    Type `Range` (represented as `dict` in JSON).
    """

    value_reference: typing.Optional["Reference"]

    """ Value held by characteristic.
    Type `Reference` (represented as `dict` in JSON).
    """

    exclude: bool

    """ Group includes or excludes.
    Type `bool`. Is a JSON Primitive element.
    """
    

    exclude__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_exclude`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    period: typing.Optional["Period"]

    """ Period over which characteristic is tested.
    Type `Period` (represented as `dict` in JSON).
    """



#   {'path': 'Group.characteristic.value[x]', 'choice_of_type': 'value', 'orig_name': 'valueCodeableConcept', 'name': 'valueCodeableConcept', 'parent_name': 'Group.characteristic', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Value held by characteristic', 'formal': "The value of the trait that holds (or does not hold - see 'exclude') for members of the group.", 'representation': None}
    _value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['value_codeable_concept', 'value_boolean', 'value_quantity', 'value_range', 'value_reference']), False))

    _validate_primitive_value_boolean = get_primitive_field_root_validator("value_boolean")
    
    _validate_primitive_exclude = get_primitive_field_root_validator("exclude")
    


class GroupMember(BackboneElement):
    """ Who or what is in group.

    Identifies the resource instances that are members of the group.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Group",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    entity: "Reference"

    """ Reference to the group member.
    Type `Reference` (represented as `dict` in JSON).
    """

    period: typing.Optional["Period"]

    """ Period member belonged to the group.
    Type `Period` (represented as `dict` in JSON).
    """

    inactive: typing.Optional[bool]

    """ If member is no longer in group.
    Type `bool`. Is a JSON Primitive element.
    """
    

    inactive__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_inactive`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_inactive = get_primitive_field_root_validator("inactive")
    


class HealthcareServiceEligibility(BackboneElement):
    """ Specific eligibility requirements required to use the service.

    Does this service have specific eligibility requirements that need to be
    met in order to use the service?
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/HealthcareService",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: typing.Optional["CodeableConcept"]

    """ Coded value for the eligibility.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    comment: typing.Optional[FHIRString]

    """ Describes the eligibility conditions for the service.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    comment__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_comment`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_comment = get_primitive_field_root_validator("comment")
    


class HealthcareServiceAvailableTime(BackboneElement):
    """ Times the Service Site is available.

    A collection of times that the Service Site is available.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/HealthcareService",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    days_of_week: typing.Optional[typing.List[typing.Optional["DaysOfWeek"]]]

    """ mon | tue | wed | thu | fri | sat | sun.
    List of `DaysOfWeek` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    days_of_week__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_days_of_week`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    all_day: typing.Optional[bool]

    """ Always available? e.g. 24 hour service.
    Type `bool`. Is a JSON Primitive element.
    """
    

    all_day__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_all_day`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    available_start_time: typing.Optional[FHIRTime]

    """ Opening time of day (ignored if allDay = true).
    Type `FHIRTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    available_start_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_available_start_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    available_end_time: typing.Optional[FHIRTime]

    """ Closing time of day (ignored if allDay = true).
    Type `FHIRTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    available_end_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_available_end_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["daysOfWeek"]["items"]["enum"]
            enums.clear()
            for item in DaysOfWeek:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_days_of_week = get_primitive_field_root_validator("days_of_week")
    
    _validate_primitive_all_day = get_primitive_field_root_validator("all_day")
    
    _validate_primitive_available_start_time = get_primitive_field_root_validator("available_start_time")
    
    _validate_primitive_available_end_time = get_primitive_field_root_validator("available_end_time")
    


class HealthcareServiceNotAvailable(BackboneElement):
    """ Not available during this time due to provided reason.

    The HealthcareService is not available during this period of time due to
    the provided reason.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/HealthcareService",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    description: FHIRRequiredString

    """ Reason presented to the user explaining why time not available.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    during: typing.Optional["Period"]

    """ Service not available from this date.
    Type `Period` (represented as `dict` in JSON).
    """



    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class ImagingStudySeries(BackboneElement):
    """ Each study has one or more series of instances.

    Each study has one or more series of images or other content.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ImagingStudy",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    uid: FHIRId

    """ DICOM Series Instance UID for the series.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    uid__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_uid`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    number: typing.Optional[FHIRUnsignedInt]

    """ Numeric identifier of this series.
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    number__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    modality: "Coding"

    """ The modality of the instances in the series.
    Type `Coding` (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ A short human readable summary of the series.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    number_of_instances: typing.Optional[FHIRUnsignedInt]

    """ Number of Series Related Instances.
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    number_of_instances__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_number_of_instances`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    endpoint: typing.Optional[typing.List["Reference"]]

    """ Series access endpoint.
    List of `Reference` items (represented as `dict` in JSON).
    """

    body_site: typing.Optional["Coding"]

    """ Body part examined.
    Type `Coding` (represented as `dict` in JSON).
    """

    laterality: typing.Optional["Coding"]

    """ Body part laterality.
    Type `Coding` (represented as `dict` in JSON).
    """

    specimen: typing.Optional[typing.List["Reference"]]

    """ Specimen imaged.
    List of `Reference` items (represented as `dict` in JSON).
    """

    started: typing.Optional[FHIRDateTime]

    """ When the series started.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    started__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_started`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    performer: typing.Optional[typing.List["ImagingStudySeriesPerformer"]]

    """ Who performed the series.
    List of `ImagingStudySeriesPerformer` items (represented as `dict` in JSON).
    """

    instance: typing.Optional[typing.List["ImagingStudySeriesInstance"]]

    """ A single SOP instance from the series.
    List of `ImagingStudySeriesInstance` items (represented as `dict` in JSON).
    """



    _validate_primitive_uid = get_primitive_field_root_validator("uid")
    
    _validate_primitive_number = get_primitive_field_root_validator("number")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_number_of_instances = get_primitive_field_root_validator("number_of_instances")
    
    _validate_primitive_started = get_primitive_field_root_validator("started")
    


class ImagingStudySeriesPerformer(BackboneElement):
    """ Who performed the series.

    Indicates who or what performed the series and how they were involved.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ImagingStudy",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    function: typing.Optional["CodeableConcept"]

    """ Type of performance.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    actor: "Reference"

    """ Who performed the series.
    Type `Reference` (represented as `dict` in JSON).
    """




class ImagingStudySeriesInstance(BackboneElement):
    """ A single SOP instance from the series.

    A single SOP instance within the series, e.g. an image, or presentation
    state.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ImagingStudy",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    uid: FHIRId

    """ DICOM SOP Instance UID.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    uid__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_uid`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    sop_class: "Coding"

    """ DICOM class type.
    Type `Coding` (represented as `dict` in JSON).
    """

    number: typing.Optional[FHIRUnsignedInt]

    """ The number of this instance in the series.
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    number__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Description of instance.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_uid = get_primitive_field_root_validator("uid")
    
    _validate_primitive_number = get_primitive_field_root_validator("number")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    


class ImmunizationPerformer(BackboneElement):
    """ Who performed event.

    Indicates who performed the immunization event.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Immunization",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    function: typing.Optional["CodeableConcept"]

    """ What type of performance was done.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    actor: "Reference"

    """ Individual or organization who was performing.
    Type `Reference` (represented as `dict` in JSON).
    """




class ImmunizationEducation(BackboneElement):
    """ Educational material presented to patient.

    Educational material presented to the patient (or guardian) at the time of
    vaccine administration.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Immunization",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    document_type: typing.Optional[FHIRString]

    """ Educational material document identifier.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    document_type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_document_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    reference: typing.Optional[FHIRString]

    """ Educational material reference pointer.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    reference__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_reference`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    publication_date: typing.Optional[FHIRDateTime]

    """ Educational material publication date.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    publication_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_publication_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    presentation_date: typing.Optional[FHIRDateTime]

    """ Educational material presentation date.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    presentation_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_presentation_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_document_type = get_primitive_field_root_validator("document_type")
    
    _validate_primitive_reference = get_primitive_field_root_validator("reference")
    
    _validate_primitive_publication_date = get_primitive_field_root_validator("publication_date")
    
    _validate_primitive_presentation_date = get_primitive_field_root_validator("presentation_date")
    


class ImmunizationReaction(BackboneElement):
    """ Details of a reaction that follows immunization.

    Categorical data indicating that an adverse event is associated in time to
    an immunization.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Immunization",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    date: typing.Optional[FHIRDateTime]

    """ When reaction started.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    detail: typing.Optional["Reference"]

    """ Additional information on reaction.
    Type `Reference` (represented as `dict` in JSON).
    """

    reported: typing.Optional[bool]

    """ Indicates self-reported reaction.
    Type `bool`. Is a JSON Primitive element.
    """
    

    reported__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_reported`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_reported = get_primitive_field_root_validator("reported")
    


class ImmunizationProtocolApplied(BackboneElement):
    """ Protocol followed by the provider.

    The protocol (set of recommendations) being followed by the provider who
    administered the dose.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Immunization",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    series: typing.Optional[FHIRString]

    """ Name of vaccine series.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    series__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_series`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    authority: typing.Optional["Reference"]

    """ Who is responsible for publishing the recommendations.
    Type `Reference` (represented as `dict` in JSON).
    """

    target_disease: typing.Optional[typing.List["CodeableConcept"]]

    """ Vaccine preventatable disease being targetted.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    dose_number_positive_int: typing.Optional[FHIRPositiveInt]

    """ Dose number within series.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    dose_number_positive_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_dose_number_positive_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    dose_number_string: typing.Optional[FHIRString]

    """ Dose number within series.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    dose_number_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_dose_number_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    series_doses_positive_int: typing.Optional[FHIRPositiveInt]

    """ Recommended number of doses for immunity.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    series_doses_positive_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_series_doses_positive_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    series_doses_string: typing.Optional[FHIRString]

    """ Recommended number of doses for immunity.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    series_doses_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_series_doses_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'Immunization.protocolApplied.doseNumber[x]', 'choice_of_type': 'doseNumber', 'orig_name': 'doseNumberPositiveInt', 'name': 'doseNumberPositiveInt', 'parent_name': 'Immunization.protocolApplied', 'class_name': 'FHIRPositiveInt', 'enum': None, 'module_name': None, 'json_class': 'int', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Dose number within series', 'formal': 'Nominal position in a series.', 'representation': None}
    _dose_number_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['dose_number_positive_int', 'dose_number_string']), False))

#   {'path': 'Immunization.protocolApplied.seriesDoses[x]', 'choice_of_type': 'seriesDoses', 'orig_name': 'seriesDosesPositiveInt', 'name': 'seriesDosesPositiveInt', 'parent_name': 'Immunization.protocolApplied', 'class_name': 'FHIRPositiveInt', 'enum': None, 'module_name': None, 'json_class': 'int', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Recommended number of doses for immunity', 'formal': 'The recommended number of doses to achieve immunity.', 'representation': None}
    _series_doses_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['series_doses_positive_int', 'series_doses_string']), True))

    _validate_primitive_series = get_primitive_field_root_validator("series")
    
    _validate_primitive_dose_number_positive_int = get_primitive_field_root_validator("dose_number_positive_int")
    
    _validate_primitive_dose_number_string = get_primitive_field_root_validator("dose_number_string")
    
    _validate_primitive_series_doses_positive_int = get_primitive_field_root_validator("series_doses_positive_int")
    
    _validate_primitive_series_doses_string = get_primitive_field_root_validator("series_doses_string")
    


class ImmunizationRecommendationRecommendation(BackboneElement):
    """ Vaccine administration recommendations.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ImmunizationRecommendation",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    vaccine_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Vaccine  or vaccine group recommendation applies to.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    target_disease: typing.Optional["CodeableConcept"]

    """ Disease to be immunized against.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    contraindicated_vaccine_code: typing.Optional[typing.List["CodeableConcept"]]

    """ Vaccine which is contraindicated to fulfill the recommendation.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    forecast_status: "CodeableConcept"

    """ Vaccine recommendation status.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    forecast_reason: typing.Optional[typing.List["CodeableConcept"]]

    """ Vaccine administration status reason.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    date_criterion: typing.Optional[typing.List["ImmunizationRecommendationRecommendationDateCriterion"]]

    """ Dates governing proposed immunization.
    List of `ImmunizationRecommendationRecommendationDateCriterion` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Protocol details.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    series: typing.Optional[FHIRString]

    """ Name of vaccination series.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    series__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_series`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    dose_number_positive_int: typing.Optional[FHIRPositiveInt]

    """ Recommended dose number within series.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    dose_number_positive_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_dose_number_positive_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    dose_number_string: typing.Optional[FHIRString]

    """ Recommended dose number within series.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    dose_number_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_dose_number_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    series_doses_positive_int: typing.Optional[FHIRPositiveInt]

    """ Recommended number of doses for immunity.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    series_doses_positive_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_series_doses_positive_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    series_doses_string: typing.Optional[FHIRString]

    """ Recommended number of doses for immunity.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    series_doses_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_series_doses_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    supporting_immunization: typing.Optional[typing.List["Reference"]]

    """ Past immunizations supporting recommendation.
    List of `Reference` items (represented as `dict` in JSON).
    """

    supporting_patient_information: typing.Optional[typing.List["Reference"]]

    """ Patient observations supporting recommendation.
    List of `Reference` items (represented as `dict` in JSON).
    """



#   {'path': 'ImmunizationRecommendation.recommendation.doseNumber[x]', 'choice_of_type': 'doseNumber', 'orig_name': 'doseNumberPositiveInt', 'name': 'doseNumberPositiveInt', 'parent_name': 'ImmunizationRecommendation.recommendation', 'class_name': 'FHIRPositiveInt', 'enum': None, 'module_name': None, 'json_class': 'int', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Recommended dose number within series', 'formal': 'Nominal position of the recommended dose in a series (e.g. dose 2 is the next recommended dose).', 'representation': None}
    _dose_number_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['dose_number_positive_int', 'dose_number_string']), True))

#   {'path': 'ImmunizationRecommendation.recommendation.seriesDoses[x]', 'choice_of_type': 'seriesDoses', 'orig_name': 'seriesDosesPositiveInt', 'name': 'seriesDosesPositiveInt', 'parent_name': 'ImmunizationRecommendation.recommendation', 'class_name': 'FHIRPositiveInt', 'enum': None, 'module_name': None, 'json_class': 'int', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Recommended number of doses for immunity', 'formal': 'The recommended number of doses to achieve immunity.', 'representation': None}
    _series_doses_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['series_doses_positive_int', 'series_doses_string']), True))

    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_series = get_primitive_field_root_validator("series")
    
    _validate_primitive_dose_number_positive_int = get_primitive_field_root_validator("dose_number_positive_int")
    
    _validate_primitive_dose_number_string = get_primitive_field_root_validator("dose_number_string")
    
    _validate_primitive_series_doses_positive_int = get_primitive_field_root_validator("series_doses_positive_int")
    
    _validate_primitive_series_doses_string = get_primitive_field_root_validator("series_doses_string")
    


class ImmunizationRecommendationRecommendationDateCriterion(BackboneElement):
    """ Dates governing proposed immunization.

    Vaccine date recommendations.  For example, earliest date to administer,
    latest date to administer, etc.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ImmunizationRecommendation",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: "CodeableConcept"

    """ Type of date.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value: FHIRDateTime

    """ Recommended date.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_value = get_primitive_field_root_validator("value")
    


class ImplementationGuideDependsOn(BackboneElement):
    """ Another Implementation guide this depends on.

    Another implementation guide that this implementation depends on.
    Typically, an implementation guide uses value sets, profiles etc.defined in
    other implementation guides.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ImplementationGuide",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    uri: FHIRRequiredString

    """ Identity of the IG that this depends on.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    package_id: typing.Optional[FHIRId]

    """ NPM Package name for IG this depends on.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    package_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_package_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    version: typing.Optional[FHIRString]

    """ Version of the IG.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_uri = get_primitive_field_root_validator("uri")
    
    _validate_primitive_package_id = get_primitive_field_root_validator("package_id")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    


class ImplementationGuideGlobal(BackboneElement):
    """ Profiles that apply globally.

    A set of profiles that all resources covered by this implementation guide
    must conform to.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ImplementationGuide",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    type: "ResourceType"

    """ Type this profile applies to.
    Type `ResourceType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    profile: FHIRRequiredString

    """ Profile that all resources must conform to.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    profile__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_profile`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in ResourceType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_profile = get_primitive_field_root_validator("profile")
    


class ImplementationGuideDefinition(BackboneElement):
    """ Information needed to build the IG.

    The information needed by an IG publisher tool to publish the whole
    implementation guide.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ImplementationGuide",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    grouping: typing.Optional[typing.List["ImplementationGuideDefinitionGrouping"]]

    """ Grouping used to present related resources in the IG.
    List of `ImplementationGuideDefinitionGrouping` items (represented as `dict` in JSON).
    """

    resource: typing.List["ImplementationGuideDefinitionResource"]

    """ Resource in the implementation guide.
    List of `ImplementationGuideDefinitionResource` items (represented as `dict` in JSON).
    """

    page: typing.Optional["ImplementationGuideDefinitionPage"]

    """ Page/Section in the Guide.
    Type `ImplementationGuideDefinitionPage` (represented as `dict` in JSON).
    """

    parameter: typing.Optional[typing.List["ImplementationGuideDefinitionParameter"]]

    """ Defines how IG is built by tools.
    List of `ImplementationGuideDefinitionParameter` items (represented as `dict` in JSON).
    """

    template: typing.Optional[typing.List["ImplementationGuideDefinitionTemplate"]]

    """ A template for building resources.
    List of `ImplementationGuideDefinitionTemplate` items (represented as `dict` in JSON).
    """




class ImplementationGuideDefinitionGrouping(BackboneElement):
    """ Grouping used to present related resources in the IG.

    A logical group of resources. Logical groups can be used when building
    pages.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ImplementationGuide",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: FHIRRequiredString

    """ Descriptive name for the package.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ Human readable text describing the package.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class ImplementationGuideDefinitionResource(BackboneElement):
    """ Resource in the implementation guide.

    A resource that is part of the implementation guide. Conformance resources
    (value set, structure definition, capability statements etc.) are obvious
    candidates for inclusion, but any kind of resource can be included as an
    example resource.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ImplementationGuide",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    reference: "Reference"

    """ Location of the resource.
    Type `Reference` (represented as `dict` in JSON).
    """

    
    
    fhir_version: typing.Optional[typing.List[typing.Optional["FHIRCode"]]]

    """ Versions this applies to (if different to IG).
    List of `FHIRCode` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    fhir_version__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_fhir_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Human Name for the resource.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ Reason why included in guide.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    example_boolean: typing.Optional[bool]

    """ Is an example/What is this an example of?.
    Type `bool`. Is a JSON Primitive element.
    """
    

    example_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_example_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    example_canonical: typing.Optional[FHIRString]

    """ Is an example/What is this an example of?.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    example_canonical__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_example_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    grouping_id: typing.Optional[FHIRId]

    """ Grouping this is part of.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    grouping_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_grouping_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'ImplementationGuide.definition.resource.example[x]', 'choice_of_type': 'example', 'orig_name': 'exampleBoolean', 'name': 'exampleBoolean', 'parent_name': 'ImplementationGuide.definition.resource', 'class_name': 'bool', 'enum': None, 'module_name': None, 'json_class': 'bool', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Is an example/What is this an example of?', 'formal': 'If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.', 'representation': None}
    _example_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['example_boolean', 'example_canonical']), True))

    _validate_primitive_fhir_version = get_primitive_field_root_validator("fhir_version")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_example_boolean = get_primitive_field_root_validator("example_boolean")
    
    _validate_primitive_example_canonical = get_primitive_field_root_validator("example_canonical")
    
    _validate_primitive_grouping_id = get_primitive_field_root_validator("grouping_id")
    


class ImplementationGuideDefinitionPage(BackboneElement):
    """ Page/Section in the Guide.

    A page / section in the implementation guide. The root page is the
    implementation guide home page.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ImplementationGuide",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name_url: typing.Optional[FHIRString]

    """ Where to find that page.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name_url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name_reference: typing.Optional["Reference"]

    """ Where to find that page.
    Type `Reference` (represented as `dict` in JSON).
    """

    title: FHIRRequiredString

    """ Short title shown for navigational assistance.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    generation: "GuidePageGeneration"

    """ html | markdown | xml | generated.
    Type `GuidePageGeneration` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    generation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_generation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    page: typing.Optional[typing.List["ImplementationGuideDefinitionPage"]]

    """ Nested Pages / Sections.
    List of `ImplementationGuideDefinitionPage` items (represented as `dict` in JSON).
    """



#   {'path': 'ImplementationGuide.definition.page.name[x]', 'choice_of_type': 'name', 'orig_name': 'nameUrl', 'name': 'nameUrl', 'parent_name': 'ImplementationGuide.definition.page', 'class_name': 'FHIRString', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Where to find that page', 'formal': 'The source address for the page.', 'representation': None}
    _name_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['name_url', 'name_reference']), False))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["generation"]["enum"]
            enums.clear()
            for item in GuidePageGeneration:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_name_url = get_primitive_field_root_validator("name_url")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_generation = get_primitive_field_root_validator("generation")
    


class ImplementationGuideDefinitionParameter(BackboneElement):
    """ Defines how IG is built by tools.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ImplementationGuide",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    code: "GuideParameterCode"

    """ apply | path-resource | path-pages | path-tx-cache | expansion-
        parameter | rule-broken-links | generate-xml | generate-json |
        generate-turtle | html-template.
    Type `GuideParameterCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value: FHIRRequiredString

    """ Value for named type.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["code"]["enum"]
            enums.clear()
            for item in GuideParameterCode:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_code = get_primitive_field_root_validator("code")
    
    _validate_primitive_value = get_primitive_field_root_validator("value")
    


class ImplementationGuideDefinitionTemplate(BackboneElement):
    """ A template for building resources.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ImplementationGuide",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: FHIRCode

    """ Type of template specified.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    source: FHIRRequiredString

    """ The source location for the template.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    source__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_source`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    scope: typing.Optional[FHIRString]

    """ The scope in which the template applies.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    scope__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_scope`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_code = get_primitive_field_root_validator("code")
    
    _validate_primitive_source = get_primitive_field_root_validator("source")
    
    _validate_primitive_scope = get_primitive_field_root_validator("scope")
    


class ImplementationGuideManifest(BackboneElement):
    """ Information about an assembled IG.

    Information about an assembled implementation guide, created by the
    publication tooling.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ImplementationGuide",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    rendering: typing.Optional[FHIRString]

    """ Location of rendered implementation guide.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    rendering__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_rendering`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    resource: typing.List["ImplementationGuideManifestResource"]

    """ Resource in the implementation guide.
    List of `ImplementationGuideManifestResource` items (represented as `dict` in JSON).
    """

    page: typing.Optional[typing.List["ImplementationGuideManifestPage"]]

    """ HTML page within the parent IG.
    List of `ImplementationGuideManifestPage` items (represented as `dict` in JSON).
    """

    image: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Image within the IG.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    image__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_image`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    other: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Additional linkable file in IG.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    other__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_other`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_rendering = get_primitive_field_root_validator("rendering")
    
    _validate_primitive_image = get_primitive_field_root_validator("image")
    
    _validate_primitive_other = get_primitive_field_root_validator("other")
    


class ImplementationGuideManifestResource(BackboneElement):
    """ Resource in the implementation guide.

    A resource that is part of the implementation guide. Conformance resources
    (value set, structure definition, capability statements etc.) are obvious
    candidates for inclusion, but any kind of resource can be included as an
    example resource.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ImplementationGuide",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    reference: "Reference"

    """ Location of the resource.
    Type `Reference` (represented as `dict` in JSON).
    """

    example_boolean: typing.Optional[bool]

    """ Is an example/What is this an example of?.
    Type `bool`. Is a JSON Primitive element.
    """
    

    example_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_example_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    example_canonical: typing.Optional[FHIRString]

    """ Is an example/What is this an example of?.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    example_canonical__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_example_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    relative_path: typing.Optional[FHIRString]

    """ Relative path for page in IG.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    relative_path__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_relative_path`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'ImplementationGuide.manifest.resource.example[x]', 'choice_of_type': 'example', 'orig_name': 'exampleBoolean', 'name': 'exampleBoolean', 'parent_name': 'ImplementationGuide.manifest.resource', 'class_name': 'bool', 'enum': None, 'module_name': None, 'json_class': 'bool', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Is an example/What is this an example of?', 'formal': 'If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.', 'representation': None}
    _example_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['example_boolean', 'example_canonical']), True))

    _validate_primitive_example_boolean = get_primitive_field_root_validator("example_boolean")
    
    _validate_primitive_example_canonical = get_primitive_field_root_validator("example_canonical")
    
    _validate_primitive_relative_path = get_primitive_field_root_validator("relative_path")
    


class ImplementationGuideManifestPage(BackboneElement):
    """ HTML page within the parent IG.

    Information about a page within the IG.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ImplementationGuide",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: FHIRRequiredString

    """ HTML page name.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ Title of the page, for references.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    anchor: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Anchor available on the page.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    anchor__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_anchor`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_anchor = get_primitive_field_root_validator("anchor")
    


class InsurancePlanContact(BackboneElement):
    """ Contact for the product.

    The contact for the health insurance product for a certain purpose.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/InsurancePlan",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    purpose: typing.Optional["CodeableConcept"]

    """ The type of contact.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    name: typing.Optional["HumanName"]

    """ A name associated with the contact.
    Type `HumanName` (represented as `dict` in JSON).
    """

    telecom: typing.Optional[typing.List["ContactPoint"]]

    """ Contact details (telephone, email, etc.)  for a contact.
    List of `ContactPoint` items (represented as `dict` in JSON).
    """

    address: typing.Optional["Address"]

    """ Visiting or postal addresses for the contact.
    Type `Address` (represented as `dict` in JSON).
    """




class InsurancePlanCoverage(BackboneElement):
    """ Coverage details.

    Details about the coverage offered by the insurance product.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/InsurancePlan",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: "CodeableConcept"

    """ Type of coverage.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    network: typing.Optional[typing.List["Reference"]]

    """ What networks provide coverage.
    List of `Reference` items (represented as `dict` in JSON).
    """

    benefit: typing.List["InsurancePlanCoverageBenefit"]

    """ List of benefits.
    List of `InsurancePlanCoverageBenefit` items (represented as `dict` in JSON).
    """




class InsurancePlanCoverageBenefit(BackboneElement):
    """ List of benefits.

    Specific benefits under this type of coverage.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/InsurancePlan",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: "CodeableConcept"

    """ Type of benefit.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    requirement: typing.Optional[FHIRString]

    """ Referral requirements.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    requirement__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_requirement`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    limit: typing.Optional[typing.List["InsurancePlanCoverageBenefitLimit"]]

    """ Benefit limits.
    List of `InsurancePlanCoverageBenefitLimit` items (represented as `dict` in JSON).
    """



    _validate_primitive_requirement = get_primitive_field_root_validator("requirement")
    


class InsurancePlanCoverageBenefitLimit(BackboneElement):
    """ Benefit limits.

    The specific limits on the benefit.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/InsurancePlan",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    value: typing.Optional["Quantity"]

    """ Maximum value allowed.
    Type `Quantity` (represented as `dict` in JSON).
    """

    code: typing.Optional["CodeableConcept"]

    """ Benefit limit details.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """




class InsurancePlanPlan(BackboneElement):
    """ Plan details.

    Details about an insurance plan.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/InsurancePlan",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Business Identifier for Product.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    type: typing.Optional["CodeableConcept"]

    """ Type of plan.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    coverage_area: typing.Optional[typing.List["Reference"]]

    """ Where product applies.
    List of `Reference` items (represented as `dict` in JSON).
    """

    network: typing.Optional[typing.List["Reference"]]

    """ What networks provide coverage.
    List of `Reference` items (represented as `dict` in JSON).
    """

    general_cost: typing.Optional[typing.List["InsurancePlanPlanGeneralCost"]]

    """ Overall costs.
    List of `InsurancePlanPlanGeneralCost` items (represented as `dict` in JSON).
    """

    specific_cost: typing.Optional[typing.List["InsurancePlanPlanSpecificCost"]]

    """ Specific costs.
    List of `InsurancePlanPlanSpecificCost` items (represented as `dict` in JSON).
    """




class InsurancePlanPlanGeneralCost(BackboneElement):
    """ Overall costs.

    Overall costs associated with the plan.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/InsurancePlan",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: typing.Optional["CodeableConcept"]

    """ Type of cost.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    group_size: typing.Optional[FHIRPositiveInt]

    """ Number of enrollees.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    group_size__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_group_size`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    cost: typing.Optional["Money"]

    """ Cost value.
    Type `Money` (represented as `dict` in JSON).
    """

    comment: typing.Optional[FHIRString]

    """ Additional cost information.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    comment__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_comment`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_group_size = get_primitive_field_root_validator("group_size")
    
    _validate_primitive_comment = get_primitive_field_root_validator("comment")
    


class InsurancePlanPlanSpecificCost(BackboneElement):
    """ Specific costs.

    Costs associated with the coverage provided by the product.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/InsurancePlan",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    category: "CodeableConcept"

    """ General category of benefit.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    benefit: typing.Optional[typing.List["InsurancePlanPlanSpecificCostBenefit"]]

    """ Benefits list.
    List of `InsurancePlanPlanSpecificCostBenefit` items (represented as `dict` in JSON).
    """




class InsurancePlanPlanSpecificCostBenefit(BackboneElement):
    """ Benefits list.

    List of the specific benefits under this category of benefit.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/InsurancePlan",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: "CodeableConcept"

    """ Type of specific benefit.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    cost: typing.Optional[typing.List["InsurancePlanPlanSpecificCostBenefitCost"]]

    """ List of the costs.
    List of `InsurancePlanPlanSpecificCostBenefitCost` items (represented as `dict` in JSON).
    """




class InsurancePlanPlanSpecificCostBenefitCost(BackboneElement):
    """ List of the costs.

    List of the costs associated with a specific benefit.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/InsurancePlan",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: "CodeableConcept"

    """ Type of cost.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    applicability: typing.Optional["CodeableConcept"]

    """ in-network | out-of-network | other.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    qualifiers: typing.Optional[typing.List["CodeableConcept"]]

    """ Additional information about the cost.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    value: typing.Optional["Quantity"]

    """ The actual cost value.
    Type `Quantity` (represented as `dict` in JSON).
    """




class InvoiceParticipant(BackboneElement):
    """ Participant in creation of this Invoice.

    Indicates who or what performed or participated in the charged service.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Invoice",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    role: typing.Optional["CodeableConcept"]

    """ Type of involvement in creation of this Invoice.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    actor: "Reference"

    """ Individual who was involved.
    Type `Reference` (represented as `dict` in JSON).
    """




class InvoiceLineItem(BackboneElement):
    """ Line items of this Invoice.

    Each line item represents one charge for goods and services rendered.
    Details such as date, code and amount are found in the referenced
    ChargeItem resource.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Invoice",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    sequence: typing.Optional[FHIRPositiveInt]

    """ Sequence number of line item.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    charge_item_reference: typing.Optional["Reference"]

    """ Reference to ChargeItem containing details of this line item or an
        inline billing code.
    Type `Reference` (represented as `dict` in JSON).
    """

    charge_item_codeable_concept: typing.Optional["CodeableConcept"]

    """ Reference to ChargeItem containing details of this line item or an
        inline billing code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    price_component: typing.Optional[typing.List["InvoiceLineItemPriceComponent"]]

    """ Components of total line item price.
    List of `InvoiceLineItemPriceComponent` items (represented as `dict` in JSON).
    """



#   {'path': 'Invoice.lineItem.chargeItem[x]', 'choice_of_type': 'chargeItem', 'orig_name': 'chargeItemReference', 'name': 'chargeItemReference', 'parent_name': 'Invoice.lineItem', 'class_name': 'Reference', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': False, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Reference to ChargeItem containing details of this line item or an inline billing code', 'formal': 'The ChargeItem contains information such as the billing code, date, amount etc. If no further details are required for the lineItem, inline billing codes can be added using the CodeableConcept data type instead of the Reference.', 'representation': None}
    _charge_item_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['charge_item_reference', 'charge_item_codeable_concept']), False))

    _validate_primitive_sequence = get_primitive_field_root_validator("sequence")
    


class InvoiceLineItemPriceComponent(BackboneElement):
    """ Components of total line item price.

    The price for a ChargeItem may be calculated as a base price with
    surcharges/deductions that apply in certain conditions. A
    ChargeItemDefinition resource that defines the prices, factors and
    conditions that apply to a billing code is currently under development. The
    priceComponent element can be used to offer transparency to the recipient
    of the Invoice as to how the prices have been calculated.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Invoice",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    type: "InvoicePriceComponentType"

    """ base | surcharge | deduction | discount | tax | informational.
    Type `InvoicePriceComponentType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code: typing.Optional["CodeableConcept"]

    """ Code identifying the specific component.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    factor: typing.Optional[decimal.Decimal]

    """ Factor used for calculating this component.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    factor__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_factor`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    amount: typing.Optional["Money"]

    """ Monetary amount associated with this component.
    Type `Money` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in InvoicePriceComponentType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_factor = get_primitive_field_root_validator("factor")
    


class LinkageItem(BackboneElement):
    """ Item to be linked.

    Identifies which record considered as the reference to the same real-world
    occurrence as well as how the items should be evaluated within the
    collection of linked items.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Linkage",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    type: "LinkageType"

    """ source | alternate | historical.
    Type `LinkageType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    resource: "Reference"

    """ Resource being linked.
    Type `Reference` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in LinkageType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_type = get_primitive_field_root_validator("type")
    


class ListEntry(BackboneElement):
    """ Entries in the list.

    Entries in this list.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/List",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    flag: typing.Optional["CodeableConcept"]

    """ Status/Workflow information about this item.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    deleted: typing.Optional[bool]

    """ If this item is actually marked as deleted.
    Type `bool`. Is a JSON Primitive element.
    """
    

    deleted__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_deleted`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    date: typing.Optional[FHIRDateTime]

    """ When item added to list.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    item: "Reference"

    """ Actual entry.
    Type `Reference` (represented as `dict` in JSON).
    """



    _validate_primitive_deleted = get_primitive_field_root_validator("deleted")
    
    _validate_primitive_date = get_primitive_field_root_validator("date")
    


class LocationPosition(BackboneElement):
    """ The absolute geographic location.

    The absolute geographic location of the Location, expressed using the WGS84
    datum (This is the same co-ordinate system used in KML).
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Location",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    longitude: decimal.Decimal

    """ Longitude with WGS84 datum.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    longitude__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_longitude`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    latitude: decimal.Decimal

    """ Latitude with WGS84 datum.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    latitude__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_latitude`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    altitude: typing.Optional[decimal.Decimal]

    """ Altitude with WGS84 datum.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    altitude__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_altitude`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_longitude = get_primitive_field_root_validator("longitude")
    
    _validate_primitive_latitude = get_primitive_field_root_validator("latitude")
    
    _validate_primitive_altitude = get_primitive_field_root_validator("altitude")
    


class LocationHoursOfOperation(BackboneElement):
    """ What days/times during a week is this location usually open.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Location",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    days_of_week: typing.Optional[typing.List[typing.Optional["DaysOfWeek"]]]

    """ mon | tue | wed | thu | fri | sat | sun.
    List of `DaysOfWeek` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    days_of_week__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_days_of_week`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    all_day: typing.Optional[bool]

    """ The Location is open all day.
    Type `bool`. Is a JSON Primitive element.
    """
    

    all_day__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_all_day`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    opening_time: typing.Optional[FHIRTime]

    """ Time that the Location opens.
    Type `FHIRTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    opening_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_opening_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    closing_time: typing.Optional[FHIRTime]

    """ Time that the Location closes.
    Type `FHIRTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    closing_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_closing_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["daysOfWeek"]["items"]["enum"]
            enums.clear()
            for item in DaysOfWeek:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_days_of_week = get_primitive_field_root_validator("days_of_week")
    
    _validate_primitive_all_day = get_primitive_field_root_validator("all_day")
    
    _validate_primitive_opening_time = get_primitive_field_root_validator("opening_time")
    
    _validate_primitive_closing_time = get_primitive_field_root_validator("closing_time")
    


class MeasureGroup(BackboneElement):
    """ Population criteria group.

    A group of population criteria for the measure.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Measure",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: typing.Optional["CodeableConcept"]

    """ Meaning of the group.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Summary description.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    population: typing.Optional[typing.List["MeasureGroupPopulation"]]

    """ Population criteria.
    List of `MeasureGroupPopulation` items (represented as `dict` in JSON).
    """

    stratifier: typing.Optional[typing.List["MeasureGroupStratifier"]]

    """ Stratifier criteria for the measure.
    List of `MeasureGroupStratifier` items (represented as `dict` in JSON).
    """



    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class MeasureGroupPopulation(BackboneElement):
    """ Population criteria.

    A population criteria for the measure.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Measure",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: typing.Optional["CodeableConcept"]

    """ initial-population | numerator | numerator-exclusion | denominator
        | denominator-exclusion | denominator-exception | measure-
        population | measure-population-exclusion | measure-observation.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ The human readable description of this population criteria.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    criteria: "Expression"

    """ The criteria that defines this population.
    Type `Expression` (represented as `dict` in JSON).
    """



    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class MeasureGroupStratifier(BackboneElement):
    """ Stratifier criteria for the measure.

    The stratifier criteria for the measure report, specified as either the
    name of a valid CQL expression defined within a referenced library or a
    valid FHIR Resource Path.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Measure",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: typing.Optional["CodeableConcept"]

    """ Meaning of the stratifier.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ The human readable description of this stratifier.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    criteria: typing.Optional["Expression"]

    """ How the measure should be stratified.
    Type `Expression` (represented as `dict` in JSON).
    """

    component: typing.Optional[typing.List["MeasureGroupStratifierComponent"]]

    """ Stratifier criteria component for the measure.
    List of `MeasureGroupStratifierComponent` items (represented as `dict` in JSON).
    """



    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class MeasureGroupStratifierComponent(BackboneElement):
    """ Stratifier criteria component for the measure.

    A component of the stratifier criteria for the measure report, specified as
    either the name of a valid CQL expression defined within a referenced
    library or a valid FHIR Resource Path.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Measure",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: typing.Optional["CodeableConcept"]

    """ Meaning of the stratifier component.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ The human readable description of this stratifier component.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    criteria: "Expression"

    """ Component of how the measure should be stratified.
    Type `Expression` (represented as `dict` in JSON).
    """



    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class MeasureSupplementalData(BackboneElement):
    """ What other data should be reported with the measure.

    The supplemental data criteria for the measure report, specified as either
    the name of a valid CQL expression within a referenced library, or a valid
    FHIR Resource Path.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Measure",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: typing.Optional["CodeableConcept"]

    """ Meaning of the supplemental data.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    usage: typing.Optional[typing.List["CodeableConcept"]]

    """ supplemental-data | risk-adjustment-factor.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ The human readable description of this supplemental data.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    criteria: "Expression"

    """ Expression describing additional data to be reported.
    Type `Expression` (represented as `dict` in JSON).
    """



    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class MeasureReportGroup(BackboneElement):
    """ Measure results for each group.

    The results of the calculation, one for each population group in the
    measure.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MeasureReport",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: typing.Optional["CodeableConcept"]

    """ Meaning of the group.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    population: typing.Optional[typing.List["MeasureReportGroupPopulation"]]

    """ The populations in the group.
    List of `MeasureReportGroupPopulation` items (represented as `dict` in JSON).
    """

    measure_score: typing.Optional["Quantity"]

    """ What score this group achieved.
    Type `Quantity` (represented as `dict` in JSON).
    """

    stratifier: typing.Optional[typing.List["MeasureReportGroupStratifier"]]

    """ Stratification results.
    List of `MeasureReportGroupStratifier` items (represented as `dict` in JSON).
    """




class MeasureReportGroupPopulation(BackboneElement):
    """ The populations in the group.

    The populations that make up the population group, one for each type of
    population appropriate for the measure.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MeasureReport",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: typing.Optional["CodeableConcept"]

    """ initial-population | numerator | numerator-exclusion | denominator
        | denominator-exclusion | denominator-exception | measure-
        population | measure-population-exclusion | measure-observation.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    count: typing.Optional[FHIRInt]

    """ Size of the population.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    count__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_count`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subject_results: typing.Optional["Reference"]

    """ For subject-list reports, the subject results in this population.
    Type `Reference` (represented as `dict` in JSON).
    """



    _validate_primitive_count = get_primitive_field_root_validator("count")
    


class MeasureReportGroupStratifier(BackboneElement):
    """ Stratification results.

    When a measure includes multiple stratifiers, there will be a stratifier
    group for each stratifier defined by the measure.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MeasureReport",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: typing.Optional[typing.List["CodeableConcept"]]

    """ What stratifier of the group.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    stratum: typing.Optional[typing.List["MeasureReportGroupStratifierStratum"]]

    """ Stratum results, one for each unique value, or set of values, in
        the stratifier, or stratifier components.
    List of `MeasureReportGroupStratifierStratum` items (represented as `dict` in JSON).
    """




class MeasureReportGroupStratifierStratum(BackboneElement):
    """ Stratum results, one for each unique value, or set of values, in the
    stratifier, or stratifier components.

    This element contains the results for a single stratum within the
    stratifier. For example, when stratifying on administrative gender, there
    will be four strata, one for each possible gender value.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MeasureReport",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    value: typing.Optional["CodeableConcept"]

    """ The stratum value, e.g. male.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    component: typing.Optional[typing.List["MeasureReportGroupStratifierStratumComponent"]]

    """ Stratifier component values.
    List of `MeasureReportGroupStratifierStratumComponent` items (represented as `dict` in JSON).
    """

    population: typing.Optional[typing.List["MeasureReportGroupStratifierStratumPopulation"]]

    """ Population results in this stratum.
    List of `MeasureReportGroupStratifierStratumPopulation` items (represented as `dict` in JSON).
    """

    measure_score: typing.Optional["Quantity"]

    """ What score this stratum achieved.
    Type `Quantity` (represented as `dict` in JSON).
    """




class MeasureReportGroupStratifierStratumComponent(BackboneElement):
    """ Stratifier component values.

    A stratifier component value.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MeasureReport",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: "CodeableConcept"

    """ What stratifier component of the group.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value: "CodeableConcept"

    """ The stratum component value, e.g. male.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """




class MeasureReportGroupStratifierStratumPopulation(BackboneElement):
    """ Population results in this stratum.

    The populations that make up the stratum, one for each type of population
    appropriate to the measure.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MeasureReport",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: typing.Optional["CodeableConcept"]

    """ initial-population | numerator | numerator-exclusion | denominator
        | denominator-exclusion | denominator-exception | measure-
        population | measure-population-exclusion | measure-observation.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    count: typing.Optional[FHIRInt]

    """ Size of the population.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    count__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_count`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subject_results: typing.Optional["Reference"]

    """ For subject-list reports, the subject results in this population.
    Type `Reference` (represented as `dict` in JSON).
    """



    _validate_primitive_count = get_primitive_field_root_validator("count")
    


class MedicationIngredient(BackboneElement):
    """ Active or inactive ingredient.

    Identifies a particular constituent of interest in the product.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Medication",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    item_codeable_concept: typing.Optional["CodeableConcept"]

    """ The actual ingredient or content.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    item_reference: typing.Optional["Reference"]

    """ The actual ingredient or content.
    Type `Reference` (represented as `dict` in JSON).
    """

    is_active: typing.Optional[bool]

    """ Active ingredient indicator.
    Type `bool`. Is a JSON Primitive element.
    """
    

    is_active__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_is_active`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    strength: typing.Optional["Ratio"]

    """ Quantity of ingredient present.
    Type `Ratio` (represented as `dict` in JSON).
    """



#   {'path': 'Medication.ingredient.item[x]', 'choice_of_type': 'item', 'orig_name': 'itemCodeableConcept', 'name': 'itemCodeableConcept', 'parent_name': 'Medication.ingredient', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'The actual ingredient or content', 'formal': 'The actual ingredient - either a substance (simple ingredient) or another medication of a medication.', 'representation': None}
    _item_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['item_codeable_concept', 'item_reference']), False))

    _validate_primitive_is_active = get_primitive_field_root_validator("is_active")
    


class MedicationBatch(BackboneElement):
    """ Details about packaged medications.

    Information that only applies to packages (not products).
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Medication",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    lot_number: typing.Optional[FHIRString]

    """ Identifier assigned to batch.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    lot_number__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_lot_number`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    expiration_date: typing.Optional[FHIRDateTime]

    """ When batch will expire.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    expiration_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_expiration_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_lot_number = get_primitive_field_root_validator("lot_number")
    
    _validate_primitive_expiration_date = get_primitive_field_root_validator("expiration_date")
    


class MedicationAdministrationPerformer(BackboneElement):
    """ Who performed the medication administration and what they did.

    Indicates who or what performed the medication administration and how they
    were involved.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationAdministration",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    function: typing.Optional["CodeableConcept"]

    """ Type of performance.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    actor: "Reference"

    """ Who performed the medication administration.
    Type `Reference` (represented as `dict` in JSON).
    """




class MedicationAdministrationDosage(BackboneElement):
    """ Details of how medication was taken.

    Describes the medication dosage information details e.g. dose, rate, site,
    route, etc.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationAdministration",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    text: typing.Optional[FHIRString]

    """ Free text dosage instructions e.g. SIG.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    text__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_text`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    site: typing.Optional["CodeableConcept"]

    """ Body site administered to.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    route: typing.Optional["CodeableConcept"]

    """ Path of substance into body.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    method: typing.Optional["CodeableConcept"]

    """ How drug was administered.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    dose: typing.Optional["Quantity"]

    """ Amount of medication per dose.
    Type `Quantity` (represented as `dict` in JSON).
    """

    rate_ratio: typing.Optional["Ratio"]

    """ Dose quantity per unit of time.
    Type `Ratio` (represented as `dict` in JSON).
    """

    rate_quantity: typing.Optional["Quantity"]

    """ Dose quantity per unit of time.
    Type `Quantity` (represented as `dict` in JSON).
    """



#   {'path': 'MedicationAdministration.dosage.rate[x]', 'choice_of_type': 'rate', 'orig_name': 'rateRatio', 'name': 'rateRatio', 'parent_name': 'MedicationAdministration.dosage', 'class_name': 'Ratio', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Dose quantity per unit of time', 'formal': 'Identifies the speed with which the medication was or will be introduced into the patient.  Typically, the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time, e.g. 500 ml per 2 hours.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.', 'representation': None}
    _rate_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['rate_ratio', 'rate_quantity']), True))

    _validate_primitive_text = get_primitive_field_root_validator("text")
    


class MedicationDispensePerformer(BackboneElement):
    """ Who performed event.

    Indicates who or what performed the event.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationDispense",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    function: typing.Optional["CodeableConcept"]

    """ Who performed the dispense and what they did.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    actor: "Reference"

    """ Individual who was performing.
    Type `Reference` (represented as `dict` in JSON).
    """




class MedicationDispenseSubstitution(BackboneElement):
    """ Whether a substitution was performed on the dispense.

    Indicates whether or not substitution was made as part of the dispense.  In
    some cases, substitution will be expected but does not happen, in other
    cases substitution is not expected but does happen.  This block explains
    what substitution did or did not happen and why.  If nothing is specified,
    substitution was not done.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationDispense",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    was_substituted: bool

    """ Whether a substitution was or was not performed on the dispense.
    Type `bool`. Is a JSON Primitive element.
    """
    

    was_substituted__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_was_substituted`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional["CodeableConcept"]

    """ Code signifying whether a different drug was dispensed from what
        was prescribed.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    reason: typing.Optional[typing.List["CodeableConcept"]]

    """ Why was substitution made.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    responsible_party: typing.Optional[typing.List["Reference"]]

    """ Who is responsible for the substitution.
    List of `Reference` items (represented as `dict` in JSON).
    """



    _validate_primitive_was_substituted = get_primitive_field_root_validator("was_substituted")
    


class MedicationKnowledgeRelatedMedicationKnowledge(BackboneElement):
    """ Associated or related medication information.

    Associated or related knowledge about a medication.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationKnowledge",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: "CodeableConcept"

    """ Category of medicationKnowledge.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    reference: typing.List["Reference"]

    """ Associated documentation about the associated medication knowledge.
    List of `Reference` items (represented as `dict` in JSON).
    """




class MedicationKnowledgeMonograph(BackboneElement):
    """ Associated documentation about the medication.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationKnowledge",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: typing.Optional["CodeableConcept"]

    """ The category of medication document.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    source: typing.Optional["Reference"]

    """ Associated documentation about the medication.
    Type `Reference` (represented as `dict` in JSON).
    """




class MedicationKnowledgeIngredient(BackboneElement):
    """ Active or inactive ingredient.

    Identifies a particular constituent of interest in the product.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationKnowledge",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    item_codeable_concept: typing.Optional["CodeableConcept"]

    """ Medication(s) or substance(s) contained in the medication.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    item_reference: typing.Optional["Reference"]

    """ Medication(s) or substance(s) contained in the medication.
    Type `Reference` (represented as `dict` in JSON).
    """

    is_active: typing.Optional[bool]

    """ Active ingredient indicator.
    Type `bool`. Is a JSON Primitive element.
    """
    

    is_active__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_is_active`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    strength: typing.Optional["Ratio"]

    """ Quantity of ingredient present.
    Type `Ratio` (represented as `dict` in JSON).
    """



#   {'path': 'MedicationKnowledge.ingredient.item[x]', 'choice_of_type': 'item', 'orig_name': 'itemCodeableConcept', 'name': 'itemCodeableConcept', 'parent_name': 'MedicationKnowledge.ingredient', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Medication(s) or substance(s) contained in the medication', 'formal': 'The actual ingredient - either a substance (simple ingredient) or another medication.', 'representation': None}
    _item_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['item_codeable_concept', 'item_reference']), False))

    _validate_primitive_is_active = get_primitive_field_root_validator("is_active")
    


class MedicationKnowledgeCost(BackboneElement):
    """ The pricing of the medication.

    The price of the medication.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationKnowledge",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: "CodeableConcept"

    """ The category of the cost information.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    source: typing.Optional[FHIRString]

    """ The source or owner for the price information.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    source__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_source`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    cost: "Money"

    """ The price of the medication.
    Type `Money` (represented as `dict` in JSON).
    """



    _validate_primitive_source = get_primitive_field_root_validator("source")
    


class MedicationKnowledgeMonitoringProgram(BackboneElement):
    """ Program under which a medication is reviewed.

    The program under which the medication is reviewed.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationKnowledge",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: typing.Optional["CodeableConcept"]

    """ Type of program under which the medication is monitored.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    name: typing.Optional[FHIRString]

    """ Name of the reviewing program.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_name = get_primitive_field_root_validator("name")
    


class MedicationKnowledgeAdministrationGuidelines(BackboneElement):
    """ Guidelines for administration of the medication.

    Guidelines for the administration of the medication.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationKnowledge",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    dosage: typing.Optional[typing.List["MedicationKnowledgeAdministrationGuidelinesDosage"]]

    """ Dosage for the medication for the specific guidelines.
    List of `MedicationKnowledgeAdministrationGuidelinesDosage` items (represented as `dict` in JSON).
    """

    indication_codeable_concept: typing.Optional["CodeableConcept"]

    """ Indication for use that apply to the specific administration
        guidelines.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    indication_reference: typing.Optional["Reference"]

    """ Indication for use that apply to the specific administration
        guidelines.
    Type `Reference` (represented as `dict` in JSON).
    """

    patient_characteristics: typing.Optional[typing.List["MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics"]]

    """ Characteristics of the patient that are relevant to the
        administration guidelines.
    List of `MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics` items (represented as `dict` in JSON).
    """



#   {'path': 'MedicationKnowledge.administrationGuidelines.indication[x]', 'choice_of_type': 'indication', 'orig_name': 'indicationCodeableConcept', 'name': 'indicationCodeableConcept', 'parent_name': 'MedicationKnowledge.administrationGuidelines', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Indication for use that apply to the specific administration guidelines', 'formal': None, 'representation': None}
    _indication_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['indication_codeable_concept', 'indication_reference']), True))


class MedicationKnowledgeAdministrationGuidelinesDosage(BackboneElement):
    """ Dosage for the medication for the specific guidelines.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationKnowledge",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: "CodeableConcept"

    """ Type of dosage.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    dosage: typing.List["Dosage"]

    """ Dosage for the medication for the specific guidelines.
    List of `Dosage` items (represented as `dict` in JSON).
    """




class MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(BackboneElement):
    """ Characteristics of the patient that are relevant to the administration
    guidelines.

    Characteristics of the patient that are relevant to the administration
    guidelines (for example, height, weight, gender, etc.).
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationKnowledge",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    characteristic_codeable_concept: typing.Optional["CodeableConcept"]

    """ Specific characteristic that is relevant to the administration
        guideline.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    characteristic_quantity: typing.Optional["Quantity"]

    """ Specific characteristic that is relevant to the administration
        guideline.
    Type `Quantity` (represented as `dict` in JSON).
    """

    value: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ The specific characteristic.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'MedicationKnowledge.administrationGuidelines.patientCharacteristics.characteristic[x]', 'choice_of_type': 'characteristic', 'orig_name': 'characteristicCodeableConcept', 'name': 'characteristicCodeableConcept', 'parent_name': 'MedicationKnowledge.administrationGuidelines.patientCharacteristics', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Specific characteristic that is relevant to the administration guideline', 'formal': 'Specific characteristic that is relevant to the administration guideline (e.g. height, weight, gender).', 'representation': None}
    _characteristic_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['characteristic_codeable_concept', 'characteristic_quantity']), False))

    _validate_primitive_value = get_primitive_field_root_validator("value")
    


class MedicationKnowledgeMedicineClassification(BackboneElement):
    """ Categorization of the medication within a formulary or classification
    system.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationKnowledge",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: "CodeableConcept"

    """ The type of category for the medication (for example, therapeutic
        classification, therapeutic sub-classification).
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    classification: typing.Optional[typing.List["CodeableConcept"]]

    """ Specific category assigned to the medication.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """




class MedicationKnowledgePackaging(BackboneElement):
    """ Details about packaged medications.

    Information that only applies to packages (not products).
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationKnowledge",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: typing.Optional["CodeableConcept"]

    """ A code that defines the specific type of packaging that the
        medication can be found in.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    quantity: typing.Optional["Quantity"]

    """ The number of product units the package would contain if fully
        loaded.
    Type `Quantity` (represented as `dict` in JSON).
    """




class MedicationKnowledgeDrugCharacteristic(BackboneElement):
    """ Specifies descriptive properties of the medicine.

    Specifies descriptive properties of the medicine, such as color, shape,
    imprints, etc.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationKnowledge",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: typing.Optional["CodeableConcept"]

    """ Code specifying the type of characteristic of medication.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value_codeable_concept: typing.Optional["CodeableConcept"]

    """ Description of the characteristic.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value_string: typing.Optional[FHIRString]

    """ Description of the characteristic.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_quantity: typing.Optional["Quantity"]

    """ Description of the characteristic.
    Type `Quantity` (represented as `dict` in JSON).
    """

    value_base64_binary: typing.Optional[FHIRBase64Binary]

    """ Description of the characteristic.
    Type `FHIRBase64Binary` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_base64_binary__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_base64_binary`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'MedicationKnowledge.drugCharacteristic.value[x]', 'choice_of_type': 'value', 'orig_name': 'valueCodeableConcept', 'name': 'valueCodeableConcept', 'parent_name': 'MedicationKnowledge.drugCharacteristic', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Description of the characteristic', 'formal': None, 'representation': None}
    _value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['value_codeable_concept', 'value_string', 'value_quantity', 'value_base64_binary']), True))

    _validate_primitive_value_string = get_primitive_field_root_validator("value_string")
    
    _validate_primitive_value_base64_binary = get_primitive_field_root_validator("value_base64_binary")
    


class MedicationKnowledgeRegulatory(BackboneElement):
    """ Regulatory information about a medication.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationKnowledge",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    regulatory_authority: "Reference"

    """ Specifies the authority of the regulation.
    Type `Reference` (represented as `dict` in JSON).
    """

    substitution: typing.Optional[typing.List["MedicationKnowledgeRegulatorySubstitution"]]

    """ Specifies if changes are allowed when dispensing a medication from
        a regulatory perspective.
    List of `MedicationKnowledgeRegulatorySubstitution` items (represented as `dict` in JSON).
    """

    schedule: typing.Optional[typing.List["MedicationKnowledgeRegulatorySchedule"]]

    """ Specifies the schedule of a medication in jurisdiction.
    List of `MedicationKnowledgeRegulatorySchedule` items (represented as `dict` in JSON).
    """

    max_dispense: typing.Optional["MedicationKnowledgeRegulatoryMaxDispense"]

    """ The maximum number of units of the medication that can be dispensed
        in a period.
    Type `MedicationKnowledgeRegulatoryMaxDispense` (represented as `dict` in JSON).
    """




class MedicationKnowledgeRegulatorySubstitution(BackboneElement):
    """ Specifies if changes are allowed when dispensing a medication from a
    regulatory perspective.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationKnowledge",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: "CodeableConcept"

    """ Specifies the type of substitution allowed.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    allowed: bool

    """ Specifies if regulation allows for changes in the medication when
        dispensing.
    Type `bool`. Is a JSON Primitive element.
    """
    

    allowed__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_allowed`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_allowed = get_primitive_field_root_validator("allowed")
    


class MedicationKnowledgeRegulatorySchedule(BackboneElement):
    """ Specifies the schedule of a medication in jurisdiction.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationKnowledge",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    schedule: "CodeableConcept"

    """ Specifies the specific drug schedule.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """




class MedicationKnowledgeRegulatoryMaxDispense(BackboneElement):
    """ The maximum number of units of the medication that can be dispensed in a
    period.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationKnowledge",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    quantity: "Quantity"

    """ The maximum number of units of the medication that can be dispensed.
    Type `Quantity` (represented as `dict` in JSON).
    """

    period: typing.Optional["Duration"]

    """ The period that applies to the maximum number of units.
    Type `Duration` (represented as `dict` in JSON).
    """




class MedicationKnowledgeKinetics(BackboneElement):
    """ The time course of drug absorption, distribution, metabolism and excretion
    of a medication from the body.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationKnowledge",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    area_under_curve: typing.Optional[typing.List["Quantity"]]

    """ The drug concentration measured at certain discrete points in time.
    List of `Quantity` items (represented as `dict` in JSON).
    """

    lethal_dose50: typing.Optional[typing.List["Quantity"]]

    """ The median lethal dose of a drug.
    List of `Quantity` items (represented as `dict` in JSON).
    """

    half_life_period: typing.Optional["Duration"]

    """ Time required for concentration in the body to decrease by half.
    Type `Duration` (represented as `dict` in JSON).
    """




class MedicationRequestDispenseRequest(BackboneElement):
    """ Medication supply authorization.

    Indicates the specific details for the dispense or medication supply part
    of a medication request (also known as a Medication Prescription or
    Medication Order).  Note that this information is not always sent with the
    order.  There may be in some settings (e.g. hospitals) institutional or
    system support for completing the dispense details in the pharmacy
    department.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationRequest",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    initial_fill: typing.Optional["MedicationRequestDispenseRequestInitialFill"]

    """ First fill details.
    Type `MedicationRequestDispenseRequestInitialFill` (represented as `dict` in JSON).
    """

    dispense_interval: typing.Optional["Duration"]

    """ Minimum period of time between dispenses.
    Type `Duration` (represented as `dict` in JSON).
    """

    validity_period: typing.Optional["Period"]

    """ Time period supply is authorized for.
    Type `Period` (represented as `dict` in JSON).
    """

    number_of_repeats_allowed: typing.Optional[FHIRUnsignedInt]

    """ Number of refills authorized.
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    number_of_repeats_allowed__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_number_of_repeats_allowed`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    quantity: typing.Optional["Quantity"]

    """ Amount of medication to supply per dispense.
    Type `Quantity` (represented as `dict` in JSON).
    """

    expected_supply_duration: typing.Optional["Duration"]

    """ Number of days supply per dispense.
    Type `Duration` (represented as `dict` in JSON).
    """

    performer: typing.Optional["Reference"]

    """ Intended dispenser.
    Type `Reference` (represented as `dict` in JSON).
    """



    _validate_primitive_number_of_repeats_allowed = get_primitive_field_root_validator("number_of_repeats_allowed")
    


class MedicationRequestDispenseRequestInitialFill(BackboneElement):
    """ First fill details.

    Indicates the quantity or duration for the first dispense of the
    medication.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationRequest",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    quantity: typing.Optional["Quantity"]

    """ First fill quantity.
    Type `Quantity` (represented as `dict` in JSON).
    """

    duration: typing.Optional["Duration"]

    """ First fill duration.
    Type `Duration` (represented as `dict` in JSON).
    """




class MedicationRequestSubstitution(BackboneElement):
    """ Any restrictions on medication substitution.

    Indicates whether or not substitution can or should be part of the
    dispense. In some cases, substitution must happen, in other cases
    substitution must not happen. This block explains the prescriber's intent.
    If nothing is specified substitution may be done.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicationRequest",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    allowed_boolean: typing.Optional[bool]

    """ Whether substitution is allowed or not.
    Type `bool`. Is a JSON Primitive element.
    """
    

    allowed_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_allowed_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    allowed_codeable_concept: typing.Optional["CodeableConcept"]

    """ Whether substitution is allowed or not.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    reason: typing.Optional["CodeableConcept"]

    """ Why should (not) substitution be made.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """



#   {'path': 'MedicationRequest.substitution.allowed[x]', 'choice_of_type': 'allowed', 'orig_name': 'allowedBoolean', 'name': 'allowedBoolean', 'parent_name': 'MedicationRequest.substitution', 'class_name': 'bool', 'enum': None, 'module_name': None, 'json_class': 'bool', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Whether substitution is allowed or not', 'formal': 'True if the prescriber allows a different drug to be dispensed from what was prescribed.', 'representation': None}
    _allowed_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['allowed_boolean', 'allowed_codeable_concept']), False))

    _validate_primitive_allowed_boolean = get_primitive_field_root_validator("allowed_boolean")
    


class MedicinalProductName(BackboneElement):
    """ The product's name, including full name and possibly coded parts.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProduct",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    product_name: FHIRRequiredString

    """ The full product name.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    product_name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_product_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name_part: typing.Optional[typing.List["MedicinalProductNameNamePart"]]

    """ Coding words or phrases of the name.
    List of `MedicinalProductNameNamePart` items (represented as `dict` in JSON).
    """

    country_language: typing.Optional[typing.List["MedicinalProductNameCountryLanguage"]]

    """ Country where the name applies.
    List of `MedicinalProductNameCountryLanguage` items (represented as `dict` in JSON).
    """



    _validate_primitive_product_name = get_primitive_field_root_validator("product_name")
    


class MedicinalProductNameNamePart(BackboneElement):
    """ Coding words or phrases of the name.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProduct",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    part: FHIRRequiredString

    """ A fragment of a product name.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    part__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_part`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: "Coding"

    """ Idenifying type for this part of the name (e.g. strength part).
    Type `Coding` (represented as `dict` in JSON).
    """



    _validate_primitive_part = get_primitive_field_root_validator("part")
    


class MedicinalProductNameCountryLanguage(BackboneElement):
    """ Country where the name applies.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProduct",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    country: "CodeableConcept"

    """ Country code for where this name applies.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional["CodeableConcept"]

    """ Jurisdiction code for where this name applies.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    language: "CodeableConcept"

    """ Language code for this name.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """




class MedicinalProductManufacturingBusinessOperation(BackboneElement):
    """ An operation applied to the product, for manufacturing or adminsitrative
    purpose.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProduct",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    operation_type: typing.Optional["CodeableConcept"]

    """ The type of manufacturing operation.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    authorisation_reference_number: typing.Optional["Identifier"]

    """ Regulatory authorization reference number.
    Type `Identifier` (represented as `dict` in JSON).
    """

    effective_date: typing.Optional[FHIRDateTime]

    """ Regulatory authorization date.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    effective_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_effective_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    confidentiality_indicator: typing.Optional["CodeableConcept"]

    """ To indicate if this proces is commercially confidential.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    manufacturer: typing.Optional[typing.List["Reference"]]

    """ The manufacturer or establishment associated with the process.
    List of `Reference` items (represented as `dict` in JSON).
    """

    regulator: typing.Optional["Reference"]

    """ A regulator which oversees the operation.
    Type `Reference` (represented as `dict` in JSON).
    """



    _validate_primitive_effective_date = get_primitive_field_root_validator("effective_date")
    


class MedicinalProductSpecialDesignation(BackboneElement):
    """ Indicates if the medicinal product has an orphan designation for the
    treatment of a rare disease.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProduct",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Identifier for the designation, or procedure number.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    type: typing.Optional["CodeableConcept"]

    """ The type of special designation, e.g. orphan drug, minor use.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    intended_use: typing.Optional["CodeableConcept"]

    """ The intended use of the product, e.g. prevention, treatment.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    indication_codeable_concept: typing.Optional["CodeableConcept"]

    """ Condition for which the medicinal use applies.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    indication_reference: typing.Optional["Reference"]

    """ Condition for which the medicinal use applies.
    Type `Reference` (represented as `dict` in JSON).
    """

    status: typing.Optional["CodeableConcept"]

    """ For example granted, pending, expired or withdrawn.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    date: typing.Optional[FHIRDateTime]

    """ Date when the designation was granted.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    species: typing.Optional["CodeableConcept"]

    """ Animal species for which this applies.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """



#   {'path': 'MedicinalProduct.specialDesignation.indication[x]', 'choice_of_type': 'indication', 'orig_name': 'indicationCodeableConcept', 'name': 'indicationCodeableConcept', 'parent_name': 'MedicinalProduct.specialDesignation', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Condition for which the medicinal use applies', 'formal': None, 'representation': None}
    _indication_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['indication_codeable_concept', 'indication_reference']), True))

    _validate_primitive_date = get_primitive_field_root_validator("date")
    


class MedicinalProductAuthorizationJurisdictionalAuthorization(BackboneElement):
    """ Authorization in areas within a country.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProductAuthorization",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ The assigned number for the marketing authorization.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    country: typing.Optional["CodeableConcept"]

    """ Country of authorization.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ Jurisdiction within a country.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    legal_status_of_supply: typing.Optional["CodeableConcept"]

    """ The legal status of supply in a jurisdiction or region.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    validity_period: typing.Optional["Period"]

    """ The start and expected end date of the authorization.
    Type `Period` (represented as `dict` in JSON).
    """




class MedicinalProductAuthorizationProcedure(BackboneElement):
    """ The regulatory procedure for granting or amending a marketing authorization.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProductAuthorization",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional["Identifier"]

    """ Identifier for this procedure.
    Type `Identifier` (represented as `dict` in JSON).
    """

    type: "CodeableConcept"

    """ Type of procedure.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    date_period: typing.Optional["Period"]

    """ Date of procedure.
    Type `Period` (represented as `dict` in JSON).
    """

    date_date_time: typing.Optional[FHIRDateTime]

    """ Date of procedure.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    application: typing.Optional[typing.List["MedicinalProductAuthorizationProcedure"]]

    """ Applcations submitted to obtain a marketing authorization.
    List of `MedicinalProductAuthorizationProcedure` items (represented as `dict` in JSON).
    """



#   {'path': 'MedicinalProductAuthorization.procedure.date[x]', 'choice_of_type': 'date', 'orig_name': 'datePeriod', 'name': 'datePeriod', 'parent_name': 'MedicinalProductAuthorization.procedure', 'class_name': 'Period', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Date of procedure', 'formal': None, 'representation': None}
    _date_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['date_period', 'date_date_time']), True))

    _validate_primitive_date_date_time = get_primitive_field_root_validator("date_date_time")
    


class MedicinalProductContraindicationOtherTherapy(BackboneElement):
    """ Information about the use of the medicinal product in relation to other
    therapies described as part of the indication.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProductContraindication",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    therapy_relationship_type: "CodeableConcept"

    """ The type of relationship between the medicinal product indication
        or contraindication and another therapy.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    medication_codeable_concept: typing.Optional["CodeableConcept"]

    """ Reference to a specific medication (active substance, medicinal
        product or class of products) as part of an indication or
        contraindication.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    medication_reference: typing.Optional["Reference"]

    """ Reference to a specific medication (active substance, medicinal
        product or class of products) as part of an indication or
        contraindication.
    Type `Reference` (represented as `dict` in JSON).
    """



#   {'path': 'MedicinalProductContraindication.otherTherapy.medication[x]', 'choice_of_type': 'medication', 'orig_name': 'medicationCodeableConcept', 'name': 'medicationCodeableConcept', 'parent_name': 'MedicinalProductContraindication.otherTherapy', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication', 'formal': None, 'representation': None}
    _medication_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['medication_codeable_concept', 'medication_reference']), False))


class MedicinalProductIndicationOtherTherapy(BackboneElement):
    """ Information about the use of the medicinal product in relation to other
    therapies described as part of the indication.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProductIndication",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    therapy_relationship_type: "CodeableConcept"

    """ The type of relationship between the medicinal product indication
        or contraindication and another therapy.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    medication_codeable_concept: typing.Optional["CodeableConcept"]

    """ Reference to a specific medication (active substance, medicinal
        product or class of products) as part of an indication or
        contraindication.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    medication_reference: typing.Optional["Reference"]

    """ Reference to a specific medication (active substance, medicinal
        product or class of products) as part of an indication or
        contraindication.
    Type `Reference` (represented as `dict` in JSON).
    """



#   {'path': 'MedicinalProductIndication.otherTherapy.medication[x]', 'choice_of_type': 'medication', 'orig_name': 'medicationCodeableConcept', 'name': 'medicationCodeableConcept', 'parent_name': 'MedicinalProductIndication.otherTherapy', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication', 'formal': None, 'representation': None}
    _medication_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['medication_codeable_concept', 'medication_reference']), False))


class MedicinalProductIngredientSpecifiedSubstance(BackboneElement):
    """ A specified substance that comprises this ingredient.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProductIngredient",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: "CodeableConcept"

    """ The specified substance.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    group: "CodeableConcept"

    """ The group of specified substance, e.g. group 1 to 4.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    confidentiality: typing.Optional["CodeableConcept"]

    """ Confidentiality level of the specified substance as the ingredient.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    strength: typing.Optional[typing.List["MedicinalProductIngredientSpecifiedSubstanceStrength"]]

    """ Quantity of the substance or specified substance present in the
        manufactured item or pharmaceutical product.
    List of `MedicinalProductIngredientSpecifiedSubstanceStrength` items (represented as `dict` in JSON).
    """




class MedicinalProductIngredientSpecifiedSubstanceStrength(BackboneElement):
    """ Quantity of the substance or specified substance present in the
    manufactured item or pharmaceutical product.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProductIngredient",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    presentation: "Ratio"

    """ The quantity of substance in the unit of presentation, or in the
        volume (or mass) of the single pharmaceutical product or
        manufactured item.
    Type `Ratio` (represented as `dict` in JSON).
    """

    presentation_low_limit: typing.Optional["Ratio"]

    """ A lower limit for the quantity of substance in the unit of
        presentation. For use when there is a range of strengths, this is
        the lower limit, with the presentation attribute becoming the upper
        limit.
    Type `Ratio` (represented as `dict` in JSON).
    """

    concentration: typing.Optional["Ratio"]

    """ The strength per unitary volume (or mass).
    Type `Ratio` (represented as `dict` in JSON).
    """

    concentration_low_limit: typing.Optional["Ratio"]

    """ A lower limit for the strength per unitary volume (or mass), for
        when there is a range. The concentration attribute then becomes the
        upper limit.
    Type `Ratio` (represented as `dict` in JSON).
    """

    measurement_point: typing.Optional[FHIRString]

    """ For when strength is measured at a particular point or distance.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    measurement_point__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_measurement_point`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    country: typing.Optional[typing.List["CodeableConcept"]]

    """ The country or countries for which the strength range applies.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    reference_strength: typing.Optional[typing.List["MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength"]]

    """ Strength expressed in terms of a reference substance.
    List of `MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength` items (represented as `dict` in JSON).
    """



    _validate_primitive_measurement_point = get_primitive_field_root_validator("measurement_point")
    


class MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(BackboneElement):
    """ Strength expressed in terms of a reference substance.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProductIngredient",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    substance: typing.Optional["CodeableConcept"]

    """ Relevant reference substance.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    strength: "Ratio"

    """ Strength expressed in terms of a reference substance.
    Type `Ratio` (represented as `dict` in JSON).
    """

    strength_low_limit: typing.Optional["Ratio"]

    """ Strength expressed in terms of a reference substance.
    Type `Ratio` (represented as `dict` in JSON).
    """

    measurement_point: typing.Optional[FHIRString]

    """ For when strength is measured at a particular point or distance.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    measurement_point__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_measurement_point`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    country: typing.Optional[typing.List["CodeableConcept"]]

    """ The country or countries for which the strength range applies.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """



    _validate_primitive_measurement_point = get_primitive_field_root_validator("measurement_point")
    


class MedicinalProductIngredientSubstance(BackboneElement):
    """ The ingredient substance.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProductIngredient",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: "CodeableConcept"

    """ The ingredient substance.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    strength: typing.Optional[typing.List["MedicinalProductIngredientSpecifiedSubstanceStrength"]]

    """ Quantity of the substance or specified substance present in the
        manufactured item or pharmaceutical product.
    List of `MedicinalProductIngredientSpecifiedSubstanceStrength` items (represented as `dict` in JSON).
    """




class MedicinalProductInteractionInteractant(BackboneElement):
    """ The specific medication, food or laboratory test that interacts.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProductInteraction",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    item_reference: typing.Optional["Reference"]

    """ The specific medication, food or laboratory test that interacts.
    Type `Reference` (represented as `dict` in JSON).
    """

    item_codeable_concept: typing.Optional["CodeableConcept"]

    """ The specific medication, food or laboratory test that interacts.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """



#   {'path': 'MedicinalProductInteraction.interactant.item[x]', 'choice_of_type': 'item', 'orig_name': 'itemReference', 'name': 'itemReference', 'parent_name': 'MedicinalProductInteraction.interactant', 'class_name': 'Reference', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'The specific medication, food or laboratory test that interacts', 'formal': None, 'representation': None}
    _item_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['item_reference', 'item_codeable_concept']), False))


class MedicinalProductPackagedBatchIdentifier(BackboneElement):
    """ Batch numbering.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProductPackaged",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    outer_packaging: "Identifier"

    """ A number appearing on the outer packaging of a specific batch.
    Type `Identifier` (represented as `dict` in JSON).
    """

    immediate_packaging: typing.Optional["Identifier"]

    """ A number appearing on the immediate packaging (and not the outer
        packaging).
    Type `Identifier` (represented as `dict` in JSON).
    """




class MedicinalProductPackagedPackageItem(BackboneElement):
    """ A packaging item, as a contained for medicine, possibly with other
    packaging items within.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProductPackaged",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Including possibly Data Carrier Identifier.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    type: "CodeableConcept"

    """ The physical type of the container of the medicine.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    quantity: "Quantity"

    """ The quantity of this package in the medicinal product, at the
        current level of packaging. The outermost is always 1.
    Type `Quantity` (represented as `dict` in JSON).
    """

    material: typing.Optional[typing.List["CodeableConcept"]]

    """ Material type of the package item.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    alternate_material: typing.Optional[typing.List["CodeableConcept"]]

    """ A possible alternate material for the packaging.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    device: typing.Optional[typing.List["Reference"]]

    """ A device accompanying a medicinal product.
    List of `Reference` items (represented as `dict` in JSON).
    """

    manufactured_item: typing.Optional[typing.List["Reference"]]

    """ The manufactured item as contained in the packaged medicinal
        product.
    List of `Reference` items (represented as `dict` in JSON).
    """

    package_item: typing.Optional[typing.List["MedicinalProductPackagedPackageItem"]]

    """ Allows containers within containers.
    List of `MedicinalProductPackagedPackageItem` items (represented as `dict` in JSON).
    """

    physical_characteristics: typing.Optional["ProdCharacteristic"]

    """ Dimensions, color etc..
    Type `ProdCharacteristic` (represented as `dict` in JSON).
    """

    other_characteristics: typing.Optional[typing.List["CodeableConcept"]]

    """ Other codeable characteristics.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    shelf_life_storage: typing.Optional[typing.List["ProductShelfLife"]]

    """ Shelf Life and storage information.
    List of `ProductShelfLife` items (represented as `dict` in JSON).
    """

    manufacturer: typing.Optional[typing.List["Reference"]]

    """ Manufacturer of this Package Item.
    List of `Reference` items (represented as `dict` in JSON).
    """




class MedicinalProductPharmaceuticalCharacteristics(BackboneElement):
    """ Characteristics e.g. a products onset of action.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProductPharmaceutical",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: "CodeableConcept"

    """ A coded characteristic.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    status: typing.Optional["CodeableConcept"]

    """ The status of characteristic e.g. assigned or pending.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """




class MedicinalProductPharmaceuticalRouteOfAdministration(BackboneElement):
    """ The path by which the pharmaceutical product is taken into or makes contact
    with the body.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProductPharmaceutical",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: "CodeableConcept"

    """ Coded expression for the route.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    first_dose: typing.Optional["Quantity"]

    """ The first dose (dose quantity) administered in humans can be
        specified, for a product under investigation, using a numerical
        value and its unit of measurement.
    Type `Quantity` (represented as `dict` in JSON).
    """

    max_single_dose: typing.Optional["Quantity"]

    """ The maximum single dose that can be administered as per the
        protocol of a clinical trial can be specified using a numerical
        value and its unit of measurement.
    Type `Quantity` (represented as `dict` in JSON).
    """

    max_dose_per_day: typing.Optional["Quantity"]

    """ The maximum dose per day (maximum dose quantity to be administered
        in any one 24-h period) that can be administered as per the
        protocol referenced in the clinical trial authorisation.
    Type `Quantity` (represented as `dict` in JSON).
    """

    max_dose_per_treatment_period: typing.Optional["Ratio"]

    """ The maximum dose per treatment period that can be administered as
        per the protocol referenced in the clinical trial authorisation.
    Type `Ratio` (represented as `dict` in JSON).
    """

    max_treatment_period: typing.Optional["Duration"]

    """ The maximum treatment period during which an Investigational
        Medicinal Product can be administered as per the protocol
        referenced in the clinical trial authorisation.
    Type `Duration` (represented as `dict` in JSON).
    """

    target_species: typing.Optional[typing.List["MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies"]]

    """ A species for which this route applies.
    List of `MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies` items (represented as `dict` in JSON).
    """




class MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies(BackboneElement):
    """ A species for which this route applies.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProductPharmaceutical",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: "CodeableConcept"

    """ Coded expression for the species.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    withdrawal_period: typing.Optional[typing.List["MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod"]]

    """ A species specific time during which consumption of animal product
        is not appropriate.
    List of `MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod` items (represented as `dict` in JSON).
    """




class MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod(BackboneElement):
    """ A species specific time during which consumption of animal product is not
    appropriate.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MedicinalProductPharmaceutical",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    tissue: "CodeableConcept"

    """ Coded expression for the type of tissue for which the withdrawal
        period applues, e.g. meat, milk.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value: "Quantity"

    """ A value for the time.
    Type `Quantity` (represented as `dict` in JSON).
    """

    supporting_information: typing.Optional[FHIRString]

    """ Extra information about the withdrawal period.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    supporting_information__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_supporting_information`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_supporting_information = get_primitive_field_root_validator("supporting_information")
    


class MessageDefinitionFocus(BackboneElement):
    """ Resource(s) that are the subject of the event.

    Identifies the resource (or resources) that are being addressed by the
    event.  For example, the Encounter for an admit message or two Account
    records for a merge.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MessageDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    code: "ResourceType"

    """ Type of resource.
    Type `ResourceType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    profile: typing.Optional[FHIRString]

    """ Profile that must be adhered to by focus.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    profile__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_profile`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    min: FHIRUnsignedInt

    """ Minimum number of focuses of this type.
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    min__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_min`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    max: typing.Optional[FHIRString]

    """ Maximum number of focuses of this type.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    max__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_max`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["code"]["enum"]
            enums.clear()
            for item in ResourceType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_code = get_primitive_field_root_validator("code")
    
    _validate_primitive_profile = get_primitive_field_root_validator("profile")
    
    _validate_primitive_min = get_primitive_field_root_validator("min")
    
    _validate_primitive_max = get_primitive_field_root_validator("max")
    


class MessageDefinitionAllowedResponse(BackboneElement):
    """ Responses to this message.

    Indicates what types of messages may be sent as an application-level
    response to this message.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MessageDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    message: FHIRRequiredString

    """ Reference to allowed message definition response.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    message__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_message`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    situation: typing.Optional[FHIRString]

    """ When should this response be used.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    situation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_situation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_message = get_primitive_field_root_validator("message")
    
    _validate_primitive_situation = get_primitive_field_root_validator("situation")
    


class MessageHeaderDestination(BackboneElement):
    """ Message destination application(s).

    The destination application which the message is intended for.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MessageHeader",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: typing.Optional[FHIRString]

    """ Name of system.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    target: typing.Optional["Reference"]

    """ Particular delivery destination within the destination.
    Type `Reference` (represented as `dict` in JSON).
    """

    endpoint: FHIRRequiredString

    """ Actual destination address or id.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    endpoint__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_endpoint`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    receiver: typing.Optional["Reference"]

    """ Intended "real-world" recipient for the data.
    Type `Reference` (represented as `dict` in JSON).
    """



    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_endpoint = get_primitive_field_root_validator("endpoint")
    


class MessageHeaderSource(BackboneElement):
    """ Message source application.

    The source application from which this message originated.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MessageHeader",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: typing.Optional[FHIRString]

    """ Name of system.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    software: typing.Optional[FHIRString]

    """ Name of software running the system.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    software__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_software`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    version: typing.Optional[FHIRString]

    """ Version of software running.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    contact: typing.Optional["ContactPoint"]

    """ Human contact for problems.
    Type `ContactPoint` (represented as `dict` in JSON).
    """

    endpoint: FHIRRequiredString

    """ Actual message source address or id.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    endpoint__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_endpoint`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_software = get_primitive_field_root_validator("software")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_endpoint = get_primitive_field_root_validator("endpoint")
    


class MessageHeaderResponse(BackboneElement):
    """ If this is a reply to prior message.

    Information about the message that this message is a response to.  Only
    present if this message is a response.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MessageHeader",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: FHIRId

    """ Id of original message.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    identifier__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_identifier`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    code: "ResponseType"

    """ ok | transient-error | fatal-error.
    Type `ResponseType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    details: typing.Optional["Reference"]

    """ Specific list of hints/warnings/errors.
    Type `Reference` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["code"]["enum"]
            enums.clear()
            for item in ResponseType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_identifier = get_primitive_field_root_validator("identifier")
    
    _validate_primitive_code = get_primitive_field_root_validator("code")
    


class MolecularSequenceReferenceSeq(BackboneElement):
    """ A sequence used as reference.

    A sequence that is used as a reference to describe variants that are
    present in a sequence analyzed.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MolecularSequence",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    chromosome: typing.Optional["CodeableConcept"]

    """ Chromosome containing genetic finding.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    genome_build: typing.Optional[FHIRString]

    """ The Genome Build used for reference, following GRCh build versions
        e.g. 'GRCh 37'.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    genome_build__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_genome_build`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    orientation: typing.Optional["OrientationType"]

    """ sense | antisense.
    Type `OrientationType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    orientation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_orientation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    reference_seq_id: typing.Optional["CodeableConcept"]

    """ Reference identifier.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    reference_seq_pointer: typing.Optional["Reference"]

    """ A pointer to another MolecularSequence entity as reference sequence.
    Type `Reference` (represented as `dict` in JSON).
    """

    reference_seq_string: typing.Optional[FHIRString]

    """ A string to represent reference sequence.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    reference_seq_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_reference_seq_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    strand: typing.Optional["StrandType"]

    """ watson | crick.
    Type `StrandType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    strand__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_strand`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    window_start: typing.Optional[FHIRInt]

    """ Start position of the window on the  reference sequence.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    window_start__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_window_start`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    window_end: typing.Optional[FHIRInt]

    """ End position of the window on the reference sequence.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    window_end__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_window_end`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["orientation"]["enum"]
            enums.clear()
            for item in OrientationType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["strand"]["enum"]
            enums.clear()
            for item in StrandType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_genome_build = get_primitive_field_root_validator("genome_build")
    
    _validate_primitive_orientation = get_primitive_field_root_validator("orientation")
    
    _validate_primitive_reference_seq_string = get_primitive_field_root_validator("reference_seq_string")
    
    _validate_primitive_strand = get_primitive_field_root_validator("strand")
    
    _validate_primitive_window_start = get_primitive_field_root_validator("window_start")
    
    _validate_primitive_window_end = get_primitive_field_root_validator("window_end")
    


class MolecularSequenceVariant(BackboneElement):
    """ Variant in sequence.

    The definition of variant here originates from Sequence ontology ([variant_
    of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)).
    This element can represent amino acid or nucleic sequence change(including
    insertion,deletion,SNP,etc.)  It can represent some complex mutation or
    segment variation with the assist of CIGAR string.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MolecularSequence",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    start: typing.Optional[FHIRInt]

    """ Start position of the variant on the  reference sequence.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    start__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_start`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    end: typing.Optional[FHIRInt]

    """ End position of the variant on the reference sequence.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    end__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_end`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    observed_allele: typing.Optional[FHIRString]

    """ Allele that was observed.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    observed_allele__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_observed_allele`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    reference_allele: typing.Optional[FHIRString]

    """ Allele in the reference sequence.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    reference_allele__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_reference_allele`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    cigar: typing.Optional[FHIRString]

    """ Extended CIGAR string for aligning the sequence with reference
        bases.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    cigar__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_cigar`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    variant_pointer: typing.Optional["Reference"]

    """ Pointer to observed variant information.
    Type `Reference` (represented as `dict` in JSON).
    """



    _validate_primitive_start = get_primitive_field_root_validator("start")
    
    _validate_primitive_end = get_primitive_field_root_validator("end")
    
    _validate_primitive_observed_allele = get_primitive_field_root_validator("observed_allele")
    
    _validate_primitive_reference_allele = get_primitive_field_root_validator("reference_allele")
    
    _validate_primitive_cigar = get_primitive_field_root_validator("cigar")
    


class MolecularSequenceQuality(BackboneElement):
    """ An set of value as quality of sequence.

    An experimental feature attribute that defines the quality of the feature
    in a quantitative way, such as a phred quality score ([SO:0001686](http://w
    ww.sequenceontology.org/browser/current_svn/term/SO:0001686)).
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MolecularSequence",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    type: "QualityType"

    """ indel | snp | unknown.
    Type `QualityType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    standard_sequence: typing.Optional["CodeableConcept"]

    """ Standard sequence for comparison.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    start: typing.Optional[FHIRInt]

    """ Start position of the sequence.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    start__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_start`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    end: typing.Optional[FHIRInt]

    """ End position of the sequence.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    end__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_end`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    score: typing.Optional["Quantity"]

    """ Quality score for the comparison.
    Type `Quantity` (represented as `dict` in JSON).
    """

    method: typing.Optional["CodeableConcept"]

    """ Method to get quality.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    truth_t_p: typing.Optional[decimal.Decimal]

    """ True positives from the perspective of the truth data.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    truth_t_p__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_truth_t_p`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    query_t_p: typing.Optional[decimal.Decimal]

    """ True positives from the perspective of the query data.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    query_t_p__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_query_t_p`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    truth_f_n: typing.Optional[decimal.Decimal]

    """ False negatives.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    truth_f_n__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_truth_f_n`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    query_f_p: typing.Optional[decimal.Decimal]

    """ False positives.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    query_f_p__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_query_f_p`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    gt_f_p: typing.Optional[decimal.Decimal]

    """ False positives where the non-REF alleles in the Truth and Query
        Call Sets match.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    gt_f_p__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_gt_f_p`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    precision: typing.Optional[decimal.Decimal]

    """ Precision of comparison.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    precision__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_precision`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    recall: typing.Optional[decimal.Decimal]

    """ Recall of comparison.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    recall__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_recall`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    f_score: typing.Optional[decimal.Decimal]

    """ F-score.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    f_score__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_f_score`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    roc: typing.Optional["MolecularSequenceQualityRoc"]

    """ Receiver Operator Characteristic (ROC) Curve.
    Type `MolecularSequenceQualityRoc` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in QualityType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_start = get_primitive_field_root_validator("start")
    
    _validate_primitive_end = get_primitive_field_root_validator("end")
    
    _validate_primitive_truth_t_p = get_primitive_field_root_validator("truth_t_p")
    
    _validate_primitive_query_t_p = get_primitive_field_root_validator("query_t_p")
    
    _validate_primitive_truth_f_n = get_primitive_field_root_validator("truth_f_n")
    
    _validate_primitive_query_f_p = get_primitive_field_root_validator("query_f_p")
    
    _validate_primitive_gt_f_p = get_primitive_field_root_validator("gt_f_p")
    
    _validate_primitive_precision = get_primitive_field_root_validator("precision")
    
    _validate_primitive_recall = get_primitive_field_root_validator("recall")
    
    _validate_primitive_f_score = get_primitive_field_root_validator("f_score")
    


class MolecularSequenceQualityRoc(BackboneElement):
    """ Receiver Operator Characteristic (ROC) Curve.

    Receiver Operator Characteristic (ROC) Curve  to give
    sensitivity/specificity tradeoff.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MolecularSequence",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    score: typing.Optional[typing.List[typing.Optional[FHIRInt]]]

    """ Genotype quality score.
    List of `FHIRInt` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    score__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_score`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    num_t_p: typing.Optional[typing.List[typing.Optional[FHIRInt]]]

    """ Roc score true positive numbers.
    List of `FHIRInt` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    num_t_p__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_num_t_p`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    num_f_p: typing.Optional[typing.List[typing.Optional[FHIRInt]]]

    """ Roc score false positive numbers.
    List of `FHIRInt` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    num_f_p__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_num_f_p`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    num_f_n: typing.Optional[typing.List[typing.Optional[FHIRInt]]]

    """ Roc score false negative numbers.
    List of `FHIRInt` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    num_f_n__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_num_f_n`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    precision: typing.Optional[typing.List[typing.Optional[decimal.Decimal]]]

    """ Precision of the GQ score.
    List of `decimal.Decimal` items (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    precision__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_precision`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    sensitivity: typing.Optional[typing.List[typing.Optional[decimal.Decimal]]]

    """ Sensitivity of the GQ score.
    List of `decimal.Decimal` items (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    sensitivity__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sensitivity`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    f_measure: typing.Optional[typing.List[typing.Optional[decimal.Decimal]]]

    """ FScore of the GQ score.
    List of `decimal.Decimal` items (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    f_measure__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_f_measure`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_score = get_primitive_field_root_validator("score")
    
    _validate_primitive_num_t_p = get_primitive_field_root_validator("num_t_p")
    
    _validate_primitive_num_f_p = get_primitive_field_root_validator("num_f_p")
    
    _validate_primitive_num_f_n = get_primitive_field_root_validator("num_f_n")
    
    _validate_primitive_precision = get_primitive_field_root_validator("precision")
    
    _validate_primitive_sensitivity = get_primitive_field_root_validator("sensitivity")
    
    _validate_primitive_f_measure = get_primitive_field_root_validator("f_measure")
    


class MolecularSequenceRepository(BackboneElement):
    """ External repository which contains detailed report related with observedSeq
    in this resource.

    Configurations of the external repository. The repository shall store
    target's observedSeq or records related with target's observedSeq.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MolecularSequence",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    type: "RepositoryType"

    """ directlink | openapi | login | oauth | other.
    Type `RepositoryType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    url: typing.Optional[FHIRString]

    """ URI of the repository.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Repository's name.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    dataset_id: typing.Optional[FHIRString]

    """ Id of the dataset that used to call for dataset in repository.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    dataset_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_dataset_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    variantset_id: typing.Optional[FHIRString]

    """ Id of the variantset that used to call for variantset in repository.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    variantset_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_variantset_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    readset_id: typing.Optional[FHIRString]

    """ Id of the read.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    readset_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_readset_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in RepositoryType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_dataset_id = get_primitive_field_root_validator("dataset_id")
    
    _validate_primitive_variantset_id = get_primitive_field_root_validator("variantset_id")
    
    _validate_primitive_readset_id = get_primitive_field_root_validator("readset_id")
    


class MolecularSequenceStructureVariant(BackboneElement):
    """ Structural variant.

    Information about chromosome structure variation.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MolecularSequence",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    variant_type: typing.Optional["CodeableConcept"]

    """ Structural variant change type.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    exact: typing.Optional[bool]

    """ Does the structural variant have base pair resolution breakpoints?.
    Type `bool`. Is a JSON Primitive element.
    """
    

    exact__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_exact`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    length: typing.Optional[FHIRInt]

    """ Structural variant length.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    length__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_length`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    outer: typing.Optional["MolecularSequenceStructureVariantOuter"]

    """ Structural variant outer.
    Type `MolecularSequenceStructureVariantOuter` (represented as `dict` in JSON).
    """

    inner: typing.Optional["MolecularSequenceStructureVariantInner"]

    """ Structural variant inner.
    Type `MolecularSequenceStructureVariantInner` (represented as `dict` in JSON).
    """



    _validate_primitive_exact = get_primitive_field_root_validator("exact")
    
    _validate_primitive_length = get_primitive_field_root_validator("length")
    


class MolecularSequenceStructureVariantOuter(BackboneElement):
    """ Structural variant outer.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MolecularSequence",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    start: typing.Optional[FHIRInt]

    """ Structural variant outer start.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    start__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_start`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    end: typing.Optional[FHIRInt]

    """ Structural variant outer end.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    end__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_end`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_start = get_primitive_field_root_validator("start")
    
    _validate_primitive_end = get_primitive_field_root_validator("end")
    


class MolecularSequenceStructureVariantInner(BackboneElement):
    """ Structural variant inner.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/MolecularSequence",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    start: typing.Optional[FHIRInt]

    """ Structural variant inner start.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    start__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_start`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    end: typing.Optional[FHIRInt]

    """ Structural variant inner end.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    end__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_end`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_start = get_primitive_field_root_validator("start")
    
    _validate_primitive_end = get_primitive_field_root_validator("end")
    


class NamingSystemUniqueId(BackboneElement):
    """ Unique identifiers used for system.

    Indicates how the system may be identified when referenced in electronic
    exchange.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/NamingSystem",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    type: "NamingSystemIdentifierType"

    """ oid | uuid | uri | other.
    Type `NamingSystemIdentifierType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value: FHIRRequiredString

    """ The unique identifier.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    preferred: typing.Optional[bool]

    """ Is this the id that should be used for this type.
    Type `bool`. Is a JSON Primitive element.
    """
    

    preferred__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_preferred`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    comment: typing.Optional[FHIRString]

    """ Notes about identifier usage.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    comment__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_comment`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    period: typing.Optional["Period"]

    """ When is identifier valid?.
    Type `Period` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in NamingSystemIdentifierType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_value = get_primitive_field_root_validator("value")
    
    _validate_primitive_preferred = get_primitive_field_root_validator("preferred")
    
    _validate_primitive_comment = get_primitive_field_root_validator("comment")
    


class NutritionOrderOralDiet(BackboneElement):
    """ Oral diet components.

    Diet given orally in contrast to enteral (tube) feeding.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/NutritionOrder",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: typing.Optional[typing.List["CodeableConcept"]]

    """ Type of oral diet or diet restrictions that describe what can be
        consumed orally.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    schedule: typing.Optional[typing.List["Timing"]]

    """ Scheduled frequency of diet.
    List of `Timing` items (represented as `dict` in JSON).
    """

    nutrient: typing.Optional[typing.List["NutritionOrderOralDietNutrient"]]

    """ Required  nutrient modifications.
    List of `NutritionOrderOralDietNutrient` items (represented as `dict` in JSON).
    """

    texture: typing.Optional[typing.List["NutritionOrderOralDietTexture"]]

    """ Required  texture modifications.
    List of `NutritionOrderOralDietTexture` items (represented as `dict` in JSON).
    """

    fluid_consistency_type: typing.Optional[typing.List["CodeableConcept"]]

    """ The required consistency of fluids and liquids provided to the
        patient.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    instruction: typing.Optional[FHIRString]

    """ Instructions or additional information about the oral diet.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instruction__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instruction`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_instruction = get_primitive_field_root_validator("instruction")
    


class NutritionOrderOralDietNutrient(BackboneElement):
    """ Required  nutrient modifications.

    Class that defines the quantity and type of nutrient modifications (for
    example carbohydrate, fiber or sodium) required for the oral diet.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/NutritionOrder",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    modifier: typing.Optional["CodeableConcept"]

    """ Type of nutrient that is being modified.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    amount: typing.Optional["Quantity"]

    """ Quantity of the specified nutrient.
    Type `Quantity` (represented as `dict` in JSON).
    """




class NutritionOrderOralDietTexture(BackboneElement):
    """ Required  texture modifications.

    Class that describes any texture modifications required for the patient to
    safely consume various types of solid foods.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/NutritionOrder",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    modifier: typing.Optional["CodeableConcept"]

    """ Code to indicate how to alter the texture of the foods, e.g. pureed.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    food_type: typing.Optional["CodeableConcept"]

    """ Concepts that are used to identify an entity that is ingested for
        nutritional purposes.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """




class NutritionOrderSupplement(BackboneElement):
    """ Supplement components.

    Oral nutritional products given in order to add further nutritional value
    to the patient's diet.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/NutritionOrder",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: typing.Optional["CodeableConcept"]

    """ Type of supplement product requested.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    product_name: typing.Optional[FHIRString]

    """ Product or brand name of the nutritional supplement.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    product_name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_product_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    schedule: typing.Optional[typing.List["Timing"]]

    """ Scheduled frequency of supplement.
    List of `Timing` items (represented as `dict` in JSON).
    """

    quantity: typing.Optional["Quantity"]

    """ Amount of the nutritional supplement.
    Type `Quantity` (represented as `dict` in JSON).
    """

    instruction: typing.Optional[FHIRString]

    """ Instructions or additional information about the oral supplement.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instruction__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instruction`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_product_name = get_primitive_field_root_validator("product_name")
    
    _validate_primitive_instruction = get_primitive_field_root_validator("instruction")
    


class NutritionOrderEnteralFormula(BackboneElement):
    """ Enteral formula components.

    Feeding provided through the gastrointestinal tract via a tube, catheter,
    or stoma that delivers nutrition distal to the oral cavity.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/NutritionOrder",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    base_formula_type: typing.Optional["CodeableConcept"]

    """ Type of enteral or infant formula.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    base_formula_product_name: typing.Optional[FHIRString]

    """ Product or brand name of the enteral or infant formula.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    base_formula_product_name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_base_formula_product_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    additive_type: typing.Optional["CodeableConcept"]

    """ Type of modular component to add to the feeding.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    additive_product_name: typing.Optional[FHIRString]

    """ Product or brand name of the modular additive.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    additive_product_name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_additive_product_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    caloric_density: typing.Optional["Quantity"]

    """ Amount of energy per specified volume that is required.
    Type `Quantity` (represented as `dict` in JSON).
    """

    routeof_administration: typing.Optional["CodeableConcept"]

    """ How the formula should enter the patient's gastrointestinal tract.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    administration: typing.Optional[typing.List["NutritionOrderEnteralFormulaAdministration"]]

    """ Formula feeding instruction as structured data.
    List of `NutritionOrderEnteralFormulaAdministration` items (represented as `dict` in JSON).
    """

    max_volume_to_deliver: typing.Optional["Quantity"]

    """ Upper limit on formula volume per unit of time.
    Type `Quantity` (represented as `dict` in JSON).
    """

    administration_instruction: typing.Optional[FHIRString]

    """ Formula feeding instructions expressed as text.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    administration_instruction__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_administration_instruction`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_base_formula_product_name = get_primitive_field_root_validator("base_formula_product_name")
    
    _validate_primitive_additive_product_name = get_primitive_field_root_validator("additive_product_name")
    
    _validate_primitive_administration_instruction = get_primitive_field_root_validator("administration_instruction")
    


class NutritionOrderEnteralFormulaAdministration(BackboneElement):
    """ Formula feeding instruction as structured data.

    Formula administration instructions as structured data.  This repeating
    structure allows for changing the administration rate or volume over time
    for both bolus and continuous feeding.  An example of this would be an
    instruction to increase the rate of continuous feeding every 2 hours.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/NutritionOrder",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    schedule: typing.Optional["Timing"]

    """ Scheduled frequency of enteral feeding.
    Type `Timing` (represented as `dict` in JSON).
    """

    quantity: typing.Optional["Quantity"]

    """ The volume of formula to provide.
    Type `Quantity` (represented as `dict` in JSON).
    """

    rate_quantity: typing.Optional["Quantity"]

    """ Speed with which the formula is provided per period of time.
    Type `Quantity` (represented as `dict` in JSON).
    """

    rate_ratio: typing.Optional["Ratio"]

    """ Speed with which the formula is provided per period of time.
    Type `Ratio` (represented as `dict` in JSON).
    """



#   {'path': 'NutritionOrder.enteralFormula.administration.rate[x]', 'choice_of_type': 'rate', 'orig_name': 'rateQuantity', 'name': 'rateQuantity', 'parent_name': 'NutritionOrder.enteralFormula.administration', 'class_name': 'Quantity', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Speed with which the formula is provided per period of time', 'formal': 'The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to the specified schedule.', 'representation': None}
    _rate_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['rate_quantity', 'rate_ratio']), True))


class ObservationReferenceRange(BackboneElement):
    """ Provides guide for interpretation.

    Guidance on how to interpret the value by comparison to a normal or
    recommended range.  Multiple reference ranges are interpreted as an "OR".
    In other words, to represent two distinct target populations, two
    `referenceRange` elements would be used.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Observation",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    low: typing.Optional["Quantity"]

    """ Low Range, if relevant.
    Type `Quantity` (represented as `dict` in JSON).
    """

    high: typing.Optional["Quantity"]

    """ High Range, if relevant.
    Type `Quantity` (represented as `dict` in JSON).
    """

    type: typing.Optional["CodeableConcept"]

    """ Reference range qualifier.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    applies_to: typing.Optional[typing.List["CodeableConcept"]]

    """ Reference range population.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    age: typing.Optional["Range"]

    """ Applicable age range, if relevant.
    Type `Range` (represented as `dict` in JSON).
    """

    text: typing.Optional[FHIRString]

    """ Text based reference range in an observation.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    text__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_text`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_text = get_primitive_field_root_validator("text")
    


class ObservationComponent(BackboneElement):
    """ Component results.

    Some observations have multiple component observations.  These component
    observations are expressed as separate code value pairs that share the same
    attributes.  Examples include systolic and diastolic component observations
    for blood pressure measurement and multiple component observations for
    genetics observations.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Observation",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: "CodeableConcept"

    """ Type of component observation (code / type).
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value_quantity: typing.Optional["Quantity"]

    """ Actual component result.
    Type `Quantity` (represented as `dict` in JSON).
    """

    value_codeable_concept: typing.Optional["CodeableConcept"]

    """ Actual component result.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value_string: typing.Optional[FHIRString]

    """ Actual component result.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_boolean: typing.Optional[bool]

    """ Actual component result.
    Type `bool`. Is a JSON Primitive element.
    """
    

    value_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_integer: typing.Optional[FHIRInt]

    """ Actual component result.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_integer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_integer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_range: typing.Optional["Range"]

    """ Actual component result.
    Type `Range` (represented as `dict` in JSON).
    """

    value_ratio: typing.Optional["Ratio"]

    """ Actual component result.
    Type `Ratio` (represented as `dict` in JSON).
    """

    value_sampled_data: typing.Optional["SampledData"]

    """ Actual component result.
    Type `SampledData` (represented as `dict` in JSON).
    """

    value_time: typing.Optional[FHIRTime]

    """ Actual component result.
    Type `FHIRTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_date_time: typing.Optional[FHIRDateTime]

    """ Actual component result.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_period: typing.Optional["Period"]

    """ Actual component result.
    Type `Period` (represented as `dict` in JSON).
    """

    data_absent_reason: typing.Optional["CodeableConcept"]

    """ Why the component result is missing.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    interpretation: typing.Optional[typing.List["CodeableConcept"]]

    """ High, low, normal, etc..
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    reference_range: typing.Optional[typing.List["ObservationReferenceRange"]]

    """ Provides guide for interpretation of component result.
    List of `ObservationReferenceRange` items (represented as `dict` in JSON).
    """



#   {'path': 'Observation.component.value[x]', 'choice_of_type': 'value', 'orig_name': 'valueQuantity', 'name': 'valueQuantity', 'parent_name': 'Observation.component', 'class_name': 'Quantity', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Actual component result', 'formal': 'The information determined as a result of making the observation, if the information has a simple value.', 'representation': None}
    _value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['value_quantity', 'value_codeable_concept', 'value_string', 'value_boolean', 'value_integer', 'value_range', 'value_ratio', 'value_sampled_data', 'value_time', 'value_date_time', 'value_period']), True))

    _validate_primitive_value_string = get_primitive_field_root_validator("value_string")
    
    _validate_primitive_value_boolean = get_primitive_field_root_validator("value_boolean")
    
    _validate_primitive_value_integer = get_primitive_field_root_validator("value_integer")
    
    _validate_primitive_value_time = get_primitive_field_root_validator("value_time")
    
    _validate_primitive_value_date_time = get_primitive_field_root_validator("value_date_time")
    


class ObservationDefinitionQuantitativeDetails(BackboneElement):
    """ Characteristics of quantitative results.

    Characteristics for quantitative results of this observation.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ObservationDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    customary_unit: typing.Optional["CodeableConcept"]

    """ Customary unit for quantitative results.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    unit: typing.Optional["CodeableConcept"]

    """ SI unit for quantitative results.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    conversion_factor: typing.Optional[decimal.Decimal]

    """ SI to Customary unit conversion factor.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    conversion_factor__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_conversion_factor`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    decimal_precision: typing.Optional[FHIRInt]

    """ Decimal precision of observation quantitative results.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    decimal_precision__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_decimal_precision`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_conversion_factor = get_primitive_field_root_validator("conversion_factor")
    
    _validate_primitive_decimal_precision = get_primitive_field_root_validator("decimal_precision")
    


class ObservationDefinitionQualifiedInterval(BackboneElement):
    """ Qualified range for continuous and ordinal observation results.

    Multiple  ranges of results qualified by different contexts for ordinal or
    continuous observations conforming to this ObservationDefinition.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ObservationDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    category: typing.Optional["ObservationRangeCategory"]

    """ reference | critical | absolute.
    Type `ObservationRangeCategory` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    category__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_category`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    range: typing.Optional["Range"]

    """ The interval itself, for continuous or ordinal observations.
    Type `Range` (represented as `dict` in JSON).
    """

    context: typing.Optional["CodeableConcept"]

    """ Range context qualifier.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    applies_to: typing.Optional[typing.List["CodeableConcept"]]

    """ Targetted population of the range.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

            
    
    
    gender: typing.Optional["AdministrativeGender"]

    """ male | female | other | unknown.
    Type `AdministrativeGender` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    gender__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_gender`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    age: typing.Optional["Range"]

    """ Applicable age range, if relevant.
    Type `Range` (represented as `dict` in JSON).
    """

    gestational_age: typing.Optional["Range"]

    """ Applicable gestational age range, if relevant.
    Type `Range` (represented as `dict` in JSON).
    """

    condition: typing.Optional[FHIRString]

    """ Condition associated with the reference range.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    condition__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_condition`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["category"]["enum"]
            enums.clear()
            for item in ObservationRangeCategory:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["gender"]["enum"]
            enums.clear()
            for item in AdministrativeGender:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_category = get_primitive_field_root_validator("category")
    
    _validate_primitive_gender = get_primitive_field_root_validator("gender")
    
    _validate_primitive_condition = get_primitive_field_root_validator("condition")
    


class OperationDefinitionParameter(BackboneElement):
    """ Parameters for the operation/query.

    The parameters for the operation/query.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/OperationDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: FHIRCode

    """ Name in Parameters.parameter.name or in URL.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    use: "OperationParameterUse"

    """ in | out.
    Type `OperationParameterUse` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    use__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_use`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    min: FHIRInt

    """ Minimum Cardinality.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    min__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_min`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    max: FHIRRequiredString

    """ Maximum Cardinality (a number or *).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    max__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_max`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    documentation: typing.Optional[FHIRString]

    """ Description of meaning/use.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    documentation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_documentation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional[FHIRCode]

    """ What type this parameter has.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    target_profile: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ If type is Reference | canonical, allowed targets.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    target_profile__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_target_profile`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    search_type: typing.Optional["SearchParamType"]

    """ number | date | string | token | reference | composite | quantity |
        uri | special.
    Type `SearchParamType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    search_type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_search_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    binding: typing.Optional["OperationDefinitionParameterBinding"]

    """ ValueSet details if this is coded.
    Type `OperationDefinitionParameterBinding` (represented as `dict` in JSON).
    """

    referenced_from: typing.Optional[typing.List["OperationDefinitionParameterReferencedFrom"]]

    """ References to this parameter.
    List of `OperationDefinitionParameterReferencedFrom` items (represented as `dict` in JSON).
    """

    part: typing.Optional[typing.List["OperationDefinitionParameter"]]

    """ Parts of a nested Parameter.
    List of `OperationDefinitionParameter` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["use"]["enum"]
            enums.clear()
            for item in OperationParameterUse:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["searchType"]["enum"]
            enums.clear()
            for item in SearchParamType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_use = get_primitive_field_root_validator("use")
    
    _validate_primitive_min = get_primitive_field_root_validator("min")
    
    _validate_primitive_max = get_primitive_field_root_validator("max")
    
    _validate_primitive_documentation = get_primitive_field_root_validator("documentation")
    
    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_target_profile = get_primitive_field_root_validator("target_profile")
    
    _validate_primitive_search_type = get_primitive_field_root_validator("search_type")
    


class OperationDefinitionParameterBinding(BackboneElement):
    """ ValueSet details if this is coded.

    Binds to a value set if this parameter is coded (code, Coding,
    CodeableConcept).
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/OperationDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    strength: "BindingStrength"

    """ required | extensible | preferred | example.
    Type `BindingStrength` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    strength__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_strength`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_set: FHIRRequiredString

    """ Source of value set.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_set__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_set`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["strength"]["enum"]
            enums.clear()
            for item in BindingStrength:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_strength = get_primitive_field_root_validator("strength")
    
    _validate_primitive_value_set = get_primitive_field_root_validator("value_set")
    


class OperationDefinitionParameterReferencedFrom(BackboneElement):
    """ References to this parameter.

    Identifies other resource parameters within the operation invocation that
    are expected to resolve to this resource.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/OperationDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    source: FHIRRequiredString

    """ Referencing parameter.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    source__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_source`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    source_id: typing.Optional[FHIRString]

    """ Element id of reference.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    source_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_source_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_source = get_primitive_field_root_validator("source")
    
    _validate_primitive_source_id = get_primitive_field_root_validator("source_id")
    


class OperationDefinitionOverload(BackboneElement):
    """ Define overloaded variants for when  generating code.

    Defines an appropriate combination of parameters to use when invoking this
    operation, to help code generators when generating overloaded parameter
    sets for this operation.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/OperationDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    parameter_name: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Name of parameter to include in overload.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    parameter_name__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_parameter_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    comment: typing.Optional[FHIRString]

    """ Comments to go on overload.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    comment__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_comment`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_parameter_name = get_primitive_field_root_validator("parameter_name")
    
    _validate_primitive_comment = get_primitive_field_root_validator("comment")
    


class OperationOutcomeIssue(BackboneElement):
    """ A single issue associated with the action.

    An error, warning, or information message that results from a system
    action.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/OperationOutcome",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    severity: "IssueSeverity"

    """ fatal | error | warning | information.
    Type `IssueSeverity` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    severity__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_severity`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    code: "IssueType"

    """ Error or warning code.
    Type `IssueType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    details: typing.Optional["CodeableConcept"]

    """ Additional details about the error.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    diagnostics: typing.Optional[FHIRString]

    """ Additional diagnostic information about the issue.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    diagnostics__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_diagnostics`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    location: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Deprecated: Path of element(s) related to issue.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    location__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_location`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    expression: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ FHIRPath of element(s) related to issue.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    expression__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_expression`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["severity"]["enum"]
            enums.clear()
            for item in IssueSeverity:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["code"]["enum"]
            enums.clear()
            for item in IssueType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_severity = get_primitive_field_root_validator("severity")
    
    _validate_primitive_code = get_primitive_field_root_validator("code")
    
    _validate_primitive_diagnostics = get_primitive_field_root_validator("diagnostics")
    
    _validate_primitive_location = get_primitive_field_root_validator("location")
    
    _validate_primitive_expression = get_primitive_field_root_validator("expression")
    


class OrganizationContact(BackboneElement):
    """ Contact for the organization for a certain purpose.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Organization",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    purpose: typing.Optional["CodeableConcept"]

    """ The type of contact.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    name: typing.Optional["HumanName"]

    """ A name associated with the contact.
    Type `HumanName` (represented as `dict` in JSON).
    """

    telecom: typing.Optional[typing.List["ContactPoint"]]

    """ Contact details (telephone, email, etc.)  for a contact.
    List of `ContactPoint` items (represented as `dict` in JSON).
    """

    address: typing.Optional["Address"]

    """ Visiting or postal addresses for the contact.
    Type `Address` (represented as `dict` in JSON).
    """




class ParametersParameter(BackboneElement):
    """ Operation Parameter.

    A parameter passed to or received from the operation.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Parameters",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: FHIRRequiredString

    """ Name from the definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_base64_binary: typing.Optional[FHIRBase64Binary]

    """ If parameter is a data type.
    Type `FHIRBase64Binary` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_base64_binary__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_base64_binary`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_boolean: typing.Optional[bool]

    """ If parameter is a data type.
    Type `bool`. Is a JSON Primitive element.
    """
    

    value_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_canonical: typing.Optional[FHIRString]

    """ If parameter is a data type.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_canonical__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_code: typing.Optional[FHIRCode]

    """ If parameter is a data type.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_date: typing.Optional[FHIRDate]

    """ If parameter is a data type.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_date_time: typing.Optional[FHIRDateTime]

    """ If parameter is a data type.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_decimal: typing.Optional[decimal.Decimal]

    """ If parameter is a data type.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    value_decimal__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_decimal`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_id: typing.Optional[FHIRId]

    """ If parameter is a data type.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_instant: typing.Optional[FHIRInstant]

    """ If parameter is a data type.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_instant__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_instant`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_integer: typing.Optional[FHIRInt]

    """ If parameter is a data type.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_integer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_integer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_markdown: typing.Optional[FHIRString]

    """ If parameter is a data type.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_markdown__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_markdown`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_oid: typing.Optional[FHIROid]

    """ If parameter is a data type.
    Type `FHIROid` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_oid__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_oid`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_positive_int: typing.Optional[FHIRPositiveInt]

    """ If parameter is a data type.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    value_positive_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_positive_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_string: typing.Optional[FHIRString]

    """ If parameter is a data type.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_time: typing.Optional[FHIRTime]

    """ If parameter is a data type.
    Type `FHIRTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_unsigned_int: typing.Optional[FHIRUnsignedInt]

    """ If parameter is a data type.
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_unsigned_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_unsigned_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_uri: typing.Optional[FHIRString]

    """ If parameter is a data type.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_url: typing.Optional[FHIRString]

    """ If parameter is a data type.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_uuid: typing.Optional[FHIRString]

    """ If parameter is a data type.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_uuid__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_uuid`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_address: typing.Optional["Address"]

    """ If parameter is a data type.
    Type `Address` (represented as `dict` in JSON).
    """

    value_age: typing.Optional["Age"]

    """ If parameter is a data type.
    Type `Age` (represented as `dict` in JSON).
    """

    value_annotation: typing.Optional["Annotation"]

    """ If parameter is a data type.
    Type `Annotation` (represented as `dict` in JSON).
    """

    value_attachment: typing.Optional["Attachment"]

    """ If parameter is a data type.
    Type `Attachment` (represented as `dict` in JSON).
    """

    value_codeable_concept: typing.Optional["CodeableConcept"]

    """ If parameter is a data type.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value_coding: typing.Optional["Coding"]

    """ If parameter is a data type.
    Type `Coding` (represented as `dict` in JSON).
    """

    value_contact_point: typing.Optional["ContactPoint"]

    """ If parameter is a data type.
    Type `ContactPoint` (represented as `dict` in JSON).
    """

    value_count: typing.Optional["Count"]

    """ If parameter is a data type.
    Type `Count` (represented as `dict` in JSON).
    """

    value_distance: typing.Optional["Distance"]

    """ If parameter is a data type.
    Type `Distance` (represented as `dict` in JSON).
    """

    value_duration: typing.Optional["Duration"]

    """ If parameter is a data type.
    Type `Duration` (represented as `dict` in JSON).
    """

    value_human_name: typing.Optional["HumanName"]

    """ If parameter is a data type.
    Type `HumanName` (represented as `dict` in JSON).
    """

    value_identifier: typing.Optional["Identifier"]

    """ If parameter is a data type.
    Type `Identifier` (represented as `dict` in JSON).
    """

    value_money: typing.Optional["Money"]

    """ If parameter is a data type.
    Type `Money` (represented as `dict` in JSON).
    """

    value_period: typing.Optional["Period"]

    """ If parameter is a data type.
    Type `Period` (represented as `dict` in JSON).
    """

    value_quantity: typing.Optional["Quantity"]

    """ If parameter is a data type.
    Type `Quantity` (represented as `dict` in JSON).
    """

    value_range: typing.Optional["Range"]

    """ If parameter is a data type.
    Type `Range` (represented as `dict` in JSON).
    """

    value_ratio: typing.Optional["Ratio"]

    """ If parameter is a data type.
    Type `Ratio` (represented as `dict` in JSON).
    """

    value_reference: typing.Optional["Reference"]

    """ If parameter is a data type.
    Type `Reference` (represented as `dict` in JSON).
    """

    value_sampled_data: typing.Optional["SampledData"]

    """ If parameter is a data type.
    Type `SampledData` (represented as `dict` in JSON).
    """

    value_signature: typing.Optional["Signature"]

    """ If parameter is a data type.
    Type `Signature` (represented as `dict` in JSON).
    """

    value_timing: typing.Optional["Timing"]

    """ If parameter is a data type.
    Type `Timing` (represented as `dict` in JSON).
    """

    value_contact_detail: typing.Optional["ContactDetail"]

    """ If parameter is a data type.
    Type `ContactDetail` (represented as `dict` in JSON).
    """

    value_contributor: typing.Optional["Contributor"]

    """ If parameter is a data type.
    Type `Contributor` (represented as `dict` in JSON).
    """

    value_data_requirement: typing.Optional["DataRequirement"]

    """ If parameter is a data type.
    Type `DataRequirement` (represented as `dict` in JSON).
    """

    value_expression: typing.Optional["Expression"]

    """ If parameter is a data type.
    Type `Expression` (represented as `dict` in JSON).
    """

    value_parameter_definition: typing.Optional["ParameterDefinition"]

    """ If parameter is a data type.
    Type `ParameterDefinition` (represented as `dict` in JSON).
    """

    value_related_artifact: typing.Optional["RelatedArtifact"]

    """ If parameter is a data type.
    Type `RelatedArtifact` (represented as `dict` in JSON).
    """

    value_trigger_definition: typing.Optional["TriggerDefinition"]

    """ If parameter is a data type.
    Type `TriggerDefinition` (represented as `dict` in JSON).
    """

    value_usage_context: typing.Optional["UsageContext"]

    """ If parameter is a data type.
    Type `UsageContext` (represented as `dict` in JSON).
    """

    value_dosage: typing.Optional["Dosage"]

    """ If parameter is a data type.
    Type `Dosage` (represented as `dict` in JSON).
    """

    value_meta: typing.Optional["Meta"]

    """ If parameter is a data type.
    Type `Meta` (represented as `dict` in JSON).
    """

    resource: typing.Optional["Resource"]

    """ If parameter is a whole resource.
    Type `Resource` (represented as `dict` in JSON).
    """
    @pydantic.validator("resource", pre=True,  each_item=True)
    def resource_factory(cls, value):
        if isinstance(value, Resource):
            return value
        return from_dict(value)

    part: typing.Optional[typing.List["ParametersParameter"]]

    """ Named part of a multi-part parameter.
    List of `ParametersParameter` items (represented as `dict` in JSON).
    """



#   {'path': 'Parameters.parameter.value[x]', 'choice_of_type': 'value', 'orig_name': 'valueBase64Binary', 'name': 'valueBase64Binary', 'parent_name': 'Parameters.parameter', 'class_name': 'FHIRBase64Binary', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'If parameter is a data type', 'formal': 'If the parameter is a data type.', 'representation': None}
    _value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['value_base64_binary', 'value_boolean', 'value_canonical', 'value_code', 'value_date', 'value_date_time', 'value_decimal', 'value_id', 'value_instant', 'value_integer', 'value_markdown', 'value_oid', 'value_positive_int', 'value_string', 'value_time', 'value_unsigned_int', 'value_uri', 'value_url', 'value_uuid', 'value_address', 'value_age', 'value_annotation', 'value_attachment', 'value_codeable_concept', 'value_coding', 'value_contact_point', 'value_count', 'value_distance', 'value_duration', 'value_human_name', 'value_identifier', 'value_money', 'value_period', 'value_quantity', 'value_range', 'value_ratio', 'value_reference', 'value_sampled_data', 'value_signature', 'value_timing', 'value_contact_detail', 'value_contributor', 'value_data_requirement', 'value_expression', 'value_parameter_definition', 'value_related_artifact', 'value_trigger_definition', 'value_usage_context', 'value_dosage', 'value_meta']), True))

    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_value_base64_binary = get_primitive_field_root_validator("value_base64_binary")
    
    _validate_primitive_value_boolean = get_primitive_field_root_validator("value_boolean")
    
    _validate_primitive_value_canonical = get_primitive_field_root_validator("value_canonical")
    
    _validate_primitive_value_code = get_primitive_field_root_validator("value_code")
    
    _validate_primitive_value_date = get_primitive_field_root_validator("value_date")
    
    _validate_primitive_value_date_time = get_primitive_field_root_validator("value_date_time")
    
    _validate_primitive_value_decimal = get_primitive_field_root_validator("value_decimal")
    
    _validate_primitive_value_id = get_primitive_field_root_validator("value_id")
    
    _validate_primitive_value_instant = get_primitive_field_root_validator("value_instant")
    
    _validate_primitive_value_integer = get_primitive_field_root_validator("value_integer")
    
    _validate_primitive_value_markdown = get_primitive_field_root_validator("value_markdown")
    
    _validate_primitive_value_oid = get_primitive_field_root_validator("value_oid")
    
    _validate_primitive_value_positive_int = get_primitive_field_root_validator("value_positive_int")
    
    _validate_primitive_value_string = get_primitive_field_root_validator("value_string")
    
    _validate_primitive_value_time = get_primitive_field_root_validator("value_time")
    
    _validate_primitive_value_unsigned_int = get_primitive_field_root_validator("value_unsigned_int")
    
    _validate_primitive_value_uri = get_primitive_field_root_validator("value_uri")
    
    _validate_primitive_value_url = get_primitive_field_root_validator("value_url")
    
    _validate_primitive_value_uuid = get_primitive_field_root_validator("value_uuid")
    


class PatientContact(BackboneElement):
    """ A contact party (e.g. guardian, partner, friend) for the patient.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Patient",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    relationship: typing.Optional[typing.List["CodeableConcept"]]

    """ The kind of relationship.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    name: typing.Optional["HumanName"]

    """ A name associated with the contact person.
    Type `HumanName` (represented as `dict` in JSON).
    """

    telecom: typing.Optional[typing.List["ContactPoint"]]

    """ A contact detail for the person.
    List of `ContactPoint` items (represented as `dict` in JSON).
    """

    address: typing.Optional["Address"]

    """ Address for the contact person.
    Type `Address` (represented as `dict` in JSON).
    """

            
    
    
    gender: typing.Optional["AdministrativeGender"]

    """ male | female | other | unknown.
    Type `AdministrativeGender` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    gender__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_gender`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    organization: typing.Optional["Reference"]

    """ Organization that is associated with the contact.
    Type `Reference` (represented as `dict` in JSON).
    """

    period: typing.Optional["Period"]

    """ The period during which this contact person or organization is
        valid to be contacted relating to this patient.
    Type `Period` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["gender"]["enum"]
            enums.clear()
            for item in AdministrativeGender:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_gender = get_primitive_field_root_validator("gender")
    


class PatientCommunication(BackboneElement):
    """ A language which may be used to communicate with the patient about his or
    her health.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Patient",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    language: "CodeableConcept"

    """ The language which can be used to communicate with the patient
        about his or her health.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    preferred: typing.Optional[bool]

    """ Language preference indicator.
    Type `bool`. Is a JSON Primitive element.
    """
    

    preferred__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_preferred`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_preferred = get_primitive_field_root_validator("preferred")
    


class PatientLink(BackboneElement):
    """ Link to another patient resource that concerns the same actual person.

    Link to another patient resource that concerns the same actual patient.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Patient",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    other: "Reference"

    """ The other patient or related person resource that the link refers
        to.
    Type `Reference` (represented as `dict` in JSON).
    """

            
    
    
    type: "LinkType"

    """ replaced-by | replaces | refer | seealso.
    Type `LinkType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in LinkType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_type = get_primitive_field_root_validator("type")
    


class PaymentReconciliationDetail(BackboneElement):
    """ Settlement particulars.

    Distribution of the payment amount for a previously acknowledged payable.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/PaymentReconciliation",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional["Identifier"]

    """ Business identifier of the payment detail.
    Type `Identifier` (represented as `dict` in JSON).
    """

    predecessor: typing.Optional["Identifier"]

    """ Business identifier of the prior payment detail.
    Type `Identifier` (represented as `dict` in JSON).
    """

    type: "CodeableConcept"

    """ Category of payment.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    request: typing.Optional["Reference"]

    """ Request giving rise to the payment.
    Type `Reference` (represented as `dict` in JSON).
    """

    submitter: typing.Optional["Reference"]

    """ Submitter of the request.
    Type `Reference` (represented as `dict` in JSON).
    """

    response: typing.Optional["Reference"]

    """ Response committing to a payment.
    Type `Reference` (represented as `dict` in JSON).
    """

    date: typing.Optional[FHIRDate]

    """ Date of commitment to pay.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    responsible: typing.Optional["Reference"]

    """ Contact for the response.
    Type `Reference` (represented as `dict` in JSON).
    """

    payee: typing.Optional["Reference"]

    """ Recipient of the payment.
    Type `Reference` (represented as `dict` in JSON).
    """

    amount: typing.Optional["Money"]

    """ Amount allocated to this payable.
    Type `Money` (represented as `dict` in JSON).
    """



    _validate_primitive_date = get_primitive_field_root_validator("date")
    


class PaymentReconciliationProcessNote(BackboneElement):
    """ Note concerning processing.

    A note that describes or explains the processing in a human readable form.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/PaymentReconciliation",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    type: typing.Optional["NoteType"]

    """ display | print | printoper.
    Type `NoteType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    text: typing.Optional[FHIRString]

    """ Note explanatory text.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    text__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_text`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in NoteType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_text = get_primitive_field_root_validator("text")
    


class PersonLink(BackboneElement):
    """ Link to a resource that concerns the same actual person.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Person",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    target: "Reference"

    """ The resource to which this actual person is associated.
    Type `Reference` (represented as `dict` in JSON).
    """

            
    
    
    assurance: typing.Optional["IdentityAssuranceLevel"]

    """ level1 | level2 | level3 | level4.
    Type `IdentityAssuranceLevel` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    assurance__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_assurance`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["assurance"]["enum"]
            enums.clear()
            for item in IdentityAssuranceLevel:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_assurance = get_primitive_field_root_validator("assurance")
    


class PlanDefinitionGoal(BackboneElement):
    """ What the plan is trying to accomplish.

    Goals that describe what the activities within the plan are intended to
    achieve. For example, weight loss, restoring an activity of daily living,
    obtaining herd immunity via immunization, meeting a process improvement
    objective, etc.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/PlanDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    category: typing.Optional["CodeableConcept"]

    """ E.g. Treatment, dietary, behavioral.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    description: "CodeableConcept"

    """ Code or text describing the goal.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    priority: typing.Optional["CodeableConcept"]

    """ high-priority | medium-priority | low-priority.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    start: typing.Optional["CodeableConcept"]

    """ When goal pursuit begins.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    addresses: typing.Optional[typing.List["CodeableConcept"]]

    """ What does the goal address.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    documentation: typing.Optional[typing.List["RelatedArtifact"]]

    """ Supporting documentation for the goal.
    List of `RelatedArtifact` items (represented as `dict` in JSON).
    """

    target: typing.Optional[typing.List["PlanDefinitionGoalTarget"]]

    """ Target outcome for the goal.
    List of `PlanDefinitionGoalTarget` items (represented as `dict` in JSON).
    """




class PlanDefinitionGoalTarget(BackboneElement):
    """ Target outcome for the goal.

    Indicates what should be done and within what timeframe.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/PlanDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    measure: typing.Optional["CodeableConcept"]

    """ The parameter whose value is to be tracked.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    detail_quantity: typing.Optional["Quantity"]

    """ The target value to be achieved.
    Type `Quantity` (represented as `dict` in JSON).
    """

    detail_range: typing.Optional["Range"]

    """ The target value to be achieved.
    Type `Range` (represented as `dict` in JSON).
    """

    detail_codeable_concept: typing.Optional["CodeableConcept"]

    """ The target value to be achieved.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    due: typing.Optional["Duration"]

    """ Reach goal within.
    Type `Duration` (represented as `dict` in JSON).
    """



#   {'path': 'PlanDefinition.goal.target.detail[x]', 'choice_of_type': 'detail', 'orig_name': 'detailQuantity', 'name': 'detailQuantity', 'parent_name': 'PlanDefinition.goal.target', 'class_name': 'Quantity', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'The target value to be achieved', 'formal': 'The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.', 'representation': None}
    _detail_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['detail_quantity', 'detail_range', 'detail_codeable_concept']), True))


class PlanDefinitionAction(BackboneElement):
    """ Action defined by the plan.

    An action or group of actions to be taken as part of the plan.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/PlanDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    prefix: typing.Optional[FHIRString]

    """ User-visible prefix for the action (e.g. 1. or A.).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    prefix__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_prefix`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ User-visible title.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ Brief description of the action.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    text_equivalent: typing.Optional[FHIRString]

    """ Static text equivalent of the action, used if the dynamic aspects
        cannot be interpreted by the receiving system.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    text_equivalent__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_text_equivalent`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    priority: typing.Optional["RequestPriority"]

    """ routine | urgent | asap | stat.
    Type `RequestPriority` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    priority__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_priority`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code: typing.Optional[typing.List["CodeableConcept"]]

    """ Code representing the meaning of the action or sub-actions.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    reason: typing.Optional[typing.List["CodeableConcept"]]

    """ Why the action should be performed.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    documentation: typing.Optional[typing.List["RelatedArtifact"]]

    """ Supporting documentation for the intended performer of the action.
    List of `RelatedArtifact` items (represented as `dict` in JSON).
    """

    goal_id: typing.Optional[typing.List[typing.Optional[FHIRId]]]

    """ What goals this action supports.
    List of `FHIRId` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    goal_id__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_goal_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    subject_codeable_concept: typing.Optional["CodeableConcept"]

    """ Type of individual the action is focused on.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subject_reference: typing.Optional["Reference"]

    """ Type of individual the action is focused on.
    Type `Reference` (represented as `dict` in JSON).
    """

    trigger: typing.Optional[typing.List["TriggerDefinition"]]

    """ When the action should be triggered.
    List of `TriggerDefinition` items (represented as `dict` in JSON).
    """

    condition: typing.Optional[typing.List["PlanDefinitionActionCondition"]]

    """ Whether or not the action is applicable.
    List of `PlanDefinitionActionCondition` items (represented as `dict` in JSON).
    """

    input: typing.Optional[typing.List["DataRequirement"]]

    """ Input data requirements.
    List of `DataRequirement` items (represented as `dict` in JSON).
    """

    output: typing.Optional[typing.List["DataRequirement"]]

    """ Output data definition.
    List of `DataRequirement` items (represented as `dict` in JSON).
    """

    related_action: typing.Optional[typing.List["PlanDefinitionActionRelatedAction"]]

    """ Relationship to another action.
    List of `PlanDefinitionActionRelatedAction` items (represented as `dict` in JSON).
    """

    timing_date_time: typing.Optional[FHIRDateTime]

    """ When the action should take place.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    timing_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_timing_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    timing_age: typing.Optional["Age"]

    """ When the action should take place.
    Type `Age` (represented as `dict` in JSON).
    """

    timing_period: typing.Optional["Period"]

    """ When the action should take place.
    Type `Period` (represented as `dict` in JSON).
    """

    timing_duration: typing.Optional["Duration"]

    """ When the action should take place.
    Type `Duration` (represented as `dict` in JSON).
    """

    timing_range: typing.Optional["Range"]

    """ When the action should take place.
    Type `Range` (represented as `dict` in JSON).
    """

    timing_timing: typing.Optional["Timing"]

    """ When the action should take place.
    Type `Timing` (represented as `dict` in JSON).
    """

    participant: typing.Optional[typing.List["PlanDefinitionActionParticipant"]]

    """ Who should participate in the action.
    List of `PlanDefinitionActionParticipant` items (represented as `dict` in JSON).
    """

    type: typing.Optional["CodeableConcept"]

    """ create | update | remove | fire-event.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

            
    
    
    grouping_behavior: typing.Optional["ActionGroupingBehavior"]

    """ visual-group | logical-group | sentence-group.
    Type `ActionGroupingBehavior` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    grouping_behavior__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_grouping_behavior`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    selection_behavior: typing.Optional["ActionSelectionBehavior"]

    """ any | all | all-or-none | exactly-one | at-most-one | one-or-more.
    Type `ActionSelectionBehavior` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    selection_behavior__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_selection_behavior`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    required_behavior: typing.Optional["ActionRequiredBehavior"]

    """ must | could | must-unless-documented.
    Type `ActionRequiredBehavior` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    required_behavior__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_required_behavior`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    precheck_behavior: typing.Optional["ActionPrecheckBehavior"]

    """ yes | no.
    Type `ActionPrecheckBehavior` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    precheck_behavior__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_precheck_behavior`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    cardinality_behavior: typing.Optional["ActionCardinalityBehavior"]

    """ single | multiple.
    Type `ActionCardinalityBehavior` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    cardinality_behavior__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_cardinality_behavior`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    definition_canonical: typing.Optional[FHIRString]

    """ Description of the activity to be performed.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    definition_canonical__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_definition_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    definition_uri: typing.Optional[FHIRString]

    """ Description of the activity to be performed.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    definition_uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_definition_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    transform: typing.Optional[FHIRString]

    """ Transform to apply the template.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    transform__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_transform`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    dynamic_value: typing.Optional[typing.List["PlanDefinitionActionDynamicValue"]]

    """ Dynamic aspects of the definition.
    List of `PlanDefinitionActionDynamicValue` items (represented as `dict` in JSON).
    """

    action: typing.Optional[typing.List["PlanDefinitionAction"]]

    """ A sub-action.
    List of `PlanDefinitionAction` items (represented as `dict` in JSON).
    """



#   {'path': 'PlanDefinition.action.subject[x]', 'choice_of_type': 'subject', 'orig_name': 'subjectCodeableConcept', 'name': 'subjectCodeableConcept', 'parent_name': 'PlanDefinition.action', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Type of individual the action is focused on', 'formal': 'A code or group definition that describes the intended subject of the action and its children, if any.', 'representation': None}
    _subject_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['subject_codeable_concept', 'subject_reference']), True))

#   {'path': 'PlanDefinition.action.timing[x]', 'choice_of_type': 'timing', 'orig_name': 'timingDateTime', 'name': 'timingDateTime', 'parent_name': 'PlanDefinition.action', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'When the action should take place', 'formal': 'An optional value describing when the action should be performed.', 'representation': None}
    _timing_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['timing_date_time', 'timing_age', 'timing_period', 'timing_duration', 'timing_range', 'timing_timing']), True))

#   {'path': 'PlanDefinition.action.definition[x]', 'choice_of_type': 'definition', 'orig_name': 'definitionCanonical', 'name': 'definitionCanonical', 'parent_name': 'PlanDefinition.action', 'class_name': 'FHIRString', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Description of the activity to be performed', 'formal': 'A reference to an ActivityDefinition that describes the action to be taken in detail, or a PlanDefinition that describes a series of actions to be taken.', 'representation': None}
    _definition_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['definition_canonical', 'definition_uri']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["priority"]["enum"]
            enums.clear()
            for item in RequestPriority:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["groupingBehavior"]["enum"]
            enums.clear()
            for item in ActionGroupingBehavior:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["selectionBehavior"]["enum"]
            enums.clear()
            for item in ActionSelectionBehavior:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["requiredBehavior"]["enum"]
            enums.clear()
            for item in ActionRequiredBehavior:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["precheckBehavior"]["enum"]
            enums.clear()
            for item in ActionPrecheckBehavior:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["cardinalityBehavior"]["enum"]
            enums.clear()
            for item in ActionCardinalityBehavior:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_prefix = get_primitive_field_root_validator("prefix")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_text_equivalent = get_primitive_field_root_validator("text_equivalent")
    
    _validate_primitive_priority = get_primitive_field_root_validator("priority")
    
    _validate_primitive_goal_id = get_primitive_field_root_validator("goal_id")
    
    _validate_primitive_timing_date_time = get_primitive_field_root_validator("timing_date_time")
    
    _validate_primitive_grouping_behavior = get_primitive_field_root_validator("grouping_behavior")
    
    _validate_primitive_selection_behavior = get_primitive_field_root_validator("selection_behavior")
    
    _validate_primitive_required_behavior = get_primitive_field_root_validator("required_behavior")
    
    _validate_primitive_precheck_behavior = get_primitive_field_root_validator("precheck_behavior")
    
    _validate_primitive_cardinality_behavior = get_primitive_field_root_validator("cardinality_behavior")
    
    _validate_primitive_definition_canonical = get_primitive_field_root_validator("definition_canonical")
    
    _validate_primitive_definition_uri = get_primitive_field_root_validator("definition_uri")
    
    _validate_primitive_transform = get_primitive_field_root_validator("transform")
    


class PlanDefinitionActionCondition(BackboneElement):
    """ Whether or not the action is applicable.

    An expression that describes applicability criteria or start/stop
    conditions for the action.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/PlanDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    kind: "ActionConditionKind"

    """ applicability | start | stop.
    Type `ActionConditionKind` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    kind__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_kind`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    expression: typing.Optional["Expression"]

    """ Boolean-valued expression.
    Type `Expression` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["kind"]["enum"]
            enums.clear()
            for item in ActionConditionKind:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_kind = get_primitive_field_root_validator("kind")
    


class PlanDefinitionActionRelatedAction(BackboneElement):
    """ Relationship to another action.

    A relationship to another action such as "before" or "30-60 minutes after
    start of".
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/PlanDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    action_id: FHIRId

    """ What action is this related to.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    action_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_action_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    relationship: "ActionRelationshipType"

    """ before-start | before | before-end | concurrent-with-start |
        concurrent | concurrent-with-end | after-start | after | after-end.
    Type `ActionRelationshipType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    relationship__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_relationship`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    offset_duration: typing.Optional["Duration"]

    """ Time offset for the relationship.
    Type `Duration` (represented as `dict` in JSON).
    """

    offset_range: typing.Optional["Range"]

    """ Time offset for the relationship.
    Type `Range` (represented as `dict` in JSON).
    """



#   {'path': 'PlanDefinition.action.relatedAction.offset[x]', 'choice_of_type': 'offset', 'orig_name': 'offsetDuration', 'name': 'offsetDuration', 'parent_name': 'PlanDefinition.action.relatedAction', 'class_name': 'Duration', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Time offset for the relationship', 'formal': 'A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.', 'representation': None}
    _offset_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['offset_duration', 'offset_range']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["relationship"]["enum"]
            enums.clear()
            for item in ActionRelationshipType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_action_id = get_primitive_field_root_validator("action_id")
    
    _validate_primitive_relationship = get_primitive_field_root_validator("relationship")
    


class PlanDefinitionActionParticipant(BackboneElement):
    """ Who should participate in the action.

    Indicates who should participate in performing the action described.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/PlanDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    type: "ActionParticipantType"

    """ patient | practitioner | related-person | device.
    Type `ActionParticipantType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    role: typing.Optional["CodeableConcept"]

    """ E.g. Nurse, Surgeon, Parent.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in ActionParticipantType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_type = get_primitive_field_root_validator("type")
    


class PlanDefinitionActionDynamicValue(BackboneElement):
    """ Dynamic aspects of the definition.

    Customizations that should be applied to the statically defined resource.
    For example, if the dosage of a medication must be computed based on the
    patient's weight, a customization would be used to specify an expression
    that calculated the weight, and the path on the resource that would contain
    the result.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/PlanDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    path: typing.Optional[FHIRString]

    """ The path to the element to be set dynamically.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    path__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_path`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    expression: typing.Optional["Expression"]

    """ An expression that provides the dynamic value for the customization.
    Type `Expression` (represented as `dict` in JSON).
    """



    _validate_primitive_path = get_primitive_field_root_validator("path")
    


class PractitionerQualification(BackboneElement):
    """ Certification, licenses, or training pertaining to the provision of care.

    The official certifications, training, and licenses that authorize or
    otherwise pertain to the provision of care by the practitioner.  For
    example, a medical license issued by a medical board authorizing the
    practitioner to practice medicine within a certian locality.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Practitioner",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ An identifier for this qualification for the practitioner.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    code: "CodeableConcept"

    """ Coded representation of the qualification.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    period: typing.Optional["Period"]

    """ Period during which the qualification is valid.
    Type `Period` (represented as `dict` in JSON).
    """

    issuer: typing.Optional["Reference"]

    """ Organization that regulates and issues the qualification.
    Type `Reference` (represented as `dict` in JSON).
    """




class PractitionerRoleAvailableTime(BackboneElement):
    """ Times the Service Site is available.

    A collection of times the practitioner is available or performing this role
    at the location and/or healthcareservice.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/PractitionerRole",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    days_of_week: typing.Optional[typing.List[typing.Optional["DaysOfWeek"]]]

    """ mon | tue | wed | thu | fri | sat | sun.
    List of `DaysOfWeek` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    days_of_week__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_days_of_week`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    all_day: typing.Optional[bool]

    """ Always available? e.g. 24 hour service.
    Type `bool`. Is a JSON Primitive element.
    """
    

    all_day__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_all_day`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    available_start_time: typing.Optional[FHIRTime]

    """ Opening time of day (ignored if allDay = true).
    Type `FHIRTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    available_start_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_available_start_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    available_end_time: typing.Optional[FHIRTime]

    """ Closing time of day (ignored if allDay = true).
    Type `FHIRTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    available_end_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_available_end_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["daysOfWeek"]["items"]["enum"]
            enums.clear()
            for item in DaysOfWeek:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_days_of_week = get_primitive_field_root_validator("days_of_week")
    
    _validate_primitive_all_day = get_primitive_field_root_validator("all_day")
    
    _validate_primitive_available_start_time = get_primitive_field_root_validator("available_start_time")
    
    _validate_primitive_available_end_time = get_primitive_field_root_validator("available_end_time")
    


class PractitionerRoleNotAvailable(BackboneElement):
    """ Not available during this time due to provided reason.

    The practitioner is not available or performing this role during this
    period of time due to the provided reason.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/PractitionerRole",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    description: FHIRRequiredString

    """ Reason presented to the user explaining why time not available.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    during: typing.Optional["Period"]

    """ Service not available from this date.
    Type `Period` (represented as `dict` in JSON).
    """



    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class ProcedurePerformer(BackboneElement):
    """ The people who performed the procedure.

    Limited to "real" people rather than equipment.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Procedure",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    function: typing.Optional["CodeableConcept"]

    """ Type of performance.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    actor: "Reference"

    """ The reference to the practitioner.
    Type `Reference` (represented as `dict` in JSON).
    """

    on_behalf_of: typing.Optional["Reference"]

    """ Organization the device or practitioner was acting for.
    Type `Reference` (represented as `dict` in JSON).
    """




class ProcedureFocalDevice(BackboneElement):
    """ Manipulated, implanted, or removed device.

    A device that is implanted, removed or otherwise manipulated (calibration,
    battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as
    a focal portion of the Procedure.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Procedure",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    action: typing.Optional["CodeableConcept"]

    """ Kind of change to device.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    manipulated: "Reference"

    """ Device that was changed.
    Type `Reference` (represented as `dict` in JSON).
    """




class ProvenanceAgent(BackboneElement):
    """ Actor involved.

    An actor taking a role in an activity  for which it can be assigned some
    degree of responsibility for the activity taking place.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Provenance",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: typing.Optional["CodeableConcept"]

    """ How the agent participated.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    role: typing.Optional[typing.List["CodeableConcept"]]

    """ What the agents role was.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    who: "Reference"

    """ Who participated.
    Type `Reference` (represented as `dict` in JSON).
    """

    on_behalf_of: typing.Optional["Reference"]

    """ Who the agent is representing.
    Type `Reference` (represented as `dict` in JSON).
    """




class ProvenanceEntity(BackboneElement):
    """ An entity used in this activity.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Provenance",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    role: "ProvenanceEntityRole"

    """ derivation | revision | quotation | source | removal.
    Type `ProvenanceEntityRole` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    role__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_role`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    what: "Reference"

    """ Identity of entity.
    Type `Reference` (represented as `dict` in JSON).
    """

    agent: typing.Optional[typing.List["ProvenanceAgent"]]

    """ Entity is attributed to this agent.
    List of `ProvenanceAgent` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["role"]["enum"]
            enums.clear()
            for item in ProvenanceEntityRole:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_role = get_primitive_field_root_validator("role")
    


class QuestionnaireItem(BackboneElement):
    """ Questions and sections within the Questionnaire.

    A particular question, question grouping or display text that is part of
    the questionnaire.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Questionnaire",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    link_id: FHIRRequiredString

    """ Unique id for item in questionnaire.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    link_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_link_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    definition: typing.Optional[FHIRString]

    """ ElementDefinition - details for the item.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    definition__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_definition`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code: typing.Optional[typing.List["Coding"]]

    """ Corresponding concept for this item in a terminology.
    List of `Coding` items (represented as `dict` in JSON).
    """

    prefix: typing.Optional[FHIRString]

    """ E.g. "1(a)", "2.5.3".
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    prefix__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_prefix`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    text: typing.Optional[FHIRString]

    """ Primary text for the item.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    text__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_text`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    type: "QuestionnaireItemType"

    """ group | display | boolean | decimal | integer | date | dateTime +.
    Type `QuestionnaireItemType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    enable_when: typing.Optional[typing.List["QuestionnaireItemEnableWhen"]]

    """ Only allow data when.
    List of `QuestionnaireItemEnableWhen` items (represented as `dict` in JSON).
    """

            
    
    
    enable_behavior: typing.Optional["EnableWhenBehavior"]

    """ all | any.
    Type `EnableWhenBehavior` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    enable_behavior__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_enable_behavior`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    required: typing.Optional[bool]

    """ Whether the item must be included in data results.
    Type `bool`. Is a JSON Primitive element.
    """
    

    required__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_required`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    repeats: typing.Optional[bool]

    """ Whether the item may repeat.
    Type `bool`. Is a JSON Primitive element.
    """
    

    repeats__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_repeats`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    read_only: typing.Optional[bool]

    """ Don't allow human editing.
    Type `bool`. Is a JSON Primitive element.
    """
    

    read_only__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_read_only`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    max_length: typing.Optional[FHIRInt]

    """ No more than this many characters.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    max_length__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_max_length`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    answer_value_set: typing.Optional[FHIRString]

    """ Valueset containing permitted answers.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    answer_value_set__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_answer_value_set`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    answer_option: typing.Optional[typing.List["QuestionnaireItemAnswerOption"]]

    """ Permitted answer.
    List of `QuestionnaireItemAnswerOption` items (represented as `dict` in JSON).
    """

    initial: typing.Optional[typing.List["QuestionnaireItemInitial"]]

    """ Initial value(s) when item is first rendered.
    List of `QuestionnaireItemInitial` items (represented as `dict` in JSON).
    """

    item: typing.Optional[typing.List["QuestionnaireItem"]]

    """ Nested questionnaire items.
    List of `QuestionnaireItem` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in QuestionnaireItemType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["enableBehavior"]["enum"]
            enums.clear()
            for item in EnableWhenBehavior:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_link_id = get_primitive_field_root_validator("link_id")
    
    _validate_primitive_definition = get_primitive_field_root_validator("definition")
    
    _validate_primitive_prefix = get_primitive_field_root_validator("prefix")
    
    _validate_primitive_text = get_primitive_field_root_validator("text")
    
    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_enable_behavior = get_primitive_field_root_validator("enable_behavior")
    
    _validate_primitive_required = get_primitive_field_root_validator("required")
    
    _validate_primitive_repeats = get_primitive_field_root_validator("repeats")
    
    _validate_primitive_read_only = get_primitive_field_root_validator("read_only")
    
    _validate_primitive_max_length = get_primitive_field_root_validator("max_length")
    
    _validate_primitive_answer_value_set = get_primitive_field_root_validator("answer_value_set")
    


class QuestionnaireItemEnableWhen(BackboneElement):
    """ Only allow data when.

    A constraint indicating that this item should only be enabled
    (displayed/allow answers to be captured) when the specified condition is
    true.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Questionnaire",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    question: FHIRRequiredString

    """ Question that determines whether item is enabled.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    question__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_question`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    operator: "QuestionnaireItemOperator"

    """ exists | = | != | > | < | >= | <=.
    Type `QuestionnaireItemOperator` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    operator__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_operator`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    answer_boolean: typing.Optional[bool]

    """ Value for question comparison based on operator.
    Type `bool`. Is a JSON Primitive element.
    """
    

    answer_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_answer_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    answer_decimal: typing.Optional[decimal.Decimal]

    """ Value for question comparison based on operator.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    answer_decimal__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_answer_decimal`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    answer_integer: typing.Optional[FHIRInt]

    """ Value for question comparison based on operator.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    answer_integer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_answer_integer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    answer_date: typing.Optional[FHIRDate]

    """ Value for question comparison based on operator.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    answer_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_answer_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    answer_date_time: typing.Optional[FHIRDateTime]

    """ Value for question comparison based on operator.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    answer_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_answer_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    answer_time: typing.Optional[FHIRTime]

    """ Value for question comparison based on operator.
    Type `FHIRTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    answer_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_answer_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    answer_string: typing.Optional[FHIRString]

    """ Value for question comparison based on operator.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    answer_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_answer_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    answer_coding: typing.Optional["Coding"]

    """ Value for question comparison based on operator.
    Type `Coding` (represented as `dict` in JSON).
    """

    answer_quantity: typing.Optional["Quantity"]

    """ Value for question comparison based on operator.
    Type `Quantity` (represented as `dict` in JSON).
    """

    answer_reference: typing.Optional["Reference"]

    """ Value for question comparison based on operator.
    Type `Reference` (represented as `dict` in JSON).
    """



#   {'path': 'Questionnaire.item.enableWhen.answer[x]', 'choice_of_type': 'answer', 'orig_name': 'answerBoolean', 'name': 'answerBoolean', 'parent_name': 'Questionnaire.item.enableWhen', 'class_name': 'bool', 'enum': None, 'module_name': None, 'json_class': 'bool', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Value for question comparison based on operator', 'formal': 'A value that the referenced question is tested using the specified operator in order for the item to be enabled.', 'representation': None}
    _answer_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['answer_boolean', 'answer_decimal', 'answer_integer', 'answer_date', 'answer_date_time', 'answer_time', 'answer_string', 'answer_coding', 'answer_quantity', 'answer_reference']), False))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["operator"]["enum"]
            enums.clear()
            for item in QuestionnaireItemOperator:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_question = get_primitive_field_root_validator("question")
    
    _validate_primitive_operator = get_primitive_field_root_validator("operator")
    
    _validate_primitive_answer_boolean = get_primitive_field_root_validator("answer_boolean")
    
    _validate_primitive_answer_decimal = get_primitive_field_root_validator("answer_decimal")
    
    _validate_primitive_answer_integer = get_primitive_field_root_validator("answer_integer")
    
    _validate_primitive_answer_date = get_primitive_field_root_validator("answer_date")
    
    _validate_primitive_answer_date_time = get_primitive_field_root_validator("answer_date_time")
    
    _validate_primitive_answer_time = get_primitive_field_root_validator("answer_time")
    
    _validate_primitive_answer_string = get_primitive_field_root_validator("answer_string")
    


class QuestionnaireItemAnswerOption(BackboneElement):
    """ Permitted answer.

    One of the permitted answers for a "choice" or "open-choice" question.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Questionnaire",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    value_integer: typing.Optional[FHIRInt]

    """ Answer value.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_integer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_integer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_date: typing.Optional[FHIRDate]

    """ Answer value.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_time: typing.Optional[FHIRTime]

    """ Answer value.
    Type `FHIRTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_string: typing.Optional[FHIRString]

    """ Answer value.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_coding: typing.Optional["Coding"]

    """ Answer value.
    Type `Coding` (represented as `dict` in JSON).
    """

    value_reference: typing.Optional["Reference"]

    """ Answer value.
    Type `Reference` (represented as `dict` in JSON).
    """

    initial_selected: typing.Optional[bool]

    """ Whether option is selected by default.
    Type `bool`. Is a JSON Primitive element.
    """
    

    initial_selected__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_initial_selected`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'Questionnaire.item.answerOption.value[x]', 'choice_of_type': 'value', 'orig_name': 'valueInteger', 'name': 'valueInteger', 'parent_name': 'Questionnaire.item.answerOption', 'class_name': 'FHIRInt', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Answer value', 'formal': "A potential answer that's allowed as the answer to this question.", 'representation': None}
    _value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['value_integer', 'value_date', 'value_time', 'value_string', 'value_coding', 'value_reference']), False))

    _validate_primitive_value_integer = get_primitive_field_root_validator("value_integer")
    
    _validate_primitive_value_date = get_primitive_field_root_validator("value_date")
    
    _validate_primitive_value_time = get_primitive_field_root_validator("value_time")
    
    _validate_primitive_value_string = get_primitive_field_root_validator("value_string")
    
    _validate_primitive_initial_selected = get_primitive_field_root_validator("initial_selected")
    


class QuestionnaireItemInitial(BackboneElement):
    """ Initial value(s) when item is first rendered.

    One or more values that should be pre-populated in the answer when
    initially rendering the questionnaire for user input.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Questionnaire",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    value_boolean: typing.Optional[bool]

    """ Actual value for initializing the question.
    Type `bool`. Is a JSON Primitive element.
    """
    

    value_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_decimal: typing.Optional[decimal.Decimal]

    """ Actual value for initializing the question.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    value_decimal__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_decimal`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_integer: typing.Optional[FHIRInt]

    """ Actual value for initializing the question.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_integer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_integer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_date: typing.Optional[FHIRDate]

    """ Actual value for initializing the question.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_date_time: typing.Optional[FHIRDateTime]

    """ Actual value for initializing the question.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_time: typing.Optional[FHIRTime]

    """ Actual value for initializing the question.
    Type `FHIRTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_string: typing.Optional[FHIRString]

    """ Actual value for initializing the question.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_uri: typing.Optional[FHIRString]

    """ Actual value for initializing the question.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_attachment: typing.Optional["Attachment"]

    """ Actual value for initializing the question.
    Type `Attachment` (represented as `dict` in JSON).
    """

    value_coding: typing.Optional["Coding"]

    """ Actual value for initializing the question.
    Type `Coding` (represented as `dict` in JSON).
    """

    value_quantity: typing.Optional["Quantity"]

    """ Actual value for initializing the question.
    Type `Quantity` (represented as `dict` in JSON).
    """

    value_reference: typing.Optional["Reference"]

    """ Actual value for initializing the question.
    Type `Reference` (represented as `dict` in JSON).
    """



#   {'path': 'Questionnaire.item.initial.value[x]', 'choice_of_type': 'value', 'orig_name': 'valueBoolean', 'name': 'valueBoolean', 'parent_name': 'Questionnaire.item.initial', 'class_name': 'bool', 'enum': None, 'module_name': None, 'json_class': 'bool', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Actual value for initializing the question', 'formal': 'The actual value to for an initial answer.', 'representation': None}
    _value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['value_boolean', 'value_decimal', 'value_integer', 'value_date', 'value_date_time', 'value_time', 'value_string', 'value_uri', 'value_attachment', 'value_coding', 'value_quantity', 'value_reference']), False))

    _validate_primitive_value_boolean = get_primitive_field_root_validator("value_boolean")
    
    _validate_primitive_value_decimal = get_primitive_field_root_validator("value_decimal")
    
    _validate_primitive_value_integer = get_primitive_field_root_validator("value_integer")
    
    _validate_primitive_value_date = get_primitive_field_root_validator("value_date")
    
    _validate_primitive_value_date_time = get_primitive_field_root_validator("value_date_time")
    
    _validate_primitive_value_time = get_primitive_field_root_validator("value_time")
    
    _validate_primitive_value_string = get_primitive_field_root_validator("value_string")
    
    _validate_primitive_value_uri = get_primitive_field_root_validator("value_uri")
    


class QuestionnaireResponseItem(BackboneElement):
    """ Groups and questions.

    A group or question item from the original questionnaire for which answers
    are provided.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    link_id: FHIRRequiredString

    """ Pointer to specific item from Questionnaire.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    link_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_link_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    definition: typing.Optional[FHIRString]

    """ ElementDefinition - details for the item.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    definition__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_definition`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    text: typing.Optional[FHIRString]

    """ Name for group or question text.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    text__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_text`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    answer: typing.Optional[typing.List["QuestionnaireResponseItemAnswer"]]

    """ The response(s) to the question.
    List of `QuestionnaireResponseItemAnswer` items (represented as `dict` in JSON).
    """

    item: typing.Optional[typing.List["QuestionnaireResponseItem"]]

    """ Nested questionnaire response items.
    List of `QuestionnaireResponseItem` items (represented as `dict` in JSON).
    """



    _validate_primitive_link_id = get_primitive_field_root_validator("link_id")
    
    _validate_primitive_definition = get_primitive_field_root_validator("definition")
    
    _validate_primitive_text = get_primitive_field_root_validator("text")
    


class QuestionnaireResponseItemAnswer(BackboneElement):
    """ The response(s) to the question.

    The respondent's answer(s) to the question.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    value_boolean: typing.Optional[bool]

    """ Single-valued answer to the question.
    Type `bool`. Is a JSON Primitive element.
    """
    

    value_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_decimal: typing.Optional[decimal.Decimal]

    """ Single-valued answer to the question.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    value_decimal__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_decimal`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_integer: typing.Optional[FHIRInt]

    """ Single-valued answer to the question.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_integer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_integer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_date: typing.Optional[FHIRDate]

    """ Single-valued answer to the question.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_date_time: typing.Optional[FHIRDateTime]

    """ Single-valued answer to the question.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_time: typing.Optional[FHIRTime]

    """ Single-valued answer to the question.
    Type `FHIRTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_string: typing.Optional[FHIRString]

    """ Single-valued answer to the question.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_uri: typing.Optional[FHIRString]

    """ Single-valued answer to the question.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_attachment: typing.Optional["Attachment"]

    """ Single-valued answer to the question.
    Type `Attachment` (represented as `dict` in JSON).
    """

    value_coding: typing.Optional["Coding"]

    """ Single-valued answer to the question.
    Type `Coding` (represented as `dict` in JSON).
    """

    value_quantity: typing.Optional["Quantity"]

    """ Single-valued answer to the question.
    Type `Quantity` (represented as `dict` in JSON).
    """

    value_reference: typing.Optional["Reference"]

    """ Single-valued answer to the question.
    Type `Reference` (represented as `dict` in JSON).
    """

    item: typing.Optional[typing.List["QuestionnaireResponseItem"]]

    """ Nested groups and questions.
    List of `QuestionnaireResponseItem` items (represented as `dict` in JSON).
    """



#   {'path': 'QuestionnaireResponse.item.answer.value[x]', 'choice_of_type': 'value', 'orig_name': 'valueBoolean', 'name': 'valueBoolean', 'parent_name': 'QuestionnaireResponse.item.answer', 'class_name': 'bool', 'enum': None, 'module_name': None, 'json_class': 'bool', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Single-valued answer to the question', 'formal': 'The answer (or one of the answers) provided by the respondent to the question.', 'representation': None}
    _value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['value_boolean', 'value_decimal', 'value_integer', 'value_date', 'value_date_time', 'value_time', 'value_string', 'value_uri', 'value_attachment', 'value_coding', 'value_quantity', 'value_reference']), True))

    _validate_primitive_value_boolean = get_primitive_field_root_validator("value_boolean")
    
    _validate_primitive_value_decimal = get_primitive_field_root_validator("value_decimal")
    
    _validate_primitive_value_integer = get_primitive_field_root_validator("value_integer")
    
    _validate_primitive_value_date = get_primitive_field_root_validator("value_date")
    
    _validate_primitive_value_date_time = get_primitive_field_root_validator("value_date_time")
    
    _validate_primitive_value_time = get_primitive_field_root_validator("value_time")
    
    _validate_primitive_value_string = get_primitive_field_root_validator("value_string")
    
    _validate_primitive_value_uri = get_primitive_field_root_validator("value_uri")
    


class RelatedPersonCommunication(BackboneElement):
    """ A language which may be used to communicate with about the patient's health.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/RelatedPerson",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    language: "CodeableConcept"

    """ The language which can be used to communicate with the patient
        about his or her health.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    preferred: typing.Optional[bool]

    """ Language preference indicator.
    Type `bool`. Is a JSON Primitive element.
    """
    

    preferred__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_preferred`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_preferred = get_primitive_field_root_validator("preferred")
    


class RequestGroupAction(BackboneElement):
    """ Proposed actions, if any.

    The actions, if any, produced by the evaluation of the artifact.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/RequestGroup",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    prefix: typing.Optional[FHIRString]

    """ User-visible prefix for the action (e.g. 1. or A.).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    prefix__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_prefix`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    title: typing.Optional[FHIRString]

    """ User-visible title.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    title__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_title`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ Short description of the action.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    text_equivalent: typing.Optional[FHIRString]

    """ Static text equivalent of the action, used if the dynamic aspects
        cannot be interpreted by the receiving system.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    text_equivalent__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_text_equivalent`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    priority: typing.Optional["RequestPriority"]

    """ routine | urgent | asap | stat.
    Type `RequestPriority` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    priority__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_priority`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code: typing.Optional[typing.List["CodeableConcept"]]

    """ Code representing the meaning of the action or sub-actions.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    documentation: typing.Optional[typing.List["RelatedArtifact"]]

    """ Supporting documentation for the intended performer of the action.
    List of `RelatedArtifact` items (represented as `dict` in JSON).
    """

    condition: typing.Optional[typing.List["RequestGroupActionCondition"]]

    """ Whether or not the action is applicable.
    List of `RequestGroupActionCondition` items (represented as `dict` in JSON).
    """

    related_action: typing.Optional[typing.List["RequestGroupActionRelatedAction"]]

    """ Relationship to another action.
    List of `RequestGroupActionRelatedAction` items (represented as `dict` in JSON).
    """

    timing_date_time: typing.Optional[FHIRDateTime]

    """ When the action should take place.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    timing_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_timing_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    timing_age: typing.Optional["Age"]

    """ When the action should take place.
    Type `Age` (represented as `dict` in JSON).
    """

    timing_period: typing.Optional["Period"]

    """ When the action should take place.
    Type `Period` (represented as `dict` in JSON).
    """

    timing_duration: typing.Optional["Duration"]

    """ When the action should take place.
    Type `Duration` (represented as `dict` in JSON).
    """

    timing_range: typing.Optional["Range"]

    """ When the action should take place.
    Type `Range` (represented as `dict` in JSON).
    """

    timing_timing: typing.Optional["Timing"]

    """ When the action should take place.
    Type `Timing` (represented as `dict` in JSON).
    """

    participant: typing.Optional[typing.List["Reference"]]

    """ Who should perform the action.
    List of `Reference` items (represented as `dict` in JSON).
    """

    type: typing.Optional["CodeableConcept"]

    """ create | update | remove | fire-event.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

            
    
    
    grouping_behavior: typing.Optional["ActionGroupingBehavior"]

    """ visual-group | logical-group | sentence-group.
    Type `ActionGroupingBehavior` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    grouping_behavior__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_grouping_behavior`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    selection_behavior: typing.Optional["ActionSelectionBehavior"]

    """ any | all | all-or-none | exactly-one | at-most-one | one-or-more.
    Type `ActionSelectionBehavior` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    selection_behavior__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_selection_behavior`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    required_behavior: typing.Optional["ActionRequiredBehavior"]

    """ must | could | must-unless-documented.
    Type `ActionRequiredBehavior` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    required_behavior__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_required_behavior`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    precheck_behavior: typing.Optional["ActionPrecheckBehavior"]

    """ yes | no.
    Type `ActionPrecheckBehavior` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    precheck_behavior__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_precheck_behavior`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    cardinality_behavior: typing.Optional["ActionCardinalityBehavior"]

    """ single | multiple.
    Type `ActionCardinalityBehavior` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    cardinality_behavior__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_cardinality_behavior`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    resource: typing.Optional["Reference"]

    """ The target of the action.
    Type `Reference` (represented as `dict` in JSON).
    """

    action: typing.Optional[typing.List["RequestGroupAction"]]

    """ Sub action.
    List of `RequestGroupAction` items (represented as `dict` in JSON).
    """



#   {'path': 'RequestGroup.action.timing[x]', 'choice_of_type': 'timing', 'orig_name': 'timingDateTime', 'name': 'timingDateTime', 'parent_name': 'RequestGroup.action', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'When the action should take place', 'formal': 'An optional value describing when the action should be performed.', 'representation': None}
    _timing_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['timing_date_time', 'timing_age', 'timing_period', 'timing_duration', 'timing_range', 'timing_timing']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["priority"]["enum"]
            enums.clear()
            for item in RequestPriority:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["groupingBehavior"]["enum"]
            enums.clear()
            for item in ActionGroupingBehavior:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["selectionBehavior"]["enum"]
            enums.clear()
            for item in ActionSelectionBehavior:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["requiredBehavior"]["enum"]
            enums.clear()
            for item in ActionRequiredBehavior:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["precheckBehavior"]["enum"]
            enums.clear()
            for item in ActionPrecheckBehavior:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["cardinalityBehavior"]["enum"]
            enums.clear()
            for item in ActionCardinalityBehavior:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_prefix = get_primitive_field_root_validator("prefix")
    
    _validate_primitive_title = get_primitive_field_root_validator("title")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_text_equivalent = get_primitive_field_root_validator("text_equivalent")
    
    _validate_primitive_priority = get_primitive_field_root_validator("priority")
    
    _validate_primitive_timing_date_time = get_primitive_field_root_validator("timing_date_time")
    
    _validate_primitive_grouping_behavior = get_primitive_field_root_validator("grouping_behavior")
    
    _validate_primitive_selection_behavior = get_primitive_field_root_validator("selection_behavior")
    
    _validate_primitive_required_behavior = get_primitive_field_root_validator("required_behavior")
    
    _validate_primitive_precheck_behavior = get_primitive_field_root_validator("precheck_behavior")
    
    _validate_primitive_cardinality_behavior = get_primitive_field_root_validator("cardinality_behavior")
    


class RequestGroupActionCondition(BackboneElement):
    """ Whether or not the action is applicable.

    An expression that describes applicability criteria, or start/stop
    conditions for the action.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/RequestGroup",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    kind: "ActionConditionKind"

    """ applicability | start | stop.
    Type `ActionConditionKind` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    kind__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_kind`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    expression: typing.Optional["Expression"]

    """ Boolean-valued expression.
    Type `Expression` (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["kind"]["enum"]
            enums.clear()
            for item in ActionConditionKind:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_kind = get_primitive_field_root_validator("kind")
    


class RequestGroupActionRelatedAction(BackboneElement):
    """ Relationship to another action.

    A relationship to another action such as "before" or "30-60 minutes after
    start of".
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/RequestGroup",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    action_id: FHIRId

    """ What action this is related to.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    action_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_action_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    relationship: "ActionRelationshipType"

    """ before-start | before | before-end | concurrent-with-start |
        concurrent | concurrent-with-end | after-start | after | after-end.
    Type `ActionRelationshipType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    relationship__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_relationship`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    offset_duration: typing.Optional["Duration"]

    """ Time offset for the relationship.
    Type `Duration` (represented as `dict` in JSON).
    """

    offset_range: typing.Optional["Range"]

    """ Time offset for the relationship.
    Type `Range` (represented as `dict` in JSON).
    """



#   {'path': 'RequestGroup.action.relatedAction.offset[x]', 'choice_of_type': 'offset', 'orig_name': 'offsetDuration', 'name': 'offsetDuration', 'parent_name': 'RequestGroup.action.relatedAction', 'class_name': 'Duration', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Time offset for the relationship', 'formal': 'A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.', 'representation': None}
    _offset_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['offset_duration', 'offset_range']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["relationship"]["enum"]
            enums.clear()
            for item in ActionRelationshipType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_action_id = get_primitive_field_root_validator("action_id")
    
    _validate_primitive_relationship = get_primitive_field_root_validator("relationship")
    


class ResearchElementDefinitionCharacteristic(BackboneElement):
    """ What defines the members of the research element.

    A characteristic that defines the members of the research element. Multiple
    characteristics are applied with "and" semantics.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ResearchElementDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    definition_codeable_concept: typing.Optional["CodeableConcept"]

    """ What code or expression defines members?.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    definition_canonical: typing.Optional[FHIRString]

    """ What code or expression defines members?.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    definition_canonical__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_definition_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    definition_expression: typing.Optional["Expression"]

    """ What code or expression defines members?.
    Type `Expression` (represented as `dict` in JSON).
    """

    definition_data_requirement: typing.Optional["DataRequirement"]

    """ What code or expression defines members?.
    Type `DataRequirement` (represented as `dict` in JSON).
    """

    usage_context: typing.Optional[typing.List["UsageContext"]]

    """ What code/value pairs define members?.
    List of `UsageContext` items (represented as `dict` in JSON).
    """

    exclude: typing.Optional[bool]

    """ Whether the characteristic includes or excludes members.
    Type `bool`. Is a JSON Primitive element.
    """
    

    exclude__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_exclude`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    unit_of_measure: typing.Optional["CodeableConcept"]

    """ What unit is the outcome described in?.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    study_effective_description: typing.Optional[FHIRString]

    """ What time period does the study cover.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    study_effective_description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_study_effective_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    study_effective_date_time: typing.Optional[FHIRDateTime]

    """ What time period does the study cover.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    study_effective_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_study_effective_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    study_effective_period: typing.Optional["Period"]

    """ What time period does the study cover.
    Type `Period` (represented as `dict` in JSON).
    """

    study_effective_duration: typing.Optional["Duration"]

    """ What time period does the study cover.
    Type `Duration` (represented as `dict` in JSON).
    """

    study_effective_timing: typing.Optional["Timing"]

    """ What time period does the study cover.
    Type `Timing` (represented as `dict` in JSON).
    """

    study_effective_time_from_start: typing.Optional["Duration"]

    """ Observation time from study start.
    Type `Duration` (represented as `dict` in JSON).
    """

            
    
    
    study_effective_group_measure: typing.Optional["GroupMeasure"]

    """ mean | median | mean-of-mean | mean-of-median | median-of-mean |
        median-of-median.
    Type `GroupMeasure` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    study_effective_group_measure__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_study_effective_group_measure`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    participant_effective_description: typing.Optional[FHIRString]

    """ What time period do participants cover.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    participant_effective_description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_participant_effective_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    participant_effective_date_time: typing.Optional[FHIRDateTime]

    """ What time period do participants cover.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    participant_effective_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_participant_effective_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    participant_effective_period: typing.Optional["Period"]

    """ What time period do participants cover.
    Type `Period` (represented as `dict` in JSON).
    """

    participant_effective_duration: typing.Optional["Duration"]

    """ What time period do participants cover.
    Type `Duration` (represented as `dict` in JSON).
    """

    participant_effective_timing: typing.Optional["Timing"]

    """ What time period do participants cover.
    Type `Timing` (represented as `dict` in JSON).
    """

    participant_effective_time_from_start: typing.Optional["Duration"]

    """ Observation time from study start.
    Type `Duration` (represented as `dict` in JSON).
    """

            
    
    
    participant_effective_group_measure: typing.Optional["GroupMeasure"]

    """ mean | median | mean-of-mean | mean-of-median | median-of-mean |
        median-of-median.
    Type `GroupMeasure` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    participant_effective_group_measure__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_participant_effective_group_measure`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'ResearchElementDefinition.characteristic.definition[x]', 'choice_of_type': 'definition', 'orig_name': 'definitionCodeableConcept', 'name': 'definitionCodeableConcept', 'parent_name': 'ResearchElementDefinition.characteristic', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'What code or expression defines members?', 'formal': 'Define members of the research element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).', 'representation': None}
    _definition_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['definition_codeable_concept', 'definition_canonical', 'definition_expression', 'definition_data_requirement']), False))

#   {'path': 'ResearchElementDefinition.characteristic.studyEffective[x]', 'choice_of_type': 'studyEffective', 'orig_name': 'studyEffectiveDateTime', 'name': 'studyEffectiveDateTime', 'parent_name': 'ResearchElementDefinition.characteristic', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'What time period does the study cover', 'formal': 'Indicates what effective period the study covers.', 'representation': None}
    _study_effective_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['study_effective_date_time', 'study_effective_period', 'study_effective_duration', 'study_effective_timing']), True))

#   {'path': 'ResearchElementDefinition.characteristic.participantEffective[x]', 'choice_of_type': 'participantEffective', 'orig_name': 'participantEffectiveDateTime', 'name': 'participantEffectiveDateTime', 'parent_name': 'ResearchElementDefinition.characteristic', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'What time period do participants cover', 'formal': 'Indicates what effective period the study covers.', 'representation': None}
    _participant_effective_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['participant_effective_date_time', 'participant_effective_period', 'participant_effective_duration', 'participant_effective_timing']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["studyEffectiveGroupMeasure"]["enum"]
            enums.clear()
            for item in GroupMeasure:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["participantEffectiveGroupMeasure"]["enum"]
            enums.clear()
            for item in GroupMeasure:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_definition_canonical = get_primitive_field_root_validator("definition_canonical")
    
    _validate_primitive_exclude = get_primitive_field_root_validator("exclude")
    
    _validate_primitive_study_effective_description = get_primitive_field_root_validator("study_effective_description")
    
    _validate_primitive_study_effective_date_time = get_primitive_field_root_validator("study_effective_date_time")
    
    _validate_primitive_study_effective_group_measure = get_primitive_field_root_validator("study_effective_group_measure")
    
    _validate_primitive_participant_effective_description = get_primitive_field_root_validator("participant_effective_description")
    
    _validate_primitive_participant_effective_date_time = get_primitive_field_root_validator("participant_effective_date_time")
    
    _validate_primitive_participant_effective_group_measure = get_primitive_field_root_validator("participant_effective_group_measure")
    


class ResearchStudyArm(BackboneElement):
    """ Defined path through the study for a subject.

    Describes an expected sequence of events for one of the participants of a
    study.  E.g. Exposure to drug A, wash-out, exposure to drug B, wash-out,
    follow-up.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ResearchStudy",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: FHIRRequiredString

    """ Label for study arm.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional["CodeableConcept"]

    """ Categorization of study arm.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Short explanation of study path.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class ResearchStudyObjective(BackboneElement):
    """ A goal for the study.

    A goal that the study is aiming to achieve in terms of a scientific
    question to be answered by the analysis of data collected during the study.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ResearchStudy",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: typing.Optional[FHIRString]

    """ Label for the objective.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional["CodeableConcept"]

    """ primary | secondary | exploratory.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """



    _validate_primitive_name = get_primitive_field_root_validator("name")
    


class RiskAssessmentPrediction(BackboneElement):
    """ Outcome predicted.

    Describes the expected outcome for the subject.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/RiskAssessment",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    outcome: typing.Optional["CodeableConcept"]

    """ Possible outcome for the subject.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    probability_decimal: typing.Optional[decimal.Decimal]

    """ Likelihood of specified outcome.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    probability_decimal__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_probability_decimal`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    probability_range: typing.Optional["Range"]

    """ Likelihood of specified outcome.
    Type `Range` (represented as `dict` in JSON).
    """

    qualitative_risk: typing.Optional["CodeableConcept"]

    """ Likelihood of specified outcome as a qualitative value.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    relative_risk: typing.Optional[decimal.Decimal]

    """ Relative likelihood.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    relative_risk__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_relative_risk`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    when_period: typing.Optional["Period"]

    """ Timeframe or age range.
    Type `Period` (represented as `dict` in JSON).
    """

    when_range: typing.Optional["Range"]

    """ Timeframe or age range.
    Type `Range` (represented as `dict` in JSON).
    """

    rationale: typing.Optional[FHIRString]

    """ Explanation of prediction.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    rationale__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_rationale`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'RiskAssessment.prediction.probability[x]', 'choice_of_type': 'probability', 'orig_name': 'probabilityDecimal', 'name': 'probabilityDecimal', 'parent_name': 'RiskAssessment.prediction', 'class_name': 'decimal.Decimal', 'enum': None, 'module_name': None, 'json_class': 'float', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Likelihood of specified outcome', 'formal': 'Indicates how likely the outcome is (in the specified timeframe).', 'representation': None}
    _probability_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['probability_decimal', 'probability_range']), True))

#   {'path': 'RiskAssessment.prediction.when[x]', 'choice_of_type': 'when', 'orig_name': 'whenPeriod', 'name': 'whenPeriod', 'parent_name': 'RiskAssessment.prediction', 'class_name': 'Period', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Timeframe or age range', 'formal': 'Indicates the period of time or age range of the subject to which the specified probability applies.', 'representation': None}
    _when_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['when_period', 'when_range']), True))

    _validate_primitive_probability_decimal = get_primitive_field_root_validator("probability_decimal")
    
    _validate_primitive_relative_risk = get_primitive_field_root_validator("relative_risk")
    
    _validate_primitive_rationale = get_primitive_field_root_validator("rationale")
    


class RiskEvidenceSynthesisSampleSize(BackboneElement):
    """ What sample size was involved?.

    A description of the size of the sample involved in the synthesis.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/RiskEvidenceSynthesis",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    description: typing.Optional[FHIRString]

    """ Description of sample size.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    number_of_studies: typing.Optional[FHIRInt]

    """ How many studies?.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    number_of_studies__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_number_of_studies`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    number_of_participants: typing.Optional[FHIRInt]

    """ How many participants?.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    number_of_participants__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_number_of_participants`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_number_of_studies = get_primitive_field_root_validator("number_of_studies")
    
    _validate_primitive_number_of_participants = get_primitive_field_root_validator("number_of_participants")
    


class RiskEvidenceSynthesisRiskEstimate(BackboneElement):
    """ What was the estimated risk.

    The estimated risk of the outcome.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/RiskEvidenceSynthesis",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    description: typing.Optional[FHIRString]

    """ Description of risk estimate.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional["CodeableConcept"]

    """ Type of risk estimate.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value: typing.Optional[decimal.Decimal]

    """ Point estimate.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    value__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    unit_of_measure: typing.Optional["CodeableConcept"]

    """ What unit is the outcome described in?.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    denominator_count: typing.Optional[FHIRInt]

    """ Sample size for group measured.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    denominator_count__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_denominator_count`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    numerator_count: typing.Optional[FHIRInt]

    """ Number with the outcome.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    numerator_count__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_numerator_count`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    precision_estimate: typing.Optional[typing.List["RiskEvidenceSynthesisRiskEstimatePrecisionEstimate"]]

    """ How precise the estimate is.
    List of `RiskEvidenceSynthesisRiskEstimatePrecisionEstimate` items (represented as `dict` in JSON).
    """



    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_value = get_primitive_field_root_validator("value")
    
    _validate_primitive_denominator_count = get_primitive_field_root_validator("denominator_count")
    
    _validate_primitive_numerator_count = get_primitive_field_root_validator("numerator_count")
    


class RiskEvidenceSynthesisRiskEstimatePrecisionEstimate(BackboneElement):
    """ How precise the estimate is.

    A description of the precision of the estimate for the effect.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/RiskEvidenceSynthesis",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: typing.Optional["CodeableConcept"]

    """ Type of precision estimate.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    level: typing.Optional[decimal.Decimal]

    """ Level of confidence interval.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    level__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_level`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    from_: typing.Optional[decimal.Decimal]

    """ Lower bound.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    from___extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_from_`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    to: typing.Optional[decimal.Decimal]

    """ Upper bound.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    to__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_to`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_level = get_primitive_field_root_validator("level")
    
    _validate_primitive_from_ = get_primitive_field_root_validator("from_")
    
    _validate_primitive_to = get_primitive_field_root_validator("to")
    


class RiskEvidenceSynthesisCertainty(BackboneElement):
    """ How certain is the risk.

    A description of the certainty of the risk estimate.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/RiskEvidenceSynthesis",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    rating: typing.Optional[typing.List["CodeableConcept"]]

    """ Certainty rating.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Used for footnotes or explanatory notes.
    List of `Annotation` items (represented as `dict` in JSON).
    """

    certainty_subcomponent: typing.Optional[typing.List["RiskEvidenceSynthesisCertaintyCertaintySubcomponent"]]

    """ A component that contributes to the overall certainty.
    List of `RiskEvidenceSynthesisCertaintyCertaintySubcomponent` items (represented as `dict` in JSON).
    """




class RiskEvidenceSynthesisCertaintyCertaintySubcomponent(BackboneElement):
    """ A component that contributes to the overall certainty.

    A description of a component of the overall certainty.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/RiskEvidenceSynthesis",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: typing.Optional["CodeableConcept"]

    """ Type of subcomponent of certainty rating.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    rating: typing.Optional[typing.List["CodeableConcept"]]

    """ Subcomponent certainty rating.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    note: typing.Optional[typing.List["Annotation"]]

    """ Used for footnotes or explanatory notes.
    List of `Annotation` items (represented as `dict` in JSON).
    """




class SearchParameterComponent(BackboneElement):
    """ For Composite resources to define the parts.

    Used to define the parts of a composite search parameter.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SearchParameter",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    definition: FHIRRequiredString

    """ Defines how the part works.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    definition__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_definition`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    expression: FHIRRequiredString

    """ Subexpression relative to main expression.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    expression__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_expression`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_definition = get_primitive_field_root_validator("definition")
    
    _validate_primitive_expression = get_primitive_field_root_validator("expression")
    


class SpecimenCollection(BackboneElement):
    """ Collection details.

    Details concerning the specimen collection.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Specimen",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    collector: typing.Optional["Reference"]

    """ Who collected the specimen.
    Type `Reference` (represented as `dict` in JSON).
    """

    collected_date_time: typing.Optional[FHIRDateTime]

    """ Collection time.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    collected_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_collected_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    collected_period: typing.Optional["Period"]

    """ Collection time.
    Type `Period` (represented as `dict` in JSON).
    """

    duration: typing.Optional["Duration"]

    """ How long it took to collect specimen.
    Type `Duration` (represented as `dict` in JSON).
    """

    quantity: typing.Optional["Quantity"]

    """ The quantity of specimen collected.
    Type `Quantity` (represented as `dict` in JSON).
    """

    method: typing.Optional["CodeableConcept"]

    """ Technique used to perform collection.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    body_site: typing.Optional["CodeableConcept"]

    """ Anatomical collection site.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    fasting_status_codeable_concept: typing.Optional["CodeableConcept"]

    """ Whether or how long patient abstained from food and/or drink.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    fasting_status_duration: typing.Optional["Duration"]

    """ Whether or how long patient abstained from food and/or drink.
    Type `Duration` (represented as `dict` in JSON).
    """



#   {'path': 'Specimen.collection.collected[x]', 'choice_of_type': 'collected', 'orig_name': 'collectedDateTime', 'name': 'collectedDateTime', 'parent_name': 'Specimen.collection', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Collection time', 'formal': 'Time when specimen was collected from subject - the physiologically relevant time.', 'representation': None}
    _collected_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['collected_date_time', 'collected_period']), True))

#   {'path': 'Specimen.collection.fastingStatus[x]', 'choice_of_type': 'fastingStatus', 'orig_name': 'fastingStatusCodeableConcept', 'name': 'fastingStatusCodeableConcept', 'parent_name': 'Specimen.collection', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Whether or how long patient abstained from food and/or drink', 'formal': 'Abstinence or reduction from some or all food, drink, or both, for a period of time prior to sample collection.', 'representation': None}
    _fasting_status_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['fasting_status_codeable_concept', 'fasting_status_duration']), True))

    _validate_primitive_collected_date_time = get_primitive_field_root_validator("collected_date_time")
    


class SpecimenProcessing(BackboneElement):
    """ Processing and processing step details.

    Details concerning processing and processing steps for the specimen.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Specimen",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    description: typing.Optional[FHIRString]

    """ Textual description of procedure.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    procedure: typing.Optional["CodeableConcept"]

    """ Indicates the treatment step  applied to the specimen.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    additive: typing.Optional[typing.List["Reference"]]

    """ Material used in the processing step.
    List of `Reference` items (represented as `dict` in JSON).
    """

    time_date_time: typing.Optional[FHIRDateTime]

    """ Date and time of specimen processing.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    time_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_time_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    time_period: typing.Optional["Period"]

    """ Date and time of specimen processing.
    Type `Period` (represented as `dict` in JSON).
    """



#   {'path': 'Specimen.processing.time[x]', 'choice_of_type': 'time', 'orig_name': 'timeDateTime', 'name': 'timeDateTime', 'parent_name': 'Specimen.processing', 'class_name': 'FHIRDateTime', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Date and time of specimen processing', 'formal': 'A record of the time or period when the specimen processing occurred.  For example the time of sample fixation or the period of time the sample was in formalin.', 'representation': None}
    _time_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['time_date_time', 'time_period']), True))

    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_time_date_time = get_primitive_field_root_validator("time_date_time")
    


class SpecimenContainer(BackboneElement):
    """ Direct container of specimen (tube/slide, etc.).

    The container holding the specimen.  The recursive nature of containers;
    i.e. blood in tube in tray in rack is not addressed here.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Specimen",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[typing.List["Identifier"]]

    """ Id for the container.
    List of `Identifier` items (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Textual description of the container.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional["CodeableConcept"]

    """ Kind of container directly associated with specimen.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    capacity: typing.Optional["Quantity"]

    """ Container volume or size.
    Type `Quantity` (represented as `dict` in JSON).
    """

    specimen_quantity: typing.Optional["Quantity"]

    """ Quantity of specimen within container.
    Type `Quantity` (represented as `dict` in JSON).
    """

    additive_codeable_concept: typing.Optional["CodeableConcept"]

    """ Additive associated with container.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    additive_reference: typing.Optional["Reference"]

    """ Additive associated with container.
    Type `Reference` (represented as `dict` in JSON).
    """



#   {'path': 'Specimen.container.additive[x]', 'choice_of_type': 'additive', 'orig_name': 'additiveCodeableConcept', 'name': 'additiveCodeableConcept', 'parent_name': 'Specimen.container', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Additive associated with container', 'formal': 'Introduced substance to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.', 'representation': None}
    _additive_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['additive_codeable_concept', 'additive_reference']), True))

    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class SpecimenDefinitionTypeTested(BackboneElement):
    """ Specimen in container intended for testing by lab.

    Specimen conditioned in a container as expected by the testing laboratory.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SpecimenDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    is_derived: typing.Optional[bool]

    """ Primary or secondary specimen.
    Type `bool`. Is a JSON Primitive element.
    """
    

    is_derived__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_is_derived`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional["CodeableConcept"]

    """ Type of intended specimen.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

            
    
    
    preference: "SpecimenContainedPreference"

    """ preferred | alternate.
    Type `SpecimenContainedPreference` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    preference__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_preference`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    container: typing.Optional["SpecimenDefinitionTypeTestedContainer"]

    """ The specimen's container.
    Type `SpecimenDefinitionTypeTestedContainer` (represented as `dict` in JSON).
    """

    requirement: typing.Optional[FHIRString]

    """ Specimen requirements.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    requirement__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_requirement`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    retention_time: typing.Optional["Duration"]

    """ Specimen retention time.
    Type `Duration` (represented as `dict` in JSON).
    """

    rejection_criterion: typing.Optional[typing.List["CodeableConcept"]]

    """ Rejection criterion.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    handling: typing.Optional[typing.List["SpecimenDefinitionTypeTestedHandling"]]

    """ Specimen handling before testing.
    List of `SpecimenDefinitionTypeTestedHandling` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["preference"]["enum"]
            enums.clear()
            for item in SpecimenContainedPreference:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_is_derived = get_primitive_field_root_validator("is_derived")
    
    _validate_primitive_preference = get_primitive_field_root_validator("preference")
    
    _validate_primitive_requirement = get_primitive_field_root_validator("requirement")
    


class SpecimenDefinitionTypeTestedContainer(BackboneElement):
    """ The specimen's container.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SpecimenDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    material: typing.Optional["CodeableConcept"]

    """ Container material.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    type: typing.Optional["CodeableConcept"]

    """ Kind of container associated with the kind of specimen.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    cap: typing.Optional["CodeableConcept"]

    """ Color of container cap.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    description: typing.Optional[FHIRString]

    """ Container description.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    capacity: typing.Optional["Quantity"]

    """ Container capacity.
    Type `Quantity` (represented as `dict` in JSON).
    """

    minimum_volume_quantity: typing.Optional["Quantity"]

    """ Minimum volume.
    Type `Quantity` (represented as `dict` in JSON).
    """

    minimum_volume_string: typing.Optional[FHIRString]

    """ Minimum volume.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    minimum_volume_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_minimum_volume_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    additive: typing.Optional[typing.List["SpecimenDefinitionTypeTestedContainerAdditive"]]

    """ Additive associated with container.
    List of `SpecimenDefinitionTypeTestedContainerAdditive` items (represented as `dict` in JSON).
    """

    preparation: typing.Optional[FHIRString]

    """ Specimen container preparation.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    preparation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_preparation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'SpecimenDefinition.typeTested.container.minimumVolume[x]', 'choice_of_type': 'minimumVolume', 'orig_name': 'minimumVolumeQuantity', 'name': 'minimumVolumeQuantity', 'parent_name': 'SpecimenDefinition.typeTested.container', 'class_name': 'Quantity', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Minimum volume', 'formal': 'The minimum volume to be conditioned in the container.', 'representation': None}
    _minimum_volume_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['minimum_volume_quantity', 'minimum_volume_string']), True))

    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_minimum_volume_string = get_primitive_field_root_validator("minimum_volume_string")
    
    _validate_primitive_preparation = get_primitive_field_root_validator("preparation")
    


class SpecimenDefinitionTypeTestedContainerAdditive(BackboneElement):
    """ Additive associated with container.

    Substance introduced in the kind of container to preserve, maintain or
    enhance the specimen. Examples: Formalin, Citrate, EDTA.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SpecimenDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    additive_codeable_concept: typing.Optional["CodeableConcept"]

    """ Additive associated with container.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    additive_reference: typing.Optional["Reference"]

    """ Additive associated with container.
    Type `Reference` (represented as `dict` in JSON).
    """



#   {'path': 'SpecimenDefinition.typeTested.container.additive.additive[x]', 'choice_of_type': 'additive', 'orig_name': 'additiveCodeableConcept', 'name': 'additiveCodeableConcept', 'parent_name': 'SpecimenDefinition.typeTested.container.additive', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Additive associated with container', 'formal': 'Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.', 'representation': None}
    _additive_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['additive_codeable_concept', 'additive_reference']), False))


class SpecimenDefinitionTypeTestedHandling(BackboneElement):
    """ Specimen handling before testing.

    Set of instructions for preservation/transport of the specimen at a defined
    temperature interval, prior the testing process.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SpecimenDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    temperature_qualifier: typing.Optional["CodeableConcept"]

    """ Temperature qualifier.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    temperature_range: typing.Optional["Range"]

    """ Temperature range.
    Type `Range` (represented as `dict` in JSON).
    """

    max_duration: typing.Optional["Duration"]

    """ Maximum preservation time.
    Type `Duration` (represented as `dict` in JSON).
    """

    instruction: typing.Optional[FHIRString]

    """ Preservation instruction.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    instruction__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_instruction`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_instruction = get_primitive_field_root_validator("instruction")
    


class StructureDefinitionMapping(BackboneElement):
    """ External specification that the content is mapped to.

    An external specification that the content is mapped to.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/StructureDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identity: FHIRId

    """ Internal id when this mapping is used.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    identity__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_identity`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    uri: typing.Optional[FHIRString]

    """ Identifies what this mapping refers to.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    name: typing.Optional[FHIRString]

    """ Names what this mapping refers to.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    comment: typing.Optional[FHIRString]

    """ Versions, Issues, Scope limitations etc..
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    comment__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_comment`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_identity = get_primitive_field_root_validator("identity")
    
    _validate_primitive_uri = get_primitive_field_root_validator("uri")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_comment = get_primitive_field_root_validator("comment")
    


class StructureDefinitionContext(BackboneElement):
    """ If an extension, where it can be used in instances.

    Identifies the types of resource or data type elements to which the
    extension can be applied.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/StructureDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    type: "ExtensionContextType"

    """ fhirpath | element | extension.
    Type `ExtensionContextType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    expression: FHIRRequiredString

    """ Where the extension can be used in instances.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    expression__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_expression`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in ExtensionContextType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_expression = get_primitive_field_root_validator("expression")
    


class StructureDefinitionSnapshot(BackboneElement):
    """ Snapshot view of the structure.

    A snapshot view is expressed in a standalone form that can be used and
    interpreted without considering the base StructureDefinition.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/StructureDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    element: typing.List["ElementDefinition"]

    """ Definition of elements in the resource (if no StructureDefinition).
    List of `ElementDefinition` items (represented as `dict` in JSON).
    """




class StructureDefinitionDifferential(BackboneElement):
    """ Differential view of the structure.

    A differential view is expressed relative to the base StructureDefinition -
    a statement of differences that it applies.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/StructureDefinition",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    element: typing.List["ElementDefinition"]

    """ Definition of elements in the resource (if no StructureDefinition).
    List of `ElementDefinition` items (represented as `dict` in JSON).
    """




class StructureMapStructure(BackboneElement):
    """ Structure Definition used by this map.

    A structure definition used by this map. The structure definition may
    describe instances that are converted, or the instances that are produced.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/StructureMap",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: FHIRRequiredString

    """ Canonical reference to structure definition.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    mode: "StructureMapModelMode"

    """ source | queried | target | produced.
    Type `StructureMapModelMode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    mode__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_mode`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    alias: typing.Optional[FHIRString]

    """ Name for type in this map.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    alias__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_alias`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    documentation: typing.Optional[FHIRString]

    """ Documentation on use of structure.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    documentation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_documentation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["mode"]["enum"]
            enums.clear()
            for item in StructureMapModelMode:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_mode = get_primitive_field_root_validator("mode")
    
    _validate_primitive_alias = get_primitive_field_root_validator("alias")
    
    _validate_primitive_documentation = get_primitive_field_root_validator("documentation")
    


class StructureMapGroup(BackboneElement):
    """ Named sections for reader convenience.

    Organizes the mapping into manageable chunks for human review/ease of
    maintenance.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/StructureMap",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: FHIRId

    """ Human-readable label.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    extends: typing.Optional[FHIRId]

    """ Another group that this group adds rules to.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    extends__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_extends`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    type_mode: "StructureMapGroupTypeMode"

    """ none | types | type-and-types.
    Type `StructureMapGroupTypeMode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type_mode__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type_mode`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    documentation: typing.Optional[FHIRString]

    """ Additional description/explanation for group.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    documentation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_documentation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    input: typing.List["StructureMapGroupInput"]

    """ Named instance provided when invoking the map.
    List of `StructureMapGroupInput` items (represented as `dict` in JSON).
    """

    rule: typing.List["StructureMapGroupRule"]

    """ Transform Rule from source to target.
    List of `StructureMapGroupRule` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["typeMode"]["enum"]
            enums.clear()
            for item in StructureMapGroupTypeMode:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_extends = get_primitive_field_root_validator("extends")
    
    _validate_primitive_type_mode = get_primitive_field_root_validator("type_mode")
    
    _validate_primitive_documentation = get_primitive_field_root_validator("documentation")
    


class StructureMapGroupInput(BackboneElement):
    """ Named instance provided when invoking the map.

    A name assigned to an instance of data. The instance must be provided when
    the mapping is invoked.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/StructureMap",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: FHIRId

    """ Name for this instance of data.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional[FHIRString]

    """ Type for this instance of data.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    mode: "StructureMapInputMode"

    """ source | target.
    Type `StructureMapInputMode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    mode__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_mode`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    documentation: typing.Optional[FHIRString]

    """ Documentation for this instance of data.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    documentation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_documentation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["mode"]["enum"]
            enums.clear()
            for item in StructureMapInputMode:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_mode = get_primitive_field_root_validator("mode")
    
    _validate_primitive_documentation = get_primitive_field_root_validator("documentation")
    


class StructureMapGroupRule(BackboneElement):
    """ Transform Rule from source to target.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/StructureMap",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: FHIRId

    """ Name of the rule for internal references.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    source: typing.List["StructureMapGroupRuleSource"]

    """ Source inputs to the mapping.
    List of `StructureMapGroupRuleSource` items (represented as `dict` in JSON).
    """

    target: typing.Optional[typing.List["StructureMapGroupRuleTarget"]]

    """ Content to create because of this mapping rule.
    List of `StructureMapGroupRuleTarget` items (represented as `dict` in JSON).
    """

    rule: typing.Optional[typing.List["StructureMapGroupRule"]]

    """ Rules contained in this rule.
    List of `StructureMapGroupRule` items (represented as `dict` in JSON).
    """

    dependent: typing.Optional[typing.List["StructureMapGroupRuleDependent"]]

    """ Which other rules to apply in the context of this rule.
    List of `StructureMapGroupRuleDependent` items (represented as `dict` in JSON).
    """

    documentation: typing.Optional[FHIRString]

    """ Documentation for this instance of data.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    documentation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_documentation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_documentation = get_primitive_field_root_validator("documentation")
    


class StructureMapGroupRuleSource(BackboneElement):
    """ Source inputs to the mapping.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/StructureMap",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    context: FHIRId

    """ Type or variable this rule applies to.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    context__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_context`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    min: typing.Optional[FHIRInt]

    """ Specified minimum cardinality.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    min__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_min`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    max: typing.Optional[FHIRString]

    """ Specified maximum cardinality (number or *).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    max__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_max`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional[FHIRString]

    """ Rule only applies if source has this type.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_base64_binary: typing.Optional[FHIRBase64Binary]

    """ Default value if no value exists.
    Type `FHIRBase64Binary` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_base64_binary__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_base64_binary`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_boolean: typing.Optional[bool]

    """ Default value if no value exists.
    Type `bool`. Is a JSON Primitive element.
    """
    

    default_value_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_canonical: typing.Optional[FHIRString]

    """ Default value if no value exists.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_canonical__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_code: typing.Optional[FHIRCode]

    """ Default value if no value exists.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_date: typing.Optional[FHIRDate]

    """ Default value if no value exists.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_date_time: typing.Optional[FHIRDateTime]

    """ Default value if no value exists.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_decimal: typing.Optional[decimal.Decimal]

    """ Default value if no value exists.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    default_value_decimal__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_decimal`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_id: typing.Optional[FHIRId]

    """ Default value if no value exists.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_instant: typing.Optional[FHIRInstant]

    """ Default value if no value exists.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_instant__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_instant`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_integer: typing.Optional[FHIRInt]

    """ Default value if no value exists.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_integer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_integer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_markdown: typing.Optional[FHIRString]

    """ Default value if no value exists.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_markdown__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_markdown`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_oid: typing.Optional[FHIROid]

    """ Default value if no value exists.
    Type `FHIROid` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_oid__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_oid`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_positive_int: typing.Optional[FHIRPositiveInt]

    """ Default value if no value exists.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    default_value_positive_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_positive_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_string: typing.Optional[FHIRString]

    """ Default value if no value exists.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_time: typing.Optional[FHIRTime]

    """ Default value if no value exists.
    Type `FHIRTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_unsigned_int: typing.Optional[FHIRUnsignedInt]

    """ Default value if no value exists.
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_unsigned_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_unsigned_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_uri: typing.Optional[FHIRString]

    """ Default value if no value exists.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_url: typing.Optional[FHIRString]

    """ Default value if no value exists.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_uuid: typing.Optional[FHIRString]

    """ Default value if no value exists.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value_uuid__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value_uuid`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value_address: typing.Optional["Address"]

    """ Default value if no value exists.
    Type `Address` (represented as `dict` in JSON).
    """

    default_value_age: typing.Optional["Age"]

    """ Default value if no value exists.
    Type `Age` (represented as `dict` in JSON).
    """

    default_value_annotation: typing.Optional["Annotation"]

    """ Default value if no value exists.
    Type `Annotation` (represented as `dict` in JSON).
    """

    default_value_attachment: typing.Optional["Attachment"]

    """ Default value if no value exists.
    Type `Attachment` (represented as `dict` in JSON).
    """

    default_value_codeable_concept: typing.Optional["CodeableConcept"]

    """ Default value if no value exists.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    default_value_coding: typing.Optional["Coding"]

    """ Default value if no value exists.
    Type `Coding` (represented as `dict` in JSON).
    """

    default_value_contact_point: typing.Optional["ContactPoint"]

    """ Default value if no value exists.
    Type `ContactPoint` (represented as `dict` in JSON).
    """

    default_value_count: typing.Optional["Count"]

    """ Default value if no value exists.
    Type `Count` (represented as `dict` in JSON).
    """

    default_value_distance: typing.Optional["Distance"]

    """ Default value if no value exists.
    Type `Distance` (represented as `dict` in JSON).
    """

    default_value_duration: typing.Optional["Duration"]

    """ Default value if no value exists.
    Type `Duration` (represented as `dict` in JSON).
    """

    default_value_human_name: typing.Optional["HumanName"]

    """ Default value if no value exists.
    Type `HumanName` (represented as `dict` in JSON).
    """

    default_value_identifier: typing.Optional["Identifier"]

    """ Default value if no value exists.
    Type `Identifier` (represented as `dict` in JSON).
    """

    default_value_money: typing.Optional["Money"]

    """ Default value if no value exists.
    Type `Money` (represented as `dict` in JSON).
    """

    default_value_period: typing.Optional["Period"]

    """ Default value if no value exists.
    Type `Period` (represented as `dict` in JSON).
    """

    default_value_quantity: typing.Optional["Quantity"]

    """ Default value if no value exists.
    Type `Quantity` (represented as `dict` in JSON).
    """

    default_value_range: typing.Optional["Range"]

    """ Default value if no value exists.
    Type `Range` (represented as `dict` in JSON).
    """

    default_value_ratio: typing.Optional["Ratio"]

    """ Default value if no value exists.
    Type `Ratio` (represented as `dict` in JSON).
    """

    default_value_reference: typing.Optional["Reference"]

    """ Default value if no value exists.
    Type `Reference` (represented as `dict` in JSON).
    """

    default_value_sampled_data: typing.Optional["SampledData"]

    """ Default value if no value exists.
    Type `SampledData` (represented as `dict` in JSON).
    """

    default_value_signature: typing.Optional["Signature"]

    """ Default value if no value exists.
    Type `Signature` (represented as `dict` in JSON).
    """

    default_value_timing: typing.Optional["Timing"]

    """ Default value if no value exists.
    Type `Timing` (represented as `dict` in JSON).
    """

    default_value_contact_detail: typing.Optional["ContactDetail"]

    """ Default value if no value exists.
    Type `ContactDetail` (represented as `dict` in JSON).
    """

    default_value_contributor: typing.Optional["Contributor"]

    """ Default value if no value exists.
    Type `Contributor` (represented as `dict` in JSON).
    """

    default_value_data_requirement: typing.Optional["DataRequirement"]

    """ Default value if no value exists.
    Type `DataRequirement` (represented as `dict` in JSON).
    """

    default_value_expression: typing.Optional["Expression"]

    """ Default value if no value exists.
    Type `Expression` (represented as `dict` in JSON).
    """

    default_value_parameter_definition: typing.Optional["ParameterDefinition"]

    """ Default value if no value exists.
    Type `ParameterDefinition` (represented as `dict` in JSON).
    """

    default_value_related_artifact: typing.Optional["RelatedArtifact"]

    """ Default value if no value exists.
    Type `RelatedArtifact` (represented as `dict` in JSON).
    """

    default_value_trigger_definition: typing.Optional["TriggerDefinition"]

    """ Default value if no value exists.
    Type `TriggerDefinition` (represented as `dict` in JSON).
    """

    default_value_usage_context: typing.Optional["UsageContext"]

    """ Default value if no value exists.
    Type `UsageContext` (represented as `dict` in JSON).
    """

    default_value_dosage: typing.Optional["Dosage"]

    """ Default value if no value exists.
    Type `Dosage` (represented as `dict` in JSON).
    """

    default_value_meta: typing.Optional["Meta"]

    """ Default value if no value exists.
    Type `Meta` (represented as `dict` in JSON).
    """

    element: typing.Optional[FHIRString]

    """ Optional field for this source.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    element__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_element`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    list_mode: typing.Optional["StructureMapSourceListMode"]

    """ first | not_first | last | not_last | only_one.
    Type `StructureMapSourceListMode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    list_mode__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_list_mode`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    variable: typing.Optional[FHIRId]

    """ Named context for field, if a field is specified.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    variable__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_variable`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    condition: typing.Optional[FHIRString]

    """ FHIRPath expression  - must be true or the rule does not apply.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    condition__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_condition`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    check: typing.Optional[FHIRString]

    """ FHIRPath expression  - must be true or the mapping engine throws an
        error instead of completing.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    check__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_check`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    log_message: typing.Optional[FHIRString]

    """ Message to put in log if source exists (FHIRPath).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    log_message__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_log_message`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'StructureMap.group.rule.source.defaultValue[x]', 'choice_of_type': 'defaultValue', 'orig_name': 'defaultValueBase64Binary', 'name': 'defaultValueBase64Binary', 'parent_name': 'StructureMap.group.rule.source', 'class_name': 'FHIRBase64Binary', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Default value if no value exists', 'formal': 'A value to use if there is no existing value in the source object.', 'representation': None}
    _default_value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['default_value_base64_binary', 'default_value_boolean', 'default_value_canonical', 'default_value_code', 'default_value_date', 'default_value_date_time', 'default_value_decimal', 'default_value_id', 'default_value_instant', 'default_value_integer', 'default_value_markdown', 'default_value_oid', 'default_value_positive_int', 'default_value_string', 'default_value_time', 'default_value_unsigned_int', 'default_value_uri', 'default_value_url', 'default_value_uuid', 'default_value_address', 'default_value_age', 'default_value_annotation', 'default_value_attachment', 'default_value_codeable_concept', 'default_value_coding', 'default_value_contact_point', 'default_value_count', 'default_value_distance', 'default_value_duration', 'default_value_human_name', 'default_value_identifier', 'default_value_money', 'default_value_period', 'default_value_quantity', 'default_value_range', 'default_value_ratio', 'default_value_reference', 'default_value_sampled_data', 'default_value_signature', 'default_value_timing', 'default_value_contact_detail', 'default_value_contributor', 'default_value_data_requirement', 'default_value_expression', 'default_value_parameter_definition', 'default_value_related_artifact', 'default_value_trigger_definition', 'default_value_usage_context', 'default_value_dosage', 'default_value_meta']), True))

    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["listMode"]["enum"]
            enums.clear()
            for item in StructureMapSourceListMode:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_context = get_primitive_field_root_validator("context")
    
    _validate_primitive_min = get_primitive_field_root_validator("min")
    
    _validate_primitive_max = get_primitive_field_root_validator("max")
    
    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_default_value_base64_binary = get_primitive_field_root_validator("default_value_base64_binary")
    
    _validate_primitive_default_value_boolean = get_primitive_field_root_validator("default_value_boolean")
    
    _validate_primitive_default_value_canonical = get_primitive_field_root_validator("default_value_canonical")
    
    _validate_primitive_default_value_code = get_primitive_field_root_validator("default_value_code")
    
    _validate_primitive_default_value_date = get_primitive_field_root_validator("default_value_date")
    
    _validate_primitive_default_value_date_time = get_primitive_field_root_validator("default_value_date_time")
    
    _validate_primitive_default_value_decimal = get_primitive_field_root_validator("default_value_decimal")
    
    _validate_primitive_default_value_id = get_primitive_field_root_validator("default_value_id")
    
    _validate_primitive_default_value_instant = get_primitive_field_root_validator("default_value_instant")
    
    _validate_primitive_default_value_integer = get_primitive_field_root_validator("default_value_integer")
    
    _validate_primitive_default_value_markdown = get_primitive_field_root_validator("default_value_markdown")
    
    _validate_primitive_default_value_oid = get_primitive_field_root_validator("default_value_oid")
    
    _validate_primitive_default_value_positive_int = get_primitive_field_root_validator("default_value_positive_int")
    
    _validate_primitive_default_value_string = get_primitive_field_root_validator("default_value_string")
    
    _validate_primitive_default_value_time = get_primitive_field_root_validator("default_value_time")
    
    _validate_primitive_default_value_unsigned_int = get_primitive_field_root_validator("default_value_unsigned_int")
    
    _validate_primitive_default_value_uri = get_primitive_field_root_validator("default_value_uri")
    
    _validate_primitive_default_value_url = get_primitive_field_root_validator("default_value_url")
    
    _validate_primitive_default_value_uuid = get_primitive_field_root_validator("default_value_uuid")
    
    _validate_primitive_element = get_primitive_field_root_validator("element")
    
    _validate_primitive_list_mode = get_primitive_field_root_validator("list_mode")
    
    _validate_primitive_variable = get_primitive_field_root_validator("variable")
    
    _validate_primitive_condition = get_primitive_field_root_validator("condition")
    
    _validate_primitive_check = get_primitive_field_root_validator("check")
    
    _validate_primitive_log_message = get_primitive_field_root_validator("log_message")
    


class StructureMapGroupRuleTarget(BackboneElement):
    """ Content to create because of this mapping rule.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/StructureMap",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    context: typing.Optional[FHIRId]

    """ Type or variable this rule applies to.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    context__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_context`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    context_type: typing.Optional["StructureMapContextType"]

    """ type | variable.
    Type `StructureMapContextType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    context_type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_context_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    element: typing.Optional[FHIRString]

    """ Field to create in the context.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    element__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_element`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    variable: typing.Optional[FHIRId]

    """ Named context for field, if desired, and a field is specified.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    variable__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_variable`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    list_mode: typing.Optional[typing.List[typing.Optional["StructureMapTargetListMode"]]]

    """ first | share | last | collate.
    List of `StructureMapTargetListMode` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    list_mode__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_list_mode`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    list_rule_id: typing.Optional[FHIRId]

    """ Internal rule reference for shared list items.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    list_rule_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_list_rule_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    transform: typing.Optional["StructureMapTransform"]

    """ create | copy +.
    Type `StructureMapTransform` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    transform__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_transform`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    parameter: typing.Optional[typing.List["StructureMapGroupRuleTargetParameter"]]

    """ Parameters to the transform.
    List of `StructureMapGroupRuleTargetParameter` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["contextType"]["enum"]
            enums.clear()
            for item in StructureMapContextType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["listMode"]["enum"]
            enums.clear()
            for item in StructureMapTargetListMode:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["transform"]["enum"]
            enums.clear()
            for item in StructureMapTransform:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_context = get_primitive_field_root_validator("context")
    
    _validate_primitive_context_type = get_primitive_field_root_validator("context_type")
    
    _validate_primitive_element = get_primitive_field_root_validator("element")
    
    _validate_primitive_variable = get_primitive_field_root_validator("variable")
    
    _validate_primitive_list_mode = get_primitive_field_root_validator("list_mode")
    
    _validate_primitive_list_rule_id = get_primitive_field_root_validator("list_rule_id")
    
    _validate_primitive_transform = get_primitive_field_root_validator("transform")
    


class StructureMapGroupRuleTargetParameter(BackboneElement):
    """ Parameters to the transform.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/StructureMap",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    value_id: typing.Optional[FHIRId]

    """ Parameter value - variable or literal.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_string: typing.Optional[FHIRString]

    """ Parameter value - variable or literal.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_boolean: typing.Optional[bool]

    """ Parameter value - variable or literal.
    Type `bool`. Is a JSON Primitive element.
    """
    

    value_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_integer: typing.Optional[FHIRInt]

    """ Parameter value - variable or literal.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_integer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_integer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_decimal: typing.Optional[decimal.Decimal]

    """ Parameter value - variable or literal.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    value_decimal__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_decimal`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'StructureMap.group.rule.target.parameter.value[x]', 'choice_of_type': 'value', 'orig_name': 'valueId', 'name': 'valueId', 'parent_name': 'StructureMap.group.rule.target.parameter', 'class_name': 'FHIRId', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Parameter value - variable or literal', 'formal': None, 'representation': None}
    _value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['value_id', 'value_string', 'value_boolean', 'value_integer', 'value_decimal']), False))

    _validate_primitive_value_id = get_primitive_field_root_validator("value_id")
    
    _validate_primitive_value_string = get_primitive_field_root_validator("value_string")
    
    _validate_primitive_value_boolean = get_primitive_field_root_validator("value_boolean")
    
    _validate_primitive_value_integer = get_primitive_field_root_validator("value_integer")
    
    _validate_primitive_value_decimal = get_primitive_field_root_validator("value_decimal")
    


class StructureMapGroupRuleDependent(BackboneElement):
    """ Which other rules to apply in the context of this rule.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/StructureMap",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: FHIRId

    """ Name of a rule or group to apply.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    variable: typing.List[typing.Optional[FHIRRequiredString]]

    """ Variable to pass to the rule or group.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    variable__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_variable`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_variable = get_primitive_field_root_validator("variable")
    


class SubscriptionChannel(BackboneElement):
    """ The channel on which to report matches to the criteria.

    Details where to send notifications when resources are received that meet
    the criteria.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Subscription",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    type: "SubscriptionChannelType"

    """ rest-hook | websocket | email | sms | message.
    Type `SubscriptionChannelType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    endpoint: typing.Optional[FHIRString]

    """ Where the channel points to.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    endpoint__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_endpoint`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    
    
    payload: typing.Optional["FHIRCode"]

    """ MIME type to send, or omit for no payload.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    payload__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_payload`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    header: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Usage depends on the channel type.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    header__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_header`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in SubscriptionChannelType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_endpoint = get_primitive_field_root_validator("endpoint")
    
    _validate_primitive_payload = get_primitive_field_root_validator("payload")
    
    _validate_primitive_header = get_primitive_field_root_validator("header")
    


class SubstanceInstance(BackboneElement):
    """ If this describes a specific package/container of the substance.

    Substance may be used to describe a kind of substance, or a specific
    package/container of the substance: an instance.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Substance",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional["Identifier"]

    """ Identifier of the package/container.
    Type `Identifier` (represented as `dict` in JSON).
    """

    expiry: typing.Optional[FHIRDateTime]

    """ When no longer valid to use.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    expiry__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_expiry`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    quantity: typing.Optional["Quantity"]

    """ Amount of substance in the package.
    Type `Quantity` (represented as `dict` in JSON).
    """



    _validate_primitive_expiry = get_primitive_field_root_validator("expiry")
    


class SubstanceIngredient(BackboneElement):
    """ Composition information about the substance.

    A substance can be composed of other substances.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Substance",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    quantity: typing.Optional["Ratio"]

    """ Optional amount (concentration).
    Type `Ratio` (represented as `dict` in JSON).
    """

    substance_codeable_concept: typing.Optional["CodeableConcept"]

    """ A component of the substance.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    substance_reference: typing.Optional["Reference"]

    """ A component of the substance.
    Type `Reference` (represented as `dict` in JSON).
    """



#   {'path': 'Substance.ingredient.substance[x]', 'choice_of_type': 'substance', 'orig_name': 'substanceCodeableConcept', 'name': 'substanceCodeableConcept', 'parent_name': 'Substance.ingredient', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'A component of the substance', 'formal': 'Another substance that is a component of this substance.', 'representation': None}
    _substance_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['substance_codeable_concept', 'substance_reference']), False))


class SubstanceNucleicAcidSubunit(BackboneElement):
    """ Subunits are listed in order of decreasing length; sequences of the same
    length will be ordered by molecular weight; subunits that have identical
    sequences will be repeated multiple times.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceNucleicAcid",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    subunit: typing.Optional[FHIRInt]

    """ Index of linear sequences of nucleic acids in order of decreasing
        length. Sequences of the same length will be ordered by molecular
        weight. Subunits that have identical sequences will be repeated and
        have sequential subscripts.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    subunit__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_subunit`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    sequence: typing.Optional[FHIRString]

    """ Actual nucleotide sequence notation from 5' to 3' end using
        standard single letter codes. In addition to the base sequence,
        sugar and type of phosphate or non-phosphate linkage should also be
        captured.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    length: typing.Optional[FHIRInt]

    """ The length of the sequence shall be captured.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    length__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_length`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    sequence_attachment: typing.Optional["Attachment"]

    """ (TBC).
    Type `Attachment` (represented as `dict` in JSON).
    """

    five_prime: typing.Optional["CodeableConcept"]

    """ The nucleotide present at the 5’ terminal shall be specified based
        on a controlled vocabulary. Since the sequence is represented from
        the 5' to the 3' end, the 5’ prime nucleotide is the letter at the
        first position in the sequence. A separate representation would be
        redundant.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    three_prime: typing.Optional["CodeableConcept"]

    """ The nucleotide present at the 3’ terminal shall be specified based
        on a controlled vocabulary. Since the sequence is represented from
        the 5' to the 3' end, the 5’ prime nucleotide is the letter at the
        last position in the sequence. A separate representation would be
        redundant.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    linkage: typing.Optional[typing.List["SubstanceNucleicAcidSubunitLinkage"]]

    """ The linkages between sugar residues will also be captured.
    List of `SubstanceNucleicAcidSubunitLinkage` items (represented as `dict` in JSON).
    """

    sugar: typing.Optional[typing.List["SubstanceNucleicAcidSubunitSugar"]]

    """ 5.3.6.8.1 Sugar ID (Mandatory).
    List of `SubstanceNucleicAcidSubunitSugar` items (represented as `dict` in JSON).
    """



    _validate_primitive_subunit = get_primitive_field_root_validator("subunit")
    
    _validate_primitive_sequence = get_primitive_field_root_validator("sequence")
    
    _validate_primitive_length = get_primitive_field_root_validator("length")
    


class SubstanceNucleicAcidSubunitLinkage(BackboneElement):
    """ The linkages between sugar residues will also be captured.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceNucleicAcid",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    connectivity: typing.Optional[FHIRString]

    """ The entity that links the sugar residues together should also be
        captured for nearly all naturally occurring nucleic acid the
        linkage is a phosphate group. For many synthetic oligonucleotides
        phosphorothioate linkages are often seen. Linkage connectivity is
        assumed to be 3’-5’. If the linkage is either 3’-3’ or 5’-5’ this
        should be specified.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    connectivity__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_connectivity`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    identifier: typing.Optional["Identifier"]

    """ Each linkage will be registered as a fragment and have an ID.
    Type `Identifier` (represented as `dict` in JSON).
    """

    name: typing.Optional[FHIRString]

    """ Each linkage will be registered as a fragment and have at least one
        name. A single name shall be assigned to each linkage.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    residue_site: typing.Optional[FHIRString]

    """ Residues shall be captured as described in 5.3.6.8.3.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    residue_site__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_residue_site`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_connectivity = get_primitive_field_root_validator("connectivity")
    
    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_residue_site = get_primitive_field_root_validator("residue_site")
    


class SubstanceNucleicAcidSubunitSugar(BackboneElement):
    """ 5.3.6.8.1 Sugar ID (Mandatory).
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceNucleicAcid",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional["Identifier"]

    """ The Substance ID of the sugar or sugar-like component that make up
        the nucleotide.
    Type `Identifier` (represented as `dict` in JSON).
    """

    name: typing.Optional[FHIRString]

    """ The name of the sugar or sugar-like component that make up the
        nucleotide.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    residue_site: typing.Optional[FHIRString]

    """ The residues that contain a given sugar will be captured. The order
        of given residues will be captured in the 5‘-3‘direction consistent
        with the base sequences listed above.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    residue_site__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_residue_site`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_residue_site = get_primitive_field_root_validator("residue_site")
    


class SubstancePolymerMonomerSet(BackboneElement):
    """ Todo.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstancePolymer",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    ratio_type: typing.Optional["CodeableConcept"]

    """ Todo.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    starting_material: typing.Optional[typing.List["SubstancePolymerMonomerSetStartingMaterial"]]

    """ Todo.
    List of `SubstancePolymerMonomerSetStartingMaterial` items (represented as `dict` in JSON).
    """




class SubstancePolymerMonomerSetStartingMaterial(BackboneElement):
    """ Todo.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstancePolymer",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    material: typing.Optional["CodeableConcept"]

    """ Todo.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    type: typing.Optional["CodeableConcept"]

    """ Todo.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    is_defining: typing.Optional[bool]

    """ Todo.
    Type `bool`. Is a JSON Primitive element.
    """
    

    is_defining__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_is_defining`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    amount: typing.Optional["SubstanceAmount"]

    """ Todo.
    Type `SubstanceAmount` (represented as `dict` in JSON).
    """



    _validate_primitive_is_defining = get_primitive_field_root_validator("is_defining")
    


class SubstancePolymerRepeat(BackboneElement):
    """ Todo.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstancePolymer",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    number_of_units: typing.Optional[FHIRInt]

    """ Todo.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    number_of_units__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_number_of_units`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    average_molecular_formula: typing.Optional[FHIRString]

    """ Todo.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    average_molecular_formula__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_average_molecular_formula`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    repeat_unit_amount_type: typing.Optional["CodeableConcept"]

    """ Todo.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    repeat_unit: typing.Optional[typing.List["SubstancePolymerRepeatRepeatUnit"]]

    """ Todo.
    List of `SubstancePolymerRepeatRepeatUnit` items (represented as `dict` in JSON).
    """



    _validate_primitive_number_of_units = get_primitive_field_root_validator("number_of_units")
    
    _validate_primitive_average_molecular_formula = get_primitive_field_root_validator("average_molecular_formula")
    


class SubstancePolymerRepeatRepeatUnit(BackboneElement):
    """ Todo.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstancePolymer",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    orientation_of_polymerisation: typing.Optional["CodeableConcept"]

    """ Todo.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    repeat_unit: typing.Optional[FHIRString]

    """ Todo.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    repeat_unit__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_repeat_unit`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    amount: typing.Optional["SubstanceAmount"]

    """ Todo.
    Type `SubstanceAmount` (represented as `dict` in JSON).
    """

    degree_of_polymerisation: typing.Optional[typing.List["SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation"]]

    """ Todo.
    List of `SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation` items (represented as `dict` in JSON).
    """

    structural_representation: typing.Optional[typing.List["SubstancePolymerRepeatRepeatUnitStructuralRepresentation"]]

    """ Todo.
    List of `SubstancePolymerRepeatRepeatUnitStructuralRepresentation` items (represented as `dict` in JSON).
    """



    _validate_primitive_repeat_unit = get_primitive_field_root_validator("repeat_unit")
    


class SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(BackboneElement):
    """ Todo.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstancePolymer",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    degree: typing.Optional["CodeableConcept"]

    """ Todo.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    amount: typing.Optional["SubstanceAmount"]

    """ Todo.
    Type `SubstanceAmount` (represented as `dict` in JSON).
    """




class SubstancePolymerRepeatRepeatUnitStructuralRepresentation(BackboneElement):
    """ Todo.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstancePolymer",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: typing.Optional["CodeableConcept"]

    """ Todo.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    representation: typing.Optional[FHIRString]

    """ Todo.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    representation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_representation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    attachment: typing.Optional["Attachment"]

    """ Todo.
    Type `Attachment` (represented as `dict` in JSON).
    """



    _validate_primitive_representation = get_primitive_field_root_validator("representation")
    


class SubstanceProteinSubunit(BackboneElement):
    """ This subclause refers to the description of each subunit constituting the
    SubstanceProtein. A subunit is a linear sequence of amino acids linked
    through peptide bonds. The Subunit information shall be provided when the
    finished SubstanceProtein is a complex of multiple sequences; subunits are
    not used to delineate domains within a single sequence. Subunits are listed
    in order of decreasing length; sequences of the same length will be ordered
    by decreasing molecular weight; subunits that have identical sequences will
    be repeated multiple times.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceProtein",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    subunit: typing.Optional[FHIRInt]

    """ Index of primary sequences of amino acids linked through peptide
        bonds in order of decreasing length. Sequences of the same length
        will be ordered by molecular weight. Subunits that have identical
        sequences will be repeated and have sequential subscripts.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    subunit__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_subunit`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    sequence: typing.Optional[FHIRString]

    """ The sequence information shall be provided enumerating the amino
        acids from N- to C-terminal end using standard single-letter amino
        acid codes. Uppercase shall be used for L-amino acids and lowercase
        for D-amino acids. Transcribed SubstanceProteins will always be
        described using the translated sequence; for synthetic peptide
        containing amino acids that are not represented with a single
        letter code an X should be used within the sequence. The modified
        amino acids will be distinguished by their position in the sequence.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    sequence__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sequence`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    length: typing.Optional[FHIRInt]

    """ Length of linear sequences of amino acids contained in the subunit.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    length__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_length`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    sequence_attachment: typing.Optional["Attachment"]

    """ The sequence information shall be provided enumerating the amino
        acids from N- to C-terminal end using standard single-letter amino
        acid codes. Uppercase shall be used for L-amino acids and lowercase
        for D-amino acids. Transcribed SubstanceProteins will always be
        described using the translated sequence; for synthetic peptide
        containing amino acids that are not represented with a single
        letter code an X should be used within the sequence. The modified
        amino acids will be distinguished by their position in the sequence.
    Type `Attachment` (represented as `dict` in JSON).
    """

    n_terminal_modification_id: typing.Optional["Identifier"]

    """ Unique identifier for molecular fragment modification based on the
        ISO 11238 Substance ID.
    Type `Identifier` (represented as `dict` in JSON).
    """

    n_terminal_modification: typing.Optional[FHIRString]

    """ The name of the fragment modified at the N-terminal of the
        SubstanceProtein shall be specified.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    n_terminal_modification__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_n_terminal_modification`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    c_terminal_modification_id: typing.Optional["Identifier"]

    """ Unique identifier for molecular fragment modification based on the
        ISO 11238 Substance ID.
    Type `Identifier` (represented as `dict` in JSON).
    """

    c_terminal_modification: typing.Optional[FHIRString]

    """ The modification at the C-terminal shall be specified.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    c_terminal_modification__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_c_terminal_modification`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_subunit = get_primitive_field_root_validator("subunit")
    
    _validate_primitive_sequence = get_primitive_field_root_validator("sequence")
    
    _validate_primitive_length = get_primitive_field_root_validator("length")
    
    _validate_primitive_n_terminal_modification = get_primitive_field_root_validator("n_terminal_modification")
    
    _validate_primitive_c_terminal_modification = get_primitive_field_root_validator("c_terminal_modification")
    


class SubstanceReferenceInformationGene(BackboneElement):
    """ Todo.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceReferenceInformation",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    gene_sequence_origin: typing.Optional["CodeableConcept"]

    """ Todo.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    gene: typing.Optional["CodeableConcept"]

    """ Todo.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    source: typing.Optional[typing.List["Reference"]]

    """ Todo.
    List of `Reference` items (represented as `dict` in JSON).
    """




class SubstanceReferenceInformationGeneElement(BackboneElement):
    """ Todo.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceReferenceInformation",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: typing.Optional["CodeableConcept"]

    """ Todo.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    element: typing.Optional["Identifier"]

    """ Todo.
    Type `Identifier` (represented as `dict` in JSON).
    """

    source: typing.Optional[typing.List["Reference"]]

    """ Todo.
    List of `Reference` items (represented as `dict` in JSON).
    """




class SubstanceReferenceInformationClassification(BackboneElement):
    """ Todo.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceReferenceInformation",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    domain: typing.Optional["CodeableConcept"]

    """ Todo.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    classification: typing.Optional["CodeableConcept"]

    """ Todo.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    subtype: typing.Optional[typing.List["CodeableConcept"]]

    """ Todo.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    source: typing.Optional[typing.List["Reference"]]

    """ Todo.
    List of `Reference` items (represented as `dict` in JSON).
    """




class SubstanceReferenceInformationTarget(BackboneElement):
    """ Todo.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceReferenceInformation",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    target: typing.Optional["Identifier"]

    """ Todo.
    Type `Identifier` (represented as `dict` in JSON).
    """

    type: typing.Optional["CodeableConcept"]

    """ Todo.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    interaction: typing.Optional["CodeableConcept"]

    """ Todo.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    organism: typing.Optional["CodeableConcept"]

    """ Todo.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    organism_type: typing.Optional["CodeableConcept"]

    """ Todo.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    amount_quantity: typing.Optional["Quantity"]

    """ Todo.
    Type `Quantity` (represented as `dict` in JSON).
    """

    amount_range: typing.Optional["Range"]

    """ Todo.
    Type `Range` (represented as `dict` in JSON).
    """

    amount_string: typing.Optional[FHIRString]

    """ Todo.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    amount_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_amount_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    amount_type: typing.Optional["CodeableConcept"]

    """ Todo.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    source: typing.Optional[typing.List["Reference"]]

    """ Todo.
    List of `Reference` items (represented as `dict` in JSON).
    """



#   {'path': 'SubstanceReferenceInformation.target.amount[x]', 'choice_of_type': 'amount', 'orig_name': 'amountQuantity', 'name': 'amountQuantity', 'parent_name': 'SubstanceReferenceInformation.target', 'class_name': 'Quantity', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Todo', 'formal': None, 'representation': None}
    _amount_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['amount_quantity', 'amount_range', 'amount_string']), True))

    _validate_primitive_amount_string = get_primitive_field_root_validator("amount_string")
    


class SubstanceSourceMaterialFractionDescription(BackboneElement):
    """ Many complex materials are fractions of parts of plants, animals, or
    minerals. Fraction elements are often necessary to define both Substances
    and Specified Group 1 Substances. For substances derived from Plants,
    fraction information will be captured at the Substance information level (
    . Oils, Juices and Exudates). Additional information for Extracts, such as
    extraction solvent composition, will be captured at the Specified Substance
    Group 1 information level. For plasma-derived products fraction information
    will be captured at the Substance and the Specified Substance Group 1
    levels.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceSourceMaterial",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    fraction: typing.Optional[FHIRString]

    """ This element is capturing information about the fraction of a plant
        part, or human plasma for fractionation.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    fraction__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_fraction`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    material_type: typing.Optional["CodeableConcept"]

    """ The specific type of the material constituting the component. For
        Herbal preparations the particulars of the extracts (liquid/dry) is
        described in Specified Substance Group 1.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """



    _validate_primitive_fraction = get_primitive_field_root_validator("fraction")
    


class SubstanceSourceMaterialOrganism(BackboneElement):
    """ This subclause describes the organism which the substance is derived from.
    For vaccines, the parent organism shall be specified based on these
    subclause elements. As an example, full taxonomy will be described for the
    Substance Name: ., Leaf.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceSourceMaterial",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    family: typing.Optional["CodeableConcept"]

    """ The family of an organism shall be specified.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    genus: typing.Optional["CodeableConcept"]

    """ The genus of an organism shall be specified; refers to the Latin
        epithet of the genus element of the plant/animal scientific name;
        it is present in names for genera, species and infraspecies.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    species: typing.Optional["CodeableConcept"]

    """ The species of an organism shall be specified; refers to the Latin
        epithet of the species of the plant/animal; it is present in names
        for species and infraspecies.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    intraspecific_type: typing.Optional["CodeableConcept"]

    """ The Intraspecific type of an organism shall be specified.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    intraspecific_description: typing.Optional[FHIRString]

    """ The intraspecific description of an organism shall be specified
        based on a controlled vocabulary. For Influenza Vaccine, the
        intraspecific description shall contain the syntax of the antigen
        in line with the WHO convention.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    intraspecific_description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_intraspecific_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    author: typing.Optional[typing.List["SubstanceSourceMaterialOrganismAuthor"]]

    """ 4.9.13.6.1 Author type (Conditional).
    List of `SubstanceSourceMaterialOrganismAuthor` items (represented as `dict` in JSON).
    """

    hybrid: typing.Optional["SubstanceSourceMaterialOrganismHybrid"]

    """ 4.9.13.8.1 Hybrid species maternal organism ID (Optional).
    Type `SubstanceSourceMaterialOrganismHybrid` (represented as `dict` in JSON).
    """

    organism_general: typing.Optional["SubstanceSourceMaterialOrganismOrganismGeneral"]

    """ 4.9.13.7.1 Kingdom (Conditional).
    Type `SubstanceSourceMaterialOrganismOrganismGeneral` (represented as `dict` in JSON).
    """



    _validate_primitive_intraspecific_description = get_primitive_field_root_validator("intraspecific_description")
    


class SubstanceSourceMaterialOrganismAuthor(BackboneElement):
    """ 4.9.13.6.1 Author type (Conditional).
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceSourceMaterial",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    author_type: typing.Optional["CodeableConcept"]

    """ The type of author of an organism species shall be specified. The
        parenthetical author of an organism species refers to the first
        author who published the plant/animal name (of any rank). The
        primary author of an organism species refers to the first
        author(s), who validly published the plant/animal name.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    author_description: typing.Optional[FHIRString]

    """ The author of an organism species shall be specified. The author
        year of an organism shall also be specified when applicable; refers
        to the year in which the first author(s) published the
        infraspecific plant/animal name (of any rank).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    author_description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_author_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_author_description = get_primitive_field_root_validator("author_description")
    


class SubstanceSourceMaterialOrganismHybrid(BackboneElement):
    """ 4.9.13.8.1 Hybrid species maternal organism ID (Optional).
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceSourceMaterial",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    maternal_organism_id: typing.Optional[FHIRString]

    """ The identifier of the maternal species constituting the hybrid
        organism shall be specified based on a controlled vocabulary. For
        plants, the parents aren’t always known, and it is unlikely that it
        will be known which is maternal and which is paternal.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    maternal_organism_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_maternal_organism_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    maternal_organism_name: typing.Optional[FHIRString]

    """ The name of the maternal species constituting the hybrid organism
        shall be specified. For plants, the parents aren’t always known,
        and it is unlikely that it will be known which is maternal and
        which is paternal.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    maternal_organism_name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_maternal_organism_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    paternal_organism_id: typing.Optional[FHIRString]

    """ The identifier of the paternal species constituting the hybrid
        organism shall be specified based on a controlled vocabulary.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    paternal_organism_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_paternal_organism_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    paternal_organism_name: typing.Optional[FHIRString]

    """ The name of the paternal species constituting the hybrid organism
        shall be specified.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    paternal_organism_name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_paternal_organism_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    hybrid_type: typing.Optional["CodeableConcept"]

    """ The hybrid type of an organism shall be specified.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """



    _validate_primitive_maternal_organism_id = get_primitive_field_root_validator("maternal_organism_id")
    
    _validate_primitive_maternal_organism_name = get_primitive_field_root_validator("maternal_organism_name")
    
    _validate_primitive_paternal_organism_id = get_primitive_field_root_validator("paternal_organism_id")
    
    _validate_primitive_paternal_organism_name = get_primitive_field_root_validator("paternal_organism_name")
    


class SubstanceSourceMaterialOrganismOrganismGeneral(BackboneElement):
    """ 4.9.13.7.1 Kingdom (Conditional).
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceSourceMaterial",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    kingdom: typing.Optional["CodeableConcept"]

    """ The kingdom of an organism shall be specified.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    phylum: typing.Optional["CodeableConcept"]

    """ The phylum of an organism shall be specified.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    class_: typing.Optional["CodeableConcept"]

    """ The class of an organism shall be specified.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    order: typing.Optional["CodeableConcept"]

    """ The order of an organism shall be specified,.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """




class SubstanceSourceMaterialPartDescription(BackboneElement):
    """ To do.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceSourceMaterial",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    part: typing.Optional["CodeableConcept"]

    """ Entity of anatomical origin of source material within an organism.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    part_location: typing.Optional["CodeableConcept"]

    """ The detailed anatomic location when the part can be extracted from
        different anatomical locations of the organism. Multiple
        alternative locations may apply.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """




class SubstanceSpecificationMoiety(BackboneElement):
    """ Moiety, for structural modifications.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceSpecification",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    role: typing.Optional["CodeableConcept"]

    """ Role that the moiety is playing.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    identifier: typing.Optional["Identifier"]

    """ Identifier by which this moiety substance is known.
    Type `Identifier` (represented as `dict` in JSON).
    """

    name: typing.Optional[FHIRString]

    """ Textual name for this moiety substance.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    stereochemistry: typing.Optional["CodeableConcept"]

    """ Stereochemistry type.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    optical_activity: typing.Optional["CodeableConcept"]

    """ Optical activity type.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    molecular_formula: typing.Optional[FHIRString]

    """ Molecular formula.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    molecular_formula__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_molecular_formula`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    amount_quantity: typing.Optional["Quantity"]

    """ Quantitative value for this moiety.
    Type `Quantity` (represented as `dict` in JSON).
    """

    amount_string: typing.Optional[FHIRString]

    """ Quantitative value for this moiety.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    amount_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_amount_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'SubstanceSpecification.moiety.amount[x]', 'choice_of_type': 'amount', 'orig_name': 'amountQuantity', 'name': 'amountQuantity', 'parent_name': 'SubstanceSpecification.moiety', 'class_name': 'Quantity', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Quantitative value for this moiety', 'formal': None, 'representation': None}
    _amount_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['amount_quantity', 'amount_string']), True))

    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_molecular_formula = get_primitive_field_root_validator("molecular_formula")
    
    _validate_primitive_amount_string = get_primitive_field_root_validator("amount_string")
    


class SubstanceSpecificationProperty(BackboneElement):
    """ General specifications for this substance, including how it is related to
    other substances.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceSpecification",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    category: typing.Optional["CodeableConcept"]

    """ A category for this property, e.g. Physical, Chemical, Enzymatic.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    code: typing.Optional["CodeableConcept"]

    """ Property type e.g. viscosity, pH, isoelectric point.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    parameters: typing.Optional[FHIRString]

    """ Parameters that were used in the measurement of a property (e.g.
        for viscosity: measured at 20C with a pH of 7.1).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    parameters__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_parameters`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    defining_substance_reference: typing.Optional["Reference"]

    """ A substance upon which a defining property depends (e.g. for
        solubility: in water, in alcohol).
    Type `Reference` (represented as `dict` in JSON).
    """

    defining_substance_codeable_concept: typing.Optional["CodeableConcept"]

    """ A substance upon which a defining property depends (e.g. for
        solubility: in water, in alcohol).
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    amount_quantity: typing.Optional["Quantity"]

    """ Quantitative value for this property.
    Type `Quantity` (represented as `dict` in JSON).
    """

    amount_string: typing.Optional[FHIRString]

    """ Quantitative value for this property.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    amount_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_amount_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'SubstanceSpecification.property.definingSubstance[x]', 'choice_of_type': 'definingSubstance', 'orig_name': 'definingSubstanceReference', 'name': 'definingSubstanceReference', 'parent_name': 'SubstanceSpecification.property', 'class_name': 'Reference', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'A substance upon which a defining property depends (e.g. for solubility: in water, in alcohol)', 'formal': None, 'representation': None}
    _defining_substance_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['defining_substance_reference', 'defining_substance_codeable_concept']), True))

#   {'path': 'SubstanceSpecification.property.amount[x]', 'choice_of_type': 'amount', 'orig_name': 'amountQuantity', 'name': 'amountQuantity', 'parent_name': 'SubstanceSpecification.property', 'class_name': 'Quantity', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Quantitative value for this property', 'formal': None, 'representation': None}
    _amount_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['amount_quantity', 'amount_string']), True))

    _validate_primitive_parameters = get_primitive_field_root_validator("parameters")
    
    _validate_primitive_amount_string = get_primitive_field_root_validator("amount_string")
    


class SubstanceSpecificationStructure(BackboneElement):
    """ Structural information.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceSpecification",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    stereochemistry: typing.Optional["CodeableConcept"]

    """ Stereochemistry type.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    optical_activity: typing.Optional["CodeableConcept"]

    """ Optical activity type.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    molecular_formula: typing.Optional[FHIRString]

    """ Molecular formula.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    molecular_formula__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_molecular_formula`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    molecular_formula_by_moiety: typing.Optional[FHIRString]

    """ Specified per moiety according to the Hill system, i.e. first C,
        then H, then alphabetical, each moiety separated by a dot.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    molecular_formula_by_moiety__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_molecular_formula_by_moiety`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    isotope: typing.Optional[typing.List["SubstanceSpecificationStructureIsotope"]]

    """ Applicable for single substances that contain a radionuclide or a
        non-natural isotopic ratio.
    List of `SubstanceSpecificationStructureIsotope` items (represented as `dict` in JSON).
    """

    molecular_weight: typing.Optional["SubstanceSpecificationStructureIsotopeMolecularWeight"]

    """ The molecular weight or weight range (for proteins, polymers or
        nucleic acids).
    Type `SubstanceSpecificationStructureIsotopeMolecularWeight` (represented as `dict` in JSON).
    """

    source: typing.Optional[typing.List["Reference"]]

    """ Supporting literature.
    List of `Reference` items (represented as `dict` in JSON).
    """

    representation: typing.Optional[typing.List["SubstanceSpecificationStructureRepresentation"]]

    """ Molecular structural representation.
    List of `SubstanceSpecificationStructureRepresentation` items (represented as `dict` in JSON).
    """



    _validate_primitive_molecular_formula = get_primitive_field_root_validator("molecular_formula")
    
    _validate_primitive_molecular_formula_by_moiety = get_primitive_field_root_validator("molecular_formula_by_moiety")
    


class SubstanceSpecificationStructureIsotope(BackboneElement):
    """ Applicable for single substances that contain a radionuclide or a non-
    natural isotopic ratio.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceSpecification",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional["Identifier"]

    """ Substance identifier for each non-natural or radioisotope.
    Type `Identifier` (represented as `dict` in JSON).
    """

    name: typing.Optional["CodeableConcept"]

    """ Substance name for each non-natural or radioisotope.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    substitution: typing.Optional["CodeableConcept"]

    """ The type of isotopic substitution present in a single substance.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    half_life: typing.Optional["Quantity"]

    """ Half life - for a non-natural nuclide.
    Type `Quantity` (represented as `dict` in JSON).
    """

    molecular_weight: typing.Optional["SubstanceSpecificationStructureIsotopeMolecularWeight"]

    """ The molecular weight or weight range (for proteins, polymers or
        nucleic acids).
    Type `SubstanceSpecificationStructureIsotopeMolecularWeight` (represented as `dict` in JSON).
    """




class SubstanceSpecificationStructureIsotopeMolecularWeight(BackboneElement):
    """ The molecular weight or weight range (for proteins, polymers or nucleic
    acids).
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceSpecification",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    method: typing.Optional["CodeableConcept"]

    """ The method by which the molecular weight was determined.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    type: typing.Optional["CodeableConcept"]

    """ Type of molecular weight such as exact, average (also known as.
        number average), weight average.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    amount: typing.Optional["Quantity"]

    """ Used to capture quantitative values for a variety of elements. If
        only limits are given, the arithmetic mean would be the average. If
        only a single definite value for a given element is given, it would
        be captured in this field.
    Type `Quantity` (represented as `dict` in JSON).
    """




class SubstanceSpecificationStructureRepresentation(BackboneElement):
    """ Molecular structural representation.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceSpecification",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: typing.Optional["CodeableConcept"]

    """ The type of structure (e.g. Full, Partial, Representative).
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    representation: typing.Optional[FHIRString]

    """ The structural representation as text string in a format e.g.
        InChI, SMILES, MOLFILE, CDX.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    representation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_representation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    attachment: typing.Optional["Attachment"]

    """ An attached file with the structural representation.
    Type `Attachment` (represented as `dict` in JSON).
    """



    _validate_primitive_representation = get_primitive_field_root_validator("representation")
    


class SubstanceSpecificationFHIRCode(BackboneElement):
    """ Codes associated with the substance.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceSpecification",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: typing.Optional["CodeableConcept"]

    """ The specific code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    status: typing.Optional["CodeableConcept"]

    """ Status of the code assignment.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    status_date: typing.Optional[FHIRDateTime]

    """ The date at which the code status is changed as part of the
        terminology maintenance.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    status_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_status_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    comment: typing.Optional[FHIRString]

    """ Any comment can be provided in this field, if necessary.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    comment__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_comment`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    source: typing.Optional[typing.List["Reference"]]

    """ Supporting literature.
    List of `Reference` items (represented as `dict` in JSON).
    """



    _validate_primitive_status_date = get_primitive_field_root_validator("status_date")
    
    _validate_primitive_comment = get_primitive_field_root_validator("comment")
    


class SubstanceSpecificationName(BackboneElement):
    """ Names applicable to this substance.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceSpecification",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: FHIRRequiredString

    """ The actual name.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    type: typing.Optional["CodeableConcept"]

    """ Name type.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    status: typing.Optional["CodeableConcept"]

    """ The status of the name.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    preferred: typing.Optional[bool]

    """ If this is the preferred name for this substance.
    Type `bool`. Is a JSON Primitive element.
    """
    

    preferred__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_preferred`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    language: typing.Optional[typing.List["CodeableConcept"]]

    """ Language of the name.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    domain: typing.Optional[typing.List["CodeableConcept"]]

    """ The use context of this name for example if there is a different
        name a drug active ingredient as opposed to a food colour additive.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    jurisdiction: typing.Optional[typing.List["CodeableConcept"]]

    """ The jurisdiction where this name applies.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    synonym: typing.Optional[typing.List["SubstanceSpecificationName"]]

    """ A synonym of this name.
    List of `SubstanceSpecificationName` items (represented as `dict` in JSON).
    """

    translation: typing.Optional[typing.List["SubstanceSpecificationName"]]

    """ A translation for this name.
    List of `SubstanceSpecificationName` items (represented as `dict` in JSON).
    """

    official: typing.Optional[typing.List["SubstanceSpecificationNameOfficial"]]

    """ Details of the official nature of this name.
    List of `SubstanceSpecificationNameOfficial` items (represented as `dict` in JSON).
    """

    source: typing.Optional[typing.List["Reference"]]

    """ Supporting literature.
    List of `Reference` items (represented as `dict` in JSON).
    """



    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_preferred = get_primitive_field_root_validator("preferred")
    


class SubstanceSpecificationNameOfficial(BackboneElement):
    """ Details of the official nature of this name.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceSpecification",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    authority: typing.Optional["CodeableConcept"]

    """ Which authority uses this official name.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    status: typing.Optional["CodeableConcept"]

    """ The status of the official name.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    date: typing.Optional[FHIRDateTime]

    """ Date of official name change.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_date = get_primitive_field_root_validator("date")
    


class SubstanceSpecificationRelationship(BackboneElement):
    """ A link between this substance and another, with details of the relationship.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SubstanceSpecification",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    substance_reference: typing.Optional["Reference"]

    """ A pointer to another substance, as a resource or just a
        representational code.
    Type `Reference` (represented as `dict` in JSON).
    """

    substance_codeable_concept: typing.Optional["CodeableConcept"]

    """ A pointer to another substance, as a resource or just a
        representational code.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    relationship: typing.Optional["CodeableConcept"]

    """ For example "salt to parent", "active moiety", "starting material".
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    is_defining: typing.Optional[bool]

    """ For example where an enzyme strongly bonds with a particular
        substance, this is a defining relationship for that enzyme, out of
        several possible substance relationships.
    Type `bool`. Is a JSON Primitive element.
    """
    

    is_defining__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_is_defining`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    amount_quantity: typing.Optional["Quantity"]

    """ A numeric factor for the relationship, for instance to express that
        the salt of a substance has some percentage of the active substance
        in relation to some other.
    Type `Quantity` (represented as `dict` in JSON).
    """

    amount_range: typing.Optional["Range"]

    """ A numeric factor for the relationship, for instance to express that
        the salt of a substance has some percentage of the active substance
        in relation to some other.
    Type `Range` (represented as `dict` in JSON).
    """

    amount_ratio: typing.Optional["Ratio"]

    """ A numeric factor for the relationship, for instance to express that
        the salt of a substance has some percentage of the active substance
        in relation to some other.
    Type `Ratio` (represented as `dict` in JSON).
    """

    amount_string: typing.Optional[FHIRString]

    """ A numeric factor for the relationship, for instance to express that
        the salt of a substance has some percentage of the active substance
        in relation to some other.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    amount_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_amount_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    amount_ratio_low_limit: typing.Optional["Ratio"]

    """ For use when the numeric.
    Type `Ratio` (represented as `dict` in JSON).
    """

    amount_type: typing.Optional["CodeableConcept"]

    """ An operator for the amount, for example "average", "approximately",
        "less than".
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    source: typing.Optional[typing.List["Reference"]]

    """ Supporting literature.
    List of `Reference` items (represented as `dict` in JSON).
    """



#   {'path': 'SubstanceSpecification.relationship.substance[x]', 'choice_of_type': 'substance', 'orig_name': 'substanceReference', 'name': 'substanceReference', 'parent_name': 'SubstanceSpecification.relationship', 'class_name': 'Reference', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'A pointer to another substance, as a resource or just a representational code', 'formal': None, 'representation': None}
    _substance_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['substance_reference', 'substance_codeable_concept']), True))

#   {'path': 'SubstanceSpecification.relationship.amount[x]', 'choice_of_type': 'amount', 'orig_name': 'amountQuantity', 'name': 'amountQuantity', 'parent_name': 'SubstanceSpecification.relationship', 'class_name': 'Quantity', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': True, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other', 'formal': None, 'representation': None}
    _amount_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['amount_quantity', 'amount_range', 'amount_ratio', 'amount_string']), True))

    _validate_primitive_is_defining = get_primitive_field_root_validator("is_defining")
    
    _validate_primitive_amount_string = get_primitive_field_root_validator("amount_string")
    


class SupplyDeliverySuppliedItem(BackboneElement):
    """ The item that is delivered or supplied.

    The item that is being delivered or has been supplied.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SupplyDelivery",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    quantity: typing.Optional["Quantity"]

    """ Amount dispensed.
    Type `Quantity` (represented as `dict` in JSON).
    """

    item_codeable_concept: typing.Optional["CodeableConcept"]

    """ Medication, Substance, or Device supplied.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    item_reference: typing.Optional["Reference"]

    """ Medication, Substance, or Device supplied.
    Type `Reference` (represented as `dict` in JSON).
    """



#   {'path': 'SupplyDelivery.suppliedItem.item[x]', 'choice_of_type': 'item', 'orig_name': 'itemCodeableConcept', 'name': 'itemCodeableConcept', 'parent_name': 'SupplyDelivery.suppliedItem', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Medication, Substance, or Device supplied', 'formal': 'Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.', 'representation': None}
    _item_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['item_codeable_concept', 'item_reference']), True))


class SupplyRequestParameter(BackboneElement):
    """ Ordered item details.

    Specific parameters for the ordered item.  For example, the size of the
    indicated item.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/SupplyRequest",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: typing.Optional["CodeableConcept"]

    """ Item detail.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value_codeable_concept: typing.Optional["CodeableConcept"]

    """ Value of detail.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value_quantity: typing.Optional["Quantity"]

    """ Value of detail.
    Type `Quantity` (represented as `dict` in JSON).
    """

    value_range: typing.Optional["Range"]

    """ Value of detail.
    Type `Range` (represented as `dict` in JSON).
    """

    value_boolean: typing.Optional[bool]

    """ Value of detail.
    Type `bool`. Is a JSON Primitive element.
    """
    

    value_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'SupplyRequest.parameter.value[x]', 'choice_of_type': 'value', 'orig_name': 'valueCodeableConcept', 'name': 'valueCodeableConcept', 'parent_name': 'SupplyRequest.parameter', 'class_name': 'CodeableConcept', 'enum': None, 'module_name': None, 'json_class': 'dict', 'is_native': False, 'is_json_primitive_field': False, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Value of detail', 'formal': 'The value of the device detail.', 'representation': None}
    _value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['value_codeable_concept', 'value_quantity', 'value_range', 'value_boolean']), True))

    _validate_primitive_value_boolean = get_primitive_field_root_validator("value_boolean")
    


class TaskRestriction(BackboneElement):
    """ Constraints on fulfillment tasks.

    If the Task.focus is a request resource and the task is seeking fulfillment
    (i.e. is asking for the request to be actioned), this element identifies
    any limitations on what parts of the referenced request should be actioned.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Task",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    repetitions: typing.Optional[FHIRPositiveInt]

    """ How many times to repeat.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    repetitions__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_repetitions`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    period: typing.Optional["Period"]

    """ When fulfillment sought.
    Type `Period` (represented as `dict` in JSON).
    """

    recipient: typing.Optional[typing.List["Reference"]]

    """ For whom is fulfillment sought?.
    List of `Reference` items (represented as `dict` in JSON).
    """



    _validate_primitive_repetitions = get_primitive_field_root_validator("repetitions")
    


class TaskInput(BackboneElement):
    """ Information used to perform task.

    Additional information that may be needed in the execution of the task.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Task",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: "CodeableConcept"

    """ Label for the input.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value_base64_binary: typing.Optional[FHIRBase64Binary]

    """ Content to use in performing the task.
    Type `FHIRBase64Binary` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_base64_binary__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_base64_binary`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_boolean: typing.Optional[bool]

    """ Content to use in performing the task.
    Type `bool`. Is a JSON Primitive element.
    """
    

    value_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_canonical: typing.Optional[FHIRString]

    """ Content to use in performing the task.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_canonical__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_code: typing.Optional[FHIRCode]

    """ Content to use in performing the task.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_date: typing.Optional[FHIRDate]

    """ Content to use in performing the task.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_date_time: typing.Optional[FHIRDateTime]

    """ Content to use in performing the task.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_decimal: typing.Optional[decimal.Decimal]

    """ Content to use in performing the task.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    value_decimal__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_decimal`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_id: typing.Optional[FHIRId]

    """ Content to use in performing the task.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_instant: typing.Optional[FHIRInstant]

    """ Content to use in performing the task.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_instant__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_instant`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_integer: typing.Optional[FHIRInt]

    """ Content to use in performing the task.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_integer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_integer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_markdown: typing.Optional[FHIRString]

    """ Content to use in performing the task.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_markdown__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_markdown`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_oid: typing.Optional[FHIROid]

    """ Content to use in performing the task.
    Type `FHIROid` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_oid__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_oid`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_positive_int: typing.Optional[FHIRPositiveInt]

    """ Content to use in performing the task.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    value_positive_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_positive_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_string: typing.Optional[FHIRString]

    """ Content to use in performing the task.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_time: typing.Optional[FHIRTime]

    """ Content to use in performing the task.
    Type `FHIRTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_unsigned_int: typing.Optional[FHIRUnsignedInt]

    """ Content to use in performing the task.
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_unsigned_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_unsigned_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_uri: typing.Optional[FHIRString]

    """ Content to use in performing the task.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_url: typing.Optional[FHIRString]

    """ Content to use in performing the task.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_uuid: typing.Optional[FHIRString]

    """ Content to use in performing the task.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_uuid__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_uuid`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_address: typing.Optional["Address"]

    """ Content to use in performing the task.
    Type `Address` (represented as `dict` in JSON).
    """

    value_age: typing.Optional["Age"]

    """ Content to use in performing the task.
    Type `Age` (represented as `dict` in JSON).
    """

    value_annotation: typing.Optional["Annotation"]

    """ Content to use in performing the task.
    Type `Annotation` (represented as `dict` in JSON).
    """

    value_attachment: typing.Optional["Attachment"]

    """ Content to use in performing the task.
    Type `Attachment` (represented as `dict` in JSON).
    """

    value_codeable_concept: typing.Optional["CodeableConcept"]

    """ Content to use in performing the task.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value_coding: typing.Optional["Coding"]

    """ Content to use in performing the task.
    Type `Coding` (represented as `dict` in JSON).
    """

    value_contact_point: typing.Optional["ContactPoint"]

    """ Content to use in performing the task.
    Type `ContactPoint` (represented as `dict` in JSON).
    """

    value_count: typing.Optional["Count"]

    """ Content to use in performing the task.
    Type `Count` (represented as `dict` in JSON).
    """

    value_distance: typing.Optional["Distance"]

    """ Content to use in performing the task.
    Type `Distance` (represented as `dict` in JSON).
    """

    value_duration: typing.Optional["Duration"]

    """ Content to use in performing the task.
    Type `Duration` (represented as `dict` in JSON).
    """

    value_human_name: typing.Optional["HumanName"]

    """ Content to use in performing the task.
    Type `HumanName` (represented as `dict` in JSON).
    """

    value_identifier: typing.Optional["Identifier"]

    """ Content to use in performing the task.
    Type `Identifier` (represented as `dict` in JSON).
    """

    value_money: typing.Optional["Money"]

    """ Content to use in performing the task.
    Type `Money` (represented as `dict` in JSON).
    """

    value_period: typing.Optional["Period"]

    """ Content to use in performing the task.
    Type `Period` (represented as `dict` in JSON).
    """

    value_quantity: typing.Optional["Quantity"]

    """ Content to use in performing the task.
    Type `Quantity` (represented as `dict` in JSON).
    """

    value_range: typing.Optional["Range"]

    """ Content to use in performing the task.
    Type `Range` (represented as `dict` in JSON).
    """

    value_ratio: typing.Optional["Ratio"]

    """ Content to use in performing the task.
    Type `Ratio` (represented as `dict` in JSON).
    """

    value_reference: typing.Optional["Reference"]

    """ Content to use in performing the task.
    Type `Reference` (represented as `dict` in JSON).
    """

    value_sampled_data: typing.Optional["SampledData"]

    """ Content to use in performing the task.
    Type `SampledData` (represented as `dict` in JSON).
    """

    value_signature: typing.Optional["Signature"]

    """ Content to use in performing the task.
    Type `Signature` (represented as `dict` in JSON).
    """

    value_timing: typing.Optional["Timing"]

    """ Content to use in performing the task.
    Type `Timing` (represented as `dict` in JSON).
    """

    value_contact_detail: typing.Optional["ContactDetail"]

    """ Content to use in performing the task.
    Type `ContactDetail` (represented as `dict` in JSON).
    """

    value_contributor: typing.Optional["Contributor"]

    """ Content to use in performing the task.
    Type `Contributor` (represented as `dict` in JSON).
    """

    value_data_requirement: typing.Optional["DataRequirement"]

    """ Content to use in performing the task.
    Type `DataRequirement` (represented as `dict` in JSON).
    """

    value_expression: typing.Optional["Expression"]

    """ Content to use in performing the task.
    Type `Expression` (represented as `dict` in JSON).
    """

    value_parameter_definition: typing.Optional["ParameterDefinition"]

    """ Content to use in performing the task.
    Type `ParameterDefinition` (represented as `dict` in JSON).
    """

    value_related_artifact: typing.Optional["RelatedArtifact"]

    """ Content to use in performing the task.
    Type `RelatedArtifact` (represented as `dict` in JSON).
    """

    value_trigger_definition: typing.Optional["TriggerDefinition"]

    """ Content to use in performing the task.
    Type `TriggerDefinition` (represented as `dict` in JSON).
    """

    value_usage_context: typing.Optional["UsageContext"]

    """ Content to use in performing the task.
    Type `UsageContext` (represented as `dict` in JSON).
    """

    value_dosage: typing.Optional["Dosage"]

    """ Content to use in performing the task.
    Type `Dosage` (represented as `dict` in JSON).
    """

    value_meta: typing.Optional["Meta"]

    """ Content to use in performing the task.
    Type `Meta` (represented as `dict` in JSON).
    """



#   {'path': 'Task.input.value[x]', 'choice_of_type': 'value', 'orig_name': 'valueBase64Binary', 'name': 'valueBase64Binary', 'parent_name': 'Task.input', 'class_name': 'FHIRBase64Binary', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Content to use in performing the task', 'formal': 'The value of the input parameter as a basic type.', 'representation': None}
    _value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['value_base64_binary', 'value_boolean', 'value_canonical', 'value_code', 'value_date', 'value_date_time', 'value_decimal', 'value_id', 'value_instant', 'value_integer', 'value_markdown', 'value_oid', 'value_positive_int', 'value_string', 'value_time', 'value_unsigned_int', 'value_uri', 'value_url', 'value_uuid', 'value_address', 'value_age', 'value_annotation', 'value_attachment', 'value_codeable_concept', 'value_coding', 'value_contact_point', 'value_count', 'value_distance', 'value_duration', 'value_human_name', 'value_identifier', 'value_money', 'value_period', 'value_quantity', 'value_range', 'value_ratio', 'value_reference', 'value_sampled_data', 'value_signature', 'value_timing', 'value_contact_detail', 'value_contributor', 'value_data_requirement', 'value_expression', 'value_parameter_definition', 'value_related_artifact', 'value_trigger_definition', 'value_usage_context', 'value_dosage', 'value_meta']), False))

    _validate_primitive_value_base64_binary = get_primitive_field_root_validator("value_base64_binary")
    
    _validate_primitive_value_boolean = get_primitive_field_root_validator("value_boolean")
    
    _validate_primitive_value_canonical = get_primitive_field_root_validator("value_canonical")
    
    _validate_primitive_value_code = get_primitive_field_root_validator("value_code")
    
    _validate_primitive_value_date = get_primitive_field_root_validator("value_date")
    
    _validate_primitive_value_date_time = get_primitive_field_root_validator("value_date_time")
    
    _validate_primitive_value_decimal = get_primitive_field_root_validator("value_decimal")
    
    _validate_primitive_value_id = get_primitive_field_root_validator("value_id")
    
    _validate_primitive_value_instant = get_primitive_field_root_validator("value_instant")
    
    _validate_primitive_value_integer = get_primitive_field_root_validator("value_integer")
    
    _validate_primitive_value_markdown = get_primitive_field_root_validator("value_markdown")
    
    _validate_primitive_value_oid = get_primitive_field_root_validator("value_oid")
    
    _validate_primitive_value_positive_int = get_primitive_field_root_validator("value_positive_int")
    
    _validate_primitive_value_string = get_primitive_field_root_validator("value_string")
    
    _validate_primitive_value_time = get_primitive_field_root_validator("value_time")
    
    _validate_primitive_value_unsigned_int = get_primitive_field_root_validator("value_unsigned_int")
    
    _validate_primitive_value_uri = get_primitive_field_root_validator("value_uri")
    
    _validate_primitive_value_url = get_primitive_field_root_validator("value_url")
    
    _validate_primitive_value_uuid = get_primitive_field_root_validator("value_uuid")
    


class TaskOutput(BackboneElement):
    """ Information produced as part of task.

    Outputs produced by the Task.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/Task",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: "CodeableConcept"

    """ Label for output.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value_base64_binary: typing.Optional[FHIRBase64Binary]

    """ Result of output.
    Type `FHIRBase64Binary` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_base64_binary__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_base64_binary`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_boolean: typing.Optional[bool]

    """ Result of output.
    Type `bool`. Is a JSON Primitive element.
    """
    

    value_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_canonical: typing.Optional[FHIRString]

    """ Result of output.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_canonical__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_canonical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_code: typing.Optional[FHIRCode]

    """ Result of output.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_date: typing.Optional[FHIRDate]

    """ Result of output.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_date_time: typing.Optional[FHIRDateTime]

    """ Result of output.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_decimal: typing.Optional[decimal.Decimal]

    """ Result of output.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    value_decimal__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_decimal`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_id: typing.Optional[FHIRId]

    """ Result of output.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_instant: typing.Optional[FHIRInstant]

    """ Result of output.
    Type `FHIRInstant` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_instant__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_instant`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_integer: typing.Optional[FHIRInt]

    """ Result of output.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_integer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_integer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_markdown: typing.Optional[FHIRString]

    """ Result of output.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_markdown__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_markdown`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_oid: typing.Optional[FHIROid]

    """ Result of output.
    Type `FHIROid` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_oid__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_oid`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_positive_int: typing.Optional[FHIRPositiveInt]

    """ Result of output.
    Type `FHIRPositiveInt` (represented as `int` in JSON). Is a JSON Primitive element.
    """
    

    value_positive_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_positive_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_string: typing.Optional[FHIRString]

    """ Result of output.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_time: typing.Optional[FHIRTime]

    """ Result of output.
    Type `FHIRTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_unsigned_int: typing.Optional[FHIRUnsignedInt]

    """ Result of output.
    Type `FHIRUnsignedInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_unsigned_int__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_unsigned_int`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_uri: typing.Optional[FHIRString]

    """ Result of output.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_url: typing.Optional[FHIRString]

    """ Result of output.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_uuid: typing.Optional[FHIRString]

    """ Result of output.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_uuid__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_uuid`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_address: typing.Optional["Address"]

    """ Result of output.
    Type `Address` (represented as `dict` in JSON).
    """

    value_age: typing.Optional["Age"]

    """ Result of output.
    Type `Age` (represented as `dict` in JSON).
    """

    value_annotation: typing.Optional["Annotation"]

    """ Result of output.
    Type `Annotation` (represented as `dict` in JSON).
    """

    value_attachment: typing.Optional["Attachment"]

    """ Result of output.
    Type `Attachment` (represented as `dict` in JSON).
    """

    value_codeable_concept: typing.Optional["CodeableConcept"]

    """ Result of output.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    value_coding: typing.Optional["Coding"]

    """ Result of output.
    Type `Coding` (represented as `dict` in JSON).
    """

    value_contact_point: typing.Optional["ContactPoint"]

    """ Result of output.
    Type `ContactPoint` (represented as `dict` in JSON).
    """

    value_count: typing.Optional["Count"]

    """ Result of output.
    Type `Count` (represented as `dict` in JSON).
    """

    value_distance: typing.Optional["Distance"]

    """ Result of output.
    Type `Distance` (represented as `dict` in JSON).
    """

    value_duration: typing.Optional["Duration"]

    """ Result of output.
    Type `Duration` (represented as `dict` in JSON).
    """

    value_human_name: typing.Optional["HumanName"]

    """ Result of output.
    Type `HumanName` (represented as `dict` in JSON).
    """

    value_identifier: typing.Optional["Identifier"]

    """ Result of output.
    Type `Identifier` (represented as `dict` in JSON).
    """

    value_money: typing.Optional["Money"]

    """ Result of output.
    Type `Money` (represented as `dict` in JSON).
    """

    value_period: typing.Optional["Period"]

    """ Result of output.
    Type `Period` (represented as `dict` in JSON).
    """

    value_quantity: typing.Optional["Quantity"]

    """ Result of output.
    Type `Quantity` (represented as `dict` in JSON).
    """

    value_range: typing.Optional["Range"]

    """ Result of output.
    Type `Range` (represented as `dict` in JSON).
    """

    value_ratio: typing.Optional["Ratio"]

    """ Result of output.
    Type `Ratio` (represented as `dict` in JSON).
    """

    value_reference: typing.Optional["Reference"]

    """ Result of output.
    Type `Reference` (represented as `dict` in JSON).
    """

    value_sampled_data: typing.Optional["SampledData"]

    """ Result of output.
    Type `SampledData` (represented as `dict` in JSON).
    """

    value_signature: typing.Optional["Signature"]

    """ Result of output.
    Type `Signature` (represented as `dict` in JSON).
    """

    value_timing: typing.Optional["Timing"]

    """ Result of output.
    Type `Timing` (represented as `dict` in JSON).
    """

    value_contact_detail: typing.Optional["ContactDetail"]

    """ Result of output.
    Type `ContactDetail` (represented as `dict` in JSON).
    """

    value_contributor: typing.Optional["Contributor"]

    """ Result of output.
    Type `Contributor` (represented as `dict` in JSON).
    """

    value_data_requirement: typing.Optional["DataRequirement"]

    """ Result of output.
    Type `DataRequirement` (represented as `dict` in JSON).
    """

    value_expression: typing.Optional["Expression"]

    """ Result of output.
    Type `Expression` (represented as `dict` in JSON).
    """

    value_parameter_definition: typing.Optional["ParameterDefinition"]

    """ Result of output.
    Type `ParameterDefinition` (represented as `dict` in JSON).
    """

    value_related_artifact: typing.Optional["RelatedArtifact"]

    """ Result of output.
    Type `RelatedArtifact` (represented as `dict` in JSON).
    """

    value_trigger_definition: typing.Optional["TriggerDefinition"]

    """ Result of output.
    Type `TriggerDefinition` (represented as `dict` in JSON).
    """

    value_usage_context: typing.Optional["UsageContext"]

    """ Result of output.
    Type `UsageContext` (represented as `dict` in JSON).
    """

    value_dosage: typing.Optional["Dosage"]

    """ Result of output.
    Type `Dosage` (represented as `dict` in JSON).
    """

    value_meta: typing.Optional["Meta"]

    """ Result of output.
    Type `Meta` (represented as `dict` in JSON).
    """



#   {'path': 'Task.output.value[x]', 'choice_of_type': 'value', 'orig_name': 'valueBase64Binary', 'name': 'valueBase64Binary', 'parent_name': 'Task.output', 'class_name': 'FHIRBase64Binary', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': True, 'is_optional': False, 'reference_to_names': [], 'short': 'Result of output', 'formal': 'The value of the Output parameter as a basic type.', 'representation': None}
    _value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['value_base64_binary', 'value_boolean', 'value_canonical', 'value_code', 'value_date', 'value_date_time', 'value_decimal', 'value_id', 'value_instant', 'value_integer', 'value_markdown', 'value_oid', 'value_positive_int', 'value_string', 'value_time', 'value_unsigned_int', 'value_uri', 'value_url', 'value_uuid', 'value_address', 'value_age', 'value_annotation', 'value_attachment', 'value_codeable_concept', 'value_coding', 'value_contact_point', 'value_count', 'value_distance', 'value_duration', 'value_human_name', 'value_identifier', 'value_money', 'value_period', 'value_quantity', 'value_range', 'value_ratio', 'value_reference', 'value_sampled_data', 'value_signature', 'value_timing', 'value_contact_detail', 'value_contributor', 'value_data_requirement', 'value_expression', 'value_parameter_definition', 'value_related_artifact', 'value_trigger_definition', 'value_usage_context', 'value_dosage', 'value_meta']), False))

    _validate_primitive_value_base64_binary = get_primitive_field_root_validator("value_base64_binary")
    
    _validate_primitive_value_boolean = get_primitive_field_root_validator("value_boolean")
    
    _validate_primitive_value_canonical = get_primitive_field_root_validator("value_canonical")
    
    _validate_primitive_value_code = get_primitive_field_root_validator("value_code")
    
    _validate_primitive_value_date = get_primitive_field_root_validator("value_date")
    
    _validate_primitive_value_date_time = get_primitive_field_root_validator("value_date_time")
    
    _validate_primitive_value_decimal = get_primitive_field_root_validator("value_decimal")
    
    _validate_primitive_value_id = get_primitive_field_root_validator("value_id")
    
    _validate_primitive_value_instant = get_primitive_field_root_validator("value_instant")
    
    _validate_primitive_value_integer = get_primitive_field_root_validator("value_integer")
    
    _validate_primitive_value_markdown = get_primitive_field_root_validator("value_markdown")
    
    _validate_primitive_value_oid = get_primitive_field_root_validator("value_oid")
    
    _validate_primitive_value_positive_int = get_primitive_field_root_validator("value_positive_int")
    
    _validate_primitive_value_string = get_primitive_field_root_validator("value_string")
    
    _validate_primitive_value_time = get_primitive_field_root_validator("value_time")
    
    _validate_primitive_value_unsigned_int = get_primitive_field_root_validator("value_unsigned_int")
    
    _validate_primitive_value_uri = get_primitive_field_root_validator("value_uri")
    
    _validate_primitive_value_url = get_primitive_field_root_validator("value_url")
    
    _validate_primitive_value_uuid = get_primitive_field_root_validator("value_uuid")
    


class TerminologyCapabilitiesSoftware(BackboneElement):
    """ Software that is covered by this terminology capability statement.

    Software that is covered by this terminology capability statement.  It is
    used when the statement describes the capabilities of a particular software
    version, independent of an installation.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TerminologyCapabilities",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: FHIRRequiredString

    """ A name the software is known by.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    version: typing.Optional[FHIRString]

    """ Version covered by this statement.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    


class TerminologyCapabilitiesImplementation(BackboneElement):
    """ If this describes a specific instance.

    Identifies a specific implementation instance that is described by the
    terminology capability statement - i.e. a particular installation, rather
    than the capabilities of a software program.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TerminologyCapabilities",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    description: FHIRRequiredString

    """ Describes this specific instance.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    url: typing.Optional[FHIRString]

    """ Base URL for the implementation.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_url = get_primitive_field_root_validator("url")
    


class TerminologyCapabilitiesCodeSystem(BackboneElement):
    """ A code system supported by the server.

    Identifies a code system that is supported by the server. If there is a no
    code system URL, then this declares the general assumptions a client can
    make about support for any CodeSystem resource.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TerminologyCapabilities",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    uri: typing.Optional[FHIRString]

    """ URI for the Code System.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    version: typing.Optional[typing.List["TerminologyCapabilitiesCodeSystemVersion"]]

    """ Version of Code System supported.
    List of `TerminologyCapabilitiesCodeSystemVersion` items (represented as `dict` in JSON).
    """

    subsumption: typing.Optional[bool]

    """ Whether subsumption is supported.
    Type `bool`. Is a JSON Primitive element.
    """
    

    subsumption__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_subsumption`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_uri = get_primitive_field_root_validator("uri")
    
    _validate_primitive_subsumption = get_primitive_field_root_validator("subsumption")
    


class TerminologyCapabilitiesCodeSystemVersion(BackboneElement):
    """ Version of Code System supported.

    For the code system, a list of versions that are supported by the server.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TerminologyCapabilities",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: typing.Optional[FHIRString]

    """ Version identifier for this version.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    is_default: typing.Optional[bool]

    """ If this is the default version for this code system.
    Type `bool`. Is a JSON Primitive element.
    """
    

    is_default__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_is_default`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    compositional: typing.Optional[bool]

    """ If compositional grammar is supported.
    Type `bool`. Is a JSON Primitive element.
    """
    

    compositional__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_compositional`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    language: typing.Optional[typing.List[typing.Optional[FHIRCode]]]

    """ Language Displays supported.
    List of `FHIRCode` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    language__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_language`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    filter: typing.Optional[typing.List["TerminologyCapabilitiesCodeSystemVersionFilter"]]

    """ Filter Properties supported.
    List of `TerminologyCapabilitiesCodeSystemVersionFilter` items (represented as `dict` in JSON).
    """

    property: typing.Optional[typing.List[typing.Optional[FHIRCode]]]

    """ Properties supported for $lookup.
    List of `FHIRCode` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    property__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_property`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_code = get_primitive_field_root_validator("code")
    
    _validate_primitive_is_default = get_primitive_field_root_validator("is_default")
    
    _validate_primitive_compositional = get_primitive_field_root_validator("compositional")
    
    _validate_primitive_language = get_primitive_field_root_validator("language")
    
    _validate_primitive_property = get_primitive_field_root_validator("property")
    


class TerminologyCapabilitiesCodeSystemVersionFilter(BackboneElement):
    """ Filter Properties supported.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TerminologyCapabilities",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: FHIRCode

    """ Code of the property supported.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    op: typing.List[typing.Optional[FHIRCode]]

    """ Operations supported for the property.
    List of `FHIRCode` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    op__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_op`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_code = get_primitive_field_root_validator("code")
    
    _validate_primitive_op = get_primitive_field_root_validator("op")
    


class TerminologyCapabilitiesExpansion(BackboneElement):
    """ Information about the [ValueSet/$expand](valueset-operation-expand.html)
    operation.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TerminologyCapabilities",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    hierarchical: typing.Optional[bool]

    """ Whether the server can return nested value sets.
    Type `bool`. Is a JSON Primitive element.
    """
    

    hierarchical__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_hierarchical`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    paging: typing.Optional[bool]

    """ Whether the server supports paging on expansion.
    Type `bool`. Is a JSON Primitive element.
    """
    

    paging__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_paging`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    incomplete: typing.Optional[bool]

    """ Allow request for incomplete expansions?.
    Type `bool`. Is a JSON Primitive element.
    """
    

    incomplete__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_incomplete`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    parameter: typing.Optional[typing.List["TerminologyCapabilitiesExpansionParameter"]]

    """ Supported expansion parameter.
    List of `TerminologyCapabilitiesExpansionParameter` items (represented as `dict` in JSON).
    """

    text_filter: typing.Optional[FHIRString]

    """ Documentation about text searching works.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    text_filter__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_text_filter`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_hierarchical = get_primitive_field_root_validator("hierarchical")
    
    _validate_primitive_paging = get_primitive_field_root_validator("paging")
    
    _validate_primitive_incomplete = get_primitive_field_root_validator("incomplete")
    
    _validate_primitive_text_filter = get_primitive_field_root_validator("text_filter")
    


class TerminologyCapabilitiesExpansionParameter(BackboneElement):
    """ Supported expansion parameter.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TerminologyCapabilities",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: FHIRCode

    """ Expansion Parameter name.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    documentation: typing.Optional[FHIRString]

    """ Description of support for parameter.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    documentation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_documentation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_documentation = get_primitive_field_root_validator("documentation")
    


class TerminologyCapabilitiesValidateCode(BackboneElement):
    """ Information about the [ValueSet/$validate-code](valueset-operation-
    validate-code.html) operation.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TerminologyCapabilities",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    translations: bool

    """ Whether translations are validated.
    Type `bool`. Is a JSON Primitive element.
    """
    

    translations__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_translations`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_translations = get_primitive_field_root_validator("translations")
    


class TerminologyCapabilitiesTranslation(BackboneElement):
    """ Information about the [ConceptMap/$translate](conceptmap-operation-
    translate.html) operation.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TerminologyCapabilities",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    needs_map: bool

    """ Whether the client must identify the map.
    Type `bool`. Is a JSON Primitive element.
    """
    

    needs_map__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_needs_map`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_needs_map = get_primitive_field_root_validator("needs_map")
    


class TerminologyCapabilitiesClosure(BackboneElement):
    """ Information about the [ConceptMap/$closure](conceptmap-operation-
    closure.html) operation.

    Whether the $closure operation is supported.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TerminologyCapabilities",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    translation: typing.Optional[bool]

    """ If cross-system closure is supported.
    Type `bool`. Is a JSON Primitive element.
    """
    

    translation__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_translation`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_translation = get_primitive_field_root_validator("translation")
    


class TestReportParticipant(BackboneElement):
    """ A participant in the test execution, either the execution engine, a client,
    or a server.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestReport",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    type: "TestReportParticipantType"

    """ test-engine | client | server.
    Type `TestReportParticipantType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    uri: FHIRRequiredString

    """ The uri of the participant. An absolute URL is preferred.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    display: typing.Optional[FHIRString]

    """ The display name of the participant.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    display__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_display`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["type"]["enum"]
            enums.clear()
            for item in TestReportParticipantType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_type = get_primitive_field_root_validator("type")
    
    _validate_primitive_uri = get_primitive_field_root_validator("uri")
    
    _validate_primitive_display = get_primitive_field_root_validator("display")
    


class TestReportSetup(BackboneElement):
    """ The results of the series of required setup operations before the tests
    were executed.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestReport",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    action: typing.List["TestReportSetupAction"]

    """ A setup operation or assert that was executed.
    List of `TestReportSetupAction` items (represented as `dict` in JSON).
    """




class TestReportSetupAction(BackboneElement):
    """ A setup operation or assert that was executed.

    Action would contain either an operation or an assertion.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestReport",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    operation: typing.Optional["TestReportSetupActionOperation"]

    """ The operation to perform.
    Type `TestReportSetupActionOperation` (represented as `dict` in JSON).
    """

    assert_: typing.Optional["TestReportSetupActionAssert"]

    """ The assertion to perform.
    Type `TestReportSetupActionAssert` (represented as `dict` in JSON).
    """




class TestReportSetupActionOperation(BackboneElement):
    """ The operation to perform.

    The operation performed.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestReport",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    result: "TestReportActionResult"

    """ pass | skip | fail | warning | error.
    Type `TestReportActionResult` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    result__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_result`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    message: typing.Optional[FHIRString]

    """ A message associated with the result.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    message__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_message`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    detail: typing.Optional[FHIRString]

    """ A link to further details on the result.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    detail__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_detail`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["result"]["enum"]
            enums.clear()
            for item in TestReportActionResult:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_result = get_primitive_field_root_validator("result")
    
    _validate_primitive_message = get_primitive_field_root_validator("message")
    
    _validate_primitive_detail = get_primitive_field_root_validator("detail")
    


class TestReportSetupActionAssert(BackboneElement):
    """ The assertion to perform.

    The results of the assertion performed on the previous operations.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestReport",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





            
    
    
    result: "TestReportActionResult"

    """ pass | skip | fail | warning | error.
    Type `TestReportActionResult` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    result__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_result`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    message: typing.Optional[FHIRString]

    """ A message associated with the result.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    message__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_message`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    detail: typing.Optional[FHIRString]

    """ A link to further details on the result.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    detail__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_detail`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["result"]["enum"]
            enums.clear()
            for item in TestReportActionResult:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_result = get_primitive_field_root_validator("result")
    
    _validate_primitive_message = get_primitive_field_root_validator("message")
    
    _validate_primitive_detail = get_primitive_field_root_validator("detail")
    


class TestReportTest(BackboneElement):
    """ A test executed from the test script.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestReport",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: typing.Optional[FHIRString]

    """ Tracking/logging name of this test.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ Tracking/reporting short description of the test.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    action: typing.List["TestReportTestAction"]

    """ A test operation or assert that was performed.
    List of `TestReportTestAction` items (represented as `dict` in JSON).
    """



    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class TestReportTestAction(BackboneElement):
    """ A test operation or assert that was performed.

    Action would contain either an operation or an assertion.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestReport",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    operation: typing.Optional["TestReportSetupActionOperation"]

    """ The operation performed.
    Type `TestReportSetupActionOperation` (represented as `dict` in JSON).
    """

    assert_: typing.Optional["TestReportSetupActionAssert"]

    """ The assertion performed.
    Type `TestReportSetupActionAssert` (represented as `dict` in JSON).
    """




class TestReportTeardown(BackboneElement):
    """ The results of running the series of required clean up steps.

    The results of the series of operations required to clean up after all the
    tests were executed (successfully or otherwise).
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestReport",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    action: typing.List["TestReportTeardownAction"]

    """ One or more teardown operations performed.
    List of `TestReportTeardownAction` items (represented as `dict` in JSON).
    """




class TestReportTeardownAction(BackboneElement):
    """ One or more teardown operations performed.

    The teardown action will only contain an operation.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestReport",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    operation: "TestReportSetupActionOperation"

    """ The teardown operation performed.
    Type `TestReportSetupActionOperation` (represented as `dict` in JSON).
    """




class TestScriptOrigin(BackboneElement):
    """ An abstract server representing a client or sender in a message exchange.

    An abstract server used in operations within this test script in the origin
    element.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestScript",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    index: FHIRInt

    """ The index of the abstract origin server starting at 1.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    index__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_index`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    profile: "Coding"

    """ FHIR-Client | FHIR-SDC-FormFiller.
    Type `Coding` (represented as `dict` in JSON).
    """



    _validate_primitive_index = get_primitive_field_root_validator("index")
    


class TestScriptDestination(BackboneElement):
    """ An abstract server representing a destination or receiver in a message
    exchange.

    An abstract server used in operations within this test script in the
    destination element.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestScript",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    index: FHIRInt

    """ The index of the abstract destination server starting at 1.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    index__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_index`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    profile: "Coding"

    """ FHIR-Server | FHIR-SDC-FormManager | FHIR-SDC-FormReceiver | FHIR-
        SDC-FormProcessor.
    Type `Coding` (represented as `dict` in JSON).
    """



    _validate_primitive_index = get_primitive_field_root_validator("index")
    


class TestScriptMetadata(BackboneElement):
    """ Required capability that is assumed to function correctly on the FHIR
    server being tested.

    The required capability must exist and are assumed to function correctly on
    the FHIR server being tested.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestScript",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    link: typing.Optional[typing.List["TestScriptMetadataLink"]]

    """ Links to the FHIR specification.
    List of `TestScriptMetadataLink` items (represented as `dict` in JSON).
    """

    capability: typing.List["TestScriptMetadataCapability"]

    """ Capabilities  that are assumed to function correctly on the FHIR
        server being tested.
    List of `TestScriptMetadataCapability` items (represented as `dict` in JSON).
    """




class TestScriptMetadataLink(BackboneElement):
    """ Links to the FHIR specification.

    A link to the FHIR specification that this test is covering.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestScript",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    url: FHIRRequiredString

    """ URL to the specification.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ Short description.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_url = get_primitive_field_root_validator("url")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class TestScriptMetadataCapability(BackboneElement):
    """ Capabilities  that are assumed to function correctly on the FHIR server
    being tested.

    Capabilities that must exist and are assumed to function correctly on the
    FHIR server being tested.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestScript",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    required: bool

    """ Are the capabilities required?.
    Type `bool`. Is a JSON Primitive element.
    """
    

    required__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_required`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    validated: bool

    """ Are the capabilities validated?.
    Type `bool`. Is a JSON Primitive element.
    """
    

    validated__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_validated`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ The expected capabilities of the server.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    origin: typing.Optional[typing.List[typing.Optional[FHIRInt]]]

    """ Which origin server these requirements apply to.
    List of `FHIRInt` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    origin__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_origin`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    destination: typing.Optional[FHIRInt]

    """ Which server these requirements apply to.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    destination__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_destination`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    link: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Links to the FHIR specification.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    link__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_link`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    capabilities: FHIRRequiredString

    """ Required Capability Statement.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    capabilities__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_capabilities`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_required = get_primitive_field_root_validator("required")
    
    _validate_primitive_validated = get_primitive_field_root_validator("validated")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_origin = get_primitive_field_root_validator("origin")
    
    _validate_primitive_destination = get_primitive_field_root_validator("destination")
    
    _validate_primitive_link = get_primitive_field_root_validator("link")
    
    _validate_primitive_capabilities = get_primitive_field_root_validator("capabilities")
    


class TestScriptFixture(BackboneElement):
    """ Fixture in the test script - by reference (uri).

    Fixture in the test script - by reference (uri). All fixtures are required
    for the test script to execute.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestScript",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    autocreate: bool

    """ Whether or not to implicitly create the fixture during setup.
    Type `bool`. Is a JSON Primitive element.
    """
    

    autocreate__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_autocreate`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    autodelete: bool

    """ Whether or not to implicitly delete the fixture during teardown.
    Type `bool`. Is a JSON Primitive element.
    """
    

    autodelete__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_autodelete`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    resource: typing.Optional["Reference"]

    """ Reference of the resource.
    Type `Reference` (represented as `dict` in JSON).
    """



    _validate_primitive_autocreate = get_primitive_field_root_validator("autocreate")
    
    _validate_primitive_autodelete = get_primitive_field_root_validator("autodelete")
    


class TestScriptVariable(BackboneElement):
    """ Placeholder for evaluated elements.

    Variable is set based either on element value in response body or on header
    field value in the response headers.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestScript",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: FHIRRequiredString

    """ Descriptive name for this variable.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    default_value: typing.Optional[FHIRString]

    """ Default, hard-coded, or user-defined value for this variable.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    default_value__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_default_value`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ Natural language description of the variable.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    expression: typing.Optional[FHIRString]

    """ The FHIRPath expression against the fixture body.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    expression__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_expression`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    header_field: typing.Optional[FHIRString]

    """ HTTP header field name for source.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    header_field__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_header_field`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    hint: typing.Optional[FHIRString]

    """ Hint help text for default value to enter.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    hint__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_hint`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    path: typing.Optional[FHIRString]

    """ XPath or JSONPath against the fixture body.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    path__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_path`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    source_id: typing.Optional[FHIRId]

    """ Fixture Id of source expression or headerField within this variable.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    source_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_source_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_default_value = get_primitive_field_root_validator("default_value")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_expression = get_primitive_field_root_validator("expression")
    
    _validate_primitive_header_field = get_primitive_field_root_validator("header_field")
    
    _validate_primitive_hint = get_primitive_field_root_validator("hint")
    
    _validate_primitive_path = get_primitive_field_root_validator("path")
    
    _validate_primitive_source_id = get_primitive_field_root_validator("source_id")
    


class TestScriptSetup(BackboneElement):
    """ A series of required setup operations before tests are executed.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestScript",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    action: typing.List["TestScriptSetupAction"]

    """ A setup operation or assert to perform.
    List of `TestScriptSetupAction` items (represented as `dict` in JSON).
    """




class TestScriptSetupAction(BackboneElement):
    """ A setup operation or assert to perform.

    Action would contain either an operation or an assertion.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestScript",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    operation: typing.Optional["TestScriptSetupActionOperation"]

    """ The setup operation to perform.
    Type `TestScriptSetupActionOperation` (represented as `dict` in JSON).
    """

    assert_: typing.Optional["TestScriptSetupActionAssert"]

    """ The assertion to perform.
    Type `TestScriptSetupActionAssert` (represented as `dict` in JSON).
    """




class TestScriptSetupActionOperation(BackboneElement):
    """ The setup operation to perform.

    The operation to perform.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestScript",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    type: typing.Optional["Coding"]

    """ The operation code type that will be executed.
    Type `Coding` (represented as `dict` in JSON).
    """

    resource: typing.Optional[FHIRCode]

    """ Resource type.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    resource__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_resource`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    label: typing.Optional[FHIRString]

    """ Tracking/logging operation label.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    label__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_label`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ Tracking/reporting operation description.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    
    
    accept: typing.Optional["FHIRCode"]

    """ Mime type to accept in the payload of the response, with charset
        etc..
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    accept__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_accept`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    
    
    content_type: typing.Optional["FHIRCode"]

    """ Mime type of the request payload contents, with charset etc..
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    content_type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_content_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    destination: typing.Optional[FHIRInt]

    """ Server responding to the request.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    destination__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_destination`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    encode_request_url: bool

    """ Whether or not to send the request url in encoded format.
    Type `bool`. Is a JSON Primitive element.
    """
    

    encode_request_url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_encode_request_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    method: typing.Optional["TestScriptRequestMethodCode"]

    """ delete | get | options | patch | post | put | head.
    Type `TestScriptRequestMethodCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    method__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_method`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    origin: typing.Optional[FHIRInt]

    """ Server initiating the request.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    origin__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_origin`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    params: typing.Optional[FHIRString]

    """ Explicitly defined path parameters.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    params__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_params`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    request_header: typing.Optional[typing.List["TestScriptSetupActionOperationRequestHeader"]]

    """ Each operation can have one or more header elements.
    List of `TestScriptSetupActionOperationRequestHeader` items (represented as `dict` in JSON).
    """

    request_id: typing.Optional[FHIRId]

    """ Fixture Id of mapped request.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    request_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_request_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    response_id: typing.Optional[FHIRId]

    """ Fixture Id of mapped response.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    response_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_response_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    source_id: typing.Optional[FHIRId]

    """ Fixture Id of body for PUT and POST requests.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    source_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_source_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    target_id: typing.Optional[FHIRId]

    """ Id of fixture used for extracting the [id],  [type], and [vid] for
        GET requests.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    target_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_target_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    url: typing.Optional[FHIRString]

    """ Request URL.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    url__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_url`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["method"]["enum"]
            enums.clear()
            for item in TestScriptRequestMethodCode:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_resource = get_primitive_field_root_validator("resource")
    
    _validate_primitive_label = get_primitive_field_root_validator("label")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_accept = get_primitive_field_root_validator("accept")
    
    _validate_primitive_content_type = get_primitive_field_root_validator("content_type")
    
    _validate_primitive_destination = get_primitive_field_root_validator("destination")
    
    _validate_primitive_encode_request_url = get_primitive_field_root_validator("encode_request_url")
    
    _validate_primitive_method = get_primitive_field_root_validator("method")
    
    _validate_primitive_origin = get_primitive_field_root_validator("origin")
    
    _validate_primitive_params = get_primitive_field_root_validator("params")
    
    _validate_primitive_request_id = get_primitive_field_root_validator("request_id")
    
    _validate_primitive_response_id = get_primitive_field_root_validator("response_id")
    
    _validate_primitive_source_id = get_primitive_field_root_validator("source_id")
    
    _validate_primitive_target_id = get_primitive_field_root_validator("target_id")
    
    _validate_primitive_url = get_primitive_field_root_validator("url")
    


class TestScriptSetupActionOperationRequestHeader(BackboneElement):
    """ Each operation can have one or more header elements.

    Header elements would be used to set HTTP headers.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestScript",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    field: FHIRRequiredString

    """ HTTP header field name.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    field__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_field`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value: FHIRRequiredString

    """ HTTP headerfield value.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_field = get_primitive_field_root_validator("field")
    
    _validate_primitive_value = get_primitive_field_root_validator("value")
    


class TestScriptSetupActionAssert(BackboneElement):
    """ The assertion to perform.

    Evaluates the results of previous operations to determine if the server
    under test behaves appropriately.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestScript",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    label: typing.Optional[FHIRString]

    """ Tracking/logging assertion label.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    label__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_label`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ Tracking/reporting assertion description.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    direction: typing.Optional["AssertionDirectionType"]

    """ response | request.
    Type `AssertionDirectionType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    direction__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_direction`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    compare_to_source_id: typing.Optional[FHIRString]

    """ Id of the source fixture to be evaluated.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    compare_to_source_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_compare_to_source_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    compare_to_source_expression: typing.Optional[FHIRString]

    """ The FHIRPath expression to evaluate against the source fixture.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    compare_to_source_expression__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_compare_to_source_expression`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    compare_to_source_path: typing.Optional[FHIRString]

    """ XPath or JSONPath expression to evaluate against the source fixture.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    compare_to_source_path__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_compare_to_source_path`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    
    
    content_type: typing.Optional["FHIRCode"]

    """ Mime type to compare against the 'Content-Type' header.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    content_type__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_content_type`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    expression: typing.Optional[FHIRString]

    """ The FHIRPath expression to be evaluated.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    expression__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_expression`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    header_field: typing.Optional[FHIRString]

    """ HTTP header field name.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    header_field__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_header_field`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    minimum_id: typing.Optional[FHIRString]

    """ Fixture Id of minimum content resource.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    minimum_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_minimum_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    navigation_links: typing.Optional[bool]

    """ Perform validation on navigation links?.
    Type `bool`. Is a JSON Primitive element.
    """
    

    navigation_links__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_navigation_links`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    operator: typing.Optional["AssertionOperatorType"]

    """ equals | notEquals | in | notIn | greaterThan | lessThan | empty |
        notEmpty | contains | notContains | eval.
    Type `AssertionOperatorType` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    operator__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_operator`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    path: typing.Optional[FHIRString]

    """ XPath or JSONPath expression.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    path__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_path`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    request_method: typing.Optional["TestScriptRequestMethodCode"]

    """ delete | get | options | patch | post | put | head.
    Type `TestScriptRequestMethodCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    request_method__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_request_method`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    request_u_r_l: typing.Optional[FHIRString]

    """ Request URL comparison value.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    request_u_r_l__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_request_u_r_l`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    resource: typing.Optional[FHIRCode]

    """ Resource type.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    resource__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_resource`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    response: typing.Optional["AssertionResponseTypes"]

    """ okay | created | noContent | notModified | bad | forbidden |
        notFound | methodNotAllowed | conflict | gone | preconditionFailed
        | unprocessable.
    Type `AssertionResponseTypes` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    response__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_response`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    response_code: typing.Optional[FHIRString]

    """ HTTP response code to test.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    response_code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_response_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    source_id: typing.Optional[FHIRId]

    """ Fixture Id of source expression or headerField.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    source_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_source_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    validate_profile_id: typing.Optional[FHIRId]

    """ Profile Id of validation profile reference.
    Type `FHIRId` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    validate_profile_id__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_validate_profile_id`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value: typing.Optional[FHIRString]

    """ The value to compare to.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    warning_only: bool

    """ Will this assert produce a warning only on error?.
    Type `bool`. Is a JSON Primitive element.
    """
    

    warning_only__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_warning_only`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["direction"]["enum"]
            enums.clear()
            for item in AssertionDirectionType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["operator"]["enum"]
            enums.clear()
            for item in AssertionOperatorType:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["requestMethod"]["enum"]
            enums.clear()
            for item in TestScriptRequestMethodCode:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        
            enums = schema["properties"]["response"]["enum"]
            enums.clear()
            for item in AssertionResponseTypes:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_label = get_primitive_field_root_validator("label")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    
    _validate_primitive_direction = get_primitive_field_root_validator("direction")
    
    _validate_primitive_compare_to_source_id = get_primitive_field_root_validator("compare_to_source_id")
    
    _validate_primitive_compare_to_source_expression = get_primitive_field_root_validator("compare_to_source_expression")
    
    _validate_primitive_compare_to_source_path = get_primitive_field_root_validator("compare_to_source_path")
    
    _validate_primitive_content_type = get_primitive_field_root_validator("content_type")
    
    _validate_primitive_expression = get_primitive_field_root_validator("expression")
    
    _validate_primitive_header_field = get_primitive_field_root_validator("header_field")
    
    _validate_primitive_minimum_id = get_primitive_field_root_validator("minimum_id")
    
    _validate_primitive_navigation_links = get_primitive_field_root_validator("navigation_links")
    
    _validate_primitive_operator = get_primitive_field_root_validator("operator")
    
    _validate_primitive_path = get_primitive_field_root_validator("path")
    
    _validate_primitive_request_method = get_primitive_field_root_validator("request_method")
    
    _validate_primitive_request_u_r_l = get_primitive_field_root_validator("request_u_r_l")
    
    _validate_primitive_resource = get_primitive_field_root_validator("resource")
    
    _validate_primitive_response = get_primitive_field_root_validator("response")
    
    _validate_primitive_response_code = get_primitive_field_root_validator("response_code")
    
    _validate_primitive_source_id = get_primitive_field_root_validator("source_id")
    
    _validate_primitive_validate_profile_id = get_primitive_field_root_validator("validate_profile_id")
    
    _validate_primitive_value = get_primitive_field_root_validator("value")
    
    _validate_primitive_warning_only = get_primitive_field_root_validator("warning_only")
    


class TestScriptTest(BackboneElement):
    """ A test in this script.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestScript",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: typing.Optional[FHIRString]

    """ Tracking/logging name of this test.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    description: typing.Optional[FHIRString]

    """ Tracking/reporting short description of the test.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    description__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_description`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    action: typing.List["TestScriptTestAction"]

    """ A test operation or assert to perform.
    List of `TestScriptTestAction` items (represented as `dict` in JSON).
    """



    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_description = get_primitive_field_root_validator("description")
    


class TestScriptTestAction(BackboneElement):
    """ A test operation or assert to perform.

    Action would contain either an operation or an assertion.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestScript",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    operation: typing.Optional["TestScriptSetupActionOperation"]

    """ The setup operation to perform.
    Type `TestScriptSetupActionOperation` (represented as `dict` in JSON).
    """

    assert_: typing.Optional["TestScriptSetupActionAssert"]

    """ The setup assertion to perform.
    Type `TestScriptSetupActionAssert` (represented as `dict` in JSON).
    """




class TestScriptTeardown(BackboneElement):
    """ A series of required clean up steps.

    A series of operations required to clean up after all the tests are
    executed (successfully or otherwise).
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestScript",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    action: typing.List["TestScriptTeardownAction"]

    """ One or more teardown operations to perform.
    List of `TestScriptTeardownAction` items (represented as `dict` in JSON).
    """




class TestScriptTeardownAction(BackboneElement):
    """ One or more teardown operations to perform.

    The teardown action will only contain an operation.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/TestScript",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    operation: "TestScriptSetupActionOperation"

    """ The teardown operation to perform.
    Type `TestScriptSetupActionOperation` (represented as `dict` in JSON).
    """




class ValueSetCompose(BackboneElement):
    """ Content logical definition of the value set (CLD).

    A set of criteria that define the contents of the value set by including or
    excluding codes selected from the specified code system(s) that the value
    set draws from. This is also known as the Content Logical Definition (CLD).
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ValueSet",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    locked_date: typing.Optional[FHIRDate]

    """ Fixed date for references with no specified version (transitive).
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    locked_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_locked_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    inactive: typing.Optional[bool]

    """ Whether inactive codes are in the value set.
    Type `bool`. Is a JSON Primitive element.
    """
    

    inactive__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_inactive`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    include: typing.List["ValueSetComposeInclude"]

    """ Include one or more codes from a code system or other value set(s).
    List of `ValueSetComposeInclude` items (represented as `dict` in JSON).
    """

    exclude: typing.Optional[typing.List["ValueSetComposeInclude"]]

    """ Explicitly exclude codes from a code system or other value sets.
    List of `ValueSetComposeInclude` items (represented as `dict` in JSON).
    """



    _validate_primitive_locked_date = get_primitive_field_root_validator("locked_date")
    
    _validate_primitive_inactive = get_primitive_field_root_validator("inactive")
    


class ValueSetComposeInclude(BackboneElement):
    """ Include one or more codes from a code system or other value set(s).
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ValueSet",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    system: typing.Optional[FHIRString]

    """ The system the codes come from.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    system__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_system`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    version: typing.Optional[FHIRString]

    """ Specific version of the code system referred to.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    concept: typing.Optional[typing.List["ValueSetComposeIncludeConcept"]]

    """ A concept defined in the system.
    List of `ValueSetComposeIncludeConcept` items (represented as `dict` in JSON).
    """

    filter: typing.Optional[typing.List["ValueSetComposeIncludeFilter"]]

    """ Select codes/concepts by their properties (including relationships).
    List of `ValueSetComposeIncludeFilter` items (represented as `dict` in JSON).
    """

    value_set: typing.Optional[typing.List[typing.Optional[FHIRRequiredString]]]

    """ Select the contents included in this value set.
    List of `FHIRString` items (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_set__extension: typing.Optional[typing.List[typing.Optional["PrimitiveExtension"]]]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_set`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_system = get_primitive_field_root_validator("system")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_value_set = get_primitive_field_root_validator("value_set")
    


class ValueSetComposeIncludeConcept(BackboneElement):
    """ A concept defined in the system.

    Specifies a concept to be included or excluded.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ValueSet",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    code: FHIRCode

    """ Code or expression from system.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    display: typing.Optional[FHIRString]

    """ Text to display for this code for this value set in this valueset.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    display__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_display`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    designation: typing.Optional[typing.List["ValueSetComposeIncludeConceptDesignation"]]

    """ Additional representations for this concept.
    List of `ValueSetComposeIncludeConceptDesignation` items (represented as `dict` in JSON).
    """



    _validate_primitive_code = get_primitive_field_root_validator("code")
    
    _validate_primitive_display = get_primitive_field_root_validator("display")
    


class ValueSetComposeIncludeConceptDesignation(BackboneElement):
    """ Additional representations for this concept.

    Additional representations for this concept when used in this value set -
    other languages, aliases, specialized purposes, used for particular
    purposes, etc.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ValueSet",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    language: typing.Optional[FHIRCode]

    """ Human language of the designation.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    language__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_language`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    use: typing.Optional["Coding"]

    """ Types of uses of designations.
    Type `Coding` (represented as `dict` in JSON).
    """

    value: FHIRRequiredString

    """ The text value for this designation.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    _validate_primitive_language = get_primitive_field_root_validator("language")
    
    _validate_primitive_value = get_primitive_field_root_validator("value")
    


class ValueSetComposeIncludeFilter(BackboneElement):
    """ Select codes/concepts by their properties (including relationships).

    Select concepts by specify a matching criterion based on the properties
    (including relationships) defined by the system, or on filters defined by
    the system. If multiple filters are specified, they SHALL all be true.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ValueSet",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    property: FHIRCode

    """ A property/filter defined by the code system.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    property__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_property`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    op: "FilterOperator"

    """ = | is-a | descendent-of | is-not-a | regex | in | not-in |
        generalizes | exists.
    Type `FilterOperator` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    op__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_op`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value: FHIRRequiredString

    """ Code from the system, or regex criteria, or boolean value for
        exists.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["op"]["enum"]
            enums.clear()
            for item in FilterOperator:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_property = get_primitive_field_root_validator("property")
    
    _validate_primitive_op = get_primitive_field_root_validator("op")
    
    _validate_primitive_value = get_primitive_field_root_validator("value")
    


class ValueSetExpansion(BackboneElement):
    """ Used when the value set is "expanded".

    A value set can also be "expanded", where the value set is turned into a
    simple collection of enumerated codes. This element holds the expansion, if
    it has been performed.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ValueSet",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    identifier: typing.Optional[FHIRString]

    """ Identifies the value set expansion (business identifier).
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    identifier__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_identifier`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    timestamp: FHIRDateTime

    """ Time ValueSet expansion happened.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    timestamp__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_timestamp`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    total: typing.Optional[FHIRInt]

    """ Total number of codes in the expansion.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    total__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_total`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    offset: typing.Optional[FHIRInt]

    """ Offset at which this resource starts.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    offset__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_offset`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    parameter: typing.Optional[typing.List["ValueSetExpansionParameter"]]

    """ Parameter that controlled the expansion process.
    List of `ValueSetExpansionParameter` items (represented as `dict` in JSON).
    """

    contains: typing.Optional[typing.List["ValueSetExpansionContains"]]

    """ Codes in the value set.
    List of `ValueSetExpansionContains` items (represented as `dict` in JSON).
    """



    _validate_primitive_identifier = get_primitive_field_root_validator("identifier")
    
    _validate_primitive_timestamp = get_primitive_field_root_validator("timestamp")
    
    _validate_primitive_total = get_primitive_field_root_validator("total")
    
    _validate_primitive_offset = get_primitive_field_root_validator("offset")
    


class ValueSetExpansionParameter(BackboneElement):
    """ Parameter that controlled the expansion process.

    A parameter that controlled the expansion process. These parameters may be
    used by users of expanded value sets to check whether the expansion is
    suitable for a particular purpose, or to pick the correct expansion.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ValueSet",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    name: FHIRRequiredString

    """ Name as assigned by the client or server.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    name__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_name`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_string: typing.Optional[FHIRString]

    """ Value of the named parameter.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_string__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_string`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_boolean: typing.Optional[bool]

    """ Value of the named parameter.
    Type `bool`. Is a JSON Primitive element.
    """
    

    value_boolean__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_boolean`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_integer: typing.Optional[FHIRInt]

    """ Value of the named parameter.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_integer__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_integer`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_decimal: typing.Optional[decimal.Decimal]

    """ Value of the named parameter.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    value_decimal__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_decimal`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_uri: typing.Optional[FHIRString]

    """ Value of the named parameter.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_uri__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_uri`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_code: typing.Optional[FHIRCode]

    """ Value of the named parameter.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    value_date_time: typing.Optional[FHIRDateTime]

    """ Value of the named parameter.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    value_date_time__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_value_date_time`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



#   {'path': 'ValueSet.expansion.parameter.value[x]', 'choice_of_type': 'value', 'orig_name': 'valueString', 'name': 'valueString', 'parent_name': 'ValueSet.expansion.parameter', 'class_name': 'FHIRString', 'enum': None, 'module_name': None, 'json_class': 'str', 'is_native': True, 'is_json_primitive_field': True, 'is_array': False, 'is_summary': None, 'is_summary_n_min_conflict': False, 'nonoptional': False, 'is_optional': True, 'reference_to_names': [], 'short': 'Value of the named parameter', 'formal': 'The value of the parameter.', 'representation': None}
    _value_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set(['value_string', 'value_boolean', 'value_integer', 'value_decimal', 'value_uri', 'value_code', 'value_date_time']), True))

    _validate_primitive_name = get_primitive_field_root_validator("name")
    
    _validate_primitive_value_string = get_primitive_field_root_validator("value_string")
    
    _validate_primitive_value_boolean = get_primitive_field_root_validator("value_boolean")
    
    _validate_primitive_value_integer = get_primitive_field_root_validator("value_integer")
    
    _validate_primitive_value_decimal = get_primitive_field_root_validator("value_decimal")
    
    _validate_primitive_value_uri = get_primitive_field_root_validator("value_uri")
    
    _validate_primitive_value_code = get_primitive_field_root_validator("value_code")
    
    _validate_primitive_value_date_time = get_primitive_field_root_validator("value_date_time")
    


class ValueSetExpansionContains(BackboneElement):
    """ Codes in the value set.

    The codes that are contained in the value set expansion.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/ValueSet",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    system: typing.Optional[FHIRString]

    """ System value for the code.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    system__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_system`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    abstract: typing.Optional[bool]

    """ If user cannot select this entry.
    Type `bool`. Is a JSON Primitive element.
    """
    

    abstract__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_abstract`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    inactive: typing.Optional[bool]

    """ If concept is inactive in the code system.
    Type `bool`. Is a JSON Primitive element.
    """
    

    inactive__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_inactive`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    version: typing.Optional[FHIRString]

    """ Version in which this code/display is defined.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    version__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_version`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    code: typing.Optional[FHIRCode]

    """ Code - if blank, this is not a selectable code.
    Type `FHIRCode` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    code__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_code`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    display: typing.Optional[FHIRString]

    """ User display for the concept.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    display__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_display`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    designation: typing.Optional[typing.List["ValueSetComposeIncludeConceptDesignation"]]

    """ Additional representations for this item.
    List of `ValueSetComposeIncludeConceptDesignation` items (represented as `dict` in JSON).
    """

    contains: typing.Optional[typing.List["ValueSetExpansionContains"]]

    """ Codes contained under this entry.
    List of `ValueSetExpansionContains` items (represented as `dict` in JSON).
    """



    _validate_primitive_system = get_primitive_field_root_validator("system")
    
    _validate_primitive_abstract = get_primitive_field_root_validator("abstract")
    
    _validate_primitive_inactive = get_primitive_field_root_validator("inactive")
    
    _validate_primitive_version = get_primitive_field_root_validator("version")
    
    _validate_primitive_code = get_primitive_field_root_validator("code")
    
    _validate_primitive_display = get_primitive_field_root_validator("display")
    


class VerificationResultPrimarySource(BackboneElement):
    """ Information about the primary source(s) involved in validation.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/VerificationResult",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    who: typing.Optional["Reference"]

    """ Reference to the primary source.
    Type `Reference` (represented as `dict` in JSON).
    """

    type: typing.Optional[typing.List["CodeableConcept"]]

    """ Type of primary source (License Board; Primary Education;
        Continuing Education; Postal Service; Relationship owner;
        Registration Authority; legal source; issuing source; authoritative
        source).
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    communication_method: typing.Optional[typing.List["CodeableConcept"]]

    """ Method for exchanging information with the primary source.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """

    validation_status: typing.Optional["CodeableConcept"]

    """ successful | failed | unknown.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    validation_date: typing.Optional[FHIRDateTime]

    """ When the target was validated against the primary source.
    Type `FHIRDateTime` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    validation_date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_validation_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    can_push_updates: typing.Optional["CodeableConcept"]

    """ yes | no | undetermined.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    push_type_available: typing.Optional[typing.List["CodeableConcept"]]

    """ specific | any | source.
    List of `CodeableConcept` items (represented as `dict` in JSON).
    """



    _validate_primitive_validation_date = get_primitive_field_root_validator("validation_date")
    


class VerificationResultAttestation(BackboneElement):
    """ Information about the entity attesting to information.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/VerificationResult",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    who: typing.Optional["Reference"]

    """ The individual or organization attesting to information.
    Type `Reference` (represented as `dict` in JSON).
    """

    on_behalf_of: typing.Optional["Reference"]

    """ When the who is asserting on behalf of another (organization or
        individual).
    Type `Reference` (represented as `dict` in JSON).
    """

    communication_method: typing.Optional["CodeableConcept"]

    """ The method by which attested information was submitted/retrieved.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

    date: typing.Optional[FHIRDate]

    """ The date the information was attested to.
    Type `FHIRDate` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    date__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_date`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    source_identity_certificate: typing.Optional[FHIRString]

    """ A digital identity certificate associated with the attestation
        source.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    source_identity_certificate__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_source_identity_certificate`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    proxy_identity_certificate: typing.Optional[FHIRString]

    """ A digital identity certificate associated with the proxy entity
        submitting attested information on behalf of the attestation source.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    proxy_identity_certificate__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_proxy_identity_certificate`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    proxy_signature: typing.Optional["Signature"]

    """ Proxy signature.
    Type `Signature` (represented as `dict` in JSON).
    """

    source_signature: typing.Optional["Signature"]

    """ Attester signature.
    Type `Signature` (represented as `dict` in JSON).
    """



    _validate_primitive_date = get_primitive_field_root_validator("date")
    
    _validate_primitive_source_identity_certificate = get_primitive_field_root_validator("source_identity_certificate")
    
    _validate_primitive_proxy_identity_certificate = get_primitive_field_root_validator("proxy_identity_certificate")
    


class VerificationResultValidator(BackboneElement):
    """ Information about the entity validating information.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/VerificationResult",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    organization: "Reference"

    """ Reference to the organization validating information.
    Type `Reference` (represented as `dict` in JSON).
    """

    identity_certificate: typing.Optional[FHIRString]

    """ A digital identity certificate associated with the validator.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    identity_certificate__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_identity_certificate`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    attestation_signature: typing.Optional["Signature"]

    """ Validator signature.
    Type `Signature` (represented as `dict` in JSON).
    """



    _validate_primitive_identity_certificate = get_primitive_field_root_validator("identity_certificate")
    


class VisionPrescriptionLensSpecification(BackboneElement):
    """ Vision lens authorization.

    Contain the details of  the individual lens specifications and serves as
    the authorization for the fullfillment by certified professionals.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/VisionPrescription",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    product: "CodeableConcept"

    """ Product to be supplied.
    Type `CodeableConcept` (represented as `dict` in JSON).
    """

            
    
    
    eye: "VisionEyes"

    """ right | left.
    Type `VisionEyes` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    eye__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_eye`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    sphere: typing.Optional[decimal.Decimal]

    """ Power of the lens.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    sphere__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_sphere`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    cylinder: typing.Optional[decimal.Decimal]

    """ Lens power for astigmatism.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    cylinder__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_cylinder`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    axis: typing.Optional[FHIRInt]

    """ Lens meridian which contain no power for astigmatism.
    Type `FHIRInt` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    axis__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_axis`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    prism: typing.Optional[typing.List["VisionPrescriptionLensSpecificationPrism"]]

    """ Eye alignment compensation.
    List of `VisionPrescriptionLensSpecificationPrism` items (represented as `dict` in JSON).
    """

    add: typing.Optional[decimal.Decimal]

    """ Added power for multifocal levels.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    add__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_add`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    power: typing.Optional[decimal.Decimal]

    """ Contact lens power.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    power__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_power`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    back_curve: typing.Optional[decimal.Decimal]

    """ Contact lens back curvature.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    back_curve__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_back_curve`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    diameter: typing.Optional[decimal.Decimal]

    """ Contact lens diameter.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    diameter__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_diameter`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    duration: typing.Optional["Quantity"]

    """ Lens wear duration.
    Type `Quantity` (represented as `dict` in JSON).
    """

    color: typing.Optional[FHIRString]

    """ Color required.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    color__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_color`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    brand: typing.Optional[FHIRString]

    """ Brand required.
    Type `FHIRString` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    brand__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_brand`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

    note: typing.Optional[typing.List["Annotation"]]

    """ Notes for coatings.
    List of `Annotation` items (represented as `dict` in JSON).
    """



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["eye"]["enum"]
            enums.clear()
            for item in VisionEyes:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_eye = get_primitive_field_root_validator("eye")
    
    _validate_primitive_sphere = get_primitive_field_root_validator("sphere")
    
    _validate_primitive_cylinder = get_primitive_field_root_validator("cylinder")
    
    _validate_primitive_axis = get_primitive_field_root_validator("axis")
    
    _validate_primitive_add = get_primitive_field_root_validator("add")
    
    _validate_primitive_power = get_primitive_field_root_validator("power")
    
    _validate_primitive_back_curve = get_primitive_field_root_validator("back_curve")
    
    _validate_primitive_diameter = get_primitive_field_root_validator("diameter")
    
    _validate_primitive_color = get_primitive_field_root_validator("color")
    
    _validate_primitive_brand = get_primitive_field_root_validator("brand")
    


class VisionPrescriptionLensSpecificationPrism(BackboneElement):
    """ Eye alignment compensation.

    Allows for adjustment on two axis.
    """

    class Meta:
        profile: typing.List[str] =[
           "http://hl7.org/fhir/StructureDefinition/VisionPrescription",
        ]
        """ Profiles this resource claims to conform to.
        List of `str` items. """





    amount: decimal.Decimal

    """ Amount of adjustment.
    Type `decimal.Decimal` (represented as `float` in JSON). Is a JSON Primitive element.
    """
    

    amount__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_amount`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    

            
    
    
    base: "VisionBase"

    """ up | down | in | out.
    Type `VisionBase` (represented as `str` in JSON). Is a JSON Primitive element.
    """
    

    base__extension: typing.Optional["PrimitiveExtension"]

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_base`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """

    



    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
            enums = schema["properties"]["base"]["enum"]
            enums.clear()
            for item in VisionBase:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        

    _validate_primitive_amount = get_primitive_field_root_validator("amount")
    
    _validate_primitive_base = get_primitive_field_root_validator("base")
    
# Define custom root validators.
# Validators are added to the already defined Resources in resource_footer.py .

import re  # noqa: F811
import typing
import pydantic


def _build_fhir_api_regex() -> re.Pattern:

    _all_resources_names = set()

    def _add_subresources(_resource: typing.Type[Resource]) -> None:
        _subresources = _resource.__subclasses__()
        if len(_subresources) == 0:
            _all_resources_names.add(_resource.__name__)
        else:
            for _subresource in _subresources:
                _add_subresources(_subresource)

    _add_subresources(Resource)
    _resources_to_ignore = {"MetadataResource", "Parameters"}
    for _resource_name in _resources_to_ignore:
        _all_resources_names.remove(_resource_name)

    resources_pattern = "|".join(sorted(_all_resources_names))

    return re.compile(
        # Taken from https://www.hl7.org/fhir/references.html#literal
        r"\A"
        # From https://www.hl7.org/fhir/http.html#root : "The protocols http: and https:
        # SHALL NOT be used to refer to different underlying objects" -> we do not take it
        # in base_url group.
        r"((http|https):\/\/(?P<base_url>([A-Za-z0-9\-\\\.\:\%\$]*\/)+))?"
        r"(?P<resource_type>(" + resources_pattern + r"))\/"
        r"(?P<resource_id>[A-Za-z0-9\-\.]{1,64})"
        r"(\/_history\/(?P<version>[A-Za-z0-9\-\.]{1,64}))?"
        r"\Z"
    )


_FHIR_API_REGEX = _build_fhir_api_regex()


class _ParsedLiteralReference(pydantic.BaseModel):
    """An object containing data parsed from a literal reference with known pattern."""

    base_url: typing.Optional[str] = None
    resource_type: str
    resource_id: str
    version: typing.Optional[str] = None

    @pydantic.validator("base_url")
    def base_url_to_none(cls, v: str) -> typing.Optional[str]:
        """Convert base_url to None if it's an empty url."""
        if not v:
            return None
        return v


def _parse_literal_reference(
    reference: typing.Optional[str],
) -> typing.Optional[_ParsedLiteralReference]:
    """Try to parse a reference as if the resource is server by a FHIR API server.

    Warnings :
        - not all literal references points to a FHIR Server.
        - if reference matches the patterns, it doesn't guarantee it points to a FHIR
          Server.
    """
    if reference is not None:
        match = _FHIR_API_REGEX.match(reference)
        if match is not None:
            return _ParsedLiteralReference(**match.groupdict())
    return None


class _AnyAbsoluteUrl(pydantic.BaseModel):
    """Validator used to test if a string is an absolute URL."""

    url: pydantic.AnyUrl


def _reference_validator(values):
    """Validate Reference resource values."""
    resource_type = values.get("type")
    reference = values.get("reference")
    if reference is not None:
        parsed_literal_reference = _parse_literal_reference(reference)
        if parsed_literal_reference is not None:
            if (
                resource_type is not None
                and parsed_literal_reference.resource_type != resource_type
            ):
                raise ValueError(
                    "Reference type and resource_type from reference URL must match."
                )
        elif reference.startswith("#"):
            # Reference is an internal fragment reference referring to contained resources.
            pass
        else:
            try:
                _AnyAbsoluteUrl(url=reference)
            except pydantic.ValidationError:
                # Reference is neither an absolute URL nor an URL relative to a FHIR
                # RESTful server with pattern "TYPE/ID".
                raise ValueError(
                    "Reference must be an absolute URL or an URL relative to a FHIR RESTful server"
                )
    return values


def _extension_element_validator(values):
    """Validate extension element values.

    From https://www.hl7.org/fhir/extensibility.html#Extension :
    "An extension SHALL have either a value (i.e. a value[x] element)
    or sub-extensions, but not both. If present, the value[x] element
    SHALL have content (value attribute or other elements)."
    """
    err_msg = "An extension SHALL have either a value or sub-extensions, but not both."
    if values.get("extension") is not None:
        for key, value in values.items():
            if key.startswith("value_"):
                assert value is None, err_msg
    return values


# Dynamically add validators to Resources.
Reference._add_post_root_validator(_reference_validator)
Extension._add_post_root_validator(_extension_element_validator)
# Dynamically add validators to Resources.
# Dynamic validators are defined in "resource_custom_validators.py".
Reference._add_post_root_validator(_reference_validator)


class PrimitiveExtension(Element):
    """Class to describe any extension of a primitive value.

    Contains only `id` and `extension`.
    """


def inheritors(klass):
    subclasses = set()
    work = [klass]
    while work:
        parent = work.pop()
        for child in parent.__subclasses__():
            if child not in subclasses:
                subclasses.add(child)
                work.append(child)
    return subclasses


for subclass in inheritors(FHIRAbstractBase):
    subclass.update_forward_refs()


RESOURCE_TYPE_MAP: typing.Dict[str, Resource] = {}
for subclass in inheritors(Resource):
    RESOURCE_TYPE_MAP[subclass.__name__] = subclass


def from_dict(dict_: dict):
    """Factory to load resources directly.

    The resources will be instanciated based on their resourceType property."""

    try:
        if "resourceType" not in dict_:
            raise ValueError("Key 'resourceType' must be provided.")

        resource_type = dict_["resourceType"]
        if resource_type not in RESOURCE_TYPE_MAP:
            raise ValueError(f"ResourceType '{resource_type}' is not a valid Resource.")

        resource_class = RESOURCE_TYPE_MAP[resource_type]
        return resource_class(**dict_)

    except ValueError as e:
        # Raise a ValidationError if resourceType is not valid.
        # Works for both simple entity and nested entities.
        raise pydantic.ValidationError(
            model=FHIRAbstractResource,
            errors=[pydantic.error_wrappers.ErrorWrapper(exc=e, loc="resourceType")],
        )


def from_raw(*args, **kwargs):
    """Factory to load resources directly from the raw json string.

    The resources will be instanciated based on their resourceType property."""

    try:
        # Raise a ValueError if duplicated keys in raw JSON.
        dict_ = json_loads(*args, **kwargs)
    except ValueError as e:
        # ValueError is converted to a pydantic ValidationError.
        raise pydantic.ValidationError(
            model=FHIRAbstractResource,
            errors=[pydantic.error_wrappers.ErrorWrapper(exc=e, loc="JSON decoding")],
        )

    return from_dict(dict_)
