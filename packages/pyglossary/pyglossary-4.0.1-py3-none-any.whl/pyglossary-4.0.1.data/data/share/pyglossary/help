PyGlossary is a tool for working with dictionary databases (glossaries)
<b>Basic Usage:</b>
    <b>PyGI (Gtk3)</b> Interface:
        To open PyGlossary window:
            <b>${CMD}</b>
        PyGI is the default interface (so you never need to use "--ui=gtk" option)
        If PyGI was not found (not installed), then PyGlossary will fallback to Tkinter interface.
    <b>Tkinter</b> Interface:
        To open PyGlossary window:
            <b>${CMD} --ui=tk</b>
        Usually good for Windows and Mac OS X
    <b>Command Line</b> Interface:
        To show this help:
            ${CMD} --help
        To show program version:
            ${CMD} --version
        To Convert:
            ${CMD} <u>INPUT_FILE</u> <u>OUTPUT_FILE</u>
        To Reverse:
            ${CMD} <u>INPUT_FILE</u> <u>OUTPUT_FILE</u>.txt --reverse
        Input and output files formats will be detected from extensions.
        Except that you explicitly specify input or output format, for example:
            ${CMD} mydic.utf8 mydic.ifo --read-format=tabfile
            ${CMD} mydic.utf8 mydic.ifo --read-format tabfile
            ${CMD} mydic.ifo mydic.utf8 --write-format=tabfile
            ${CMD} mydic.ifo mydic.utf8 --write-format tabfile

<b>General Options:</b>
    Verbosity:
        <b>-v0</b> or '--verbosity 0' for critical errors only
        <b>-v1</b> or '--verbosity 1' for errors only
        <b>-v2</b> or '--verbosity 2' for errors and warnings
        <b>-v3</b> or '--verbosity 3' for errors, warnings and info
        <b>-v4</b> or '--verbosity 4' for debug mode
        <b>-v5</b> or '--verbosity 5' for trace mode
    Appearance:
        --no-progress-bar and --no-color, useful for scripts

<b>Full Convert Usage</b>:
    ${CMD} <u>INPUT_FILE</u> <u>OUTPUT_FILE</u> [-v<u>N</u>] [--read-format=<u>FORMAT</u>] [--write-format=<u>FORMAT</u>]
        [--sort|--no-sort] [--direct|--indirect] [--no-alts] [--sort-cache-size=<u>2000</u>] [--utf8-check|--no-utf8-check]
        [--lower|--no-lower] [--read-options=<u>READ_OPTIONS</u>] [--write-options=<u>WRITE_OPTIONS</u>]


Command line arguments and options (and arguments for options) is parsed with GNU getopt method
You can also just type extension of output file instead of full path, if you want to create with the same input
file name with another extension. For example:
    ${CMD} mydic.ifo txt
instead of:
    ${CMD} mydic.ifo mydic.txt
Compressing with gz, bz2 and zip is supported, just append these extension to the file name, for example:
    ${CMD} mydic.ifo mydic.txt.gz
or
    ${CMD} mydic.ifo txt.gz
And if the input file has these extensions (gz, bz2, zip), it will be extracted before loading

