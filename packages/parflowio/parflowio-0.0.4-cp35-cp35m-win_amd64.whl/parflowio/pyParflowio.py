# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pyParflowio')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pyParflowio')
    _pyParflowio = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyParflowio', [dirname(__file__)])
        except ImportError:
            import _pyParflowio
            return _pyParflowio
        try:
            _mod = imp.load_module('_pyParflowio', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pyParflowio = swig_import_helper()
    del swig_import_helper
else:
    import _pyParflowio
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyParflowio.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _pyParflowio.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _pyParflowio.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _pyParflowio.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _pyParflowio.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _pyParflowio.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _pyParflowio.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _pyParflowio.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _pyParflowio.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _pyParflowio.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _pyParflowio.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _pyParflowio.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _pyParflowio.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _pyParflowio.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _pyParflowio.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _pyParflowio.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _pyParflowio.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pyParflowio.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntArray3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntArray3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntArray3, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyParflowio.IntArray3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyParflowio.IntArray3___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyParflowio.IntArray3___bool__(self)

    def __len__(self) -> "std::array< int,3 >::size_type":
        return _pyParflowio.IntArray3___len__(self)

    def __getslice__(self, i: 'std::array< int,3 >::difference_type', j: 'std::array< int,3 >::difference_type') -> "std::array< int,3 > *":
        return _pyParflowio.IntArray3___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pyParflowio.IntArray3___setslice__(self, *args)

    def __delslice__(self, i: 'std::array< int,3 >::difference_type', j: 'std::array< int,3 >::difference_type') -> "void":
        return _pyParflowio.IntArray3___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pyParflowio.IntArray3___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::array< int,3 >::value_type const &":
        return _pyParflowio.IntArray3___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pyParflowio.IntArray3___setitem__(self, *args)

    def __init__(self, *args):
        this = _pyParflowio.new_IntArray3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _pyParflowio.IntArray3_empty(self)

    def size(self) -> "std::array< int,3 >::size_type":
        return _pyParflowio.IntArray3_size(self)

    def swap(self, v: 'IntArray3') -> "void":
        return _pyParflowio.IntArray3_swap(self, v)

    def begin(self) -> "std::array< int,3 >::iterator":
        return _pyParflowio.IntArray3_begin(self)

    def end(self) -> "std::array< int,3 >::iterator":
        return _pyParflowio.IntArray3_end(self)

    def rbegin(self) -> "std::array< int,3 >::reverse_iterator":
        return _pyParflowio.IntArray3_rbegin(self)

    def rend(self) -> "std::array< int,3 >::reverse_iterator":
        return _pyParflowio.IntArray3_rend(self)

    def front(self) -> "std::array< int,3 >::value_type const &":
        return _pyParflowio.IntArray3_front(self)

    def back(self) -> "std::array< int,3 >::value_type const &":
        return _pyParflowio.IntArray3_back(self)

    def fill(self, u: 'std::array< int,3 >::value_type const &') -> "void":
        return _pyParflowio.IntArray3_fill(self, u)
    __swig_destroy__ = _pyParflowio.delete_IntArray3
    __del__ = lambda self: None
IntArray3_swigregister = _pyParflowio.IntArray3_swigregister
IntArray3_swigregister(IntArray3)

class PFData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PFData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PFData, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pyParflowio.delete_PFData
    __del__ = lambda self: None

    def loadHeader(self) -> "int":
        return _pyParflowio.PFData_loadHeader(self)

    def getFilename(self) -> "std::string":
        return _pyParflowio.PFData_getFilename(self)

    def loadData(self) -> "int":
        return _pyParflowio.PFData_loadData(self)

    def writeFile(self, filename: 'std::string') -> "int":
        return _pyParflowio.PFData_writeFile(self, filename)

    def distFile(self, P: 'int', Q: 'int', R: 'int', outFile: 'std::string') -> "int":
        return _pyParflowio.PFData_distFile(self, P, Q, R, outFile)
    differenceType_none = _pyParflowio.PFData_differenceType_none
    differenceType_z = _pyParflowio.PFData_differenceType_z
    differenceType_y = _pyParflowio.PFData_differenceType_y
    differenceType_x = _pyParflowio.PFData_differenceType_x
    differenceType_dZ = _pyParflowio.PFData_differenceType_dZ
    differenceType_dY = _pyParflowio.PFData_differenceType_dY
    differenceType_dX = _pyParflowio.PFData_differenceType_dX
    differenceType_nZ = _pyParflowio.PFData_differenceType_nZ
    differenceType_nY = _pyParflowio.PFData_differenceType_nY
    differenceType_nX = _pyParflowio.PFData_differenceType_nX
    differenceType_data = _pyParflowio.PFData_differenceType_data

    def compare(self, otherObj: 'PFData') -> "PFData::differenceType":
        return _pyParflowio.PFData_compare(self, otherObj)

    def unflattenIndex(self, index: 'int') -> "std::array< int,3 >":
        return _pyParflowio.PFData_unflattenIndex(self, index)

    def getX(self) -> "double":
        return _pyParflowio.PFData_getX(self)

    def getY(self) -> "double":
        return _pyParflowio.PFData_getY(self)

    def getZ(self) -> "double":
        return _pyParflowio.PFData_getZ(self)

    def getP(self) -> "int":
        return _pyParflowio.PFData_getP(self)

    def getQ(self) -> "int":
        return _pyParflowio.PFData_getQ(self)

    def getR(self) -> "int":
        return _pyParflowio.PFData_getR(self)

    def setP(self, P: 'int') -> "void":
        return _pyParflowio.PFData_setP(self, P)

    def setQ(self, Q: 'int') -> "void":
        return _pyParflowio.PFData_setQ(self, Q)

    def setR(self, R: 'int') -> "void":
        return _pyParflowio.PFData_setR(self, R)

    def setX(self, X: 'double') -> "void":
        return _pyParflowio.PFData_setX(self, X)

    def setY(self, Y: 'double') -> "void":
        return _pyParflowio.PFData_setY(self, Y)

    def setZ(self, Z: 'double') -> "void":
        return _pyParflowio.PFData_setZ(self, Z)

    def getNX(self) -> "int":
        return _pyParflowio.PFData_getNX(self)

    def getNY(self) -> "int":
        return _pyParflowio.PFData_getNY(self)

    def getNZ(self) -> "int":
        return _pyParflowio.PFData_getNZ(self)

    def setNX(self, NX: 'int') -> "void":
        return _pyParflowio.PFData_setNX(self, NX)

    def setNY(self, NY: 'int') -> "void":
        return _pyParflowio.PFData_setNY(self, NY)

    def setNZ(self, NZ: 'int') -> "void":
        return _pyParflowio.PFData_setNZ(self, NZ)

    def getDX(self) -> "double":
        return _pyParflowio.PFData_getDX(self)

    def getDY(self) -> "double":
        return _pyParflowio.PFData_getDY(self)

    def getDZ(self) -> "double":
        return _pyParflowio.PFData_getDZ(self)

    def setDX(self, DX: 'double') -> "void":
        return _pyParflowio.PFData_setDX(self, DX)

    def setDY(self, DY: 'double') -> "void":
        return _pyParflowio.PFData_setDY(self, DY)

    def setDZ(self, DZ: 'double') -> "void":
        return _pyParflowio.PFData_setDZ(self, DZ)

    def getNumSubgrids(self) -> "int":
        return _pyParflowio.PFData_getNumSubgrids(self)

    def setNumSubgrids(self, mNumSubgrids: 'int') -> "void":
        return _pyParflowio.PFData_setNumSubgrids(self, mNumSubgrids)

    def getCoordinateDatum(self, x: 'int', y: 'int', z: 'int', value: 'double *') -> "int":
        return _pyParflowio.PFData_getCoordinateDatum(self, x, y, z, value)

    def __call__(self, arg2: 'int', arg3: 'int', arg4: 'int') -> "double":
        return _pyParflowio.PFData___call__(self, arg2, arg3, arg4)

    def getSubgridData(self, grid: 'int') -> "double *":
        return _pyParflowio.PFData_getSubgridData(self, grid)

    def close(self) -> "void":
        return _pyParflowio.PFData_close(self)

    def setIsDataOwner(self, isOwner: 'bool') -> "void":
        return _pyParflowio.PFData_setIsDataOwner(self, isOwner)

    def __init__(self, *args):
        this = _pyParflowio.new_PFData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setDataArray(self, pyObjIn: 'PyObject *') -> "void":
        return _pyParflowio.PFData_setDataArray(self, pyObjIn)

    def moveDataArray(self) -> "PyObject *":
        return _pyParflowio.PFData_moveDataArray(self)

    def copyDataArray(self) -> "PyObject *":
        return _pyParflowio.PFData_copyDataArray(self)

    def viewDataArray(self) -> "PyObject *":
        return _pyParflowio.PFData_viewDataArray(self)

    def getDataAsArray(self) -> "PyObject *":
        return _pyParflowio.PFData_getDataAsArray(self)

    def __str__(self):
        s = str(self.__class__.__name__) + "(X={}, Y={}, Z={}, NX={}, NY={}, NZ={}, DX={}, DY={}, DZ={})".format(self
                .getX(), self.getY(), self.getZ(), self.getNX(), self.getNY(), self.getNZ(), self.getDX(), self.getDY(),
                self.getDZ())
        return s

PFData_swigregister = _pyParflowio.PFData_swigregister
PFData_swigregister(PFData)


def calcOffset(extent: 'int', block_count: 'int', block_idx: 'int') -> "int":
    return _pyParflowio.calcOffset(extent, block_count, block_idx)
calcOffset = _pyParflowio.calcOffset

def calcExtent(extent: 'int', block_count: 'int', block_idx: 'int') -> "int":
    return _pyParflowio.calcExtent(extent, block_count, block_idx)
calcExtent = _pyParflowio.calcExtent
# This file is compatible with both classic and new-style classes.


