import sys
from xml.etree.ElementTree import Element, SubElement, Comment, tostring
from xml.dom import minidom

import click
from pytz import utc
from fitparse import FitFile


def get_localized_timestamp(record):
    return utc.localize(record.get_value("timestamp")).isoformat()


def add_record(record, track):
    #         <TriggerMethod>Manual</TriggerMethod>
    #         <Track>
    #           <Trackpoint>
    #             <Time>2020-01-01T14:00:04.000Z</Time>
    #             <AltitudeMeters>123.0</AltitudeMeters>
    #             <DistanceMeters>0.0</DistanceMeters>
    #             <HeartRateBpm>
    #               <Value>85</Value>
    #             </HeartRateBpm>
    #             <Extensions>
    #               <ns3:TPX/>
    #             </Extensions>
    #           </Trackpoint
    tp = SubElement(track, "Trackpoint")
    time = SubElement(tp, "Time")
    time.text = get_localized_timestamp(record)
    distance = SubElement(tp, "DistanceMeters")
    distance.text = str(record.get_value("Distance"))
    altitude = SubElement(tp, "AltitudeMeters")
    altitude.text = str(record.get_value("enhanced_altitude"))
    hr_val = record.get_value("Heart Rate")
    if hr_val is not None:
        heartratebpm = SubElement(tp, "HeartRateBpm")
        hr = SubElement(heartratebpm, "Value")
        hr.text = str(hr_val)
    extensions = SubElement(tp, "Extensions")
    tpx = SubElement(extensions, "ns3:TPX")
    speed = SubElement(tpx, "ns3:Speed")
    speed.text = str(record.get_value("Speed"))
    watts = SubElement(tpx, "ns3:Watts")
    watts.text = str(record.get_value("Power"))


def add_deviceinfo(messages, activity):
    creator = SubElement(activity, "Creator")
    creator.set("xsi:type", "Device_t")


def parse_fitfile(fitfile):
    top = Element("TrainingCenterDatabase")
    top.set(
        "xsi:schemaLocation",
        "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2 http://www.garmin.com/xmlschemas/TrainingCenterDatabasev2.xsd",
    )
    top.set("xmlns:ns5", "http://www.garmin.com/xmlschemas/ActivityGoals/v1")
    top.set("xmlns:ns3", "http://www.garmin.com/xmlschemas/ActivityExtension/v2")
    top.set("xmlns:ns2", "http://www.garmin.com/xmlschemas/UserProfile/v2")
    top.set("xmlns", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")
    top.set("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
    top.set("xmlns:ns4", "http://www.garmin.com/xmlschemas/ProfileExtension/v1")
    top.append(Comment("Generated by erqiq-fit-fixer"))
    activities = SubElement(top, "Activities")
    activity = SubElement(activities, "Activity")
    activity.set("Sport", "Rowing")
    id = SubElement(activity, "Id")
    lap = SubElement(activity, "Lap")
    track = SubElement(lap, "Track")

    try:
        event = list(fitfile.get_messages("event"))[0]
        id.text = get_localized_timestamp(event)
        trigger_method = SubElement(lap, "TriggerMethod")
        trigger_method.text = event.get_value("timer_trigger").title()
        intensity = SubElement(lap, "Intensity")
        intensity.text = "Active"
        start_time = event.get_value("timestamp")
    except IndexError:
        sys.stdout.write(f"Fit file is missing event or sport record")
        sys.exit(-1)

    cummulative_heartrate = 0.0
    max_heartrate = 0
    record_count = 0
    record = None
    for record in fitfile.get_messages("record"):
        add_record(record, track)
        record_count += 1
        hr = record.get_value("Heart Rate")
        if hr is None:
            continue
        if hr > max_heartrate:
            max_heartrate = hr
        cummulative_heartrate += hr
    distance = record.get_value("Distance")
    end_time = record.get_value("timestamp")
    max_hr_bpm = SubElement(lap, "MaximumHeartRateBpm")
    max_hr = SubElement(max_hr_bpm, "Value")
    max_hr.text = str(max_heartrate)
    avg_hr_bpm = SubElement(lap, "AverageHeartRateBpm")
    avg_hr = SubElement(avg_hr_bpm, "Value")
    avg_hr.text = str(int(cummulative_heartrate / record_count))
    distance_meters = SubElement(lap, "DistanceMeters")
    distance_meters.text = str(distance + 0.1)
    total_time = SubElement(lap, "TotalTimeSeconds")
    total_time.text = str((end_time - start_time).total_seconds())
    return top


@click.group()
def cli():
    """Parses fit files with ConnectIQ data and exports to TCX"""


@cli.command("parse")
@click.argument("fitfile", type=click.Path(exists=True, dir_okay=False))
def parse(fitfile):
    filename = click.format_filename(fitfile)
    ff = FitFile(filename)
    xml = parse_fitfile(ff)
    dom = minidom.parseString(tostring(xml, "utf-8"))
    with open(f"activity_{filename.split('.')[0]}.tcx", "w") as output:
        output.write(dom.toprettyxml(encoding="UTF-8").decode("UTF-8"))


if __name__ == "__main__":
    cli()
