---
- name: "set local_image_path"
  set_fact:
    local_image_path: "{{ libvirt_image_path | expanduser }}"

- name: "ensure local_image_path directory exists"
  file:
    path: "{{ local_image_path }}"
    state: directory
  remote_user: "{{ remote_user }}"
  delegate_to: "{{ uri_hostname }}"

- name: "set image_src_basename"
  set_fact:
    image_src_basename: "{{ res_def['image_src'] | basename }}"

- name: "Register local_image_src absolute path"
  set_fact:
    local_image_src: "{{ local_image_path }}/{{ image_src_basename }}"

- name: "does a local copy of image_src exist?"
  # find the image_src, copy it to /var/lib/libvirt/linchpin/<res_name>
  stat:
    path: "{{ local_image_src }}"
  remote_user: "{{ remote_user }}"
  delegate_to: "{{ uri_hostname }}"
  register: lis_remote

- name: "download image_src"
  get_url:
    url: "{{ res_def['image_src'] }}"
    dest: "{{ local_image_src }}"
  remote_user: "{{ remote_user }}"
  delegate_to: "{{ uri_hostname }}"
  when: lis_remote.stat.exists == false
  ignore_errors: yes

- name: "determine image_src mimetype"
  # identify file type
  stat:
    path: "{{ local_image_src }}"
    mime: true
  remote_user: "{{ remote_user }}"
  delegate_to: "{{ uri_hostname }}"
  register: lismt_remote

- name: "set image_src for uncompressed files"
  set_fact:
    img_src: "{{ local_image_src }}"
  when: lismt_remote.stat.mimetype == "application/octet-stream"

- name: "set image_src basename to remove .xz extension"
  set_fact:
    img_src_basename: "{{ res_def['image_src'].split('.xz')[0] | basename }}"
  when: lismt_remote.stat.mimetype == "application/x-xz"

- name: "set img_src for xz compressed files"
  set_fact:
    img_src: "{{ local_image_path }}{{ img_src_basename }}"
  when: lismt_remote.stat.mimetype == "application/x-xz"

- name: "get img_src_basename extension"
  set_fact:
    img_src_ext: "{{ image_src_basename.split('.')[-1] }}"
  when: lismt_remote.stat.mimetype != "application/x-xz"

- name: "get img_src_basename extension"
  set_fact:
    img_src_ext: "{{ image_src_basename.split('.')[-2] }}"
  when: lismt_remote.stat.mimetype == "application/x-xz"

- name: "does img_src exist at local_image_path?"
  stat:
    path: "{{ img_src }}"
  register: ismt_remote
  remote_user: "{{ res_def['remote_user'] }}"
  delegate_to: "{{ uri_hostname }}"
  when: lismt_remote.stat.mimetype == "application/x-xz"

- name: "uncompress xz local_image_src"
  command: "xz -d --keep --force {{ local_image_src }}"
  remote_user: "{{ res_def['remote_user'] }}"
  delegate_to: "{{ uri_hostname }}"
  when: lismt_remote.stat.mimetype == "application/x-xz" and ismt_remote.stat.exists == false

- name: "cp img_src to match node name"
  copy:
    src: "{{ img_src }}"
    dest: "{{ img_item[0] }}{{ img_item[1] }}{{img_item[4]}}{{ img_item[2] }}.{{ img_item[3] }}"
    remote_src: true
  with_nested:
    - ["{{ local_image_path }}"]
    - ["{{ libvirt_resource_name }}"]
    - "{{ res_count }}"
    - ["{{ img_src_ext }}"]
    - ["{{ res_def['name_separator'] | default('_') }}"]
  loop_control:
    loop_var: img_item
  remote_user: "{{ res_def['remote_user'] }}"
  delegate_to: "{{ uri_hostname }}"
  #when: ismt.stat.exists == false (if there's an option at some point to reuse disk, this would be helpful)
