- name: "provision/deprovision the os volume resource type"
  os_volume:
    auth: "{{ auth_var | omit_filter(omit) }}"
    state: "{{ state }}"
    size: "{{ res_def['size'] }}"
    display_name: "{{ res_def['res_name'] | default(res_def['name']) }}"
  when: res_def['count'] is not defined
  register: res_def_vol_output
  no_log: "{{ not debug_mode }}"

- name: "Append outputitem to topology_outputs"
  set_fact:
    topology_outputs_os_volume: "{{ topology_outputs_os_volume +
                                    [res_def_vol_output] }}"
  when: not _async and res_def['count'] is not defined

- name: "Register resource count"
  shell: python -c "print([x for x in range( 0, {{ res_def['count'] }} )])"
  register: res_count
  when: res_def['count'] is defined

- name: "provision/deprovision cinder volumes when count specified"
  os_volume:
    auth: "{{ auth_var | omit_filter(omit) }}"
    state: "{{ vol.3 }}"
    size: "{{ vol.2 }}"
    display_name: "{{ vol.1 }}{{ default_delimiter }}{{ vol.4 }}"
  with_nested:
    - ["{{ auth_var | default(omit) }}"]
    - ["{{ res_def['res_name'] | default(res_def['name']) }}"]
    - ["{{ res_def['size'] }}"]
    - ["{{ state }}"]
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: vol
  register: res_def_output
  when: res_def['count'] is defined and not _async
  no_log: "{{ not debug_mode }}"

- name: "Append outputitem to topology_outputs"
  set_fact:
    topology_outputs_os_volume: "{{ topology_outputs_os_volume +
                                    res_def_output.results }}"
  when: not _async and res_def['count'] is defined

- name: "Async:: provision/deprovision cinder volumes when count specified"
  os_volume:
    auth: "{{ auth_var | omit_filter(omit) }}"
    state: "{{ vol.3 }}"
    size: "{{ vol.2 }}"
    display_name: "{{ vol.1 }}{{ default_delimiter }}{{ vol.4 }}"
  with_nested:
    - ["{{ auth_var | default(omit) }}"]
    - ["{{ res_def['res_name'] | default(res_def['name']) }}"]
    - ["{{ res_def['size'] }}"]
    - ["{{ state }}"]
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: vol
  async: "{{ async_timeout }}"
  poll: 0
  register: res_def_output
  when: res_def['count'] is defined and _async
  no_log: "{{ not debug_mode }}"

- name: "Async:: save the job id"
  set_fact:
    topology_outputs_os_volume: "{{ topology_outputs_os_volume +
                                    [ res_def_output ] }}"
  when: _async
