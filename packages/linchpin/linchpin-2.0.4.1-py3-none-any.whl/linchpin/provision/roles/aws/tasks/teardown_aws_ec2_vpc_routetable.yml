- name: Handle deprecated modules
  block:
    # to be update after ansible 2.8 is deprecated
    - name: "Fetch vpc details when vpc_name is defined"
      ec2_vpc_net_facts:
        aws_access_key: "{{ auth_var['aws_access_key_id'] | default(omit) }}"
        aws_secret_key: "{{ auth_var['aws_secret_access_key'] |
                            default(omit) }}"
        region: "{{ res_def['region'] }}"
        filters:
          "tag:Name": "{{ res_def['vpc_name'] }}"
      register: vpc_net_details
      when: res_def['vpc_name'] is defined
    - name: fail when above task is skipped
      fail:
        msg: >
          "fail when it is skipped or not available. failing back to deprecated
           module"
      when: vpc_net_details.skipped is defined
  rescue:
    - name: "Fetch vpc details when vpc_name is defined"
      ec2_vpc_net_info:
        aws_access_key: "{{ auth_var['aws_access_key_id'] | default(omit) }}"
        aws_secret_key: "{{ auth_var['aws_secret_access_key'] |
                            default(omit) }}"
        region: "{{ res_def['region'] }}"
        filters:
          "tag:Name": "{{ res_def['vpc_name'] }}"
      register: vpc_net_details

- name: "Fetch vpc details when vpc_name is defined"
  set_fact:
    vpc_id_fetched: "{{ vpc_net_details['vpcs'] | first | default({})
                     | fetch_attr('vpc_id', '') }}"
  when: res_def['vpc_name'] is defined

- name: "Fetch vpc route table facts by name"
  ec2_vpc_route_table_facts:
    aws_access_key: "{{ auth_var['aws_access_key_id'] | default(omit) }}"
    aws_secret_key: "{{ auth_var['aws_secret_access_key'] | default(omit) }}"
    filters:
      "tag:Name": "{{ res_def['name'] }}"
    region: "{{ res_def['region'] }}"
  register: routetable_facts

- name: setfact for routetable_id
  set_fact:
    route_table_id: "{{ routetable_facts['route_tables'][0].id }}"
  ignore_errors: true

- name: "Add tags to route table"
  set_fact:
    routetable_tags: "{{ res_def['tags'] | default({}) }}"

- name: "Append name to tags"
  set_fact:
    routetable_tags: "{{ routetable_tags
                      | combine({routekey.key: routekey.value}) }}"
  with_items:
    - {key: 'Name', value: "{{ res_def['name'] }}"}
  loop_control:
    loop_var: routekey

- name: "Teardown AWS_EC2_VPC_ROUTETABLE"
  ec2_vpc_route_table:
    aws_access_key: "{{ auth_var['aws_access_key_id'] | default(omit) }}"
    aws_secret_key: "{{ auth_var['aws_secret_access_key'] | default(omit) }}"
    # either vpc_id or vpc_name needs to be mentioned in topology
    vpc_id: "{{ res_def['vpc_id'] | default(vpc_id_fetched) }}"
    region: "{{ res_def['region'] }}"
    route_table_id: "{{ route_table_id | default(omit) }}"
    tags: "{{ routetable_tags }}"
    subnets: "{{ res_def['subnets'] | default(omit) }}"
    state: "{{ state }}"
  register: res_def_output
