import numpy as np

from . import common_args
from ..util import read_param_file, scale_samples


def sample(problem, N, seed=None):
    """Generate model inputs using Latin hypercube sampling (LHS).

    Returns a NumPy matrix containing the model inputs generated by Latin
    hypercube sampling.  The resulting matrix contains N rows and D columns,
    where D is the number of parameters.

    Parameters
    ----------
    problem : dict
        The problem definition
    N : int
        The number of samples to generate


    References
    ----------
    .. [1] McKay, M.D., Beckman, R.J., Conover, W.J., 1979. 
           A comparison of three methods for selecting values of input 
           variables in the analysis of output from a computer code. 
           Technometrics 21, 239–245. 
           https://doi.org/10.2307/1268522

    .. [2] Iman, R.L., Helton, J.C., Campbell, J.E., 1981. 
           An Approach to Sensitivity Analysis of Computer Models: 
           Part I—Introduction, Input Variable Selection and 
           Preliminary Variable Assessment. 
           Journal of Quality Technology 13, 174–183. 
           https://doi.org/10.1080/00224065.1981.11978748

    """
    if seed:
        np.random.seed(seed)
    D = problem['num_vars']

    result = np.empty([N, D])
    temp = np.empty([N])
    d = 1.0 / N

    for i in range(D):
        for j in range(N):
            temp[j] = np.random.uniform(low=j * d, 
                                        high=(j + 1) * d)

        np.random.shuffle(temp)

        for j in range(N):
            result[j, i] = temp[j]

    result = scale_samples(result, problem)

    return result


# No additional CLI options
cli_parse = None


def cli_action(args):
    """Run sampling method

    Parameters
    ----------
    args : argparse namespace
    """
    problem = read_param_file(args.paramfile)
    param_values = sample(problem, args.samples, seed=args.seed)
    np.savetxt(args.output, param_values, delimiter=args.delimiter,
               fmt='%.' + str(args.precision) + 'e')


if __name__ == "__main__":
    common_args.run_cli(cli_parse, cli_action)
