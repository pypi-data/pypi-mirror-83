# ./fields.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:9a28546cb3c6547e22c7f11b1830724889885c3f
# Generated 2020-10-26 13:29:28.894076 by PyXB version 1.2.6 using Python 2.7.16.final.0
# Namespace http://www.vantivcnp.com/schema

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:f1f2ad99-17c9-11eb-96b0-acde48001122')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.vantivcnp.com/schema', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 6, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}user uses Python identifier user
    __user = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'user'), 'user', '__httpwww_vantivcnp_comschema_CTD_ANON_httpwww_vantivcnp_comschemauser', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 8, 16), )

    
    user = property(__user.value, __user.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}password uses Python identifier password
    __password = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'password'), 'password', '__httpwww_vantivcnp_comschema_CTD_ANON_httpwww_vantivcnp_comschemapassword', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 9, 16), )

    
    password = property(__password.value, __password.set, None, None)

    _ElementMap.update({
        __user.name() : __user,
        __password.name() : __password
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type {http://www.vantivcnp.com/schema}contact with content type ELEMENT_ONLY
class contact (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}contact with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'contact')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 58, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_vantivcnp_comschema_contact_httpwww_vantivcnp_comschemaname', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 60, 12), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}firstName uses Python identifier firstName
    __firstName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'firstName'), 'firstName', '__httpwww_vantivcnp_comschema_contact_httpwww_vantivcnp_comschemafirstName', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 61, 12), )

    
    firstName = property(__firstName.value, __firstName.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}middleInitial uses Python identifier middleInitial
    __middleInitial = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'middleInitial'), 'middleInitial', '__httpwww_vantivcnp_comschema_contact_httpwww_vantivcnp_comschemamiddleInitial', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 62, 12), )

    
    middleInitial = property(__middleInitial.value, __middleInitial.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}lastName uses Python identifier lastName
    __lastName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'lastName'), 'lastName', '__httpwww_vantivcnp_comschema_contact_httpwww_vantivcnp_comschemalastName', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 63, 12), )

    
    lastName = property(__lastName.value, __lastName.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}companyName uses Python identifier companyName
    __companyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'companyName'), 'companyName', '__httpwww_vantivcnp_comschema_contact_httpwww_vantivcnp_comschemacompanyName', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 64, 12), )

    
    companyName = property(__companyName.value, __companyName.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}addressLine1 uses Python identifier addressLine1
    __addressLine1 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressLine1'), 'addressLine1', '__httpwww_vantivcnp_comschema_contact_httpwww_vantivcnp_comschemaaddressLine1', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 65, 12), )

    
    addressLine1 = property(__addressLine1.value, __addressLine1.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}addressLine2 uses Python identifier addressLine2
    __addressLine2 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressLine2'), 'addressLine2', '__httpwww_vantivcnp_comschema_contact_httpwww_vantivcnp_comschemaaddressLine2', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 66, 12), )

    
    addressLine2 = property(__addressLine2.value, __addressLine2.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}addressLine3 uses Python identifier addressLine3
    __addressLine3 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressLine3'), 'addressLine3', '__httpwww_vantivcnp_comschema_contact_httpwww_vantivcnp_comschemaaddressLine3', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 67, 12), )

    
    addressLine3 = property(__addressLine3.value, __addressLine3.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}city uses Python identifier city
    __city = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'city'), 'city', '__httpwww_vantivcnp_comschema_contact_httpwww_vantivcnp_comschemacity', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 68, 12), )

    
    city = property(__city.value, __city.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}state uses Python identifier state
    __state = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'state'), 'state', '__httpwww_vantivcnp_comschema_contact_httpwww_vantivcnp_comschemastate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 69, 12), )

    
    state = property(__state.value, __state.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}zip uses Python identifier zip
    __zip = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'zip'), 'zip', '__httpwww_vantivcnp_comschema_contact_httpwww_vantivcnp_comschemazip', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 70, 12), )

    
    zip = property(__zip.value, __zip.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}country uses Python identifier country
    __country = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'country'), 'country', '__httpwww_vantivcnp_comschema_contact_httpwww_vantivcnp_comschemacountry', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 71, 12), )

    
    country = property(__country.value, __country.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}email uses Python identifier email
    __email = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'email'), 'email', '__httpwww_vantivcnp_comschema_contact_httpwww_vantivcnp_comschemaemail', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 72, 12), )

    
    email = property(__email.value, __email.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}phone uses Python identifier phone
    __phone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'phone'), 'phone', '__httpwww_vantivcnp_comschema_contact_httpwww_vantivcnp_comschemaphone', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 73, 12), )

    
    phone = property(__phone.value, __phone.set, None, None)

    _ElementMap.update({
        __name.name() : __name,
        __firstName.name() : __firstName,
        __middleInitial.name() : __middleInitial,
        __lastName.name() : __lastName,
        __companyName.name() : __companyName,
        __addressLine1.name() : __addressLine1,
        __addressLine2.name() : __addressLine2,
        __addressLine3.name() : __addressLine3,
        __city.name() : __city,
        __state.name() : __state,
        __zip.name() : __zip,
        __country.name() : __country,
        __email.name() : __email,
        __phone.name() : __phone
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.contact = contact
Namespace.addCategoryObject('typeBinding', 'contact', contact)


# Complex type {http://www.vantivcnp.com/schema}mposType with content type ELEMENT_ONLY
class mposType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}mposType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'mposType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 79, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}ksn uses Python identifier ksn
    __ksn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ksn'), 'ksn', '__httpwww_vantivcnp_comschema_mposType_httpwww_vantivcnp_comschemaksn', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 81, 12), )

    
    ksn = property(__ksn.value, __ksn.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}formatId uses Python identifier formatId
    __formatId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'formatId'), 'formatId', '__httpwww_vantivcnp_comschema_mposType_httpwww_vantivcnp_comschemaformatId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 82, 12), )

    
    formatId = property(__formatId.value, __formatId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}encryptedTrack uses Python identifier encryptedTrack
    __encryptedTrack = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'encryptedTrack'), 'encryptedTrack', '__httpwww_vantivcnp_comschema_mposType_httpwww_vantivcnp_comschemaencryptedTrack', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 83, 12), )

    
    encryptedTrack = property(__encryptedTrack.value, __encryptedTrack.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}track1Status uses Python identifier track1Status
    __track1Status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'track1Status'), 'track1Status', '__httpwww_vantivcnp_comschema_mposType_httpwww_vantivcnp_comschematrack1Status', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 84, 12), )

    
    track1Status = property(__track1Status.value, __track1Status.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}track2Status uses Python identifier track2Status
    __track2Status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'track2Status'), 'track2Status', '__httpwww_vantivcnp_comschema_mposType_httpwww_vantivcnp_comschematrack2Status', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 85, 12), )

    
    track2Status = property(__track2Status.value, __track2Status.set, None, None)

    _ElementMap.update({
        __ksn.name() : __ksn,
        __formatId.name() : __formatId,
        __encryptedTrack.name() : __encryptedTrack,
        __track1Status.name() : __track1Status,
        __track2Status.name() : __track2Status
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.mposType = mposType
Namespace.addCategoryObject('typeBinding', 'mposType', mposType)


# Complex type {http://www.vantivcnp.com/schema}cardType with content type ELEMENT_ONLY
class cardType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}cardType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'cardType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 89, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__httpwww_vantivcnp_comschema_cardType_httpwww_vantivcnp_comschematype', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 93, 20), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}number uses Python identifier number
    __number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'number'), 'number', '__httpwww_vantivcnp_comschema_cardType_httpwww_vantivcnp_comschemanumber', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 94, 20), )

    
    number = property(__number.value, __number.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}expDate uses Python identifier expDate
    __expDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'expDate'), 'expDate', '__httpwww_vantivcnp_comschema_cardType_httpwww_vantivcnp_comschemaexpDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 95, 20), )

    
    expDate = property(__expDate.value, __expDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}track uses Python identifier track
    __track = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'track'), 'track', '__httpwww_vantivcnp_comschema_cardType_httpwww_vantivcnp_comschematrack', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 98, 20), )

    
    track = property(__track.value, __track.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cardValidationNum uses Python identifier cardValidationNum
    __cardValidationNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum'), 'cardValidationNum', '__httpwww_vantivcnp_comschema_cardType_httpwww_vantivcnp_comschemacardValidationNum', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 101, 12), )

    
    cardValidationNum = property(__cardValidationNum.value, __cardValidationNum.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}pin uses Python identifier pin
    __pin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pin'), 'pin', '__httpwww_vantivcnp_comschema_cardType_httpwww_vantivcnp_comschemapin', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 102, 12), )

    
    pin = property(__pin.value, __pin.set, None, None)

    _ElementMap.update({
        __type.name() : __type,
        __number.name() : __number,
        __expDate.name() : __expDate,
        __track.name() : __track,
        __cardValidationNum.name() : __cardValidationNum,
        __pin.name() : __pin
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.cardType = cardType
Namespace.addCategoryObject('typeBinding', 'cardType', cardType)


# Complex type {http://www.vantivcnp.com/schema}cardTokenType with content type ELEMENT_ONLY
class cardTokenType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}cardTokenType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'cardTokenType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 128, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}cnpToken uses Python identifier cnpToken
    __cnpToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpToken'), 'cnpToken', '__httpwww_vantivcnp_comschema_cardTokenType_httpwww_vantivcnp_comschemacnpToken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 131, 16), )

    
    cnpToken = property(__cnpToken.value, __cnpToken.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}tokenURL uses Python identifier tokenURL
    __tokenURL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenURL'), 'tokenURL', '__httpwww_vantivcnp_comschema_cardTokenType_httpwww_vantivcnp_comschematokenURL', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 132, 16), )

    
    tokenURL = property(__tokenURL.value, __tokenURL.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}expDate uses Python identifier expDate
    __expDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'expDate'), 'expDate', '__httpwww_vantivcnp_comschema_cardTokenType_httpwww_vantivcnp_comschemaexpDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 134, 12), )

    
    expDate = property(__expDate.value, __expDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cardValidationNum uses Python identifier cardValidationNum
    __cardValidationNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum'), 'cardValidationNum', '__httpwww_vantivcnp_comschema_cardTokenType_httpwww_vantivcnp_comschemacardValidationNum', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 135, 12), )

    
    cardValidationNum = property(__cardValidationNum.value, __cardValidationNum.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__httpwww_vantivcnp_comschema_cardTokenType_httpwww_vantivcnp_comschematype', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 136, 12), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}checkoutId uses Python identifier checkoutId
    __checkoutId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'checkoutId'), 'checkoutId', '__httpwww_vantivcnp_comschema_cardTokenType_httpwww_vantivcnp_comschemacheckoutId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 137, 12), )

    
    checkoutId = property(__checkoutId.value, __checkoutId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}authenticatedShopperID uses Python identifier authenticatedShopperID
    __authenticatedShopperID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authenticatedShopperID'), 'authenticatedShopperID', '__httpwww_vantivcnp_comschema_cardTokenType_httpwww_vantivcnp_comschemaauthenticatedShopperID', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 138, 12), )

    
    authenticatedShopperID = property(__authenticatedShopperID.value, __authenticatedShopperID.set, None, None)

    _ElementMap.update({
        __cnpToken.name() : __cnpToken,
        __tokenURL.name() : __tokenURL,
        __expDate.name() : __expDate,
        __cardValidationNum.name() : __cardValidationNum,
        __type.name() : __type,
        __checkoutId.name() : __checkoutId,
        __authenticatedShopperID.name() : __authenticatedShopperID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.cardTokenType = cardTokenType
Namespace.addCategoryObject('typeBinding', 'cardTokenType', cardTokenType)


# Complex type {http://www.vantivcnp.com/schema}cardPaypageType with content type ELEMENT_ONLY
class cardPaypageType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}cardPaypageType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'cardPaypageType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 144, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}paypageRegistrationId uses Python identifier paypageRegistrationId
    __paypageRegistrationId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paypageRegistrationId'), 'paypageRegistrationId', '__httpwww_vantivcnp_comschema_cardPaypageType_httpwww_vantivcnp_comschemapaypageRegistrationId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 146, 12), )

    
    paypageRegistrationId = property(__paypageRegistrationId.value, __paypageRegistrationId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}expDate uses Python identifier expDate
    __expDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'expDate'), 'expDate', '__httpwww_vantivcnp_comschema_cardPaypageType_httpwww_vantivcnp_comschemaexpDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 147, 12), )

    
    expDate = property(__expDate.value, __expDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cardValidationNum uses Python identifier cardValidationNum
    __cardValidationNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum'), 'cardValidationNum', '__httpwww_vantivcnp_comschema_cardPaypageType_httpwww_vantivcnp_comschemacardValidationNum', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 148, 12), )

    
    cardValidationNum = property(__cardValidationNum.value, __cardValidationNum.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__httpwww_vantivcnp_comschema_cardPaypageType_httpwww_vantivcnp_comschematype', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 149, 12), )

    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __paypageRegistrationId.name() : __paypageRegistrationId,
        __expDate.name() : __expDate,
        __cardValidationNum.name() : __cardValidationNum,
        __type.name() : __type
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.cardPaypageType = cardPaypageType
Namespace.addCategoryObject('typeBinding', 'cardPaypageType', cardPaypageType)


# Complex type {http://www.vantivcnp.com/schema}tokenResponseType with content type ELEMENT_ONLY
class tokenResponseType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}tokenResponseType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'tokenResponseType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 153, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}cnpToken uses Python identifier cnpToken
    __cnpToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpToken'), 'cnpToken', '__httpwww_vantivcnp_comschema_tokenResponseType_httpwww_vantivcnp_comschemacnpToken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 155, 12), )

    
    cnpToken = property(__cnpToken.value, __cnpToken.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}tokenResponseCode uses Python identifier tokenResponseCode
    __tokenResponseCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenResponseCode'), 'tokenResponseCode', '__httpwww_vantivcnp_comschema_tokenResponseType_httpwww_vantivcnp_comschematokenResponseCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 156, 12), )

    
    tokenResponseCode = property(__tokenResponseCode.value, __tokenResponseCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}tokenMessage uses Python identifier tokenMessage
    __tokenMessage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenMessage'), 'tokenMessage', '__httpwww_vantivcnp_comschema_tokenResponseType_httpwww_vantivcnp_comschematokenMessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 157, 12), )

    
    tokenMessage = property(__tokenMessage.value, __tokenMessage.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__httpwww_vantivcnp_comschema_tokenResponseType_httpwww_vantivcnp_comschematype', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 158, 12), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}bin uses Python identifier bin
    __bin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bin'), 'bin', '__httpwww_vantivcnp_comschema_tokenResponseType_httpwww_vantivcnp_comschemabin', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 159, 12), )

    
    bin = property(__bin.value, __bin.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}eCheckAccountSuffix uses Python identifier eCheckAccountSuffix
    __eCheckAccountSuffix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eCheckAccountSuffix'), 'eCheckAccountSuffix', '__httpwww_vantivcnp_comschema_tokenResponseType_httpwww_vantivcnp_comschemaeCheckAccountSuffix', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 160, 12), )

    
    eCheckAccountSuffix = property(__eCheckAccountSuffix.value, __eCheckAccountSuffix.set, None, None)

    _ElementMap.update({
        __cnpToken.name() : __cnpToken,
        __tokenResponseCode.name() : __tokenResponseCode,
        __tokenMessage.name() : __tokenMessage,
        __type.name() : __type,
        __bin.name() : __bin,
        __eCheckAccountSuffix.name() : __eCheckAccountSuffix
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.tokenResponseType = tokenResponseType
Namespace.addCategoryObject('typeBinding', 'tokenResponseType', tokenResponseType)


# Complex type {http://www.vantivcnp.com/schema}advancedFraudChecksType with content type ELEMENT_ONLY
class advancedFraudChecksType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}advancedFraudChecksType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'advancedFraudChecksType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 170, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}threatMetrixSessionId uses Python identifier threatMetrixSessionId
    __threatMetrixSessionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'threatMetrixSessionId'), 'threatMetrixSessionId', '__httpwww_vantivcnp_comschema_advancedFraudChecksType_httpwww_vantivcnp_comschemathreatMetrixSessionId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 172, 12), )

    
    threatMetrixSessionId = property(__threatMetrixSessionId.value, __threatMetrixSessionId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}webSessionId uses Python identifier webSessionId
    __webSessionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'webSessionId'), 'webSessionId', '__httpwww_vantivcnp_comschema_advancedFraudChecksType_httpwww_vantivcnp_comschemawebSessionId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 173, 12), )

    
    webSessionId = property(__webSessionId.value, __webSessionId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customAttribute1 uses Python identifier customAttribute1
    __customAttribute1 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customAttribute1'), 'customAttribute1', '__httpwww_vantivcnp_comschema_advancedFraudChecksType_httpwww_vantivcnp_comschemacustomAttribute1', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 174, 12), )

    
    customAttribute1 = property(__customAttribute1.value, __customAttribute1.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customAttribute2 uses Python identifier customAttribute2
    __customAttribute2 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customAttribute2'), 'customAttribute2', '__httpwww_vantivcnp_comschema_advancedFraudChecksType_httpwww_vantivcnp_comschemacustomAttribute2', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 175, 12), )

    
    customAttribute2 = property(__customAttribute2.value, __customAttribute2.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customAttribute3 uses Python identifier customAttribute3
    __customAttribute3 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customAttribute3'), 'customAttribute3', '__httpwww_vantivcnp_comschema_advancedFraudChecksType_httpwww_vantivcnp_comschemacustomAttribute3', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 176, 12), )

    
    customAttribute3 = property(__customAttribute3.value, __customAttribute3.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customAttribute4 uses Python identifier customAttribute4
    __customAttribute4 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customAttribute4'), 'customAttribute4', '__httpwww_vantivcnp_comschema_advancedFraudChecksType_httpwww_vantivcnp_comschemacustomAttribute4', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 177, 12), )

    
    customAttribute4 = property(__customAttribute4.value, __customAttribute4.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customAttribute5 uses Python identifier customAttribute5
    __customAttribute5 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customAttribute5'), 'customAttribute5', '__httpwww_vantivcnp_comschema_advancedFraudChecksType_httpwww_vantivcnp_comschemacustomAttribute5', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 178, 12), )

    
    customAttribute5 = property(__customAttribute5.value, __customAttribute5.set, None, None)

    _ElementMap.update({
        __threatMetrixSessionId.name() : __threatMetrixSessionId,
        __webSessionId.name() : __webSessionId,
        __customAttribute1.name() : __customAttribute1,
        __customAttribute2.name() : __customAttribute2,
        __customAttribute3.name() : __customAttribute3,
        __customAttribute4.name() : __customAttribute4,
        __customAttribute5.name() : __customAttribute5
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.advancedFraudChecksType = advancedFraudChecksType
Namespace.addCategoryObject('typeBinding', 'advancedFraudChecksType', advancedFraudChecksType)


# Complex type {http://www.vantivcnp.com/schema}advancedFraudResultsType with content type ELEMENT_ONLY
class advancedFraudResultsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}advancedFraudResultsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'advancedFraudResultsType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 184, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}deviceReviewStatus uses Python identifier deviceReviewStatus
    __deviceReviewStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deviceReviewStatus'), 'deviceReviewStatus', '__httpwww_vantivcnp_comschema_advancedFraudResultsType_httpwww_vantivcnp_comschemadeviceReviewStatus', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 186, 12), )

    
    deviceReviewStatus = property(__deviceReviewStatus.value, __deviceReviewStatus.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}deviceReputationScore uses Python identifier deviceReputationScore
    __deviceReputationScore = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deviceReputationScore'), 'deviceReputationScore', '__httpwww_vantivcnp_comschema_advancedFraudResultsType_httpwww_vantivcnp_comschemadeviceReputationScore', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 187, 12), )

    
    deviceReputationScore = property(__deviceReputationScore.value, __deviceReputationScore.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}triggeredRule uses Python identifier triggeredRule
    __triggeredRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'triggeredRule'), 'triggeredRule', '__httpwww_vantivcnp_comschema_advancedFraudResultsType_httpwww_vantivcnp_comschematriggeredRule', True, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 188, 12), )

    
    triggeredRule = property(__triggeredRule.value, __triggeredRule.set, None, None)

    _ElementMap.update({
        __deviceReviewStatus.name() : __deviceReviewStatus,
        __deviceReputationScore.name() : __deviceReputationScore,
        __triggeredRule.name() : __triggeredRule
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.advancedFraudResultsType = advancedFraudResultsType
Namespace.addCategoryObject('typeBinding', 'advancedFraudResultsType', advancedFraudResultsType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_ (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 201, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_vantivcnp_comschema_CTD_ANON__httpwww_vantivcnp_comschemaname', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 203, 16), )

    
    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({
        __name.name() : __name
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_ = CTD_ANON_


# Complex type {http://www.vantivcnp.com/schema}cnpTransactionInterface with content type EMPTY
class cnpTransactionInterface (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}cnpTransactionInterface with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'cnpTransactionInterface')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 217, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.cnpTransactionInterface = cnpTransactionInterface
Namespace.addCategoryObject('typeBinding', 'cnpTransactionInterface', cnpTransactionInterface)


# Complex type {http://www.vantivcnp.com/schema}recurringSubscriptionType with content type ELEMENT_ONLY
class recurringSubscriptionType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}recurringSubscriptionType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'recurringSubscriptionType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 361, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}planCode uses Python identifier planCode
    __planCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'planCode'), 'planCode', '__httpwww_vantivcnp_comschema_recurringSubscriptionType_httpwww_vantivcnp_comschemaplanCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 363, 12), )

    
    planCode = property(__planCode.value, __planCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}numberOfPayments uses Python identifier numberOfPayments
    __numberOfPayments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'numberOfPayments'), 'numberOfPayments', '__httpwww_vantivcnp_comschema_recurringSubscriptionType_httpwww_vantivcnp_comschemanumberOfPayments', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 364, 12), )

    
    numberOfPayments = property(__numberOfPayments.value, __numberOfPayments.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}startDate uses Python identifier startDate
    __startDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'startDate'), 'startDate', '__httpwww_vantivcnp_comschema_recurringSubscriptionType_httpwww_vantivcnp_comschemastartDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 365, 12), )

    
    startDate = property(__startDate.value, __startDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_recurringSubscriptionType_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 366, 12), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}createDiscount uses Python identifier createDiscount
    __createDiscount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'createDiscount'), 'createDiscount', '__httpwww_vantivcnp_comschema_recurringSubscriptionType_httpwww_vantivcnp_comschemacreateDiscount', True, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 367, 12), )

    
    createDiscount = property(__createDiscount.value, __createDiscount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}createAddOn uses Python identifier createAddOn
    __createAddOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'createAddOn'), 'createAddOn', '__httpwww_vantivcnp_comschema_recurringSubscriptionType_httpwww_vantivcnp_comschemacreateAddOn', True, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 368, 12), )

    
    createAddOn = property(__createAddOn.value, __createAddOn.set, None, None)

    _ElementMap.update({
        __planCode.name() : __planCode,
        __numberOfPayments.name() : __numberOfPayments,
        __startDate.name() : __startDate,
        __amount.name() : __amount,
        __createDiscount.name() : __createDiscount,
        __createAddOn.name() : __createAddOn
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.recurringSubscriptionType = recurringSubscriptionType
Namespace.addCategoryObject('typeBinding', 'recurringSubscriptionType', recurringSubscriptionType)


# Complex type {http://www.vantivcnp.com/schema}cnpInternalRecurringRequestType with content type ELEMENT_ONLY
class cnpInternalRecurringRequestType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}cnpInternalRecurringRequestType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'cnpInternalRecurringRequestType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 375, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}subscriptionId uses Python identifier subscriptionId
    __subscriptionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId'), 'subscriptionId', '__httpwww_vantivcnp_comschema_cnpInternalRecurringRequestType_httpwww_vantivcnp_comschemasubscriptionId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 377, 12), )

    
    subscriptionId = property(__subscriptionId.value, __subscriptionId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}recurringTxnId uses Python identifier recurringTxnId
    __recurringTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recurringTxnId'), 'recurringTxnId', '__httpwww_vantivcnp_comschema_cnpInternalRecurringRequestType_httpwww_vantivcnp_comschemarecurringTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 378, 12), )

    
    recurringTxnId = property(__recurringTxnId.value, __recurringTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}finalPayment uses Python identifier finalPayment
    __finalPayment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'finalPayment'), 'finalPayment', '__httpwww_vantivcnp_comschema_cnpInternalRecurringRequestType_httpwww_vantivcnp_comschemafinalPayment', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 379, 12), )

    
    finalPayment = property(__finalPayment.value, __finalPayment.set, None, None)

    _ElementMap.update({
        __subscriptionId.name() : __subscriptionId,
        __recurringTxnId.name() : __recurringTxnId,
        __finalPayment.name() : __finalPayment
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.cnpInternalRecurringRequestType = cnpInternalRecurringRequestType
Namespace.addCategoryObject('typeBinding', 'cnpInternalRecurringRequestType', cnpInternalRecurringRequestType)


# Complex type {http://www.vantivcnp.com/schema}recurringRequestType with content type ELEMENT_ONLY
class recurringRequestType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}recurringRequestType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'recurringRequestType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 383, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}createSubscription uses Python identifier createSubscription
    __createSubscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'createSubscription'), 'createSubscription', '__httpwww_vantivcnp_comschema_recurringRequestType_httpwww_vantivcnp_comschemacreateSubscription', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 385, 12), )

    
    createSubscription = property(__createSubscription.value, __createSubscription.set, None, None)

    _ElementMap.update({
        __createSubscription.name() : __createSubscription
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.recurringRequestType = recurringRequestType
Namespace.addCategoryObject('typeBinding', 'recurringRequestType', recurringRequestType)


# Complex type {http://www.vantivcnp.com/schema}recurringResponseType with content type ELEMENT_ONLY
class recurringResponseType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}recurringResponseType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'recurringResponseType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 389, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}subscriptionId uses Python identifier subscriptionId
    __subscriptionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId'), 'subscriptionId', '__httpwww_vantivcnp_comschema_recurringResponseType_httpwww_vantivcnp_comschemasubscriptionId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 391, 12), )

    
    subscriptionId = property(__subscriptionId.value, __subscriptionId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseCode uses Python identifier responseCode
    __responseCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseCode'), 'responseCode', '__httpwww_vantivcnp_comschema_recurringResponseType_httpwww_vantivcnp_comschemaresponseCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 392, 12), )

    
    responseCode = property(__responseCode.value, __responseCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseMessage uses Python identifier responseMessage
    __responseMessage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseMessage'), 'responseMessage', '__httpwww_vantivcnp_comschema_recurringResponseType_httpwww_vantivcnp_comschemaresponseMessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 393, 12), )

    
    responseMessage = property(__responseMessage.value, __responseMessage.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}recurringTxnId uses Python identifier recurringTxnId
    __recurringTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recurringTxnId'), 'recurringTxnId', '__httpwww_vantivcnp_comschema_recurringResponseType_httpwww_vantivcnp_comschemarecurringTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 394, 12), )

    
    recurringTxnId = property(__recurringTxnId.value, __recurringTxnId.set, None, None)

    _ElementMap.update({
        __subscriptionId.name() : __subscriptionId,
        __responseCode.name() : __responseCode,
        __responseMessage.name() : __responseMessage,
        __recurringTxnId.name() : __recurringTxnId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.recurringResponseType = recurringResponseType
Namespace.addCategoryObject('typeBinding', 'recurringResponseType', recurringResponseType)


# Complex type {http://www.vantivcnp.com/schema}createDiscountType with content type ELEMENT_ONLY
class createDiscountType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}createDiscountType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'createDiscountType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 398, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}discountCode uses Python identifier discountCode
    __discountCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'discountCode'), 'discountCode', '__httpwww_vantivcnp_comschema_createDiscountType_httpwww_vantivcnp_comschemadiscountCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 400, 12), )

    
    discountCode = property(__discountCode.value, __discountCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_vantivcnp_comschema_createDiscountType_httpwww_vantivcnp_comschemaname', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 401, 12), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_createDiscountType_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 402, 12), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}startDate uses Python identifier startDate
    __startDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'startDate'), 'startDate', '__httpwww_vantivcnp_comschema_createDiscountType_httpwww_vantivcnp_comschemastartDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 403, 12), )

    
    startDate = property(__startDate.value, __startDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}endDate uses Python identifier endDate
    __endDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'endDate'), 'endDate', '__httpwww_vantivcnp_comschema_createDiscountType_httpwww_vantivcnp_comschemaendDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 404, 12), )

    
    endDate = property(__endDate.value, __endDate.set, None, None)

    _ElementMap.update({
        __discountCode.name() : __discountCode,
        __name.name() : __name,
        __amount.name() : __amount,
        __startDate.name() : __startDate,
        __endDate.name() : __endDate
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.createDiscountType = createDiscountType
Namespace.addCategoryObject('typeBinding', 'createDiscountType', createDiscountType)


# Complex type {http://www.vantivcnp.com/schema}updateDiscountType with content type ELEMENT_ONLY
class updateDiscountType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}updateDiscountType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'updateDiscountType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 408, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}discountCode uses Python identifier discountCode
    __discountCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'discountCode'), 'discountCode', '__httpwww_vantivcnp_comschema_updateDiscountType_httpwww_vantivcnp_comschemadiscountCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 410, 12), )

    
    discountCode = property(__discountCode.value, __discountCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_vantivcnp_comschema_updateDiscountType_httpwww_vantivcnp_comschemaname', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 411, 12), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_updateDiscountType_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 412, 12), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}startDate uses Python identifier startDate
    __startDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'startDate'), 'startDate', '__httpwww_vantivcnp_comschema_updateDiscountType_httpwww_vantivcnp_comschemastartDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 413, 12), )

    
    startDate = property(__startDate.value, __startDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}endDate uses Python identifier endDate
    __endDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'endDate'), 'endDate', '__httpwww_vantivcnp_comschema_updateDiscountType_httpwww_vantivcnp_comschemaendDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 414, 12), )

    
    endDate = property(__endDate.value, __endDate.set, None, None)

    _ElementMap.update({
        __discountCode.name() : __discountCode,
        __name.name() : __name,
        __amount.name() : __amount,
        __startDate.name() : __startDate,
        __endDate.name() : __endDate
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.updateDiscountType = updateDiscountType
Namespace.addCategoryObject('typeBinding', 'updateDiscountType', updateDiscountType)


# Complex type {http://www.vantivcnp.com/schema}deleteDiscountType with content type ELEMENT_ONLY
class deleteDiscountType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}deleteDiscountType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'deleteDiscountType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 418, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}discountCode uses Python identifier discountCode
    __discountCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'discountCode'), 'discountCode', '__httpwww_vantivcnp_comschema_deleteDiscountType_httpwww_vantivcnp_comschemadiscountCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 420, 12), )

    
    discountCode = property(__discountCode.value, __discountCode.set, None, None)

    _ElementMap.update({
        __discountCode.name() : __discountCode
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.deleteDiscountType = deleteDiscountType
Namespace.addCategoryObject('typeBinding', 'deleteDiscountType', deleteDiscountType)


# Complex type {http://www.vantivcnp.com/schema}createAddOnType with content type ELEMENT_ONLY
class createAddOnType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}createAddOnType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'createAddOnType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 424, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}addOnCode uses Python identifier addOnCode
    __addOnCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addOnCode'), 'addOnCode', '__httpwww_vantivcnp_comschema_createAddOnType_httpwww_vantivcnp_comschemaaddOnCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 426, 12), )

    
    addOnCode = property(__addOnCode.value, __addOnCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_vantivcnp_comschema_createAddOnType_httpwww_vantivcnp_comschemaname', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 427, 12), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_createAddOnType_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 428, 12), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}startDate uses Python identifier startDate
    __startDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'startDate'), 'startDate', '__httpwww_vantivcnp_comschema_createAddOnType_httpwww_vantivcnp_comschemastartDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 429, 12), )

    
    startDate = property(__startDate.value, __startDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}endDate uses Python identifier endDate
    __endDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'endDate'), 'endDate', '__httpwww_vantivcnp_comschema_createAddOnType_httpwww_vantivcnp_comschemaendDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 430, 12), )

    
    endDate = property(__endDate.value, __endDate.set, None, None)

    _ElementMap.update({
        __addOnCode.name() : __addOnCode,
        __name.name() : __name,
        __amount.name() : __amount,
        __startDate.name() : __startDate,
        __endDate.name() : __endDate
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.createAddOnType = createAddOnType
Namespace.addCategoryObject('typeBinding', 'createAddOnType', createAddOnType)


# Complex type {http://www.vantivcnp.com/schema}updateAddOnType with content type ELEMENT_ONLY
class updateAddOnType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}updateAddOnType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'updateAddOnType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 434, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}addOnCode uses Python identifier addOnCode
    __addOnCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addOnCode'), 'addOnCode', '__httpwww_vantivcnp_comschema_updateAddOnType_httpwww_vantivcnp_comschemaaddOnCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 436, 12), )

    
    addOnCode = property(__addOnCode.value, __addOnCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_vantivcnp_comschema_updateAddOnType_httpwww_vantivcnp_comschemaname', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 437, 12), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_updateAddOnType_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 438, 12), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}startDate uses Python identifier startDate
    __startDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'startDate'), 'startDate', '__httpwww_vantivcnp_comschema_updateAddOnType_httpwww_vantivcnp_comschemastartDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 439, 12), )

    
    startDate = property(__startDate.value, __startDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}endDate uses Python identifier endDate
    __endDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'endDate'), 'endDate', '__httpwww_vantivcnp_comschema_updateAddOnType_httpwww_vantivcnp_comschemaendDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 440, 12), )

    
    endDate = property(__endDate.value, __endDate.set, None, None)

    _ElementMap.update({
        __addOnCode.name() : __addOnCode,
        __name.name() : __name,
        __amount.name() : __amount,
        __startDate.name() : __startDate,
        __endDate.name() : __endDate
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.updateAddOnType = updateAddOnType
Namespace.addCategoryObject('typeBinding', 'updateAddOnType', updateAddOnType)


# Complex type {http://www.vantivcnp.com/schema}deleteAddOnType with content type ELEMENT_ONLY
class deleteAddOnType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}deleteAddOnType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'deleteAddOnType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 444, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}addOnCode uses Python identifier addOnCode
    __addOnCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addOnCode'), 'addOnCode', '__httpwww_vantivcnp_comschema_deleteAddOnType_httpwww_vantivcnp_comschemaaddOnCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 446, 12), )

    
    addOnCode = property(__addOnCode.value, __addOnCode.set, None, None)

    _ElementMap.update({
        __addOnCode.name() : __addOnCode
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.deleteAddOnType = deleteAddOnType
Namespace.addCategoryObject('typeBinding', 'deleteAddOnType', deleteAddOnType)


# Complex type {http://www.vantivcnp.com/schema}merchantDataType with content type ELEMENT_ONLY
class merchantDataType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}merchantDataType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'merchantDataType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 475, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}campaign uses Python identifier campaign
    __campaign = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'campaign'), 'campaign', '__httpwww_vantivcnp_comschema_merchantDataType_httpwww_vantivcnp_comschemacampaign', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 477, 12), )

    
    campaign = property(__campaign.value, __campaign.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}affiliate uses Python identifier affiliate
    __affiliate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'affiliate'), 'affiliate', '__httpwww_vantivcnp_comschema_merchantDataType_httpwww_vantivcnp_comschemaaffiliate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 478, 12), )

    
    affiliate = property(__affiliate.value, __affiliate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}merchantGroupingId uses Python identifier merchantGroupingId
    __merchantGroupingId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantGroupingId'), 'merchantGroupingId', '__httpwww_vantivcnp_comschema_merchantDataType_httpwww_vantivcnp_comschemamerchantGroupingId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 479, 12), )

    
    merchantGroupingId = property(__merchantGroupingId.value, __merchantGroupingId.set, None, None)

    _ElementMap.update({
        __campaign.name() : __campaign,
        __affiliate.name() : __affiliate,
        __merchantGroupingId.name() : __merchantGroupingId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.merchantDataType = merchantDataType
Namespace.addCategoryObject('typeBinding', 'merchantDataType', merchantDataType)


# Complex type {http://www.vantivcnp.com/schema}driversLicenseInfo with content type ELEMENT_ONLY
class driversLicenseInfo (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}driversLicenseInfo with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'driversLicenseInfo')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 500, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}licenseNumber uses Python identifier licenseNumber
    __licenseNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'licenseNumber'), 'licenseNumber', '__httpwww_vantivcnp_comschema_driversLicenseInfo_httpwww_vantivcnp_comschemalicenseNumber', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 502, 12), )

    
    licenseNumber = property(__licenseNumber.value, __licenseNumber.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}state uses Python identifier state
    __state = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'state'), 'state', '__httpwww_vantivcnp_comschema_driversLicenseInfo_httpwww_vantivcnp_comschemastate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 503, 12), )

    
    state = property(__state.value, __state.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}dateOfBirth uses Python identifier dateOfBirth
    __dateOfBirth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateOfBirth'), 'dateOfBirth', '__httpwww_vantivcnp_comschema_driversLicenseInfo_httpwww_vantivcnp_comschemadateOfBirth', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 504, 12), )

    
    dateOfBirth = property(__dateOfBirth.value, __dateOfBirth.set, None, None)

    _ElementMap.update({
        __licenseNumber.name() : __licenseNumber,
        __state.name() : __state,
        __dateOfBirth.name() : __dateOfBirth
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.driversLicenseInfo = driversLicenseInfo
Namespace.addCategoryObject('typeBinding', 'driversLicenseInfo', driversLicenseInfo)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_2 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 509, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}ssn uses Python identifier ssn
    __ssn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ssn'), 'ssn', '__httpwww_vantivcnp_comschema_CTD_ANON_2_httpwww_vantivcnp_comschemassn', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 511, 16), )

    
    ssn = property(__ssn.value, __ssn.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}dob uses Python identifier dob
    __dob = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dob'), 'dob', '__httpwww_vantivcnp_comschema_CTD_ANON_2_httpwww_vantivcnp_comschemadob', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 512, 16), )

    
    dob = property(__dob.value, __dob.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customerRegistrationDate uses Python identifier customerRegistrationDate
    __customerRegistrationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerRegistrationDate'), 'customerRegistrationDate', '__httpwww_vantivcnp_comschema_CTD_ANON_2_httpwww_vantivcnp_comschemacustomerRegistrationDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 513, 16), )

    
    customerRegistrationDate = property(__customerRegistrationDate.value, __customerRegistrationDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customerType uses Python identifier customerType
    __customerType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerType'), 'customerType', '__httpwww_vantivcnp_comschema_CTD_ANON_2_httpwww_vantivcnp_comschemacustomerType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 514, 16), )

    
    customerType = property(__customerType.value, __customerType.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}incomeAmount uses Python identifier incomeAmount
    __incomeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'incomeAmount'), 'incomeAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_2_httpwww_vantivcnp_comschemaincomeAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 515, 16), )

    
    incomeAmount = property(__incomeAmount.value, __incomeAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}incomeCurrency uses Python identifier incomeCurrency
    __incomeCurrency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'incomeCurrency'), 'incomeCurrency', '__httpwww_vantivcnp_comschema_CTD_ANON_2_httpwww_vantivcnp_comschemaincomeCurrency', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 516, 16), )

    
    incomeCurrency = property(__incomeCurrency.value, __incomeCurrency.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customerCheckingAccount uses Python identifier customerCheckingAccount
    __customerCheckingAccount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerCheckingAccount'), 'customerCheckingAccount', '__httpwww_vantivcnp_comschema_CTD_ANON_2_httpwww_vantivcnp_comschemacustomerCheckingAccount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 517, 16), )

    
    customerCheckingAccount = property(__customerCheckingAccount.value, __customerCheckingAccount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customerSavingAccount uses Python identifier customerSavingAccount
    __customerSavingAccount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerSavingAccount'), 'customerSavingAccount', '__httpwww_vantivcnp_comschema_CTD_ANON_2_httpwww_vantivcnp_comschemacustomerSavingAccount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 518, 16), )

    
    customerSavingAccount = property(__customerSavingAccount.value, __customerSavingAccount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}employerName uses Python identifier employerName
    __employerName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'employerName'), 'employerName', '__httpwww_vantivcnp_comschema_CTD_ANON_2_httpwww_vantivcnp_comschemaemployerName', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 519, 16), )

    
    employerName = property(__employerName.value, __employerName.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customerWorkTelephone uses Python identifier customerWorkTelephone
    __customerWorkTelephone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerWorkTelephone'), 'customerWorkTelephone', '__httpwww_vantivcnp_comschema_CTD_ANON_2_httpwww_vantivcnp_comschemacustomerWorkTelephone', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 520, 16), )

    
    customerWorkTelephone = property(__customerWorkTelephone.value, __customerWorkTelephone.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}residenceStatus uses Python identifier residenceStatus
    __residenceStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'residenceStatus'), 'residenceStatus', '__httpwww_vantivcnp_comschema_CTD_ANON_2_httpwww_vantivcnp_comschemaresidenceStatus', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 521, 16), )

    
    residenceStatus = property(__residenceStatus.value, __residenceStatus.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}yearsAtResidence uses Python identifier yearsAtResidence
    __yearsAtResidence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'yearsAtResidence'), 'yearsAtResidence', '__httpwww_vantivcnp_comschema_CTD_ANON_2_httpwww_vantivcnp_comschemayearsAtResidence', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 522, 16), )

    
    yearsAtResidence = property(__yearsAtResidence.value, __yearsAtResidence.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}yearsAtEmployer uses Python identifier yearsAtEmployer
    __yearsAtEmployer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'yearsAtEmployer'), 'yearsAtEmployer', '__httpwww_vantivcnp_comschema_CTD_ANON_2_httpwww_vantivcnp_comschemayearsAtEmployer', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 523, 16), )

    
    yearsAtEmployer = property(__yearsAtEmployer.value, __yearsAtEmployer.set, None, None)

    _ElementMap.update({
        __ssn.name() : __ssn,
        __dob.name() : __dob,
        __customerRegistrationDate.name() : __customerRegistrationDate,
        __customerType.name() : __customerType,
        __incomeAmount.name() : __incomeAmount,
        __incomeCurrency.name() : __incomeCurrency,
        __customerCheckingAccount.name() : __customerCheckingAccount,
        __customerSavingAccount.name() : __customerSavingAccount,
        __employerName.name() : __employerName,
        __customerWorkTelephone.name() : __customerWorkTelephone,
        __residenceStatus.name() : __residenceStatus,
        __yearsAtResidence.name() : __yearsAtResidence,
        __yearsAtEmployer.name() : __yearsAtEmployer
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_2 = CTD_ANON_2


# Complex type {http://www.vantivcnp.com/schema}fraudCheckType with content type ELEMENT_ONLY
class fraudCheckType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}fraudCheckType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'fraudCheckType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 528, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}authenticationValue uses Python identifier authenticationValue
    __authenticationValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authenticationValue'), 'authenticationValue', '__httpwww_vantivcnp_comschema_fraudCheckType_httpwww_vantivcnp_comschemaauthenticationValue', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 530, 12), )

    
    authenticationValue = property(__authenticationValue.value, __authenticationValue.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}authenticationTransactionId uses Python identifier authenticationTransactionId
    __authenticationTransactionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authenticationTransactionId'), 'authenticationTransactionId', '__httpwww_vantivcnp_comschema_fraudCheckType_httpwww_vantivcnp_comschemaauthenticationTransactionId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 531, 12), )

    
    authenticationTransactionId = property(__authenticationTransactionId.value, __authenticationTransactionId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customerIpAddress uses Python identifier customerIpAddress
    __customerIpAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerIpAddress'), 'customerIpAddress', '__httpwww_vantivcnp_comschema_fraudCheckType_httpwww_vantivcnp_comschemacustomerIpAddress', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 532, 12), )

    
    customerIpAddress = property(__customerIpAddress.value, __customerIpAddress.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}authenticatedByMerchant uses Python identifier authenticatedByMerchant
    __authenticatedByMerchant = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authenticatedByMerchant'), 'authenticatedByMerchant', '__httpwww_vantivcnp_comschema_fraudCheckType_httpwww_vantivcnp_comschemaauthenticatedByMerchant', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 533, 12), )

    
    authenticatedByMerchant = property(__authenticatedByMerchant.value, __authenticatedByMerchant.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}authenticationProtocolVersion uses Python identifier authenticationProtocolVersion
    __authenticationProtocolVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authenticationProtocolVersion'), 'authenticationProtocolVersion', '__httpwww_vantivcnp_comschema_fraudCheckType_httpwww_vantivcnp_comschemaauthenticationProtocolVersion', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 534, 12), )

    
    authenticationProtocolVersion = property(__authenticationProtocolVersion.value, __authenticationProtocolVersion.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}tokenAuthenticationValue uses Python identifier tokenAuthenticationValue
    __tokenAuthenticationValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenAuthenticationValue'), 'tokenAuthenticationValue', '__httpwww_vantivcnp_comschema_fraudCheckType_httpwww_vantivcnp_comschematokenAuthenticationValue', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 535, 12), )

    
    tokenAuthenticationValue = property(__tokenAuthenticationValue.value, __tokenAuthenticationValue.set, None, None)

    _ElementMap.update({
        __authenticationValue.name() : __authenticationValue,
        __authenticationTransactionId.name() : __authenticationTransactionId,
        __customerIpAddress.name() : __customerIpAddress,
        __authenticatedByMerchant.name() : __authenticatedByMerchant,
        __authenticationProtocolVersion.name() : __authenticationProtocolVersion,
        __tokenAuthenticationValue.name() : __tokenAuthenticationValue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.fraudCheckType = fraudCheckType
Namespace.addCategoryObject('typeBinding', 'fraudCheckType', fraudCheckType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_3 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 945, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}authDate uses Python identifier authDate
    __authDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authDate'), 'authDate', '__httpwww_vantivcnp_comschema_CTD_ANON_3_httpwww_vantivcnp_comschemaauthDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 947, 16), )

    
    authDate = property(__authDate.value, __authDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}authCode uses Python identifier authCode
    __authCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authCode'), 'authCode', '__httpwww_vantivcnp_comschema_CTD_ANON_3_httpwww_vantivcnp_comschemaauthCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 948, 16), )

    
    authCode = property(__authCode.value, __authCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}authAmount uses Python identifier authAmount
    __authAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authAmount'), 'authAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_3_httpwww_vantivcnp_comschemaauthAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 950, 16), )

    
    authAmount = property(__authAmount.value, __authAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_vantivcnp_comschema_CTD_ANON_3_httpwww_vantivcnp_comschemafraudResult', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    _ElementMap.update({
        __authDate.name() : __authDate,
        __authCode.name() : __authCode,
        __authAmount.name() : __authAmount,
        __fraudResult.name() : __fraudResult
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_3 = CTD_ANON_3


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_4 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 970, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}IIASFlag uses Python identifier IIASFlag
    __IIASFlag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IIASFlag'), 'IIASFlag', '__httpwww_vantivcnp_comschema_CTD_ANON_4_httpwww_vantivcnp_comschemaIIASFlag', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 973, 16), )

    
    IIASFlag = property(__IIASFlag.value, __IIASFlag.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}healthcareAmounts uses Python identifier healthcareAmounts
    __healthcareAmounts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'healthcareAmounts'), 'healthcareAmounts', '__httpwww_vantivcnp_comschema_CTD_ANON_4_httpwww_vantivcnp_comschemahealthcareAmounts', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 978, 4), )

    
    healthcareAmounts = property(__healthcareAmounts.value, __healthcareAmounts.set, None, None)

    _ElementMap.update({
        __IIASFlag.name() : __IIASFlag,
        __healthcareAmounts.name() : __healthcareAmounts
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_4 = CTD_ANON_4


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_5 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 979, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}totalHealthcareAmount uses Python identifier totalHealthcareAmount
    __totalHealthcareAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'totalHealthcareAmount'), 'totalHealthcareAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_5_httpwww_vantivcnp_comschematotalHealthcareAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 981, 16), )

    
    totalHealthcareAmount = property(__totalHealthcareAmount.value, __totalHealthcareAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}RxAmount uses Python identifier RxAmount
    __RxAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RxAmount'), 'RxAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_5_httpwww_vantivcnp_comschemaRxAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 982, 16), )

    
    RxAmount = property(__RxAmount.value, __RxAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}visionAmount uses Python identifier visionAmount
    __visionAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'visionAmount'), 'visionAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_5_httpwww_vantivcnp_comschemavisionAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 983, 16), )

    
    visionAmount = property(__visionAmount.value, __visionAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}clinicOtherAmount uses Python identifier clinicOtherAmount
    __clinicOtherAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'clinicOtherAmount'), 'clinicOtherAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_5_httpwww_vantivcnp_comschemaclinicOtherAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 984, 16), )

    
    clinicOtherAmount = property(__clinicOtherAmount.value, __clinicOtherAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}dentalAmount uses Python identifier dentalAmount
    __dentalAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dentalAmount'), 'dentalAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_5_httpwww_vantivcnp_comschemadentalAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 985, 16), )

    
    dentalAmount = property(__dentalAmount.value, __dentalAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}copayAmount uses Python identifier copayAmount
    __copayAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'copayAmount'), 'copayAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_5_httpwww_vantivcnp_comschemacopayAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 986, 16), )

    
    copayAmount = property(__copayAmount.value, __copayAmount.set, None, None)

    _ElementMap.update({
        __totalHealthcareAmount.name() : __totalHealthcareAmount,
        __RxAmount.name() : __RxAmount,
        __visionAmount.name() : __visionAmount,
        __clinicOtherAmount.name() : __clinicOtherAmount,
        __dentalAmount.name() : __dentalAmount,
        __copayAmount.name() : __copayAmount
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_5 = CTD_ANON_5


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_6 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 992, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}customerReference uses Python identifier customerReference
    __customerReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerReference'), 'customerReference', '__httpwww_vantivcnp_comschema_CTD_ANON_6_httpwww_vantivcnp_comschemacustomerReference', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 994, 16), )

    
    customerReference = property(__customerReference.value, __customerReference.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}salesTax uses Python identifier salesTax
    __salesTax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'salesTax'), 'salesTax', '__httpwww_vantivcnp_comschema_CTD_ANON_6_httpwww_vantivcnp_comschemasalesTax', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 995, 16), )

    
    salesTax = property(__salesTax.value, __salesTax.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}deliveryType uses Python identifier deliveryType
    __deliveryType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deliveryType'), 'deliveryType', '__httpwww_vantivcnp_comschema_CTD_ANON_6_httpwww_vantivcnp_comschemadeliveryType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 996, 16), )

    
    deliveryType = property(__deliveryType.value, __deliveryType.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}taxExempt uses Python identifier taxExempt
    __taxExempt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'taxExempt'), 'taxExempt', '__httpwww_vantivcnp_comschema_CTD_ANON_6_httpwww_vantivcnp_comschemataxExempt', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 997, 16), )

    
    taxExempt = property(__taxExempt.value, __taxExempt.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}discountAmount uses Python identifier discountAmount
    __discountAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'discountAmount'), 'discountAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_6_httpwww_vantivcnp_comschemadiscountAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 998, 16), )

    
    discountAmount = property(__discountAmount.value, __discountAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}shippingAmount uses Python identifier shippingAmount
    __shippingAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'shippingAmount'), 'shippingAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_6_httpwww_vantivcnp_comschemashippingAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 999, 16), )

    
    shippingAmount = property(__shippingAmount.value, __shippingAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}dutyAmount uses Python identifier dutyAmount
    __dutyAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dutyAmount'), 'dutyAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_6_httpwww_vantivcnp_comschemadutyAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1000, 16), )

    
    dutyAmount = property(__dutyAmount.value, __dutyAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}shipFromPostalCode uses Python identifier shipFromPostalCode
    __shipFromPostalCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'shipFromPostalCode'), 'shipFromPostalCode', '__httpwww_vantivcnp_comschema_CTD_ANON_6_httpwww_vantivcnp_comschemashipFromPostalCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1001, 16), )

    
    shipFromPostalCode = property(__shipFromPostalCode.value, __shipFromPostalCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}destinationPostalCode uses Python identifier destinationPostalCode
    __destinationPostalCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'destinationPostalCode'), 'destinationPostalCode', '__httpwww_vantivcnp_comschema_CTD_ANON_6_httpwww_vantivcnp_comschemadestinationPostalCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1002, 16), )

    
    destinationPostalCode = property(__destinationPostalCode.value, __destinationPostalCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}destinationCountryCode uses Python identifier destinationCountryCode
    __destinationCountryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'destinationCountryCode'), 'destinationCountryCode', '__httpwww_vantivcnp_comschema_CTD_ANON_6_httpwww_vantivcnp_comschemadestinationCountryCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1003, 16), )

    
    destinationCountryCode = property(__destinationCountryCode.value, __destinationCountryCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}invoiceReferenceNumber uses Python identifier invoiceReferenceNumber
    __invoiceReferenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'invoiceReferenceNumber'), 'invoiceReferenceNumber', '__httpwww_vantivcnp_comschema_CTD_ANON_6_httpwww_vantivcnp_comschemainvoiceReferenceNumber', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1004, 16), )

    
    invoiceReferenceNumber = property(__invoiceReferenceNumber.value, __invoiceReferenceNumber.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderDate uses Python identifier orderDate
    __orderDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderDate'), 'orderDate', '__httpwww_vantivcnp_comschema_CTD_ANON_6_httpwww_vantivcnp_comschemaorderDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1005, 16), )

    
    orderDate = property(__orderDate.value, __orderDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}detailTax uses Python identifier detailTax
    __detailTax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'detailTax'), 'detailTax', '__httpwww_vantivcnp_comschema_CTD_ANON_6_httpwww_vantivcnp_comschemadetailTax', True, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1012, 4), )

    
    detailTax = property(__detailTax.value, __detailTax.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}lineItemData uses Python identifier lineItemData
    __lineItemData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'lineItemData'), 'lineItemData', '__httpwww_vantivcnp_comschema_CTD_ANON_6_httpwww_vantivcnp_comschemalineItemData', True, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1024, 4), )

    
    lineItemData = property(__lineItemData.value, __lineItemData.set, None, None)

    _ElementMap.update({
        __customerReference.name() : __customerReference,
        __salesTax.name() : __salesTax,
        __deliveryType.name() : __deliveryType,
        __taxExempt.name() : __taxExempt,
        __discountAmount.name() : __discountAmount,
        __shippingAmount.name() : __shippingAmount,
        __dutyAmount.name() : __dutyAmount,
        __shipFromPostalCode.name() : __shipFromPostalCode,
        __destinationPostalCode.name() : __destinationPostalCode,
        __destinationCountryCode.name() : __destinationCountryCode,
        __invoiceReferenceNumber.name() : __invoiceReferenceNumber,
        __orderDate.name() : __orderDate,
        __detailTax.name() : __detailTax,
        __lineItemData.name() : __lineItemData
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_6 = CTD_ANON_6


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_7 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1013, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}taxIncludedInTotal uses Python identifier taxIncludedInTotal
    __taxIncludedInTotal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'taxIncludedInTotal'), 'taxIncludedInTotal', '__httpwww_vantivcnp_comschema_CTD_ANON_7_httpwww_vantivcnp_comschemataxIncludedInTotal', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1015, 16), )

    
    taxIncludedInTotal = property(__taxIncludedInTotal.value, __taxIncludedInTotal.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}taxAmount uses Python identifier taxAmount
    __taxAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'taxAmount'), 'taxAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_7_httpwww_vantivcnp_comschemataxAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1016, 16), )

    
    taxAmount = property(__taxAmount.value, __taxAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}taxRate uses Python identifier taxRate
    __taxRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'taxRate'), 'taxRate', '__httpwww_vantivcnp_comschema_CTD_ANON_7_httpwww_vantivcnp_comschemataxRate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1017, 16), )

    
    taxRate = property(__taxRate.value, __taxRate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}taxTypeIdentifier uses Python identifier taxTypeIdentifier
    __taxTypeIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'taxTypeIdentifier'), 'taxTypeIdentifier', '__httpwww_vantivcnp_comschema_CTD_ANON_7_httpwww_vantivcnp_comschemataxTypeIdentifier', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1018, 16), )

    
    taxTypeIdentifier = property(__taxTypeIdentifier.value, __taxTypeIdentifier.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cardAcceptorTaxId uses Python identifier cardAcceptorTaxId
    __cardAcceptorTaxId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardAcceptorTaxId'), 'cardAcceptorTaxId', '__httpwww_vantivcnp_comschema_CTD_ANON_7_httpwww_vantivcnp_comschemacardAcceptorTaxId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1019, 16), )

    
    cardAcceptorTaxId = property(__cardAcceptorTaxId.value, __cardAcceptorTaxId.set, None, None)

    _ElementMap.update({
        __taxIncludedInTotal.name() : __taxIncludedInTotal,
        __taxAmount.name() : __taxAmount,
        __taxRate.name() : __taxRate,
        __taxTypeIdentifier.name() : __taxTypeIdentifier,
        __cardAcceptorTaxId.name() : __cardAcceptorTaxId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_7 = CTD_ANON_7


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_8 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1025, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}detailTax uses Python identifier detailTax
    __detailTax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'detailTax'), 'detailTax', '__httpwww_vantivcnp_comschema_CTD_ANON_8_httpwww_vantivcnp_comschemadetailTax', True, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1012, 4), )

    
    detailTax = property(__detailTax.value, __detailTax.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}itemSequenceNumber uses Python identifier itemSequenceNumber
    __itemSequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'itemSequenceNumber'), 'itemSequenceNumber', '__httpwww_vantivcnp_comschema_CTD_ANON_8_httpwww_vantivcnp_comschemaitemSequenceNumber', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1027, 16), )

    
    itemSequenceNumber = property(__itemSequenceNumber.value, __itemSequenceNumber.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}itemDescription uses Python identifier itemDescription
    __itemDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'itemDescription'), 'itemDescription', '__httpwww_vantivcnp_comschema_CTD_ANON_8_httpwww_vantivcnp_comschemaitemDescription', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1028, 16), )

    
    itemDescription = property(__itemDescription.value, __itemDescription.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}productCode uses Python identifier productCode
    __productCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'productCode'), 'productCode', '__httpwww_vantivcnp_comschema_CTD_ANON_8_httpwww_vantivcnp_comschemaproductCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1029, 16), )

    
    productCode = property(__productCode.value, __productCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}quantity uses Python identifier quantity
    __quantity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'quantity'), 'quantity', '__httpwww_vantivcnp_comschema_CTD_ANON_8_httpwww_vantivcnp_comschemaquantity', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1030, 16), )

    
    quantity = property(__quantity.value, __quantity.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}unitOfMeasure uses Python identifier unitOfMeasure
    __unitOfMeasure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'unitOfMeasure'), 'unitOfMeasure', '__httpwww_vantivcnp_comschema_CTD_ANON_8_httpwww_vantivcnp_comschemaunitOfMeasure', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1031, 16), )

    
    unitOfMeasure = property(__unitOfMeasure.value, __unitOfMeasure.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}taxAmount uses Python identifier taxAmount
    __taxAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'taxAmount'), 'taxAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_8_httpwww_vantivcnp_comschemataxAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1032, 16), )

    
    taxAmount = property(__taxAmount.value, __taxAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}lineItemTotal uses Python identifier lineItemTotal
    __lineItemTotal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'lineItemTotal'), 'lineItemTotal', '__httpwww_vantivcnp_comschema_CTD_ANON_8_httpwww_vantivcnp_comschemalineItemTotal', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1033, 16), )

    
    lineItemTotal = property(__lineItemTotal.value, __lineItemTotal.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}lineItemTotalWithTax uses Python identifier lineItemTotalWithTax
    __lineItemTotalWithTax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'lineItemTotalWithTax'), 'lineItemTotalWithTax', '__httpwww_vantivcnp_comschema_CTD_ANON_8_httpwww_vantivcnp_comschemalineItemTotalWithTax', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1035, 16), )

    
    lineItemTotalWithTax = property(__lineItemTotalWithTax.value, __lineItemTotalWithTax.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}itemDiscountAmount uses Python identifier itemDiscountAmount
    __itemDiscountAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'itemDiscountAmount'), 'itemDiscountAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_8_httpwww_vantivcnp_comschemaitemDiscountAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1037, 16), )

    
    itemDiscountAmount = property(__itemDiscountAmount.value, __itemDiscountAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}commodityCode uses Python identifier commodityCode
    __commodityCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'commodityCode'), 'commodityCode', '__httpwww_vantivcnp_comschema_CTD_ANON_8_httpwww_vantivcnp_comschemacommodityCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1038, 16), )

    
    commodityCode = property(__commodityCode.value, __commodityCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}unitCost uses Python identifier unitCost
    __unitCost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'unitCost'), 'unitCost', '__httpwww_vantivcnp_comschema_CTD_ANON_8_httpwww_vantivcnp_comschemaunitCost', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1039, 16), )

    
    unitCost = property(__unitCost.value, __unitCost.set, None, None)

    _ElementMap.update({
        __detailTax.name() : __detailTax,
        __itemSequenceNumber.name() : __itemSequenceNumber,
        __itemDescription.name() : __itemDescription,
        __productCode.name() : __productCode,
        __quantity.name() : __quantity,
        __unitOfMeasure.name() : __unitOfMeasure,
        __taxAmount.name() : __taxAmount,
        __lineItemTotal.name() : __lineItemTotal,
        __lineItemTotalWithTax.name() : __lineItemTotalWithTax,
        __itemDiscountAmount.name() : __itemDiscountAmount,
        __commodityCode.name() : __commodityCode,
        __unitCost.name() : __unitCost
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_8 = CTD_ANON_8


# Complex type {http://www.vantivcnp.com/schema}accountInfoType with content type ELEMENT_ONLY
class accountInfoType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}accountInfoType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'accountInfoType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1045, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__httpwww_vantivcnp_comschema_accountInfoType_httpwww_vantivcnp_comschematype', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1047, 12), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}number uses Python identifier number
    __number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'number'), 'number', '__httpwww_vantivcnp_comschema_accountInfoType_httpwww_vantivcnp_comschemanumber', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1048, 12), )

    
    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        __type.name() : __type,
        __number.name() : __number
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.accountInfoType = accountInfoType
Namespace.addCategoryObject('typeBinding', 'accountInfoType', accountInfoType)


# Complex type {http://www.vantivcnp.com/schema}echeckTokenType with content type ELEMENT_ONLY
class echeckTokenType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}echeckTokenType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'echeckTokenType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1052, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}cnpToken uses Python identifier cnpToken
    __cnpToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpToken'), 'cnpToken', '__httpwww_vantivcnp_comschema_echeckTokenType_httpwww_vantivcnp_comschemacnpToken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1054, 12), )

    
    cnpToken = property(__cnpToken.value, __cnpToken.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}routingNum uses Python identifier routingNum
    __routingNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'routingNum'), 'routingNum', '__httpwww_vantivcnp_comschema_echeckTokenType_httpwww_vantivcnp_comschemaroutingNum', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1055, 12), )

    
    routingNum = property(__routingNum.value, __routingNum.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}accType uses Python identifier accType
    __accType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accType'), 'accType', '__httpwww_vantivcnp_comschema_echeckTokenType_httpwww_vantivcnp_comschemaaccType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1056, 12), )

    
    accType = property(__accType.value, __accType.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}checkNum uses Python identifier checkNum
    __checkNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'checkNum'), 'checkNum', '__httpwww_vantivcnp_comschema_echeckTokenType_httpwww_vantivcnp_comschemacheckNum', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1057, 12), )

    
    checkNum = property(__checkNum.value, __checkNum.set, None, None)

    _ElementMap.update({
        __cnpToken.name() : __cnpToken,
        __routingNum.name() : __routingNum,
        __accType.name() : __accType,
        __checkNum.name() : __checkNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.echeckTokenType = echeckTokenType
Namespace.addCategoryObject('typeBinding', 'echeckTokenType', echeckTokenType)


# Complex type {http://www.vantivcnp.com/schema}payPal with content type ELEMENT_ONLY
class payPal (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}payPal with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'payPal')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1061, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}payerEmail uses Python identifier payerEmail
    __payerEmail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'payerEmail'), 'payerEmail', '__httpwww_vantivcnp_comschema_payPal_httpwww_vantivcnp_comschemapayerEmail', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1064, 16), )

    
    payerEmail = property(__payerEmail.value, __payerEmail.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}payerId uses Python identifier payerId
    __payerId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'payerId'), 'payerId', '__httpwww_vantivcnp_comschema_payPal_httpwww_vantivcnp_comschemapayerId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1067, 16), )

    
    payerId = property(__payerId.value, __payerId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}token uses Python identifier token
    __token = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'token'), 'token', '__httpwww_vantivcnp_comschema_payPal_httpwww_vantivcnp_comschematoken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1068, 16), )

    
    token = property(__token.value, __token.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}transactionId uses Python identifier transactionId
    __transactionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'transactionId'), 'transactionId', '__httpwww_vantivcnp_comschema_payPal_httpwww_vantivcnp_comschematransactionId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1069, 16), )

    
    transactionId = property(__transactionId.value, __transactionId.set, None, None)

    _ElementMap.update({
        __payerEmail.name() : __payerEmail,
        __payerId.name() : __payerId,
        __token.name() : __token,
        __transactionId.name() : __transactionId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.payPal = payPal
Namespace.addCategoryObject('typeBinding', 'payPal', payPal)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_9 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1077, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}phone uses Python identifier phone
    __phone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'phone'), 'phone', '__httpwww_vantivcnp_comschema_CTD_ANON_9_httpwww_vantivcnp_comschemaphone', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1080, 20), )

    
    phone = property(__phone.value, __phone.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}city uses Python identifier city
    __city = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'city'), 'city', '__httpwww_vantivcnp_comschema_CTD_ANON_9_httpwww_vantivcnp_comschemacity', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1081, 20), )

    
    city = property(__city.value, __city.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}url uses Python identifier url
    __url = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'url'), 'url', '__httpwww_vantivcnp_comschema_CTD_ANON_9_httpwww_vantivcnp_comschemaurl', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1082, 20), )

    
    url = property(__url.value, __url.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}descriptor uses Python identifier descriptor
    __descriptor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'descriptor'), 'descriptor', '__httpwww_vantivcnp_comschema_CTD_ANON_9_httpwww_vantivcnp_comschemadescriptor', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1084, 16), )

    
    descriptor = property(__descriptor.value, __descriptor.set, None, None)

    _ElementMap.update({
        __phone.name() : __phone,
        __city.name() : __city,
        __url.name() : __url,
        __descriptor.name() : __descriptor
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_9 = CTD_ANON_9


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_10 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1091, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}bypassVelocityCheck uses Python identifier bypassVelocityCheck
    __bypassVelocityCheck = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bypassVelocityCheck'), 'bypassVelocityCheck', '__httpwww_vantivcnp_comschema_CTD_ANON_10_httpwww_vantivcnp_comschemabypassVelocityCheck', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1093, 16), )

    
    bypassVelocityCheck = property(__bypassVelocityCheck.value, __bypassVelocityCheck.set, None, None)

    _ElementMap.update({
        __bypassVelocityCheck.name() : __bypassVelocityCheck
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_10 = CTD_ANON_10


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_11 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1099, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}capability uses Python identifier capability
    __capability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'capability'), 'capability', '__httpwww_vantivcnp_comschema_CTD_ANON_11_httpwww_vantivcnp_comschemacapability', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1101, 16), )

    
    capability = property(__capability.value, __capability.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}entryMode uses Python identifier entryMode
    __entryMode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'entryMode'), 'entryMode', '__httpwww_vantivcnp_comschema_CTD_ANON_11_httpwww_vantivcnp_comschemaentryMode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1102, 16), )

    
    entryMode = property(__entryMode.value, __entryMode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cardholderId uses Python identifier cardholderId
    __cardholderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardholderId'), 'cardholderId', '__httpwww_vantivcnp_comschema_CTD_ANON_11_httpwww_vantivcnp_comschemacardholderId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1103, 16), )

    
    cardholderId = property(__cardholderId.value, __cardholderId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}terminalId uses Python identifier terminalId
    __terminalId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'terminalId'), 'terminalId', '__httpwww_vantivcnp_comschema_CTD_ANON_11_httpwww_vantivcnp_comschematerminalId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1104, 16), )

    
    terminalId = property(__terminalId.value, __terminalId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}catLevel uses Python identifier catLevel
    __catLevel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'catLevel'), 'catLevel', '__httpwww_vantivcnp_comschema_CTD_ANON_11_httpwww_vantivcnp_comschemacatLevel', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1105, 16), )

    
    catLevel = property(__catLevel.value, __catLevel.set, None, None)

    _ElementMap.update({
        __capability.name() : __capability,
        __entryMode.name() : __entryMode,
        __cardholderId.name() : __cardholderId,
        __terminalId.name() : __terminalId,
        __catLevel.name() : __catLevel
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_11 = CTD_ANON_11


# Complex type {http://www.vantivcnp.com/schema}recycleAdviceType with content type ELEMENT_ONLY
class recycleAdviceType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}recycleAdviceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'recycleAdviceType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1211, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}nextRecycleTime uses Python identifier nextRecycleTime
    __nextRecycleTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nextRecycleTime'), 'nextRecycleTime', '__httpwww_vantivcnp_comschema_recycleAdviceType_httpwww_vantivcnp_comschemanextRecycleTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1213, 12), )

    
    nextRecycleTime = property(__nextRecycleTime.value, __nextRecycleTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}recycleAdviceEnd uses Python identifier recycleAdviceEnd
    __recycleAdviceEnd = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recycleAdviceEnd'), 'recycleAdviceEnd', '__httpwww_vantivcnp_comschema_recycleAdviceType_httpwww_vantivcnp_comschemarecycleAdviceEnd', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1214, 12), )

    
    recycleAdviceEnd = property(__recycleAdviceEnd.value, __recycleAdviceEnd.set, None, None)

    _ElementMap.update({
        __nextRecycleTime.name() : __nextRecycleTime,
        __recycleAdviceEnd.name() : __recycleAdviceEnd
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.recycleAdviceType = recycleAdviceType
Namespace.addCategoryObject('typeBinding', 'recycleAdviceType', recycleAdviceType)


# Complex type {http://www.vantivcnp.com/schema}recyclingResponseType with content type ELEMENT_ONLY
class recyclingResponseType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}recyclingResponseType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'recyclingResponseType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1220, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}recycleAdvice uses Python identifier recycleAdvice
    __recycleAdvice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recycleAdvice'), 'recycleAdvice', '__httpwww_vantivcnp_comschema_recyclingResponseType_httpwww_vantivcnp_comschemarecycleAdvice', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1222, 12), )

    
    recycleAdvice = property(__recycleAdvice.value, __recycleAdvice.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}recycleEngineActive uses Python identifier recycleEngineActive
    __recycleEngineActive = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recycleEngineActive'), 'recycleEngineActive', '__httpwww_vantivcnp_comschema_recyclingResponseType_httpwww_vantivcnp_comschemarecycleEngineActive', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1223, 12), )

    
    recycleEngineActive = property(__recycleEngineActive.value, __recycleEngineActive.set, None, None)

    _ElementMap.update({
        __recycleAdvice.name() : __recycleAdvice,
        __recycleEngineActive.name() : __recycleEngineActive
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.recyclingResponseType = recyclingResponseType
Namespace.addCategoryObject('typeBinding', 'recyclingResponseType', recyclingResponseType)


# Complex type {http://www.vantivcnp.com/schema}networkSubField with content type ELEMENT_ONLY
class networkSubField (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}networkSubField with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'networkSubField')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1227, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}fieldValue uses Python identifier fieldValue
    __fieldValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fieldValue'), 'fieldValue', '__httpwww_vantivcnp_comschema_networkSubField_httpwww_vantivcnp_comschemafieldValue', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1229, 12), )

    
    fieldValue = property(__fieldValue.value, __fieldValue.set, None, None)

    
    # Attribute fieldNumber uses Python identifier fieldNumber
    __fieldNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'fieldNumber'), 'fieldNumber', '__httpwww_vantivcnp_comschema_networkSubField_fieldNumber', pyxb.binding.datatypes.integer, required=True)
    __fieldNumber._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1231, 8)
    __fieldNumber._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1231, 8)
    
    fieldNumber = property(__fieldNumber.value, __fieldNumber.set, None, None)

    _ElementMap.update({
        __fieldValue.name() : __fieldValue
    })
    _AttributeMap.update({
        __fieldNumber.name() : __fieldNumber
    })
_module_typeBindings.networkSubField = networkSubField
Namespace.addCategoryObject('typeBinding', 'networkSubField', networkSubField)


# Complex type {http://www.vantivcnp.com/schema}networkField with content type ELEMENT_ONLY
class networkField (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}networkField with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'networkField')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1235, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}fieldValue uses Python identifier fieldValue
    __fieldValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fieldValue'), 'fieldValue', '__httpwww_vantivcnp_comschema_networkField_httpwww_vantivcnp_comschemafieldValue', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1238, 16), )

    
    fieldValue = property(__fieldValue.value, __fieldValue.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}networkSubField uses Python identifier networkSubField
    __networkSubField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'networkSubField'), 'networkSubField', '__httpwww_vantivcnp_comschema_networkField_httpwww_vantivcnp_comschemanetworkSubField', True, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1239, 16), )

    
    networkSubField = property(__networkSubField.value, __networkSubField.set, None, None)

    
    # Attribute fieldNumber uses Python identifier fieldNumber
    __fieldNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'fieldNumber'), 'fieldNumber', '__httpwww_vantivcnp_comschema_networkField_fieldNumber', pyxb.binding.datatypes.integer, required=True)
    __fieldNumber._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1242, 8)
    __fieldNumber._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1242, 8)
    
    fieldNumber = property(__fieldNumber.value, __fieldNumber.set, None, None)

    
    # Attribute fieldName uses Python identifier fieldName
    __fieldName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'fieldName'), 'fieldName', '__httpwww_vantivcnp_comschema_networkField_fieldName', pyxb.binding.datatypes.string, required=True)
    __fieldName._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1243, 8)
    __fieldName._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1243, 8)
    
    fieldName = property(__fieldName.value, __fieldName.set, None, None)

    _ElementMap.update({
        __fieldValue.name() : __fieldValue,
        __networkSubField.name() : __networkSubField
    })
    _AttributeMap.update({
        __fieldNumber.name() : __fieldNumber,
        __fieldName.name() : __fieldName
    })
_module_typeBindings.networkField = networkField
Namespace.addCategoryObject('typeBinding', 'networkField', networkField)


# Complex type {http://www.vantivcnp.com/schema}networkResponse with content type ELEMENT_ONLY
class networkResponse (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}networkResponse with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'networkResponse')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1246, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}endpoint uses Python identifier endpoint
    __endpoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'endpoint'), 'endpoint', '__httpwww_vantivcnp_comschema_networkResponse_httpwww_vantivcnp_comschemaendpoint', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1248, 12), )

    
    endpoint = property(__endpoint.value, __endpoint.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}networkField uses Python identifier networkField
    __networkField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'networkField'), 'networkField', '__httpwww_vantivcnp_comschema_networkResponse_httpwww_vantivcnp_comschemanetworkField', True, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1249, 12), )

    
    networkField = property(__networkField.value, __networkField.set, None, None)

    _ElementMap.update({
        __endpoint.name() : __endpoint,
        __networkField.name() : __networkField
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.networkResponse = networkResponse
Namespace.addCategoryObject('typeBinding', 'networkResponse', networkResponse)


# Complex type {http://www.vantivcnp.com/schema}recyclingRequestType with content type ELEMENT_ONLY
class recyclingRequestType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}recyclingRequestType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'recyclingRequestType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1253, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}recycleBy uses Python identifier recycleBy
    __recycleBy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recycleBy'), 'recycleBy', '__httpwww_vantivcnp_comschema_recyclingRequestType_httpwww_vantivcnp_comschemarecycleBy', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1255, 12), )

    
    recycleBy = property(__recycleBy.value, __recycleBy.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}recycleId uses Python identifier recycleId
    __recycleId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recycleId'), 'recycleId', '__httpwww_vantivcnp_comschema_recyclingRequestType_httpwww_vantivcnp_comschemarecycleId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1256, 12), )

    
    recycleId = property(__recycleId.value, __recycleId.set, None, None)

    _ElementMap.update({
        __recycleBy.name() : __recycleBy,
        __recycleId.name() : __recycleId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.recyclingRequestType = recyclingRequestType
Namespace.addCategoryObject('typeBinding', 'recyclingRequestType', recyclingRequestType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_12 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1261, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}fundingSource uses Python identifier fundingSource
    __fundingSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundingSource'), 'fundingSource', '__httpwww_vantivcnp_comschema_CTD_ANON_12_httpwww_vantivcnp_comschemafundingSource', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1263, 16), )

    
    fundingSource = property(__fundingSource.value, __fundingSource.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}affluence uses Python identifier affluence
    __affluence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'affluence'), 'affluence', '__httpwww_vantivcnp_comschema_CTD_ANON_12_httpwww_vantivcnp_comschemaaffluence', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1273, 16), )

    
    affluence = property(__affluence.value, __affluence.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}issuerCountry uses Python identifier issuerCountry
    __issuerCountry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'issuerCountry'), 'issuerCountry', '__httpwww_vantivcnp_comschema_CTD_ANON_12_httpwww_vantivcnp_comschemaissuerCountry', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1274, 16), )

    
    issuerCountry = property(__issuerCountry.value, __issuerCountry.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cardProductType uses Python identifier cardProductType
    __cardProductType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardProductType'), 'cardProductType', '__httpwww_vantivcnp_comschema_CTD_ANON_12_httpwww_vantivcnp_comschemacardProductType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1275, 16), )

    
    cardProductType = property(__cardProductType.value, __cardProductType.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}virtualAccountNumber uses Python identifier virtualAccountNumber
    __virtualAccountNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'virtualAccountNumber'), 'virtualAccountNumber', '__httpwww_vantivcnp_comschema_CTD_ANON_12_httpwww_vantivcnp_comschemavirtualAccountNumber', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1276, 16), )

    
    virtualAccountNumber = property(__virtualAccountNumber.value, __virtualAccountNumber.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}networkResponse uses Python identifier networkResponse
    __networkResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'networkResponse'), 'networkResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_12_httpwww_vantivcnp_comschemanetworkResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1277, 16), )

    
    networkResponse = property(__networkResponse.value, __networkResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}accountRangeId uses Python identifier accountRangeId
    __accountRangeId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountRangeId'), 'accountRangeId', '__httpwww_vantivcnp_comschema_CTD_ANON_12_httpwww_vantivcnp_comschemaaccountRangeId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1278, 16), )

    
    accountRangeId = property(__accountRangeId.value, __accountRangeId.set, None, None)

    _ElementMap.update({
        __fundingSource.name() : __fundingSource,
        __affluence.name() : __affluence,
        __issuerCountry.name() : __issuerCountry,
        __cardProductType.name() : __cardProductType,
        __virtualAccountNumber.name() : __virtualAccountNumber,
        __networkResponse.name() : __networkResponse,
        __accountRangeId.name() : __accountRangeId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_12 = CTD_ANON_12


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_13 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1264, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__httpwww_vantivcnp_comschema_CTD_ANON_13_httpwww_vantivcnp_comschematype', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1266, 28), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}availableBalance uses Python identifier availableBalance
    __availableBalance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'availableBalance'), 'availableBalance', '__httpwww_vantivcnp_comschema_CTD_ANON_13_httpwww_vantivcnp_comschemaavailableBalance', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1267, 28), )

    
    availableBalance = property(__availableBalance.value, __availableBalance.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}reloadable uses Python identifier reloadable
    __reloadable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'reloadable'), 'reloadable', '__httpwww_vantivcnp_comschema_CTD_ANON_13_httpwww_vantivcnp_comschemareloadable', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1268, 28), )

    
    reloadable = property(__reloadable.value, __reloadable.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}prepaidCardType uses Python identifier prepaidCardType
    __prepaidCardType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'prepaidCardType'), 'prepaidCardType', '__httpwww_vantivcnp_comschema_CTD_ANON_13_httpwww_vantivcnp_comschemaprepaidCardType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1269, 28), )

    
    prepaidCardType = property(__prepaidCardType.value, __prepaidCardType.set, None, None)

    _ElementMap.update({
        __type.name() : __type,
        __availableBalance.name() : __availableBalance,
        __reloadable.name() : __reloadable,
        __prepaidCardType.name() : __prepaidCardType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_13 = CTD_ANON_13


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_14 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1625, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}avsResult uses Python identifier avsResult
    __avsResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'avsResult'), 'avsResult', '__httpwww_vantivcnp_comschema_CTD_ANON_14_httpwww_vantivcnp_comschemaavsResult', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1627, 16), )

    
    avsResult = property(__avsResult.value, __avsResult.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cardValidationResult uses Python identifier cardValidationResult
    __cardValidationResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardValidationResult'), 'cardValidationResult', '__httpwww_vantivcnp_comschema_CTD_ANON_14_httpwww_vantivcnp_comschemacardValidationResult', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1628, 16), )

    
    cardValidationResult = property(__cardValidationResult.value, __cardValidationResult.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}authenticationResult uses Python identifier authenticationResult
    __authenticationResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authenticationResult'), 'authenticationResult', '__httpwww_vantivcnp_comschema_CTD_ANON_14_httpwww_vantivcnp_comschemaauthenticationResult', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1630, 16), )

    
    authenticationResult = property(__authenticationResult.value, __authenticationResult.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}advancedAVSResult uses Python identifier advancedAVSResult
    __advancedAVSResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'advancedAVSResult'), 'advancedAVSResult', '__httpwww_vantivcnp_comschema_CTD_ANON_14_httpwww_vantivcnp_comschemaadvancedAVSResult', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1631, 16), )

    
    advancedAVSResult = property(__advancedAVSResult.value, __advancedAVSResult.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}advancedFraudResults uses Python identifier advancedFraudResults
    __advancedFraudResults = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudResults'), 'advancedFraudResults', '__httpwww_vantivcnp_comschema_CTD_ANON_14_httpwww_vantivcnp_comschemaadvancedFraudResults', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1632, 16), )

    
    advancedFraudResults = property(__advancedFraudResults.value, __advancedFraudResults.set, None, None)

    _ElementMap.update({
        __avsResult.name() : __avsResult,
        __cardValidationResult.name() : __cardValidationResult,
        __authenticationResult.name() : __authenticationResult,
        __advancedAVSResult.name() : __advancedAVSResult,
        __advancedFraudResults.name() : __advancedFraudResults
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_14 = CTD_ANON_14


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_15 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1699, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}txnTime uses Python identifier txnTime
    __txnTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'txnTime'), 'txnTime', '__httpwww_vantivcnp_comschema_CTD_ANON_15_httpwww_vantivcnp_comschematxnTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1701, 16), )

    
    txnTime = property(__txnTime.value, __txnTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}refCode uses Python identifier refCode
    __refCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'refCode'), 'refCode', '__httpwww_vantivcnp_comschema_CTD_ANON_15_httpwww_vantivcnp_comschemarefCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1702, 16), )

    
    refCode = property(__refCode.value, __refCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}systemTraceId uses Python identifier systemTraceId
    __systemTraceId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'systemTraceId'), 'systemTraceId', '__httpwww_vantivcnp_comschema_CTD_ANON_15_httpwww_vantivcnp_comschemasystemTraceId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1703, 16), )

    
    systemTraceId = property(__systemTraceId.value, __systemTraceId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}sequenceNumber uses Python identifier sequenceNumber
    __sequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sequenceNumber'), 'sequenceNumber', '__httpwww_vantivcnp_comschema_CTD_ANON_15_httpwww_vantivcnp_comschemasequenceNumber', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1704, 16), )

    
    sequenceNumber = property(__sequenceNumber.value, __sequenceNumber.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}availableBalance uses Python identifier availableBalance
    __availableBalance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'availableBalance'), 'availableBalance', '__httpwww_vantivcnp_comschema_CTD_ANON_15_httpwww_vantivcnp_comschemaavailableBalance', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1705, 16), )

    
    availableBalance = property(__availableBalance.value, __availableBalance.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}beginningBalance uses Python identifier beginningBalance
    __beginningBalance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'beginningBalance'), 'beginningBalance', '__httpwww_vantivcnp_comschema_CTD_ANON_15_httpwww_vantivcnp_comschemabeginningBalance', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1706, 16), )

    
    beginningBalance = property(__beginningBalance.value, __beginningBalance.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}endingBalance uses Python identifier endingBalance
    __endingBalance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'endingBalance'), 'endingBalance', '__httpwww_vantivcnp_comschema_CTD_ANON_15_httpwww_vantivcnp_comschemaendingBalance', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1707, 16), )

    
    endingBalance = property(__endingBalance.value, __endingBalance.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cashBackAmount uses Python identifier cashBackAmount
    __cashBackAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cashBackAmount'), 'cashBackAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_15_httpwww_vantivcnp_comschemacashBackAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1708, 16), )

    
    cashBackAmount = property(__cashBackAmount.value, __cashBackAmount.set, None, None)

    _ElementMap.update({
        __txnTime.name() : __txnTime,
        __refCode.name() : __refCode,
        __systemTraceId.name() : __systemTraceId,
        __sequenceNumber.name() : __sequenceNumber,
        __availableBalance.name() : __availableBalance,
        __beginningBalance.name() : __beginningBalance,
        __endingBalance.name() : __endingBalance,
        __cashBackAmount.name() : __cashBackAmount
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_15 = CTD_ANON_15


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_16 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1714, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}accountNumber uses Python identifier accountNumber
    __accountNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountNumber'), 'accountNumber', '__httpwww_vantivcnp_comschema_CTD_ANON_16_httpwww_vantivcnp_comschemaaccountNumber', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1716, 16), )

    
    accountNumber = property(__accountNumber.value, __accountNumber.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}pin uses Python identifier pin
    __pin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pin'), 'pin', '__httpwww_vantivcnp_comschema_CTD_ANON_16_httpwww_vantivcnp_comschemapin', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1717, 16), )

    
    pin = property(__pin.value, __pin.set, None, None)

    _ElementMap.update({
        __accountNumber.name() : __accountNumber,
        __pin.name() : __pin
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_16 = CTD_ANON_16


# Complex type {http://www.vantivcnp.com/schema}echeckAccountInfoType with content type ELEMENT_ONLY
class echeckAccountInfoType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}echeckAccountInfoType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'echeckAccountInfoType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1884, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}accType uses Python identifier accType
    __accType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accType'), 'accType', '__httpwww_vantivcnp_comschema_echeckAccountInfoType_httpwww_vantivcnp_comschemaaccType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1886, 12), )

    
    accType = property(__accType.value, __accType.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}accNum uses Python identifier accNum
    __accNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accNum'), 'accNum', '__httpwww_vantivcnp_comschema_echeckAccountInfoType_httpwww_vantivcnp_comschemaaccNum', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1887, 12), )

    
    accNum = property(__accNum.value, __accNum.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}routingNum uses Python identifier routingNum
    __routingNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'routingNum'), 'routingNum', '__httpwww_vantivcnp_comschema_echeckAccountInfoType_httpwww_vantivcnp_comschemaroutingNum', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1888, 12), )

    
    routingNum = property(__routingNum.value, __routingNum.set, None, None)

    _ElementMap.update({
        __accType.name() : __accType,
        __accNum.name() : __accNum,
        __routingNum.name() : __routingNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.echeckAccountInfoType = echeckAccountInfoType
Namespace.addCategoryObject('typeBinding', 'echeckAccountInfoType', echeckAccountInfoType)


# Complex type {http://www.vantivcnp.com/schema}echeckTokenInfoType with content type ELEMENT_ONLY
class echeckTokenInfoType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}echeckTokenInfoType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'echeckTokenInfoType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1892, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}accType uses Python identifier accType
    __accType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accType'), 'accType', '__httpwww_vantivcnp_comschema_echeckTokenInfoType_httpwww_vantivcnp_comschemaaccType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1894, 12), )

    
    accType = property(__accType.value, __accType.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cnpToken uses Python identifier cnpToken
    __cnpToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpToken'), 'cnpToken', '__httpwww_vantivcnp_comschema_echeckTokenInfoType_httpwww_vantivcnp_comschemacnpToken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1895, 12), )

    
    cnpToken = property(__cnpToken.value, __cnpToken.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}routingNum uses Python identifier routingNum
    __routingNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'routingNum'), 'routingNum', '__httpwww_vantivcnp_comschema_echeckTokenInfoType_httpwww_vantivcnp_comschemaroutingNum', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1896, 12), )

    
    routingNum = property(__routingNum.value, __routingNum.set, None, None)

    _ElementMap.update({
        __accType.name() : __accType,
        __cnpToken.name() : __cnpToken,
        __routingNum.name() : __routingNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.echeckTokenInfoType = echeckTokenInfoType
Namespace.addCategoryObject('typeBinding', 'echeckTokenInfoType', echeckTokenInfoType)


# Complex type {http://www.vantivcnp.com/schema}cardAccountInfoType with content type ELEMENT_ONLY
class cardAccountInfoType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}cardAccountInfoType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'cardAccountInfoType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1901, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__httpwww_vantivcnp_comschema_cardAccountInfoType_httpwww_vantivcnp_comschematype', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1903, 12), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}number uses Python identifier number
    __number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'number'), 'number', '__httpwww_vantivcnp_comschema_cardAccountInfoType_httpwww_vantivcnp_comschemanumber', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1904, 12), )

    
    number = property(__number.value, __number.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}expDate uses Python identifier expDate
    __expDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'expDate'), 'expDate', '__httpwww_vantivcnp_comschema_cardAccountInfoType_httpwww_vantivcnp_comschemaexpDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1905, 12), )

    
    expDate = property(__expDate.value, __expDate.set, None, None)

    _ElementMap.update({
        __type.name() : __type,
        __number.name() : __number,
        __expDate.name() : __expDate
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.cardAccountInfoType = cardAccountInfoType
Namespace.addCategoryObject('typeBinding', 'cardAccountInfoType', cardAccountInfoType)


# Complex type {http://www.vantivcnp.com/schema}cardTokenInfoType with content type ELEMENT_ONLY
class cardTokenInfoType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}cardTokenInfoType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'cardTokenInfoType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1909, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}cnpToken uses Python identifier cnpToken
    __cnpToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpToken'), 'cnpToken', '__httpwww_vantivcnp_comschema_cardTokenInfoType_httpwww_vantivcnp_comschemacnpToken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1911, 12), )

    
    cnpToken = property(__cnpToken.value, __cnpToken.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__httpwww_vantivcnp_comschema_cardTokenInfoType_httpwww_vantivcnp_comschematype', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1912, 12), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}expDate uses Python identifier expDate
    __expDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'expDate'), 'expDate', '__httpwww_vantivcnp_comschema_cardTokenInfoType_httpwww_vantivcnp_comschemaexpDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1913, 12), )

    
    expDate = property(__expDate.value, __expDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}bin uses Python identifier bin
    __bin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bin'), 'bin', '__httpwww_vantivcnp_comschema_cardTokenInfoType_httpwww_vantivcnp_comschemabin', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1914, 12), )

    
    bin = property(__bin.value, __bin.set, None, None)

    _ElementMap.update({
        __cnpToken.name() : __cnpToken,
        __type.name() : __type,
        __expDate.name() : __expDate,
        __bin.name() : __bin
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.cardTokenInfoType = cardTokenInfoType
Namespace.addCategoryObject('typeBinding', 'cardTokenInfoType', cardTokenInfoType)


# Complex type {http://www.vantivcnp.com/schema}extendedCardResponseType with content type ELEMENT_ONLY
class extendedCardResponseType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}extendedCardResponseType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'extendedCardResponseType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1919, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_extendedCardResponseType_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1921, 12), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}code uses Python identifier code
    __code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'code'), 'code', '__httpwww_vantivcnp_comschema_extendedCardResponseType_httpwww_vantivcnp_comschemacode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1922, 12), )

    
    code = property(__code.value, __code.set, None, None)

    _ElementMap.update({
        __message.name() : __message,
        __code.name() : __code
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.extendedCardResponseType = extendedCardResponseType
Namespace.addCategoryObject('typeBinding', 'extendedCardResponseType', extendedCardResponseType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_17 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1928, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}originalAccountInfo uses Python identifier originalAccountInfo
    __originalAccountInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalAccountInfo'), 'originalAccountInfo', '__httpwww_vantivcnp_comschema_CTD_ANON_17_httpwww_vantivcnp_comschemaoriginalAccountInfo', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1931, 20), )

    
    originalAccountInfo = property(__originalAccountInfo.value, __originalAccountInfo.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}newAccountInfo uses Python identifier newAccountInfo
    __newAccountInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'newAccountInfo'), 'newAccountInfo', '__httpwww_vantivcnp_comschema_CTD_ANON_17_httpwww_vantivcnp_comschemanewAccountInfo', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1932, 20), )

    
    newAccountInfo = property(__newAccountInfo.value, __newAccountInfo.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalTokenInfo uses Python identifier originalTokenInfo
    __originalTokenInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalTokenInfo'), 'originalTokenInfo', '__httpwww_vantivcnp_comschema_CTD_ANON_17_httpwww_vantivcnp_comschemaoriginalTokenInfo', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1936, 20), )

    
    originalTokenInfo = property(__originalTokenInfo.value, __originalTokenInfo.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}newTokenInfo uses Python identifier newTokenInfo
    __newTokenInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'newTokenInfo'), 'newTokenInfo', '__httpwww_vantivcnp_comschema_CTD_ANON_17_httpwww_vantivcnp_comschemanewTokenInfo', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1937, 20), )

    
    newTokenInfo = property(__newTokenInfo.value, __newTokenInfo.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalCardInfo uses Python identifier originalCardInfo
    __originalCardInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalCardInfo'), 'originalCardInfo', '__httpwww_vantivcnp_comschema_CTD_ANON_17_httpwww_vantivcnp_comschemaoriginalCardInfo', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1941, 20), )

    
    originalCardInfo = property(__originalCardInfo.value, __originalCardInfo.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}newCardInfo uses Python identifier newCardInfo
    __newCardInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'newCardInfo'), 'newCardInfo', '__httpwww_vantivcnp_comschema_CTD_ANON_17_httpwww_vantivcnp_comschemanewCardInfo', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1942, 20), )

    
    newCardInfo = property(__newCardInfo.value, __newCardInfo.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}extendedCardResponse uses Python identifier extendedCardResponse
    __extendedCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extendedCardResponse'), 'extendedCardResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_17_httpwww_vantivcnp_comschemaextendedCardResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1943, 20), )

    
    extendedCardResponse = property(__extendedCardResponse.value, __extendedCardResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}accountUpdateSource uses Python identifier accountUpdateSource
    __accountUpdateSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountUpdateSource'), 'accountUpdateSource', '__httpwww_vantivcnp_comschema_CTD_ANON_17_httpwww_vantivcnp_comschemaaccountUpdateSource', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1944, 20), )

    
    accountUpdateSource = property(__accountUpdateSource.value, __accountUpdateSource.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalCardTokenInfo uses Python identifier originalCardTokenInfo
    __originalCardTokenInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalCardTokenInfo'), 'originalCardTokenInfo', '__httpwww_vantivcnp_comschema_CTD_ANON_17_httpwww_vantivcnp_comschemaoriginalCardTokenInfo', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1948, 20), )

    
    originalCardTokenInfo = property(__originalCardTokenInfo.value, __originalCardTokenInfo.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}newCardTokenInfo uses Python identifier newCardTokenInfo
    __newCardTokenInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'newCardTokenInfo'), 'newCardTokenInfo', '__httpwww_vantivcnp_comschema_CTD_ANON_17_httpwww_vantivcnp_comschemanewCardTokenInfo', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1949, 20), )

    
    newCardTokenInfo = property(__newCardTokenInfo.value, __newCardTokenInfo.set, None, None)

    _ElementMap.update({
        __originalAccountInfo.name() : __originalAccountInfo,
        __newAccountInfo.name() : __newAccountInfo,
        __originalTokenInfo.name() : __originalTokenInfo,
        __newTokenInfo.name() : __newTokenInfo,
        __originalCardInfo.name() : __originalCardInfo,
        __newCardInfo.name() : __newCardInfo,
        __extendedCardResponse.name() : __extendedCardResponse,
        __accountUpdateSource.name() : __accountUpdateSource,
        __originalCardTokenInfo.name() : __originalCardTokenInfo,
        __newCardTokenInfo.name() : __newCardTokenInfo
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_17 = CTD_ANON_17


# Complex type {http://www.vantivcnp.com/schema}echeckType with content type ELEMENT_ONLY
class echeckType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}echeckType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'echeckType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2020, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}accType uses Python identifier accType
    __accType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accType'), 'accType', '__httpwww_vantivcnp_comschema_echeckType_httpwww_vantivcnp_comschemaaccType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2022, 12), )

    
    accType = property(__accType.value, __accType.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}accNum uses Python identifier accNum
    __accNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accNum'), 'accNum', '__httpwww_vantivcnp_comschema_echeckType_httpwww_vantivcnp_comschemaaccNum', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2023, 12), )

    
    accNum = property(__accNum.value, __accNum.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}routingNum uses Python identifier routingNum
    __routingNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'routingNum'), 'routingNum', '__httpwww_vantivcnp_comschema_echeckType_httpwww_vantivcnp_comschemaroutingNum', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2024, 12), )

    
    routingNum = property(__routingNum.value, __routingNum.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}checkNum uses Python identifier checkNum
    __checkNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'checkNum'), 'checkNum', '__httpwww_vantivcnp_comschema_echeckType_httpwww_vantivcnp_comschemacheckNum', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2025, 12), )

    
    checkNum = property(__checkNum.value, __checkNum.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}ccdPaymentInformation uses Python identifier ccdPaymentInformation
    __ccdPaymentInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ccdPaymentInformation'), 'ccdPaymentInformation', '__httpwww_vantivcnp_comschema_echeckType_httpwww_vantivcnp_comschemaccdPaymentInformation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2026, 12), )

    
    ccdPaymentInformation = property(__ccdPaymentInformation.value, __ccdPaymentInformation.set, None, None)

    _ElementMap.update({
        __accType.name() : __accType,
        __accNum.name() : __accNum,
        __routingNum.name() : __routingNum,
        __checkNum.name() : __checkNum,
        __ccdPaymentInformation.name() : __ccdPaymentInformation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.echeckType = echeckType
Namespace.addCategoryObject('typeBinding', 'echeckType', echeckType)


# Complex type {http://www.vantivcnp.com/schema}echeckTypeCtx with content type ELEMENT_ONLY
class echeckTypeCtx (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}echeckTypeCtx with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'echeckTypeCtx')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2030, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}accType uses Python identifier accType
    __accType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accType'), 'accType', '__httpwww_vantivcnp_comschema_echeckTypeCtx_httpwww_vantivcnp_comschemaaccType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2032, 12), )

    
    accType = property(__accType.value, __accType.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}accNum uses Python identifier accNum
    __accNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accNum'), 'accNum', '__httpwww_vantivcnp_comschema_echeckTypeCtx_httpwww_vantivcnp_comschemaaccNum', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2033, 12), )

    
    accNum = property(__accNum.value, __accNum.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}routingNum uses Python identifier routingNum
    __routingNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'routingNum'), 'routingNum', '__httpwww_vantivcnp_comschema_echeckTypeCtx_httpwww_vantivcnp_comschemaroutingNum', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2034, 12), )

    
    routingNum = property(__routingNum.value, __routingNum.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}checkNum uses Python identifier checkNum
    __checkNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'checkNum'), 'checkNum', '__httpwww_vantivcnp_comschema_echeckTypeCtx_httpwww_vantivcnp_comschemacheckNum', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2035, 12), )

    
    checkNum = property(__checkNum.value, __checkNum.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}ccdPaymentInformation uses Python identifier ccdPaymentInformation
    __ccdPaymentInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ccdPaymentInformation'), 'ccdPaymentInformation', '__httpwww_vantivcnp_comschema_echeckTypeCtx_httpwww_vantivcnp_comschemaccdPaymentInformation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2036, 12), )

    
    ccdPaymentInformation = property(__ccdPaymentInformation.value, __ccdPaymentInformation.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}ctxPaymentInformation uses Python identifier ctxPaymentInformation
    __ctxPaymentInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ctxPaymentInformation'), 'ctxPaymentInformation', '__httpwww_vantivcnp_comschema_echeckTypeCtx_httpwww_vantivcnp_comschemactxPaymentInformation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2037, 12), )

    
    ctxPaymentInformation = property(__ctxPaymentInformation.value, __ctxPaymentInformation.set, None, None)

    _ElementMap.update({
        __accType.name() : __accType,
        __accNum.name() : __accNum,
        __routingNum.name() : __routingNum,
        __checkNum.name() : __checkNum,
        __ccdPaymentInformation.name() : __ccdPaymentInformation,
        __ctxPaymentInformation.name() : __ctxPaymentInformation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.echeckTypeCtx = echeckTypeCtx
Namespace.addCategoryObject('typeBinding', 'echeckTypeCtx', echeckTypeCtx)


# Complex type {http://www.vantivcnp.com/schema}ctxPaymentInformationType with content type ELEMENT_ONLY
class ctxPaymentInformationType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}ctxPaymentInformationType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctxPaymentInformationType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2041, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}ctxPaymentDetail uses Python identifier ctxPaymentDetail
    __ctxPaymentDetail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ctxPaymentDetail'), 'ctxPaymentDetail', '__httpwww_vantivcnp_comschema_ctxPaymentInformationType_httpwww_vantivcnp_comschemactxPaymentDetail', True, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2043, 12), )

    
    ctxPaymentDetail = property(__ctxPaymentDetail.value, __ctxPaymentDetail.set, None, None)

    _ElementMap.update({
        __ctxPaymentDetail.name() : __ctxPaymentDetail
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctxPaymentInformationType = ctxPaymentInformationType
Namespace.addCategoryObject('typeBinding', 'ctxPaymentInformationType', ctxPaymentInformationType)


# Complex type {http://www.vantivcnp.com/schema}echeckForTokenType with content type ELEMENT_ONLY
class echeckForTokenType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}echeckForTokenType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'echeckForTokenType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2047, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}accNum uses Python identifier accNum
    __accNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accNum'), 'accNum', '__httpwww_vantivcnp_comschema_echeckForTokenType_httpwww_vantivcnp_comschemaaccNum', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2049, 12), )

    
    accNum = property(__accNum.value, __accNum.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}routingNum uses Python identifier routingNum
    __routingNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'routingNum'), 'routingNum', '__httpwww_vantivcnp_comschema_echeckForTokenType_httpwww_vantivcnp_comschemaroutingNum', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2050, 12), )

    
    routingNum = property(__routingNum.value, __routingNum.set, None, None)

    _ElementMap.update({
        __accNum.name() : __accNum,
        __routingNum.name() : __routingNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.echeckForTokenType = echeckForTokenType
Namespace.addCategoryObject('typeBinding', 'echeckForTokenType', echeckForTokenType)


# Complex type {http://www.vantivcnp.com/schema}filteringType with content type ELEMENT_ONLY
class filteringType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}filteringType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'filteringType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2067, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}prepaid uses Python identifier prepaid
    __prepaid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'prepaid'), 'prepaid', '__httpwww_vantivcnp_comschema_filteringType_httpwww_vantivcnp_comschemaprepaid', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2069, 12), )

    
    prepaid = property(__prepaid.value, __prepaid.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}international uses Python identifier international
    __international = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'international'), 'international', '__httpwww_vantivcnp_comschema_filteringType_httpwww_vantivcnp_comschemainternational', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2070, 12), )

    
    international = property(__international.value, __international.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}chargeback uses Python identifier chargeback
    __chargeback = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'chargeback'), 'chargeback', '__httpwww_vantivcnp_comschema_filteringType_httpwww_vantivcnp_comschemachargeback', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2071, 12), )

    
    chargeback = property(__chargeback.value, __chargeback.set, None, None)

    _ElementMap.update({
        __prepaid.name() : __prepaid,
        __international.name() : __international,
        __chargeback.name() : __chargeback
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.filteringType = filteringType
Namespace.addCategoryObject('typeBinding', 'filteringType', filteringType)


# Complex type {http://www.vantivcnp.com/schema}virtualGiftCardType with content type ELEMENT_ONLY
class virtualGiftCardType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}virtualGiftCardType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'virtualGiftCardType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2108, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}accountNumberLength uses Python identifier accountNumberLength
    __accountNumberLength = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountNumberLength'), 'accountNumberLength', '__httpwww_vantivcnp_comschema_virtualGiftCardType_httpwww_vantivcnp_comschemaaccountNumberLength', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2110, 12), )

    
    accountNumberLength = property(__accountNumberLength.value, __accountNumberLength.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}giftCardBin uses Python identifier giftCardBin
    __giftCardBin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardBin'), 'giftCardBin', '__httpwww_vantivcnp_comschema_virtualGiftCardType_httpwww_vantivcnp_comschemagiftCardBin', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2111, 12), )

    
    giftCardBin = property(__giftCardBin.value, __giftCardBin.set, None, None)

    _ElementMap.update({
        __accountNumberLength.name() : __accountNumberLength,
        __giftCardBin.name() : __giftCardBin
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.virtualGiftCardType = virtualGiftCardType
Namespace.addCategoryObject('typeBinding', 'virtualGiftCardType', virtualGiftCardType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_18 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2152, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}walletSourceType uses Python identifier walletSourceType
    __walletSourceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'walletSourceType'), 'walletSourceType', '__httpwww_vantivcnp_comschema_CTD_ANON_18_httpwww_vantivcnp_comschemawalletSourceType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2154, 16), )

    
    walletSourceType = property(__walletSourceType.value, __walletSourceType.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}walletSourceTypeId uses Python identifier walletSourceTypeId
    __walletSourceTypeId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'walletSourceTypeId'), 'walletSourceTypeId', '__httpwww_vantivcnp_comschema_CTD_ANON_18_httpwww_vantivcnp_comschemawalletSourceTypeId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2155, 16), )

    
    walletSourceTypeId = property(__walletSourceTypeId.value, __walletSourceTypeId.set, None, None)

    _ElementMap.update({
        __walletSourceType.name() : __walletSourceType,
        __walletSourceTypeId.name() : __walletSourceTypeId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_18 = CTD_ANON_18


# Complex type {http://www.vantivcnp.com/schema}applepayType with content type ELEMENT_ONLY
class applepayType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}applepayType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'applepayType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2160, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}data uses Python identifier data
    __data = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'data'), 'data', '__httpwww_vantivcnp_comschema_applepayType_httpwww_vantivcnp_comschemadata', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2162, 12), )

    
    data = property(__data.value, __data.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}header uses Python identifier header
    __header = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'header'), 'header', '__httpwww_vantivcnp_comschema_applepayType_httpwww_vantivcnp_comschemaheader', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2163, 12), )

    
    header = property(__header.value, __header.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}signature uses Python identifier signature
    __signature = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'signature'), 'signature', '__httpwww_vantivcnp_comschema_applepayType_httpwww_vantivcnp_comschemasignature', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2164, 12), )

    
    signature = property(__signature.value, __signature.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'version'), 'version', '__httpwww_vantivcnp_comschema_applepayType_httpwww_vantivcnp_comschemaversion', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2165, 12), )

    
    version = property(__version.value, __version.set, None, None)

    _ElementMap.update({
        __data.name() : __data,
        __header.name() : __header,
        __signature.name() : __signature,
        __version.name() : __version
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.applepayType = applepayType
Namespace.addCategoryObject('typeBinding', 'applepayType', applepayType)


# Complex type {http://www.vantivcnp.com/schema}applepayHeaderType with content type ELEMENT_ONLY
class applepayHeaderType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}applepayHeaderType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'applepayHeaderType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2169, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}applicationData uses Python identifier applicationData
    __applicationData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'applicationData'), 'applicationData', '__httpwww_vantivcnp_comschema_applepayHeaderType_httpwww_vantivcnp_comschemaapplicationData', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2171, 12), )

    
    applicationData = property(__applicationData.value, __applicationData.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}ephemeralPublicKey uses Python identifier ephemeralPublicKey
    __ephemeralPublicKey = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ephemeralPublicKey'), 'ephemeralPublicKey', '__httpwww_vantivcnp_comschema_applepayHeaderType_httpwww_vantivcnp_comschemaephemeralPublicKey', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2172, 12), )

    
    ephemeralPublicKey = property(__ephemeralPublicKey.value, __ephemeralPublicKey.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}publicKeyHash uses Python identifier publicKeyHash
    __publicKeyHash = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'publicKeyHash'), 'publicKeyHash', '__httpwww_vantivcnp_comschema_applepayHeaderType_httpwww_vantivcnp_comschemapublicKeyHash', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2173, 12), )

    
    publicKeyHash = property(__publicKeyHash.value, __publicKeyHash.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}transactionId uses Python identifier transactionId
    __transactionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'transactionId'), 'transactionId', '__httpwww_vantivcnp_comschema_applepayHeaderType_httpwww_vantivcnp_comschematransactionId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2174, 12), )

    
    transactionId = property(__transactionId.value, __transactionId.set, None, None)

    _ElementMap.update({
        __applicationData.name() : __applicationData,
        __ephemeralPublicKey.name() : __ephemeralPublicKey,
        __publicKeyHash.name() : __publicKeyHash,
        __transactionId.name() : __transactionId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.applepayHeaderType = applepayHeaderType
Namespace.addCategoryObject('typeBinding', 'applepayHeaderType', applepayHeaderType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_19 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2179, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}applicationPrimaryAccountNumber uses Python identifier applicationPrimaryAccountNumber
    __applicationPrimaryAccountNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'applicationPrimaryAccountNumber'), 'applicationPrimaryAccountNumber', '__httpwww_vantivcnp_comschema_CTD_ANON_19_httpwww_vantivcnp_comschemaapplicationPrimaryAccountNumber', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2181, 16), )

    
    applicationPrimaryAccountNumber = property(__applicationPrimaryAccountNumber.value, __applicationPrimaryAccountNumber.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}applicationExpirationDate uses Python identifier applicationExpirationDate
    __applicationExpirationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'applicationExpirationDate'), 'applicationExpirationDate', '__httpwww_vantivcnp_comschema_CTD_ANON_19_httpwww_vantivcnp_comschemaapplicationExpirationDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2182, 16), )

    
    applicationExpirationDate = property(__applicationExpirationDate.value, __applicationExpirationDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}currencyCode uses Python identifier currencyCode
    __currencyCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'currencyCode'), 'currencyCode', '__httpwww_vantivcnp_comschema_CTD_ANON_19_httpwww_vantivcnp_comschemacurrencyCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2183, 16), )

    
    currencyCode = property(__currencyCode.value, __currencyCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}transactionAmount uses Python identifier transactionAmount
    __transactionAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'transactionAmount'), 'transactionAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_19_httpwww_vantivcnp_comschematransactionAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2184, 16), )

    
    transactionAmount = property(__transactionAmount.value, __transactionAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cardholderName uses Python identifier cardholderName
    __cardholderName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardholderName'), 'cardholderName', '__httpwww_vantivcnp_comschema_CTD_ANON_19_httpwww_vantivcnp_comschemacardholderName', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2185, 16), )

    
    cardholderName = property(__cardholderName.value, __cardholderName.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}deviceManufacturerIdentifier uses Python identifier deviceManufacturerIdentifier
    __deviceManufacturerIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deviceManufacturerIdentifier'), 'deviceManufacturerIdentifier', '__httpwww_vantivcnp_comschema_CTD_ANON_19_httpwww_vantivcnp_comschemadeviceManufacturerIdentifier', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2186, 16), )

    
    deviceManufacturerIdentifier = property(__deviceManufacturerIdentifier.value, __deviceManufacturerIdentifier.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}paymentDataType uses Python identifier paymentDataType
    __paymentDataType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paymentDataType'), 'paymentDataType', '__httpwww_vantivcnp_comschema_CTD_ANON_19_httpwww_vantivcnp_comschemapaymentDataType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2187, 16), )

    
    paymentDataType = property(__paymentDataType.value, __paymentDataType.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}onlinePaymentCryptogram uses Python identifier onlinePaymentCryptogram
    __onlinePaymentCryptogram = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'onlinePaymentCryptogram'), 'onlinePaymentCryptogram', '__httpwww_vantivcnp_comschema_CTD_ANON_19_httpwww_vantivcnp_comschemaonlinePaymentCryptogram', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2188, 16), )

    
    onlinePaymentCryptogram = property(__onlinePaymentCryptogram.value, __onlinePaymentCryptogram.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}eciIndicator uses Python identifier eciIndicator
    __eciIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eciIndicator'), 'eciIndicator', '__httpwww_vantivcnp_comschema_CTD_ANON_19_httpwww_vantivcnp_comschemaeciIndicator', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2189, 16), )

    
    eciIndicator = property(__eciIndicator.value, __eciIndicator.set, None, None)

    _ElementMap.update({
        __applicationPrimaryAccountNumber.name() : __applicationPrimaryAccountNumber,
        __applicationExpirationDate.name() : __applicationExpirationDate,
        __currencyCode.name() : __currencyCode,
        __transactionAmount.name() : __transactionAmount,
        __cardholderName.name() : __cardholderName,
        __deviceManufacturerIdentifier.name() : __deviceManufacturerIdentifier,
        __paymentDataType.name() : __paymentDataType,
        __onlinePaymentCryptogram.name() : __onlinePaymentCryptogram,
        __eciIndicator.name() : __eciIndicator
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_19 = CTD_ANON_19


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_20 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2195, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}cryptogram uses Python identifier cryptogram
    __cryptogram = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cryptogram'), 'cryptogram', '__httpwww_vantivcnp_comschema_CTD_ANON_20_httpwww_vantivcnp_comschemacryptogram', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2197, 16), )

    
    cryptogram = property(__cryptogram.value, __cryptogram.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}expMonth uses Python identifier expMonth
    __expMonth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'expMonth'), 'expMonth', '__httpwww_vantivcnp_comschema_CTD_ANON_20_httpwww_vantivcnp_comschemaexpMonth', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2198, 16), )

    
    expMonth = property(__expMonth.value, __expMonth.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}expYear uses Python identifier expYear
    __expYear = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'expYear'), 'expYear', '__httpwww_vantivcnp_comschema_CTD_ANON_20_httpwww_vantivcnp_comschemaexpYear', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2199, 16), )

    
    expYear = property(__expYear.value, __expYear.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}eciIndicator uses Python identifier eciIndicator
    __eciIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eciIndicator'), 'eciIndicator', '__httpwww_vantivcnp_comschema_CTD_ANON_20_httpwww_vantivcnp_comschemaeciIndicator', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2200, 16), )

    
    eciIndicator = property(__eciIndicator.value, __eciIndicator.set, None, None)

    _ElementMap.update({
        __cryptogram.name() : __cryptogram,
        __expMonth.name() : __expMonth,
        __expYear.name() : __expYear,
        __eciIndicator.name() : __eciIndicator
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_20 = CTD_ANON_20


# Complex type {http://www.vantivcnp.com/schema}sepaDirectDebitType with content type ELEMENT_ONLY
class sepaDirectDebitType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}sepaDirectDebitType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'sepaDirectDebitType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2206, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}mandateProvider uses Python identifier mandateProvider
    __mandateProvider = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mandateProvider'), 'mandateProvider', '__httpwww_vantivcnp_comschema_sepaDirectDebitType_httpwww_vantivcnp_comschemamandateProvider', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2208, 12), )

    
    mandateProvider = property(__mandateProvider.value, __mandateProvider.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}sequenceType uses Python identifier sequenceType
    __sequenceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sequenceType'), 'sequenceType', '__httpwww_vantivcnp_comschema_sepaDirectDebitType_httpwww_vantivcnp_comschemasequenceType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2209, 12), )

    
    sequenceType = property(__sequenceType.value, __sequenceType.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}mandateReference uses Python identifier mandateReference
    __mandateReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mandateReference'), 'mandateReference', '__httpwww_vantivcnp_comschema_sepaDirectDebitType_httpwww_vantivcnp_comschemamandateReference', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2210, 12), )

    
    mandateReference = property(__mandateReference.value, __mandateReference.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}mandateUrl uses Python identifier mandateUrl
    __mandateUrl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mandateUrl'), 'mandateUrl', '__httpwww_vantivcnp_comschema_sepaDirectDebitType_httpwww_vantivcnp_comschemamandateUrl', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2211, 12), )

    
    mandateUrl = property(__mandateUrl.value, __mandateUrl.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}mandateSignatureDate uses Python identifier mandateSignatureDate
    __mandateSignatureDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mandateSignatureDate'), 'mandateSignatureDate', '__httpwww_vantivcnp_comschema_sepaDirectDebitType_httpwww_vantivcnp_comschemamandateSignatureDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2212, 12), )

    
    mandateSignatureDate = property(__mandateSignatureDate.value, __mandateSignatureDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}iban uses Python identifier iban
    __iban = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'iban'), 'iban', '__httpwww_vantivcnp_comschema_sepaDirectDebitType_httpwww_vantivcnp_comschemaiban', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2213, 12), )

    
    iban = property(__iban.value, __iban.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}preferredLanguage uses Python identifier preferredLanguage
    __preferredLanguage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'preferredLanguage'), 'preferredLanguage', '__httpwww_vantivcnp_comschema_sepaDirectDebitType_httpwww_vantivcnp_comschemapreferredLanguage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2214, 12), )

    
    preferredLanguage = property(__preferredLanguage.value, __preferredLanguage.set, None, None)

    _ElementMap.update({
        __mandateProvider.name() : __mandateProvider,
        __sequenceType.name() : __sequenceType,
        __mandateReference.name() : __mandateReference,
        __mandateUrl.name() : __mandateUrl,
        __mandateSignatureDate.name() : __mandateSignatureDate,
        __iban.name() : __iban,
        __preferredLanguage.name() : __preferredLanguage
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.sepaDirectDebitType = sepaDirectDebitType
Namespace.addCategoryObject('typeBinding', 'sepaDirectDebitType', sepaDirectDebitType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_21 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2219, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}redirectUrl uses Python identifier redirectUrl
    __redirectUrl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'redirectUrl'), 'redirectUrl', '__httpwww_vantivcnp_comschema_CTD_ANON_21_httpwww_vantivcnp_comschemaredirectUrl', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2221, 16), )

    
    redirectUrl = property(__redirectUrl.value, __redirectUrl.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}redirectToken uses Python identifier redirectToken
    __redirectToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'redirectToken'), 'redirectToken', '__httpwww_vantivcnp_comschema_CTD_ANON_21_httpwww_vantivcnp_comschemaredirectToken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2222, 16), )

    
    redirectToken = property(__redirectToken.value, __redirectToken.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}mandateReference uses Python identifier mandateReference
    __mandateReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mandateReference'), 'mandateReference', '__httpwww_vantivcnp_comschema_CTD_ANON_21_httpwww_vantivcnp_comschemamandateReference', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2223, 16), )

    
    mandateReference = property(__mandateReference.value, __mandateReference.set, None, None)

    _ElementMap.update({
        __redirectUrl.name() : __redirectUrl,
        __redirectToken.name() : __redirectToken,
        __mandateReference.name() : __mandateReference
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_21 = CTD_ANON_21


# Complex type {http://www.vantivcnp.com/schema}idealType with content type ELEMENT_ONLY
class idealType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}idealType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'idealType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2228, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}preferredLanguage uses Python identifier preferredLanguage
    __preferredLanguage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'preferredLanguage'), 'preferredLanguage', '__httpwww_vantivcnp_comschema_idealType_httpwww_vantivcnp_comschemapreferredLanguage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2230, 12), )

    
    preferredLanguage = property(__preferredLanguage.value, __preferredLanguage.set, None, None)

    _ElementMap.update({
        __preferredLanguage.name() : __preferredLanguage
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.idealType = idealType
Namespace.addCategoryObject('typeBinding', 'idealType', idealType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_22 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2235, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}redirectUrl uses Python identifier redirectUrl
    __redirectUrl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'redirectUrl'), 'redirectUrl', '__httpwww_vantivcnp_comschema_CTD_ANON_22_httpwww_vantivcnp_comschemaredirectUrl', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2237, 16), )

    
    redirectUrl = property(__redirectUrl.value, __redirectUrl.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}redirectToken uses Python identifier redirectToken
    __redirectToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'redirectToken'), 'redirectToken', '__httpwww_vantivcnp_comschema_CTD_ANON_22_httpwww_vantivcnp_comschemaredirectToken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2238, 16), )

    
    redirectToken = property(__redirectToken.value, __redirectToken.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}paymentPurpose uses Python identifier paymentPurpose
    __paymentPurpose = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paymentPurpose'), 'paymentPurpose', '__httpwww_vantivcnp_comschema_CTD_ANON_22_httpwww_vantivcnp_comschemapaymentPurpose', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2239, 16), )

    
    paymentPurpose = property(__paymentPurpose.value, __paymentPurpose.set, None, None)

    _ElementMap.update({
        __redirectUrl.name() : __redirectUrl,
        __redirectToken.name() : __redirectToken,
        __paymentPurpose.name() : __paymentPurpose
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_22 = CTD_ANON_22


# Complex type {http://www.vantivcnp.com/schema}giropayType with content type ELEMENT_ONLY
class giropayType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}giropayType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'giropayType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2244, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}preferredLanguage uses Python identifier preferredLanguage
    __preferredLanguage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'preferredLanguage'), 'preferredLanguage', '__httpwww_vantivcnp_comschema_giropayType_httpwww_vantivcnp_comschemapreferredLanguage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2246, 12), )

    
    preferredLanguage = property(__preferredLanguage.value, __preferredLanguage.set, None, None)

    _ElementMap.update({
        __preferredLanguage.name() : __preferredLanguage
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.giropayType = giropayType
Namespace.addCategoryObject('typeBinding', 'giropayType', giropayType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_23 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2251, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}redirectUrl uses Python identifier redirectUrl
    __redirectUrl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'redirectUrl'), 'redirectUrl', '__httpwww_vantivcnp_comschema_CTD_ANON_23_httpwww_vantivcnp_comschemaredirectUrl', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2253, 16), )

    
    redirectUrl = property(__redirectUrl.value, __redirectUrl.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}redirectToken uses Python identifier redirectToken
    __redirectToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'redirectToken'), 'redirectToken', '__httpwww_vantivcnp_comschema_CTD_ANON_23_httpwww_vantivcnp_comschemaredirectToken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2254, 16), )

    
    redirectToken = property(__redirectToken.value, __redirectToken.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}paymentPurpose uses Python identifier paymentPurpose
    __paymentPurpose = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paymentPurpose'), 'paymentPurpose', '__httpwww_vantivcnp_comschema_CTD_ANON_23_httpwww_vantivcnp_comschemapaymentPurpose', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2255, 16), )

    
    paymentPurpose = property(__paymentPurpose.value, __paymentPurpose.set, None, None)

    _ElementMap.update({
        __redirectUrl.name() : __redirectUrl,
        __redirectToken.name() : __redirectToken,
        __paymentPurpose.name() : __paymentPurpose
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_23 = CTD_ANON_23


# Complex type {http://www.vantivcnp.com/schema}sofortType with content type ELEMENT_ONLY
class sofortType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}sofortType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'sofortType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2260, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}preferredLanguage uses Python identifier preferredLanguage
    __preferredLanguage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'preferredLanguage'), 'preferredLanguage', '__httpwww_vantivcnp_comschema_sofortType_httpwww_vantivcnp_comschemapreferredLanguage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2262, 12), )

    
    preferredLanguage = property(__preferredLanguage.value, __preferredLanguage.set, None, None)

    _ElementMap.update({
        __preferredLanguage.name() : __preferredLanguage
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.sofortType = sofortType
Namespace.addCategoryObject('typeBinding', 'sofortType', sofortType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_24 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2267, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}redirectUrl uses Python identifier redirectUrl
    __redirectUrl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'redirectUrl'), 'redirectUrl', '__httpwww_vantivcnp_comschema_CTD_ANON_24_httpwww_vantivcnp_comschemaredirectUrl', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2269, 16), )

    
    redirectUrl = property(__redirectUrl.value, __redirectUrl.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}redirectToken uses Python identifier redirectToken
    __redirectToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'redirectToken'), 'redirectToken', '__httpwww_vantivcnp_comschema_CTD_ANON_24_httpwww_vantivcnp_comschemaredirectToken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2270, 16), )

    
    redirectToken = property(__redirectToken.value, __redirectToken.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}paymentPurpose uses Python identifier paymentPurpose
    __paymentPurpose = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paymentPurpose'), 'paymentPurpose', '__httpwww_vantivcnp_comschema_CTD_ANON_24_httpwww_vantivcnp_comschemapaymentPurpose', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2271, 16), )

    
    paymentPurpose = property(__paymentPurpose.value, __paymentPurpose.set, None, None)

    _ElementMap.update({
        __redirectUrl.name() : __redirectUrl,
        __redirectToken.name() : __redirectToken,
        __paymentPurpose.name() : __paymentPurpose
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_24 = CTD_ANON_24


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_25 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2620, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}networkName uses Python identifier networkName
    __networkName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'networkName'), 'networkName', '__httpwww_vantivcnp_comschema_CTD_ANON_25_httpwww_vantivcnp_comschemanetworkName', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2622, 16), )

    
    networkName = property(__networkName.value, __networkName.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}debitResponse uses Python identifier debitResponse
    __debitResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'debitResponse'), 'debitResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_25_httpwww_vantivcnp_comschemadebitResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2623, 16), )

    
    debitResponse = property(__debitResponse.value, __debitResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}debitMessage uses Python identifier debitMessage
    __debitMessage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'debitMessage'), 'debitMessage', '__httpwww_vantivcnp_comschema_CTD_ANON_25_httpwww_vantivcnp_comschemadebitMessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2624, 16), )

    
    debitMessage = property(__debitMessage.value, __debitMessage.set, None, None)

    _ElementMap.update({
        __networkName.name() : __networkName,
        __debitResponse.name() : __debitResponse,
        __debitMessage.name() : __debitMessage
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_25 = CTD_ANON_25


# Complex type {http://www.vantivcnp.com/schema}pinlessDebitRequestType with content type ELEMENT_ONLY
class pinlessDebitRequestType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}pinlessDebitRequestType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'pinlessDebitRequestType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2822, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}routingPreference uses Python identifier routingPreference
    __routingPreference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'routingPreference'), 'routingPreference', '__httpwww_vantivcnp_comschema_pinlessDebitRequestType_httpwww_vantivcnp_comschemaroutingPreference', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2824, 12), )

    
    routingPreference = property(__routingPreference.value, __routingPreference.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}preferredDebitNetworks uses Python identifier preferredDebitNetworks
    __preferredDebitNetworks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'preferredDebitNetworks'), 'preferredDebitNetworks', '__httpwww_vantivcnp_comschema_pinlessDebitRequestType_httpwww_vantivcnp_comschemapreferredDebitNetworks', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2825, 12), )

    
    preferredDebitNetworks = property(__preferredDebitNetworks.value, __preferredDebitNetworks.set, None, None)

    _ElementMap.update({
        __routingPreference.name() : __routingPreference,
        __preferredDebitNetworks.name() : __preferredDebitNetworks
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.pinlessDebitRequestType = pinlessDebitRequestType
Namespace.addCategoryObject('typeBinding', 'pinlessDebitRequestType', pinlessDebitRequestType)


# Complex type {http://www.vantivcnp.com/schema}preferredDebitNetworksType with content type ELEMENT_ONLY
class preferredDebitNetworksType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}preferredDebitNetworksType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'preferredDebitNetworksType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2829, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}debitNetworkName uses Python identifier debitNetworkName
    __debitNetworkName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'debitNetworkName'), 'debitNetworkName', '__httpwww_vantivcnp_comschema_preferredDebitNetworksType_httpwww_vantivcnp_comschemadebitNetworkName', True, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2831, 12), )

    
    debitNetworkName = property(__debitNetworkName.value, __debitNetworkName.set, None, None)

    _ElementMap.update({
        __debitNetworkName.name() : __debitNetworkName
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.preferredDebitNetworksType = preferredDebitNetworksType
Namespace.addCategoryObject('typeBinding', 'preferredDebitNetworksType', preferredDebitNetworksType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_26 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2836, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}lodgingCharge uses Python identifier lodgingCharge
    __lodgingCharge = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'lodgingCharge'), 'lodgingCharge', '__httpwww_vantivcnp_comschema_CTD_ANON_26_httpwww_vantivcnp_comschemalodgingCharge', True, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 200, 4), )

    
    lodgingCharge = property(__lodgingCharge.value, __lodgingCharge.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}hotelFolioNumber uses Python identifier hotelFolioNumber
    __hotelFolioNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'hotelFolioNumber'), 'hotelFolioNumber', '__httpwww_vantivcnp_comschema_CTD_ANON_26_httpwww_vantivcnp_comschemahotelFolioNumber', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2838, 16), )

    
    hotelFolioNumber = property(__hotelFolioNumber.value, __hotelFolioNumber.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}checkInDate uses Python identifier checkInDate
    __checkInDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'checkInDate'), 'checkInDate', '__httpwww_vantivcnp_comschema_CTD_ANON_26_httpwww_vantivcnp_comschemacheckInDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2839, 16), )

    
    checkInDate = property(__checkInDate.value, __checkInDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}checkOutDate uses Python identifier checkOutDate
    __checkOutDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'checkOutDate'), 'checkOutDate', '__httpwww_vantivcnp_comschema_CTD_ANON_26_httpwww_vantivcnp_comschemacheckOutDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2840, 16), )

    
    checkOutDate = property(__checkOutDate.value, __checkOutDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}duration uses Python identifier duration
    __duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'duration'), 'duration', '__httpwww_vantivcnp_comschema_CTD_ANON_26_httpwww_vantivcnp_comschemaduration', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2841, 16), )

    
    duration = property(__duration.value, __duration.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customerServicePhone uses Python identifier customerServicePhone
    __customerServicePhone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerServicePhone'), 'customerServicePhone', '__httpwww_vantivcnp_comschema_CTD_ANON_26_httpwww_vantivcnp_comschemacustomerServicePhone', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2842, 16), )

    
    customerServicePhone = property(__customerServicePhone.value, __customerServicePhone.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}programCode uses Python identifier programCode
    __programCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'programCode'), 'programCode', '__httpwww_vantivcnp_comschema_CTD_ANON_26_httpwww_vantivcnp_comschemaprogramCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2843, 16), )

    
    programCode = property(__programCode.value, __programCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}roomRate uses Python identifier roomRate
    __roomRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'roomRate'), 'roomRate', '__httpwww_vantivcnp_comschema_CTD_ANON_26_httpwww_vantivcnp_comschemaroomRate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2844, 16), )

    
    roomRate = property(__roomRate.value, __roomRate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}roomTax uses Python identifier roomTax
    __roomTax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'roomTax'), 'roomTax', '__httpwww_vantivcnp_comschema_CTD_ANON_26_httpwww_vantivcnp_comschemaroomTax', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2845, 16), )

    
    roomTax = property(__roomTax.value, __roomTax.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}numAdults uses Python identifier numAdults
    __numAdults = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'numAdults'), 'numAdults', '__httpwww_vantivcnp_comschema_CTD_ANON_26_httpwww_vantivcnp_comschemanumAdults', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2846, 16), )

    
    numAdults = property(__numAdults.value, __numAdults.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}propertyLocalPhone uses Python identifier propertyLocalPhone
    __propertyLocalPhone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'propertyLocalPhone'), 'propertyLocalPhone', '__httpwww_vantivcnp_comschema_CTD_ANON_26_httpwww_vantivcnp_comschemapropertyLocalPhone', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2847, 16), )

    
    propertyLocalPhone = property(__propertyLocalPhone.value, __propertyLocalPhone.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fireSafetyIndicator uses Python identifier fireSafetyIndicator
    __fireSafetyIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fireSafetyIndicator'), 'fireSafetyIndicator', '__httpwww_vantivcnp_comschema_CTD_ANON_26_httpwww_vantivcnp_comschemafireSafetyIndicator', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2848, 16), )

    
    fireSafetyIndicator = property(__fireSafetyIndicator.value, __fireSafetyIndicator.set, None, None)

    _ElementMap.update({
        __lodgingCharge.name() : __lodgingCharge,
        __hotelFolioNumber.name() : __hotelFolioNumber,
        __checkInDate.name() : __checkInDate,
        __checkOutDate.name() : __checkOutDate,
        __duration.name() : __duration,
        __customerServicePhone.name() : __customerServicePhone,
        __programCode.name() : __programCode,
        __roomRate.name() : __roomRate,
        __roomTax.name() : __roomTax,
        __numAdults.name() : __numAdults,
        __propertyLocalPhone.name() : __propertyLocalPhone,
        __fireSafetyIndicator.name() : __fireSafetyIndicator
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_26 = CTD_ANON_26


# Complex type {http://www.vantivcnp.com/schema}transactionReversalRecyclingResponseType with content type ELEMENT_ONLY
class transactionReversalRecyclingResponseType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}transactionReversalRecyclingResponseType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'transactionReversalRecyclingResponseType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2892, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}creditCnpTxnId uses Python identifier creditCnpTxnId
    __creditCnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'creditCnpTxnId'), 'creditCnpTxnId', '__httpwww_vantivcnp_comschema_transactionReversalRecyclingResponseType_httpwww_vantivcnp_comschemacreditCnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2894, 12), )

    
    creditCnpTxnId = property(__creditCnpTxnId.value, __creditCnpTxnId.set, None, None)

    _ElementMap.update({
        __creditCnpTxnId.name() : __creditCnpTxnId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.transactionReversalRecyclingResponseType = transactionReversalRecyclingResponseType
Namespace.addCategoryObject('typeBinding', 'transactionReversalRecyclingResponseType', transactionReversalRecyclingResponseType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_27 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2905, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}authentication uses Python identifier authentication
    __authentication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authentication'), 'authentication', '__httpwww_vantivcnp_comschema_CTD_ANON_27_httpwww_vantivcnp_comschemaauthentication', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 5, 4), )

    
    authentication = property(__authentication.value, __authentication.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}RFRRequest uses Python identifier RFRRequest
    __RFRRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RFRRequest'), 'RFRRequest', '__httpwww_vantivcnp_comschema_CTD_ANON_27_httpwww_vantivcnp_comschemaRFRRequest', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2918, 4), )

    
    RFRRequest = property(__RFRRequest.value, __RFRRequest.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}batchRequest uses Python identifier batchRequest
    __batchRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'batchRequest'), 'batchRequest', '__httpwww_vantivcnp_comschema_CTD_ANON_27_httpwww_vantivcnp_comschemabatchRequest', True, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2926, 4), )

    
    batchRequest = property(__batchRequest.value, __batchRequest.set, None, None)

    
    # Attribute version uses Python identifier version
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'version'), 'version', '__httpwww_vantivcnp_comschema_CTD_ANON_27_version', pyxb.binding.datatypes.string, required=True)
    __version._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2913, 12)
    __version._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2913, 12)
    
    version = property(__version.value, __version.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpwww_vantivcnp_comschema_CTD_ANON_27_id', pyxb.binding.datatypes.string)
    __id._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2914, 12)
    __id._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2914, 12)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute numBatchRequests uses Python identifier numBatchRequests
    __numBatchRequests = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numBatchRequests'), 'numBatchRequests', '__httpwww_vantivcnp_comschema_CTD_ANON_27_numBatchRequests', pyxb.binding.datatypes.integer, required=True)
    __numBatchRequests._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2915, 12)
    __numBatchRequests._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2915, 12)
    
    numBatchRequests = property(__numBatchRequests.value, __numBatchRequests.set, None, None)

    _ElementMap.update({
        __authentication.name() : __authentication,
        __RFRRequest.name() : __RFRRequest,
        __batchRequest.name() : __batchRequest
    })
    _AttributeMap.update({
        __version.name() : __version,
        __id.name() : __id,
        __numBatchRequests.name() : __numBatchRequests
    })
_module_typeBindings.CTD_ANON_27 = CTD_ANON_27


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_28 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2919, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}cnpSessionId uses Python identifier cnpSessionId
    __cnpSessionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpSessionId'), 'cnpSessionId', '__httpwww_vantivcnp_comschema_CTD_ANON_28_httpwww_vantivcnp_comschemacnpSessionId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2921, 16), )

    
    cnpSessionId = property(__cnpSessionId.value, __cnpSessionId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}accountUpdateFileRequestData uses Python identifier accountUpdateFileRequestData
    __accountUpdateFileRequestData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountUpdateFileRequestData'), 'accountUpdateFileRequestData', '__httpwww_vantivcnp_comschema_CTD_ANON_28_httpwww_vantivcnp_comschemaaccountUpdateFileRequestData', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3102, 4), )

    
    accountUpdateFileRequestData = property(__accountUpdateFileRequestData.value, __accountUpdateFileRequestData.set, None, None)

    _ElementMap.update({
        __cnpSessionId.name() : __cnpSessionId,
        __accountUpdateFileRequestData.name() : __accountUpdateFileRequestData
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_28 = CTD_ANON_28


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_29 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2927, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}recurringTransaction uses Python identifier recurringTransaction
    __recurringTransaction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recurringTransaction'), 'recurringTransaction', '__httpwww_vantivcnp_comschema_CTD_ANON_29_httpwww_vantivcnp_comschemarecurringTransaction', True, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 215, 4), )

    
    recurringTransaction = property(__recurringTransaction.value, __recurringTransaction.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}transaction uses Python identifier transaction
    __transaction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'transaction'), 'transaction', '__httpwww_vantivcnp_comschema_CTD_ANON_29_httpwww_vantivcnp_comschematransaction', True, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 456, 4), )

    
    transaction = property(__transaction.value, __transaction.set, None, None)

    
    # Attribute merchantSdk uses Python identifier merchantSdk
    __merchantSdk = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'merchantSdk'), 'merchantSdk', '__httpwww_vantivcnp_comschema_CTD_ANON_29_merchantSdk', pyxb.binding.datatypes.string)
    __merchantSdk._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2932, 12)
    __merchantSdk._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2932, 12)
    
    merchantSdk = property(__merchantSdk.value, __merchantSdk.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpwww_vantivcnp_comschema_CTD_ANON_29_id', pyxb.binding.datatypes.string)
    __id._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2933, 12)
    __id._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2933, 12)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute numAuths uses Python identifier numAuths
    __numAuths = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numAuths'), 'numAuths', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numAuths', pyxb.binding.datatypes.integer, unicode_default='0')
    __numAuths._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2934, 12)
    __numAuths._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2934, 12)
    
    numAuths = property(__numAuths.value, __numAuths.set, None, None)

    
    # Attribute authAmount uses Python identifier authAmount
    __authAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'authAmount'), 'authAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_authAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __authAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2935, 12)
    __authAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2935, 12)
    
    authAmount = property(__authAmount.value, __authAmount.set, None, None)

    
    # Attribute numAuthReversals uses Python identifier numAuthReversals
    __numAuthReversals = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numAuthReversals'), 'numAuthReversals', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numAuthReversals', pyxb.binding.datatypes.integer, unicode_default='0')
    __numAuthReversals._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2936, 12)
    __numAuthReversals._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2936, 12)
    
    numAuthReversals = property(__numAuthReversals.value, __numAuthReversals.set, None, None)

    
    # Attribute authReversalAmount uses Python identifier authReversalAmount
    __authReversalAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'authReversalAmount'), 'authReversalAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_authReversalAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __authReversalAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2937, 12)
    __authReversalAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2937, 12)
    
    authReversalAmount = property(__authReversalAmount.value, __authReversalAmount.set, None, None)

    
    # Attribute numTransactionReversals uses Python identifier numTransactionReversals
    __numTransactionReversals = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numTransactionReversals'), 'numTransactionReversals', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numTransactionReversals', pyxb.binding.datatypes.integer, unicode_default='0')
    __numTransactionReversals._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2938, 12)
    __numTransactionReversals._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2938, 12)
    
    numTransactionReversals = property(__numTransactionReversals.value, __numTransactionReversals.set, None, None)

    
    # Attribute transactionReversalAmount uses Python identifier transactionReversalAmount
    __transactionReversalAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'transactionReversalAmount'), 'transactionReversalAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_transactionReversalAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __transactionReversalAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2939, 12)
    __transactionReversalAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2939, 12)
    
    transactionReversalAmount = property(__transactionReversalAmount.value, __transactionReversalAmount.set, None, None)

    
    # Attribute numGiftCardAuthReversals uses Python identifier numGiftCardAuthReversals
    __numGiftCardAuthReversals = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numGiftCardAuthReversals'), 'numGiftCardAuthReversals', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numGiftCardAuthReversals', pyxb.binding.datatypes.integer, unicode_default='0')
    __numGiftCardAuthReversals._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2940, 12)
    __numGiftCardAuthReversals._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2940, 12)
    
    numGiftCardAuthReversals = property(__numGiftCardAuthReversals.value, __numGiftCardAuthReversals.set, None, None)

    
    # Attribute giftCardAuthReversalOriginalAmount uses Python identifier giftCardAuthReversalOriginalAmount
    __giftCardAuthReversalOriginalAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'giftCardAuthReversalOriginalAmount'), 'giftCardAuthReversalOriginalAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_giftCardAuthReversalOriginalAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __giftCardAuthReversalOriginalAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2941, 12)
    __giftCardAuthReversalOriginalAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2941, 12)
    
    giftCardAuthReversalOriginalAmount = property(__giftCardAuthReversalOriginalAmount.value, __giftCardAuthReversalOriginalAmount.set, None, None)

    
    # Attribute numCaptures uses Python identifier numCaptures
    __numCaptures = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numCaptures'), 'numCaptures', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numCaptures', pyxb.binding.datatypes.integer, unicode_default='0')
    __numCaptures._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2942, 12)
    __numCaptures._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2942, 12)
    
    numCaptures = property(__numCaptures.value, __numCaptures.set, None, None)

    
    # Attribute captureAmount uses Python identifier captureAmount
    __captureAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'captureAmount'), 'captureAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_captureAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __captureAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2943, 12)
    __captureAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2943, 12)
    
    captureAmount = property(__captureAmount.value, __captureAmount.set, None, None)

    
    # Attribute numGiftCardCaptures uses Python identifier numGiftCardCaptures
    __numGiftCardCaptures = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numGiftCardCaptures'), 'numGiftCardCaptures', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numGiftCardCaptures', pyxb.binding.datatypes.integer, unicode_default='0')
    __numGiftCardCaptures._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2944, 12)
    __numGiftCardCaptures._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2944, 12)
    
    numGiftCardCaptures = property(__numGiftCardCaptures.value, __numGiftCardCaptures.set, None, None)

    
    # Attribute giftCardCaptureAmount uses Python identifier giftCardCaptureAmount
    __giftCardCaptureAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'giftCardCaptureAmount'), 'giftCardCaptureAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_giftCardCaptureAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __giftCardCaptureAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2945, 12)
    __giftCardCaptureAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2945, 12)
    
    giftCardCaptureAmount = property(__giftCardCaptureAmount.value, __giftCardCaptureAmount.set, None, None)

    
    # Attribute numExtCaptures uses Python identifier numExtCaptures
    __numExtCaptures = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numExtCaptures'), 'numExtCaptures', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numExtCaptures', pyxb.binding.datatypes.integer, unicode_default='0')
    __numExtCaptures._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2946, 12)
    __numExtCaptures._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2946, 12)
    
    numExtCaptures = property(__numExtCaptures.value, __numExtCaptures.set, None, None)

    
    # Attribute extCaptureAmount uses Python identifier extCaptureAmount
    __extCaptureAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'extCaptureAmount'), 'extCaptureAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_extCaptureAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __extCaptureAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2947, 12)
    __extCaptureAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2947, 12)
    
    extCaptureAmount = property(__extCaptureAmount.value, __extCaptureAmount.set, None, None)

    
    # Attribute numCredits uses Python identifier numCredits
    __numCredits = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numCredits'), 'numCredits', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numCredits', pyxb.binding.datatypes.integer, unicode_default='0')
    __numCredits._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2948, 12)
    __numCredits._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2948, 12)
    
    numCredits = property(__numCredits.value, __numCredits.set, None, None)

    
    # Attribute creditAmount uses Python identifier creditAmount
    __creditAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'creditAmount'), 'creditAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_creditAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __creditAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2949, 12)
    __creditAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2949, 12)
    
    creditAmount = property(__creditAmount.value, __creditAmount.set, None, None)

    
    # Attribute numGiftCardCredits uses Python identifier numGiftCardCredits
    __numGiftCardCredits = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numGiftCardCredits'), 'numGiftCardCredits', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numGiftCardCredits', pyxb.binding.datatypes.integer, unicode_default='0')
    __numGiftCardCredits._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2950, 12)
    __numGiftCardCredits._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2950, 12)
    
    numGiftCardCredits = property(__numGiftCardCredits.value, __numGiftCardCredits.set, None, None)

    
    # Attribute giftCardCreditAmount uses Python identifier giftCardCreditAmount
    __giftCardCreditAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'giftCardCreditAmount'), 'giftCardCreditAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_giftCardCreditAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __giftCardCreditAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2951, 12)
    __giftCardCreditAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2951, 12)
    
    giftCardCreditAmount = property(__giftCardCreditAmount.value, __giftCardCreditAmount.set, None, None)

    
    # Attribute numForceCaptures uses Python identifier numForceCaptures
    __numForceCaptures = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numForceCaptures'), 'numForceCaptures', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numForceCaptures', pyxb.binding.datatypes.integer, unicode_default='0')
    __numForceCaptures._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2952, 12)
    __numForceCaptures._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2952, 12)
    
    numForceCaptures = property(__numForceCaptures.value, __numForceCaptures.set, None, None)

    
    # Attribute forceCaptureAmount uses Python identifier forceCaptureAmount
    __forceCaptureAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'forceCaptureAmount'), 'forceCaptureAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_forceCaptureAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __forceCaptureAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2953, 12)
    __forceCaptureAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2953, 12)
    
    forceCaptureAmount = property(__forceCaptureAmount.value, __forceCaptureAmount.set, None, None)

    
    # Attribute numSales uses Python identifier numSales
    __numSales = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numSales'), 'numSales', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numSales', pyxb.binding.datatypes.integer, unicode_default='0')
    __numSales._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2954, 12)
    __numSales._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2954, 12)
    
    numSales = property(__numSales.value, __numSales.set, None, None)

    
    # Attribute saleAmount uses Python identifier saleAmount
    __saleAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'saleAmount'), 'saleAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_saleAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __saleAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2955, 12)
    __saleAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2955, 12)
    
    saleAmount = property(__saleAmount.value, __saleAmount.set, None, None)

    
    # Attribute numCaptureGivenAuths uses Python identifier numCaptureGivenAuths
    __numCaptureGivenAuths = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numCaptureGivenAuths'), 'numCaptureGivenAuths', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numCaptureGivenAuths', pyxb.binding.datatypes.integer, unicode_default='0')
    __numCaptureGivenAuths._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2956, 12)
    __numCaptureGivenAuths._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2956, 12)
    
    numCaptureGivenAuths = property(__numCaptureGivenAuths.value, __numCaptureGivenAuths.set, None, None)

    
    # Attribute captureGivenAuthAmount uses Python identifier captureGivenAuthAmount
    __captureGivenAuthAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'captureGivenAuthAmount'), 'captureGivenAuthAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_captureGivenAuthAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __captureGivenAuthAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2957, 12)
    __captureGivenAuthAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2957, 12)
    
    captureGivenAuthAmount = property(__captureGivenAuthAmount.value, __captureGivenAuthAmount.set, None, None)

    
    # Attribute numEcheckSales uses Python identifier numEcheckSales
    __numEcheckSales = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numEcheckSales'), 'numEcheckSales', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numEcheckSales', pyxb.binding.datatypes.integer, unicode_default='0')
    __numEcheckSales._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2958, 12)
    __numEcheckSales._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2958, 12)
    
    numEcheckSales = property(__numEcheckSales.value, __numEcheckSales.set, None, None)

    
    # Attribute echeckSalesAmount uses Python identifier echeckSalesAmount
    __echeckSalesAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'echeckSalesAmount'), 'echeckSalesAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_echeckSalesAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __echeckSalesAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2959, 12)
    __echeckSalesAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2959, 12)
    
    echeckSalesAmount = property(__echeckSalesAmount.value, __echeckSalesAmount.set, None, None)

    
    # Attribute numEcheckCredit uses Python identifier numEcheckCredit
    __numEcheckCredit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numEcheckCredit'), 'numEcheckCredit', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numEcheckCredit', pyxb.binding.datatypes.integer, unicode_default='0')
    __numEcheckCredit._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2960, 12)
    __numEcheckCredit._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2960, 12)
    
    numEcheckCredit = property(__numEcheckCredit.value, __numEcheckCredit.set, None, None)

    
    # Attribute echeckCreditAmount uses Python identifier echeckCreditAmount
    __echeckCreditAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'echeckCreditAmount'), 'echeckCreditAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_echeckCreditAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __echeckCreditAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2961, 12)
    __echeckCreditAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2961, 12)
    
    echeckCreditAmount = property(__echeckCreditAmount.value, __echeckCreditAmount.set, None, None)

    
    # Attribute numEcheckVerification uses Python identifier numEcheckVerification
    __numEcheckVerification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numEcheckVerification'), 'numEcheckVerification', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numEcheckVerification', pyxb.binding.datatypes.integer, unicode_default='0')
    __numEcheckVerification._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2962, 12)
    __numEcheckVerification._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2962, 12)
    
    numEcheckVerification = property(__numEcheckVerification.value, __numEcheckVerification.set, None, None)

    
    # Attribute echeckVerificationAmount uses Python identifier echeckVerificationAmount
    __echeckVerificationAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'echeckVerificationAmount'), 'echeckVerificationAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_echeckVerificationAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __echeckVerificationAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2963, 12)
    __echeckVerificationAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2963, 12)
    
    echeckVerificationAmount = property(__echeckVerificationAmount.value, __echeckVerificationAmount.set, None, None)

    
    # Attribute numEcheckRedeposit uses Python identifier numEcheckRedeposit
    __numEcheckRedeposit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numEcheckRedeposit'), 'numEcheckRedeposit', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numEcheckRedeposit', pyxb.binding.datatypes.integer, unicode_default='0')
    __numEcheckRedeposit._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2964, 12)
    __numEcheckRedeposit._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2964, 12)
    
    numEcheckRedeposit = property(__numEcheckRedeposit.value, __numEcheckRedeposit.set, None, None)

    
    # Attribute numEcheckPreNoteSale uses Python identifier numEcheckPreNoteSale
    __numEcheckPreNoteSale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numEcheckPreNoteSale'), 'numEcheckPreNoteSale', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numEcheckPreNoteSale', pyxb.binding.datatypes.integer, unicode_default='0')
    __numEcheckPreNoteSale._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2965, 12)
    __numEcheckPreNoteSale._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2965, 12)
    
    numEcheckPreNoteSale = property(__numEcheckPreNoteSale.value, __numEcheckPreNoteSale.set, None, None)

    
    # Attribute numEcheckPreNoteCredit uses Python identifier numEcheckPreNoteCredit
    __numEcheckPreNoteCredit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numEcheckPreNoteCredit'), 'numEcheckPreNoteCredit', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numEcheckPreNoteCredit', pyxb.binding.datatypes.integer, unicode_default='0')
    __numEcheckPreNoteCredit._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2966, 12)
    __numEcheckPreNoteCredit._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2966, 12)
    
    numEcheckPreNoteCredit = property(__numEcheckPreNoteCredit.value, __numEcheckPreNoteCredit.set, None, None)

    
    # Attribute numAccountUpdates uses Python identifier numAccountUpdates
    __numAccountUpdates = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numAccountUpdates'), 'numAccountUpdates', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numAccountUpdates', pyxb.binding.datatypes.integer, unicode_default='0')
    __numAccountUpdates._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2967, 12)
    __numAccountUpdates._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2967, 12)
    
    numAccountUpdates = property(__numAccountUpdates.value, __numAccountUpdates.set, None, None)

    
    # Attribute numTokenRegistrations uses Python identifier numTokenRegistrations
    __numTokenRegistrations = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numTokenRegistrations'), 'numTokenRegistrations', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numTokenRegistrations', pyxb.binding.datatypes.integer, unicode_default='0')
    __numTokenRegistrations._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2968, 12)
    __numTokenRegistrations._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2968, 12)
    
    numTokenRegistrations = property(__numTokenRegistrations.value, __numTokenRegistrations.set, None, None)

    
    # Attribute numUpdateCardValidationNumOnTokens uses Python identifier numUpdateCardValidationNumOnTokens
    __numUpdateCardValidationNumOnTokens = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numUpdateCardValidationNumOnTokens'), 'numUpdateCardValidationNumOnTokens', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numUpdateCardValidationNumOnTokens', pyxb.binding.datatypes.integer, unicode_default='0')
    __numUpdateCardValidationNumOnTokens._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2969, 12)
    __numUpdateCardValidationNumOnTokens._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2969, 12)
    
    numUpdateCardValidationNumOnTokens = property(__numUpdateCardValidationNumOnTokens.value, __numUpdateCardValidationNumOnTokens.set, None, None)

    
    # Attribute numCancelSubscriptions uses Python identifier numCancelSubscriptions
    __numCancelSubscriptions = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numCancelSubscriptions'), 'numCancelSubscriptions', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numCancelSubscriptions', pyxb.binding.datatypes.integer, unicode_default='0')
    __numCancelSubscriptions._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2970, 12)
    __numCancelSubscriptions._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2970, 12)
    
    numCancelSubscriptions = property(__numCancelSubscriptions.value, __numCancelSubscriptions.set, None, None)

    
    # Attribute numUpdateSubscriptions uses Python identifier numUpdateSubscriptions
    __numUpdateSubscriptions = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numUpdateSubscriptions'), 'numUpdateSubscriptions', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numUpdateSubscriptions', pyxb.binding.datatypes.integer, unicode_default='0')
    __numUpdateSubscriptions._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2971, 12)
    __numUpdateSubscriptions._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2971, 12)
    
    numUpdateSubscriptions = property(__numUpdateSubscriptions.value, __numUpdateSubscriptions.set, None, None)

    
    # Attribute numCreatePlans uses Python identifier numCreatePlans
    __numCreatePlans = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numCreatePlans'), 'numCreatePlans', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numCreatePlans', pyxb.binding.datatypes.integer, unicode_default='0')
    __numCreatePlans._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2972, 12)
    __numCreatePlans._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2972, 12)
    
    numCreatePlans = property(__numCreatePlans.value, __numCreatePlans.set, None, None)

    
    # Attribute numUpdatePlans uses Python identifier numUpdatePlans
    __numUpdatePlans = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numUpdatePlans'), 'numUpdatePlans', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numUpdatePlans', pyxb.binding.datatypes.integer, unicode_default='0')
    __numUpdatePlans._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2973, 12)
    __numUpdatePlans._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2973, 12)
    
    numUpdatePlans = property(__numUpdatePlans.value, __numUpdatePlans.set, None, None)

    
    # Attribute numActivates uses Python identifier numActivates
    __numActivates = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numActivates'), 'numActivates', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numActivates', pyxb.binding.datatypes.integer, unicode_default='0')
    __numActivates._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2974, 12)
    __numActivates._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2974, 12)
    
    numActivates = property(__numActivates.value, __numActivates.set, None, None)

    
    # Attribute numDeactivates uses Python identifier numDeactivates
    __numDeactivates = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numDeactivates'), 'numDeactivates', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numDeactivates', pyxb.binding.datatypes.integer, unicode_default='0')
    __numDeactivates._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2975, 12)
    __numDeactivates._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2975, 12)
    
    numDeactivates = property(__numDeactivates.value, __numDeactivates.set, None, None)

    
    # Attribute activateAmount uses Python identifier activateAmount
    __activateAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'activateAmount'), 'activateAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_activateAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __activateAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2976, 12)
    __activateAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2976, 12)
    
    activateAmount = property(__activateAmount.value, __activateAmount.set, None, None)

    
    # Attribute numLoads uses Python identifier numLoads
    __numLoads = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numLoads'), 'numLoads', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numLoads', pyxb.binding.datatypes.integer, unicode_default='0')
    __numLoads._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2977, 12)
    __numLoads._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2977, 12)
    
    numLoads = property(__numLoads.value, __numLoads.set, None, None)

    
    # Attribute loadAmount uses Python identifier loadAmount
    __loadAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'loadAmount'), 'loadAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_loadAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __loadAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2978, 12)
    __loadAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2978, 12)
    
    loadAmount = property(__loadAmount.value, __loadAmount.set, None, None)

    
    # Attribute numUnloads uses Python identifier numUnloads
    __numUnloads = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numUnloads'), 'numUnloads', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numUnloads', pyxb.binding.datatypes.integer, unicode_default='0')
    __numUnloads._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2979, 12)
    __numUnloads._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2979, 12)
    
    numUnloads = property(__numUnloads.value, __numUnloads.set, None, None)

    
    # Attribute unloadAmount uses Python identifier unloadAmount
    __unloadAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'unloadAmount'), 'unloadAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_unloadAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __unloadAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2980, 12)
    __unloadAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2980, 12)
    
    unloadAmount = property(__unloadAmount.value, __unloadAmount.set, None, None)

    
    # Attribute numBalanceInquirys uses Python identifier numBalanceInquirys
    __numBalanceInquirys = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numBalanceInquirys'), 'numBalanceInquirys', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numBalanceInquirys', pyxb.binding.datatypes.integer, unicode_default='0')
    __numBalanceInquirys._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2981, 12)
    __numBalanceInquirys._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2981, 12)
    
    numBalanceInquirys = property(__numBalanceInquirys.value, __numBalanceInquirys.set, None, None)

    
    # Attribute numPayFacCredit uses Python identifier numPayFacCredit
    __numPayFacCredit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numPayFacCredit'), 'numPayFacCredit', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numPayFacCredit', pyxb.binding.datatypes.integer, unicode_default='0')
    __numPayFacCredit._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2982, 12)
    __numPayFacCredit._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2982, 12)
    
    numPayFacCredit = property(__numPayFacCredit.value, __numPayFacCredit.set, None, None)

    
    # Attribute numPayFacDebit uses Python identifier numPayFacDebit
    __numPayFacDebit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numPayFacDebit'), 'numPayFacDebit', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numPayFacDebit', pyxb.binding.datatypes.integer, unicode_default='0')
    __numPayFacDebit._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2983, 12)
    __numPayFacDebit._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2983, 12)
    
    numPayFacDebit = property(__numPayFacDebit.value, __numPayFacDebit.set, None, None)

    
    # Attribute numSubmerchantCredit uses Python identifier numSubmerchantCredit
    __numSubmerchantCredit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numSubmerchantCredit'), 'numSubmerchantCredit', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numSubmerchantCredit', pyxb.binding.datatypes.integer, unicode_default='0')
    __numSubmerchantCredit._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2984, 12)
    __numSubmerchantCredit._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2984, 12)
    
    numSubmerchantCredit = property(__numSubmerchantCredit.value, __numSubmerchantCredit.set, None, None)

    
    # Attribute numSubmerchantDebit uses Python identifier numSubmerchantDebit
    __numSubmerchantDebit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numSubmerchantDebit'), 'numSubmerchantDebit', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numSubmerchantDebit', pyxb.binding.datatypes.integer, unicode_default='0')
    __numSubmerchantDebit._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2985, 12)
    __numSubmerchantDebit._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2985, 12)
    
    numSubmerchantDebit = property(__numSubmerchantDebit.value, __numSubmerchantDebit.set, None, None)

    
    # Attribute numReserveCredit uses Python identifier numReserveCredit
    __numReserveCredit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numReserveCredit'), 'numReserveCredit', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numReserveCredit', pyxb.binding.datatypes.integer, unicode_default='0')
    __numReserveCredit._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2986, 12)
    __numReserveCredit._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2986, 12)
    
    numReserveCredit = property(__numReserveCredit.value, __numReserveCredit.set, None, None)

    
    # Attribute numReserveDebit uses Python identifier numReserveDebit
    __numReserveDebit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numReserveDebit'), 'numReserveDebit', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numReserveDebit', pyxb.binding.datatypes.integer, unicode_default='0')
    __numReserveDebit._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2987, 12)
    __numReserveDebit._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2987, 12)
    
    numReserveDebit = property(__numReserveDebit.value, __numReserveDebit.set, None, None)

    
    # Attribute numVendorDebit uses Python identifier numVendorDebit
    __numVendorDebit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numVendorDebit'), 'numVendorDebit', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numVendorDebit', pyxb.binding.datatypes.integer, unicode_default='0')
    __numVendorDebit._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2988, 12)
    __numVendorDebit._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2988, 12)
    
    numVendorDebit = property(__numVendorDebit.value, __numVendorDebit.set, None, None)

    
    # Attribute numVendorCredit uses Python identifier numVendorCredit
    __numVendorCredit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numVendorCredit'), 'numVendorCredit', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numVendorCredit', pyxb.binding.datatypes.integer, unicode_default='0')
    __numVendorCredit._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2989, 12)
    __numVendorCredit._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2989, 12)
    
    numVendorCredit = property(__numVendorCredit.value, __numVendorCredit.set, None, None)

    
    # Attribute numPhysicalCheckDebit uses Python identifier numPhysicalCheckDebit
    __numPhysicalCheckDebit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numPhysicalCheckDebit'), 'numPhysicalCheckDebit', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numPhysicalCheckDebit', pyxb.binding.datatypes.integer, unicode_default='0')
    __numPhysicalCheckDebit._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2990, 12)
    __numPhysicalCheckDebit._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2990, 12)
    
    numPhysicalCheckDebit = property(__numPhysicalCheckDebit.value, __numPhysicalCheckDebit.set, None, None)

    
    # Attribute numPhysicalCheckCredit uses Python identifier numPhysicalCheckCredit
    __numPhysicalCheckCredit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numPhysicalCheckCredit'), 'numPhysicalCheckCredit', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numPhysicalCheckCredit', pyxb.binding.datatypes.integer, unicode_default='0')
    __numPhysicalCheckCredit._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2991, 12)
    __numPhysicalCheckCredit._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2991, 12)
    
    numPhysicalCheckCredit = property(__numPhysicalCheckCredit.value, __numPhysicalCheckCredit.set, None, None)

    
    # Attribute numFundingInstructionVoid uses Python identifier numFundingInstructionVoid
    __numFundingInstructionVoid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numFundingInstructionVoid'), 'numFundingInstructionVoid', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numFundingInstructionVoid', pyxb.binding.datatypes.integer, unicode_default='0')
    __numFundingInstructionVoid._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2992, 12)
    __numFundingInstructionVoid._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2992, 12)
    
    numFundingInstructionVoid = property(__numFundingInstructionVoid.value, __numFundingInstructionVoid.set, None, None)

    
    # Attribute numFastAccessFunding uses Python identifier numFastAccessFunding
    __numFastAccessFunding = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numFastAccessFunding'), 'numFastAccessFunding', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numFastAccessFunding', pyxb.binding.datatypes.integer, unicode_default='0')
    __numFastAccessFunding._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2993, 12)
    __numFastAccessFunding._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2993, 12)
    
    numFastAccessFunding = property(__numFastAccessFunding.value, __numFastAccessFunding.set, None, None)

    
    # Attribute numPayoutOrgCredit uses Python identifier numPayoutOrgCredit
    __numPayoutOrgCredit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numPayoutOrgCredit'), 'numPayoutOrgCredit', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numPayoutOrgCredit', pyxb.binding.datatypes.integer, unicode_default='0')
    __numPayoutOrgCredit._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2994, 12)
    __numPayoutOrgCredit._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2994, 12)
    
    numPayoutOrgCredit = property(__numPayoutOrgCredit.value, __numPayoutOrgCredit.set, None, None)

    
    # Attribute numPayoutOrgDebit uses Python identifier numPayoutOrgDebit
    __numPayoutOrgDebit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numPayoutOrgDebit'), 'numPayoutOrgDebit', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numPayoutOrgDebit', pyxb.binding.datatypes.integer, unicode_default='0')
    __numPayoutOrgDebit._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2995, 12)
    __numPayoutOrgDebit._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2995, 12)
    
    numPayoutOrgDebit = property(__numPayoutOrgDebit.value, __numPayoutOrgDebit.set, None, None)

    
    # Attribute numCustomerCredit uses Python identifier numCustomerCredit
    __numCustomerCredit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numCustomerCredit'), 'numCustomerCredit', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numCustomerCredit', pyxb.binding.datatypes.integer, unicode_default='0')
    __numCustomerCredit._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2996, 12)
    __numCustomerCredit._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2996, 12)
    
    numCustomerCredit = property(__numCustomerCredit.value, __numCustomerCredit.set, None, None)

    
    # Attribute numCustomerDebit uses Python identifier numCustomerDebit
    __numCustomerDebit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numCustomerDebit'), 'numCustomerDebit', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numCustomerDebit', pyxb.binding.datatypes.integer, unicode_default='0')
    __numCustomerDebit._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2997, 12)
    __numCustomerDebit._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2997, 12)
    
    numCustomerDebit = property(__numCustomerDebit.value, __numCustomerDebit.set, None, None)

    
    # Attribute numTranslateToLowValueTokenRequests uses Python identifier numTranslateToLowValueTokenRequests
    __numTranslateToLowValueTokenRequests = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numTranslateToLowValueTokenRequests'), 'numTranslateToLowValueTokenRequests', '__httpwww_vantivcnp_comschema_CTD_ANON_29_numTranslateToLowValueTokenRequests', pyxb.binding.datatypes.integer, unicode_default='0')
    __numTranslateToLowValueTokenRequests._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2998, 12)
    __numTranslateToLowValueTokenRequests._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2998, 12)
    
    numTranslateToLowValueTokenRequests = property(__numTranslateToLowValueTokenRequests.value, __numTranslateToLowValueTokenRequests.set, None, None)

    
    # Attribute payFacCreditAmount uses Python identifier payFacCreditAmount
    __payFacCreditAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'payFacCreditAmount'), 'payFacCreditAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_payFacCreditAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __payFacCreditAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2999, 12)
    __payFacCreditAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2999, 12)
    
    payFacCreditAmount = property(__payFacCreditAmount.value, __payFacCreditAmount.set, None, None)

    
    # Attribute payFacDebitAmount uses Python identifier payFacDebitAmount
    __payFacDebitAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'payFacDebitAmount'), 'payFacDebitAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_payFacDebitAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __payFacDebitAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3000, 12)
    __payFacDebitAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3000, 12)
    
    payFacDebitAmount = property(__payFacDebitAmount.value, __payFacDebitAmount.set, None, None)

    
    # Attribute submerchantCreditAmount uses Python identifier submerchantCreditAmount
    __submerchantCreditAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'submerchantCreditAmount'), 'submerchantCreditAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_submerchantCreditAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __submerchantCreditAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3001, 12)
    __submerchantCreditAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3001, 12)
    
    submerchantCreditAmount = property(__submerchantCreditAmount.value, __submerchantCreditAmount.set, None, None)

    
    # Attribute submerchantDebitAmount uses Python identifier submerchantDebitAmount
    __submerchantDebitAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'submerchantDebitAmount'), 'submerchantDebitAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_submerchantDebitAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __submerchantDebitAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3002, 12)
    __submerchantDebitAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3002, 12)
    
    submerchantDebitAmount = property(__submerchantDebitAmount.value, __submerchantDebitAmount.set, None, None)

    
    # Attribute reserveCreditAmount uses Python identifier reserveCreditAmount
    __reserveCreditAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'reserveCreditAmount'), 'reserveCreditAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_reserveCreditAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __reserveCreditAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3003, 12)
    __reserveCreditAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3003, 12)
    
    reserveCreditAmount = property(__reserveCreditAmount.value, __reserveCreditAmount.set, None, None)

    
    # Attribute reserveDebitAmount uses Python identifier reserveDebitAmount
    __reserveDebitAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'reserveDebitAmount'), 'reserveDebitAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_reserveDebitAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __reserveDebitAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3004, 12)
    __reserveDebitAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3004, 12)
    
    reserveDebitAmount = property(__reserveDebitAmount.value, __reserveDebitAmount.set, None, None)

    
    # Attribute vendorDebitAmount uses Python identifier vendorDebitAmount
    __vendorDebitAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'vendorDebitAmount'), 'vendorDebitAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_vendorDebitAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __vendorDebitAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3005, 12)
    __vendorDebitAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3005, 12)
    
    vendorDebitAmount = property(__vendorDebitAmount.value, __vendorDebitAmount.set, None, None)

    
    # Attribute vendorCreditAmount uses Python identifier vendorCreditAmount
    __vendorCreditAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'vendorCreditAmount'), 'vendorCreditAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_vendorCreditAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __vendorCreditAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3006, 12)
    __vendorCreditAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3006, 12)
    
    vendorCreditAmount = property(__vendorCreditAmount.value, __vendorCreditAmount.set, None, None)

    
    # Attribute physicalCheckDebitAmount uses Python identifier physicalCheckDebitAmount
    __physicalCheckDebitAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'physicalCheckDebitAmount'), 'physicalCheckDebitAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_physicalCheckDebitAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __physicalCheckDebitAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3007, 12)
    __physicalCheckDebitAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3007, 12)
    
    physicalCheckDebitAmount = property(__physicalCheckDebitAmount.value, __physicalCheckDebitAmount.set, None, None)

    
    # Attribute physicalCheckCreditAmount uses Python identifier physicalCheckCreditAmount
    __physicalCheckCreditAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'physicalCheckCreditAmount'), 'physicalCheckCreditAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_physicalCheckCreditAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __physicalCheckCreditAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3008, 12)
    __physicalCheckCreditAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3008, 12)
    
    physicalCheckCreditAmount = property(__physicalCheckCreditAmount.value, __physicalCheckCreditAmount.set, None, None)

    
    # Attribute fastAccessFundingAmount uses Python identifier fastAccessFundingAmount
    __fastAccessFundingAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'fastAccessFundingAmount'), 'fastAccessFundingAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_fastAccessFundingAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __fastAccessFundingAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3009, 12)
    __fastAccessFundingAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3009, 12)
    
    fastAccessFundingAmount = property(__fastAccessFundingAmount.value, __fastAccessFundingAmount.set, None, None)

    
    # Attribute payoutOrgCreditAmount uses Python identifier payoutOrgCreditAmount
    __payoutOrgCreditAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'payoutOrgCreditAmount'), 'payoutOrgCreditAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_payoutOrgCreditAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __payoutOrgCreditAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3010, 12)
    __payoutOrgCreditAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3010, 12)
    
    payoutOrgCreditAmount = property(__payoutOrgCreditAmount.value, __payoutOrgCreditAmount.set, None, None)

    
    # Attribute payoutOrgDebitAmount uses Python identifier payoutOrgDebitAmount
    __payoutOrgDebitAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'payoutOrgDebitAmount'), 'payoutOrgDebitAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_payoutOrgDebitAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __payoutOrgDebitAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3011, 12)
    __payoutOrgDebitAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3011, 12)
    
    payoutOrgDebitAmount = property(__payoutOrgDebitAmount.value, __payoutOrgDebitAmount.set, None, None)

    
    # Attribute customerCreditAmount uses Python identifier customerCreditAmount
    __customerCreditAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'customerCreditAmount'), 'customerCreditAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_customerCreditAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __customerCreditAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3012, 12)
    __customerCreditAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3012, 12)
    
    customerCreditAmount = property(__customerCreditAmount.value, __customerCreditAmount.set, None, None)

    
    # Attribute customerDebitAmount uses Python identifier customerDebitAmount
    __customerDebitAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'customerDebitAmount'), 'customerDebitAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_29_customerDebitAmount', pyxb.binding.datatypes.integer, unicode_default='0')
    __customerDebitAmount._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3013, 12)
    __customerDebitAmount._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3013, 12)
    
    customerDebitAmount = property(__customerDebitAmount.value, __customerDebitAmount.set, None, None)

    
    # Attribute sameDayFunding uses Python identifier sameDayFunding
    __sameDayFunding = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'sameDayFunding'), 'sameDayFunding', '__httpwww_vantivcnp_comschema_CTD_ANON_29_sameDayFunding', pyxb.binding.datatypes.boolean, unicode_default='0')
    __sameDayFunding._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3014, 12)
    __sameDayFunding._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3014, 12)
    
    sameDayFunding = property(__sameDayFunding.value, __sameDayFunding.set, None, None)

    
    # Attribute merchantId uses Python identifier merchantId
    __merchantId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'merchantId'), 'merchantId', '__httpwww_vantivcnp_comschema_CTD_ANON_29_merchantId', pyxb.binding.datatypes.string, required=True)
    __merchantId._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3015, 12)
    __merchantId._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3015, 12)
    
    merchantId = property(__merchantId.value, __merchantId.set, None, None)

    _ElementMap.update({
        __recurringTransaction.name() : __recurringTransaction,
        __transaction.name() : __transaction
    })
    _AttributeMap.update({
        __merchantSdk.name() : __merchantSdk,
        __id.name() : __id,
        __numAuths.name() : __numAuths,
        __authAmount.name() : __authAmount,
        __numAuthReversals.name() : __numAuthReversals,
        __authReversalAmount.name() : __authReversalAmount,
        __numTransactionReversals.name() : __numTransactionReversals,
        __transactionReversalAmount.name() : __transactionReversalAmount,
        __numGiftCardAuthReversals.name() : __numGiftCardAuthReversals,
        __giftCardAuthReversalOriginalAmount.name() : __giftCardAuthReversalOriginalAmount,
        __numCaptures.name() : __numCaptures,
        __captureAmount.name() : __captureAmount,
        __numGiftCardCaptures.name() : __numGiftCardCaptures,
        __giftCardCaptureAmount.name() : __giftCardCaptureAmount,
        __numExtCaptures.name() : __numExtCaptures,
        __extCaptureAmount.name() : __extCaptureAmount,
        __numCredits.name() : __numCredits,
        __creditAmount.name() : __creditAmount,
        __numGiftCardCredits.name() : __numGiftCardCredits,
        __giftCardCreditAmount.name() : __giftCardCreditAmount,
        __numForceCaptures.name() : __numForceCaptures,
        __forceCaptureAmount.name() : __forceCaptureAmount,
        __numSales.name() : __numSales,
        __saleAmount.name() : __saleAmount,
        __numCaptureGivenAuths.name() : __numCaptureGivenAuths,
        __captureGivenAuthAmount.name() : __captureGivenAuthAmount,
        __numEcheckSales.name() : __numEcheckSales,
        __echeckSalesAmount.name() : __echeckSalesAmount,
        __numEcheckCredit.name() : __numEcheckCredit,
        __echeckCreditAmount.name() : __echeckCreditAmount,
        __numEcheckVerification.name() : __numEcheckVerification,
        __echeckVerificationAmount.name() : __echeckVerificationAmount,
        __numEcheckRedeposit.name() : __numEcheckRedeposit,
        __numEcheckPreNoteSale.name() : __numEcheckPreNoteSale,
        __numEcheckPreNoteCredit.name() : __numEcheckPreNoteCredit,
        __numAccountUpdates.name() : __numAccountUpdates,
        __numTokenRegistrations.name() : __numTokenRegistrations,
        __numUpdateCardValidationNumOnTokens.name() : __numUpdateCardValidationNumOnTokens,
        __numCancelSubscriptions.name() : __numCancelSubscriptions,
        __numUpdateSubscriptions.name() : __numUpdateSubscriptions,
        __numCreatePlans.name() : __numCreatePlans,
        __numUpdatePlans.name() : __numUpdatePlans,
        __numActivates.name() : __numActivates,
        __numDeactivates.name() : __numDeactivates,
        __activateAmount.name() : __activateAmount,
        __numLoads.name() : __numLoads,
        __loadAmount.name() : __loadAmount,
        __numUnloads.name() : __numUnloads,
        __unloadAmount.name() : __unloadAmount,
        __numBalanceInquirys.name() : __numBalanceInquirys,
        __numPayFacCredit.name() : __numPayFacCredit,
        __numPayFacDebit.name() : __numPayFacDebit,
        __numSubmerchantCredit.name() : __numSubmerchantCredit,
        __numSubmerchantDebit.name() : __numSubmerchantDebit,
        __numReserveCredit.name() : __numReserveCredit,
        __numReserveDebit.name() : __numReserveDebit,
        __numVendorDebit.name() : __numVendorDebit,
        __numVendorCredit.name() : __numVendorCredit,
        __numPhysicalCheckDebit.name() : __numPhysicalCheckDebit,
        __numPhysicalCheckCredit.name() : __numPhysicalCheckCredit,
        __numFundingInstructionVoid.name() : __numFundingInstructionVoid,
        __numFastAccessFunding.name() : __numFastAccessFunding,
        __numPayoutOrgCredit.name() : __numPayoutOrgCredit,
        __numPayoutOrgDebit.name() : __numPayoutOrgDebit,
        __numCustomerCredit.name() : __numCustomerCredit,
        __numCustomerDebit.name() : __numCustomerDebit,
        __numTranslateToLowValueTokenRequests.name() : __numTranslateToLowValueTokenRequests,
        __payFacCreditAmount.name() : __payFacCreditAmount,
        __payFacDebitAmount.name() : __payFacDebitAmount,
        __submerchantCreditAmount.name() : __submerchantCreditAmount,
        __submerchantDebitAmount.name() : __submerchantDebitAmount,
        __reserveCreditAmount.name() : __reserveCreditAmount,
        __reserveDebitAmount.name() : __reserveDebitAmount,
        __vendorDebitAmount.name() : __vendorDebitAmount,
        __vendorCreditAmount.name() : __vendorCreditAmount,
        __physicalCheckDebitAmount.name() : __physicalCheckDebitAmount,
        __physicalCheckCreditAmount.name() : __physicalCheckCreditAmount,
        __fastAccessFundingAmount.name() : __fastAccessFundingAmount,
        __payoutOrgCreditAmount.name() : __payoutOrgCreditAmount,
        __payoutOrgDebitAmount.name() : __payoutOrgDebitAmount,
        __customerCreditAmount.name() : __customerCreditAmount,
        __customerDebitAmount.name() : __customerDebitAmount,
        __sameDayFunding.name() : __sameDayFunding,
        __merchantId.name() : __merchantId
    })
_module_typeBindings.CTD_ANON_29 = CTD_ANON_29


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_30 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3038, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}RFRResponse uses Python identifier RFRResponse
    __RFRResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RFRResponse'), 'RFRResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_30_httpwww_vantivcnp_comschemaRFRResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3052, 4), )

    
    RFRResponse = property(__RFRResponse.value, __RFRResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}batchResponse uses Python identifier batchResponse
    __batchResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'batchResponse'), 'batchResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_30_httpwww_vantivcnp_comschemabatchResponse', True, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3058, 4), )

    
    batchResponse = property(__batchResponse.value, __batchResponse.set, None, None)

    
    # Attribute version uses Python identifier version
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'version'), 'version', '__httpwww_vantivcnp_comschema_CTD_ANON_30_version', pyxb.binding.datatypes.string, required=True)
    __version._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3045, 12)
    __version._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3045, 12)
    
    version = property(__version.value, __version.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpwww_vantivcnp_comschema_CTD_ANON_30_id', pyxb.binding.datatypes.string)
    __id._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3046, 12)
    __id._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3046, 12)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute response uses Python identifier response
    __response = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_30_response', pyxb.binding.datatypes.string, required=True)
    __response._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3047, 12)
    __response._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3047, 12)
    
    response = property(__response.value, __response.set, None, None)

    
    # Attribute message uses Python identifier message
    __message = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_30_message', pyxb.binding.datatypes.string, required=True)
    __message._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3048, 12)
    __message._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3048, 12)
    
    message = property(__message.value, __message.set, None, None)

    
    # Attribute cnpSessionId uses Python identifier cnpSessionId
    __cnpSessionId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'cnpSessionId'), 'cnpSessionId', '__httpwww_vantivcnp_comschema_CTD_ANON_30_cnpSessionId', pyxb.binding.datatypes.long, required=True)
    __cnpSessionId._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3049, 12)
    __cnpSessionId._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3049, 12)
    
    cnpSessionId = property(__cnpSessionId.value, __cnpSessionId.set, None, None)

    _ElementMap.update({
        __RFRResponse.name() : __RFRResponse,
        __batchResponse.name() : __batchResponse
    })
    _AttributeMap.update({
        __version.name() : __version,
        __id.name() : __id,
        __response.name() : __response,
        __message.name() : __message,
        __cnpSessionId.name() : __cnpSessionId
    })
_module_typeBindings.CTD_ANON_30 = CTD_ANON_30


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_31 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3053, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute response uses Python identifier response
    __response = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_31_response', pyxb.binding.datatypes.string, required=True)
    __response._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3054, 12)
    __response._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3054, 12)
    
    response = property(__response.value, __response.set, None, None)

    
    # Attribute message uses Python identifier message
    __message = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_31_message', pyxb.binding.datatypes.string, required=True)
    __message._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3055, 12)
    __message._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3055, 12)
    
    message = property(__message.value, __message.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __response.name() : __response,
        __message.name() : __message
    })
_module_typeBindings.CTD_ANON_31 = CTD_ANON_31


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_32 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3059, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}recurringTransactionResponse uses Python identifier recurringTransactionResponse
    __recurringTransactionResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recurringTransactionResponse'), 'recurringTransactionResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_32_httpwww_vantivcnp_comschemarecurringTransactionResponse', True, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 216, 4), )

    
    recurringTransactionResponse = property(__recurringTransactionResponse.value, __recurringTransactionResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}transactionResponse uses Python identifier transactionResponse
    __transactionResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'transactionResponse'), 'transactionResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_32_httpwww_vantivcnp_comschematransactionResponse', True, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1159, 4), )

    
    transactionResponse = property(__transactionResponse.value, __transactionResponse.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpwww_vantivcnp_comschema_CTD_ANON_32_id', pyxb.binding.datatypes.string)
    __id._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3064, 12)
    __id._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3064, 12)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute cnpBatchId uses Python identifier cnpBatchId
    __cnpBatchId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'cnpBatchId'), 'cnpBatchId', '__httpwww_vantivcnp_comschema_CTD_ANON_32_cnpBatchId', pyxb.binding.datatypes.long, required=True)
    __cnpBatchId._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3065, 12)
    __cnpBatchId._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3065, 12)
    
    cnpBatchId = property(__cnpBatchId.value, __cnpBatchId.set, None, None)

    
    # Attribute merchantId uses Python identifier merchantId
    __merchantId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'merchantId'), 'merchantId', '__httpwww_vantivcnp_comschema_CTD_ANON_32_merchantId', pyxb.binding.datatypes.string, required=True)
    __merchantId._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3066, 12)
    __merchantId._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3066, 12)
    
    merchantId = property(__merchantId.value, __merchantId.set, None, None)

    
    # Attribute numAccountUpdates uses Python identifier numAccountUpdates
    __numAccountUpdates = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numAccountUpdates'), 'numAccountUpdates', '__httpwww_vantivcnp_comschema_CTD_ANON_32_numAccountUpdates', pyxb.binding.datatypes.integer, unicode_default='0')
    __numAccountUpdates._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3067, 12)
    __numAccountUpdates._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3067, 12)
    
    numAccountUpdates = property(__numAccountUpdates.value, __numAccountUpdates.set, None, None)

    _ElementMap.update({
        __recurringTransactionResponse.name() : __recurringTransactionResponse,
        __transactionResponse.name() : __transactionResponse
    })
    _AttributeMap.update({
        __id.name() : __id,
        __cnpBatchId.name() : __cnpBatchId,
        __merchantId.name() : __merchantId,
        __numAccountUpdates.name() : __numAccountUpdates
    })
_module_typeBindings.CTD_ANON_32 = CTD_ANON_32


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_33 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3103, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}merchantId uses Python identifier merchantId
    __merchantId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantId'), 'merchantId', '__httpwww_vantivcnp_comschema_CTD_ANON_33_httpwww_vantivcnp_comschemamerchantId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3105, 16), )

    
    merchantId = property(__merchantId.value, __merchantId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDay uses Python identifier postDay
    __postDay = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDay'), 'postDay', '__httpwww_vantivcnp_comschema_CTD_ANON_33_httpwww_vantivcnp_comschemapostDay', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3106, 16), )

    
    postDay = property(__postDay.value, __postDay.set, None, None)

    _ElementMap.update({
        __merchantId.name() : __merchantId,
        __postDay.name() : __postDay
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_33 = CTD_ANON_33


# Complex type {http://www.vantivcnp.com/schema}baseRequest with content type ELEMENT_ONLY
class baseRequest (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}baseRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'baseRequest')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3302, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}authentication uses Python identifier authentication
    __authentication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authentication'), 'authentication', '__httpwww_vantivcnp_comschema_baseRequest_httpwww_vantivcnp_comschemaauthentication', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 5, 4), )

    
    authentication = property(__authentication.value, __authentication.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}recurringTransaction uses Python identifier recurringTransaction
    __recurringTransaction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recurringTransaction'), 'recurringTransaction', '__httpwww_vantivcnp_comschema_baseRequest_httpwww_vantivcnp_comschemarecurringTransaction', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 215, 4), )

    
    recurringTransaction = property(__recurringTransaction.value, __recurringTransaction.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}transaction uses Python identifier transaction
    __transaction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'transaction'), 'transaction', '__httpwww_vantivcnp_comschema_baseRequest_httpwww_vantivcnp_comschematransaction', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 456, 4), )

    
    transaction = property(__transaction.value, __transaction.set, None, None)

    
    # Attribute version uses Python identifier version
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'version'), 'version', '__httpwww_vantivcnp_comschema_baseRequest_version', pyxb.binding.datatypes.string, required=True)
    __version._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3310, 8)
    __version._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3310, 8)
    
    version = property(__version.value, __version.set, None, None)

    _ElementMap.update({
        __authentication.name() : __authentication,
        __recurringTransaction.name() : __recurringTransaction,
        __transaction.name() : __transaction
    })
    _AttributeMap.update({
        __version.name() : __version
    })
_module_typeBindings.baseRequest = baseRequest
Namespace.addCategoryObject('typeBinding', 'baseRequest', baseRequest)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_34 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3327, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}recurringTransactionResponse uses Python identifier recurringTransactionResponse
    __recurringTransactionResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recurringTransactionResponse'), 'recurringTransactionResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_34_httpwww_vantivcnp_comschemarecurringTransactionResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 216, 4), )

    
    recurringTransactionResponse = property(__recurringTransactionResponse.value, __recurringTransactionResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}transactionResponse uses Python identifier transactionResponse
    __transactionResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'transactionResponse'), 'transactionResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_34_httpwww_vantivcnp_comschematransactionResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1159, 4), )

    
    transactionResponse = property(__transactionResponse.value, __transactionResponse.set, None, None)

    
    # Attribute response uses Python identifier response
    __response = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_34_response', pyxb.binding.datatypes.string, required=True)
    __response._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3332, 12)
    __response._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3332, 12)
    
    response = property(__response.value, __response.set, None, None)

    
    # Attribute message uses Python identifier message
    __message = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_34_message', pyxb.binding.datatypes.string, required=True)
    __message._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3333, 12)
    __message._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3333, 12)
    
    message = property(__message.value, __message.set, None, None)

    
    # Attribute version uses Python identifier version
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'version'), 'version', '__httpwww_vantivcnp_comschema_CTD_ANON_34_version', pyxb.binding.datatypes.string, required=True)
    __version._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3334, 12)
    __version._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3334, 12)
    
    version = property(__version.value, __version.set, None, None)

    _ElementMap.update({
        __recurringTransactionResponse.name() : __recurringTransactionResponse,
        __transactionResponse.name() : __transactionResponse
    })
    _AttributeMap.update({
        __response.name() : __response,
        __message.name() : __message,
        __version.name() : __version
    })
_module_typeBindings.CTD_ANON_34 = CTD_ANON_34


# Complex type {http://www.vantivcnp.com/schema}voidRecyclingResponseType with content type ELEMENT_ONLY
class voidRecyclingResponseType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.vantivcnp.com/schema}voidRecyclingResponseType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'voidRecyclingResponseType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3370, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}creditCnpTxnId uses Python identifier creditCnpTxnId
    __creditCnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'creditCnpTxnId'), 'creditCnpTxnId', '__httpwww_vantivcnp_comschema_voidRecyclingResponseType_httpwww_vantivcnp_comschemacreditCnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3372, 12), )

    
    creditCnpTxnId = property(__creditCnpTxnId.value, __creditCnpTxnId.set, None, None)

    _ElementMap.update({
        __creditCnpTxnId.name() : __creditCnpTxnId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.voidRecyclingResponseType = voidRecyclingResponseType
Namespace.addCategoryObject('typeBinding', 'voidRecyclingResponseType', voidRecyclingResponseType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_35 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3539, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.vantivcnp.com/schema}transactionResponse uses Python identifier transactionResponse
    __transactionResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'transactionResponse'), 'transactionResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_35_httpwww_vantivcnp_comschematransactionResponse', True, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1159, 4), )

    
    transactionResponse = property(__transactionResponse.value, __transactionResponse.set, None, None)

    _ElementMap.update({
        __transactionResponse.name() : __transactionResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_35 = CTD_ANON_35


# Complex type {http://www.vantivcnp.com/schema}giftCardCardType with content type ELEMENT_ONLY
class giftCardCardType (cardType):
    """Complex type {http://www.vantivcnp.com/schema}giftCardCardType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'giftCardCardType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 106, 4)
    _ElementMap = cardType._ElementMap.copy()
    _AttributeMap = cardType._AttributeMap.copy()
    # Base type is cardType
    
    # Element type ({http://www.vantivcnp.com/schema}type) inherited from {http://www.vantivcnp.com/schema}cardType
    
    # Element number ({http://www.vantivcnp.com/schema}number) inherited from {http://www.vantivcnp.com/schema}cardType
    
    # Element expDate ({http://www.vantivcnp.com/schema}expDate) inherited from {http://www.vantivcnp.com/schema}cardType
    
    # Element track ({http://www.vantivcnp.com/schema}track) inherited from {http://www.vantivcnp.com/schema}cardType
    
    # Element cardValidationNum ({http://www.vantivcnp.com/schema}cardValidationNum) inherited from {http://www.vantivcnp.com/schema}cardType
    
    # Element pin ({http://www.vantivcnp.com/schema}pin) inherited from {http://www.vantivcnp.com/schema}cardType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.giftCardCardType = giftCardCardType
Namespace.addCategoryObject('typeBinding', 'giftCardCardType', giftCardCardType)


# Complex type {http://www.vantivcnp.com/schema}recurringTransactionType with content type EMPTY
class recurringTransactionType (cnpTransactionInterface):
    """Complex type {http://www.vantivcnp.com/schema}recurringTransactionType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'recurringTransactionType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 219, 4)
    _ElementMap = cnpTransactionInterface._ElementMap.copy()
    _AttributeMap = cnpTransactionInterface._AttributeMap.copy()
    # Base type is cnpTransactionInterface
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.recurringTransactionType = recurringTransactionType
Namespace.addCategoryObject('typeBinding', 'recurringTransactionType', recurringTransactionType)


# Complex type {http://www.vantivcnp.com/schema}recurringTransactionResponseType with content type ELEMENT_ONLY
class recurringTransactionResponseType (cnpTransactionInterface):
    """Complex type {http://www.vantivcnp.com/schema}recurringTransactionResponseType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'recurringTransactionResponseType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 226, 4)
    _ElementMap = cnpTransactionInterface._ElementMap.copy()
    _AttributeMap = cnpTransactionInterface._AttributeMap.copy()
    # Base type is cnpTransactionInterface
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_recurringTransactionResponseType_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 230, 20), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_recurringTransactionResponseType_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 231, 20), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_recurringTransactionResponseType_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 232, 20), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_recurringTransactionResponseType_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 233, 20), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_recurringTransactionResponseType_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 234, 20), )

    
    location = property(__location.value, __location.set, None, None)

    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __message.name() : __message,
        __responseTime.name() : __responseTime,
        __location.name() : __location
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.recurringTransactionResponseType = recurringTransactionResponseType
Namespace.addCategoryObject('typeBinding', 'recurringTransactionResponseType', recurringTransactionResponseType)


# Complex type {http://www.vantivcnp.com/schema}transactionType with content type EMPTY
class transactionType (cnpTransactionInterface):
    """Complex type {http://www.vantivcnp.com/schema}transactionType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'transactionType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 458, 4)
    _ElementMap = cnpTransactionInterface._ElementMap.copy()
    _AttributeMap = cnpTransactionInterface._AttributeMap.copy()
    # Base type is cnpTransactionInterface
    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpwww_vantivcnp_comschema_transactionType_id', pyxb.binding.datatypes.string, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 461, 16)
    __id._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 461, 16)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute customerId uses Python identifier customerId
    __customerId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'customerId'), 'customerId', '__httpwww_vantivcnp_comschema_transactionType_customerId', pyxb.binding.datatypes.string)
    __customerId._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 462, 16)
    __customerId._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 462, 16)
    
    customerId = property(__customerId.value, __customerId.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __id.name() : __id,
        __customerId.name() : __customerId
    })
_module_typeBindings.transactionType = transactionType
Namespace.addCategoryObject('typeBinding', 'transactionType', transactionType)


# Complex type {http://www.vantivcnp.com/schema}cardTokenTypeAU with content type ELEMENT_ONLY
class cardTokenTypeAU (cardTokenType):
    """Complex type {http://www.vantivcnp.com/schema}cardTokenTypeAU with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'cardTokenTypeAU')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3091, 4)
    _ElementMap = cardTokenType._ElementMap.copy()
    _AttributeMap = cardTokenType._AttributeMap.copy()
    # Base type is cardTokenType
    
    # Element cnpToken ({http://www.vantivcnp.com/schema}cnpToken) inherited from {http://www.vantivcnp.com/schema}cardTokenType
    
    # Element tokenURL ({http://www.vantivcnp.com/schema}tokenURL) inherited from {http://www.vantivcnp.com/schema}cardTokenType
    
    # Element expDate ({http://www.vantivcnp.com/schema}expDate) inherited from {http://www.vantivcnp.com/schema}cardTokenType
    
    # Element cardValidationNum ({http://www.vantivcnp.com/schema}cardValidationNum) inherited from {http://www.vantivcnp.com/schema}cardTokenType
    
    # Element type ({http://www.vantivcnp.com/schema}type) inherited from {http://www.vantivcnp.com/schema}cardTokenType
    
    # Element checkoutId ({http://www.vantivcnp.com/schema}checkoutId) inherited from {http://www.vantivcnp.com/schema}cardTokenType
    
    # Element authenticatedShopperID ({http://www.vantivcnp.com/schema}authenticatedShopperID) inherited from {http://www.vantivcnp.com/schema}cardTokenType
    
    # Element {http://www.vantivcnp.com/schema}bin uses Python identifier bin
    __bin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bin'), 'bin', '__httpwww_vantivcnp_comschema_cardTokenTypeAU_httpwww_vantivcnp_comschemabin', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3095, 20), )

    
    bin = property(__bin.value, __bin.set, None, None)

    _ElementMap.update({
        __bin.name() : __bin
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.cardTokenTypeAU = cardTokenTypeAU
Namespace.addCategoryObject('typeBinding', 'cardTokenTypeAU', cardTokenTypeAU)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_36 (baseRequest):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3314, 8)
    _ElementMap = baseRequest._ElementMap.copy()
    _AttributeMap = baseRequest._AttributeMap.copy()
    # Base type is baseRequest
    
    # Element authentication ({http://www.vantivcnp.com/schema}authentication) inherited from {http://www.vantivcnp.com/schema}baseRequest
    
    # Element recurringTransaction ({http://www.vantivcnp.com/schema}recurringTransaction) inherited from {http://www.vantivcnp.com/schema}baseRequest
    
    # Element transaction ({http://www.vantivcnp.com/schema}transaction) inherited from {http://www.vantivcnp.com/schema}baseRequest
    
    # Attribute version inherited from {http://www.vantivcnp.com/schema}baseRequest
    
    # Attribute merchantId uses Python identifier merchantId
    __merchantId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'merchantId'), 'merchantId', '__httpwww_vantivcnp_comschema_CTD_ANON_36_merchantId', pyxb.binding.datatypes.string, required=True)
    __merchantId._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3317, 20)
    __merchantId._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3317, 20)
    
    merchantId = property(__merchantId.value, __merchantId.set, None, None)

    
    # Attribute merchantSdk uses Python identifier merchantSdk
    __merchantSdk = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'merchantSdk'), 'merchantSdk', '__httpwww_vantivcnp_comschema_CTD_ANON_36_merchantSdk', pyxb.binding.datatypes.string)
    __merchantSdk._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3318, 20)
    __merchantSdk._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3318, 20)
    
    merchantSdk = property(__merchantSdk.value, __merchantSdk.set, None, None)

    
    # Attribute loggedInUser uses Python identifier loggedInUser
    __loggedInUser = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'loggedInUser'), 'loggedInUser', '__httpwww_vantivcnp_comschema_CTD_ANON_36_loggedInUser', pyxb.binding.datatypes.string)
    __loggedInUser._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3319, 20)
    __loggedInUser._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3319, 20)
    
    loggedInUser = property(__loggedInUser.value, __loggedInUser.set, None, None)

    
    # Attribute sameDayFunding uses Python identifier sameDayFunding
    __sameDayFunding = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'sameDayFunding'), 'sameDayFunding', '__httpwww_vantivcnp_comschema_CTD_ANON_36_sameDayFunding', pyxb.binding.datatypes.boolean)
    __sameDayFunding._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3320, 20)
    __sameDayFunding._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3320, 20)
    
    sameDayFunding = property(__sameDayFunding.value, __sameDayFunding.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __merchantId.name() : __merchantId,
        __merchantSdk.name() : __merchantSdk,
        __loggedInUser.name() : __loggedInUser,
        __sameDayFunding.name() : __sameDayFunding
    })
_module_typeBindings.CTD_ANON_36 = CTD_ANON_36


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_37 (recurringTransactionType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 241, 8)
    _ElementMap = recurringTransactionType._ElementMap.copy()
    _AttributeMap = recurringTransactionType._AttributeMap.copy()
    # Base type is recurringTransactionType
    
    # Element {http://www.vantivcnp.com/schema}subscriptionId uses Python identifier subscriptionId
    __subscriptionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId'), 'subscriptionId', '__httpwww_vantivcnp_comschema_CTD_ANON_37_httpwww_vantivcnp_comschemasubscriptionId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 245, 24), )

    
    subscriptionId = property(__subscriptionId.value, __subscriptionId.set, None, None)

    _ElementMap.update({
        __subscriptionId.name() : __subscriptionId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_37 = CTD_ANON_37


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_38 (recurringTransactionType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 253, 8)
    _ElementMap = recurringTransactionType._ElementMap.copy()
    _AttributeMap = recurringTransactionType._AttributeMap.copy()
    # Base type is recurringTransactionType
    
    # Element {http://www.vantivcnp.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), 'billToAddress', '__httpwww_vantivcnp_comschema_CTD_ANON_38_httpwww_vantivcnp_comschemabillToAddress', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 77, 4), )

    
    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}subscriptionId uses Python identifier subscriptionId
    __subscriptionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId'), 'subscriptionId', '__httpwww_vantivcnp_comschema_CTD_ANON_38_httpwww_vantivcnp_comschemasubscriptionId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 257, 24), )

    
    subscriptionId = property(__subscriptionId.value, __subscriptionId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}planCode uses Python identifier planCode
    __planCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'planCode'), 'planCode', '__httpwww_vantivcnp_comschema_CTD_ANON_38_httpwww_vantivcnp_comschemaplanCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 258, 24), )

    
    planCode = property(__planCode.value, __planCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_vantivcnp_comschema_CTD_ANON_38_httpwww_vantivcnp_comschemacard', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 261, 28), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}token uses Python identifier token
    __token = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'token'), 'token', '__httpwww_vantivcnp_comschema_CTD_ANON_38_httpwww_vantivcnp_comschematoken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 262, 28), )

    
    token = property(__token.value, __token.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}paypage uses Python identifier paypage
    __paypage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paypage'), 'paypage', '__httpwww_vantivcnp_comschema_CTD_ANON_38_httpwww_vantivcnp_comschemapaypage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 263, 28), )

    
    paypage = property(__paypage.value, __paypage.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}billingDate uses Python identifier billingDate
    __billingDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billingDate'), 'billingDate', '__httpwww_vantivcnp_comschema_CTD_ANON_38_httpwww_vantivcnp_comschemabillingDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 265, 24), )

    
    billingDate = property(__billingDate.value, __billingDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}createDiscount uses Python identifier createDiscount
    __createDiscount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'createDiscount'), 'createDiscount', '__httpwww_vantivcnp_comschema_CTD_ANON_38_httpwww_vantivcnp_comschemacreateDiscount', True, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 266, 24), )

    
    createDiscount = property(__createDiscount.value, __createDiscount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}updateDiscount uses Python identifier updateDiscount
    __updateDiscount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'updateDiscount'), 'updateDiscount', '__httpwww_vantivcnp_comschema_CTD_ANON_38_httpwww_vantivcnp_comschemaupdateDiscount', True, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 267, 24), )

    
    updateDiscount = property(__updateDiscount.value, __updateDiscount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}deleteDiscount uses Python identifier deleteDiscount
    __deleteDiscount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deleteDiscount'), 'deleteDiscount', '__httpwww_vantivcnp_comschema_CTD_ANON_38_httpwww_vantivcnp_comschemadeleteDiscount', True, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 268, 24), )

    
    deleteDiscount = property(__deleteDiscount.value, __deleteDiscount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}createAddOn uses Python identifier createAddOn
    __createAddOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'createAddOn'), 'createAddOn', '__httpwww_vantivcnp_comschema_CTD_ANON_38_httpwww_vantivcnp_comschemacreateAddOn', True, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 269, 24), )

    
    createAddOn = property(__createAddOn.value, __createAddOn.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}updateAddOn uses Python identifier updateAddOn
    __updateAddOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'updateAddOn'), 'updateAddOn', '__httpwww_vantivcnp_comschema_CTD_ANON_38_httpwww_vantivcnp_comschemaupdateAddOn', True, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 270, 24), )

    
    updateAddOn = property(__updateAddOn.value, __updateAddOn.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}deleteAddOn uses Python identifier deleteAddOn
    __deleteAddOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deleteAddOn'), 'deleteAddOn', '__httpwww_vantivcnp_comschema_CTD_ANON_38_httpwww_vantivcnp_comschemadeleteAddOn', True, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 271, 24), )

    
    deleteAddOn = property(__deleteAddOn.value, __deleteAddOn.set, None, None)

    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __subscriptionId.name() : __subscriptionId,
        __planCode.name() : __planCode,
        __card.name() : __card,
        __token.name() : __token,
        __paypage.name() : __paypage,
        __billingDate.name() : __billingDate,
        __createDiscount.name() : __createDiscount,
        __updateDiscount.name() : __updateDiscount,
        __deleteDiscount.name() : __deleteDiscount,
        __createAddOn.name() : __createAddOn,
        __updateAddOn.name() : __updateAddOn,
        __deleteAddOn.name() : __deleteAddOn
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_38 = CTD_ANON_38


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_39 (recurringTransactionType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 279, 8)
    _ElementMap = recurringTransactionType._ElementMap.copy()
    _AttributeMap = recurringTransactionType._AttributeMap.copy()
    # Base type is recurringTransactionType
    
    # Element {http://www.vantivcnp.com/schema}planCode uses Python identifier planCode
    __planCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'planCode'), 'planCode', '__httpwww_vantivcnp_comschema_CTD_ANON_39_httpwww_vantivcnp_comschemaplanCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 283, 24), )

    
    planCode = property(__planCode.value, __planCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_vantivcnp_comschema_CTD_ANON_39_httpwww_vantivcnp_comschemaname', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 284, 24), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_vantivcnp_comschema_CTD_ANON_39_httpwww_vantivcnp_comschemadescription', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 285, 24), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}intervalType uses Python identifier intervalType
    __intervalType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'intervalType'), 'intervalType', '__httpwww_vantivcnp_comschema_CTD_ANON_39_httpwww_vantivcnp_comschemaintervalType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 286, 24), )

    
    intervalType = property(__intervalType.value, __intervalType.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_39_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 287, 24), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}numberOfPayments uses Python identifier numberOfPayments
    __numberOfPayments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'numberOfPayments'), 'numberOfPayments', '__httpwww_vantivcnp_comschema_CTD_ANON_39_httpwww_vantivcnp_comschemanumberOfPayments', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 288, 24), )

    
    numberOfPayments = property(__numberOfPayments.value, __numberOfPayments.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}trialNumberOfIntervals uses Python identifier trialNumberOfIntervals
    __trialNumberOfIntervals = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'trialNumberOfIntervals'), 'trialNumberOfIntervals', '__httpwww_vantivcnp_comschema_CTD_ANON_39_httpwww_vantivcnp_comschematrialNumberOfIntervals', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 289, 24), )

    
    trialNumberOfIntervals = property(__trialNumberOfIntervals.value, __trialNumberOfIntervals.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}trialIntervalType uses Python identifier trialIntervalType
    __trialIntervalType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'trialIntervalType'), 'trialIntervalType', '__httpwww_vantivcnp_comschema_CTD_ANON_39_httpwww_vantivcnp_comschematrialIntervalType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 290, 24), )

    
    trialIntervalType = property(__trialIntervalType.value, __trialIntervalType.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}active uses Python identifier active
    __active = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'active'), 'active', '__httpwww_vantivcnp_comschema_CTD_ANON_39_httpwww_vantivcnp_comschemaactive', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 291, 24), )

    
    active = property(__active.value, __active.set, None, None)

    _ElementMap.update({
        __planCode.name() : __planCode,
        __name.name() : __name,
        __description.name() : __description,
        __intervalType.name() : __intervalType,
        __amount.name() : __amount,
        __numberOfPayments.name() : __numberOfPayments,
        __trialNumberOfIntervals.name() : __trialNumberOfIntervals,
        __trialIntervalType.name() : __trialIntervalType,
        __active.name() : __active
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_39 = CTD_ANON_39


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_40 (recurringTransactionType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 299, 8)
    _ElementMap = recurringTransactionType._ElementMap.copy()
    _AttributeMap = recurringTransactionType._AttributeMap.copy()
    # Base type is recurringTransactionType
    
    # Element {http://www.vantivcnp.com/schema}planCode uses Python identifier planCode
    __planCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'planCode'), 'planCode', '__httpwww_vantivcnp_comschema_CTD_ANON_40_httpwww_vantivcnp_comschemaplanCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 303, 24), )

    
    planCode = property(__planCode.value, __planCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}active uses Python identifier active
    __active = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'active'), 'active', '__httpwww_vantivcnp_comschema_CTD_ANON_40_httpwww_vantivcnp_comschemaactive', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 304, 24), )

    
    active = property(__active.value, __active.set, None, None)

    _ElementMap.update({
        __planCode.name() : __planCode,
        __active.name() : __active
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_40 = CTD_ANON_40


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_41 (recurringTransactionResponseType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 312, 8)
    _ElementMap = recurringTransactionResponseType._ElementMap.copy()
    _AttributeMap = recurringTransactionResponseType._AttributeMap.copy()
    # Base type is recurringTransactionResponseType
    
    # Element cnpTxnId ({http://www.vantivcnp.com/schema}cnpTxnId) inherited from {http://www.vantivcnp.com/schema}recurringTransactionResponseType
    
    # Element response ({http://www.vantivcnp.com/schema}response) inherited from {http://www.vantivcnp.com/schema}recurringTransactionResponseType
    
    # Element message ({http://www.vantivcnp.com/schema}message) inherited from {http://www.vantivcnp.com/schema}recurringTransactionResponseType
    
    # Element responseTime ({http://www.vantivcnp.com/schema}responseTime) inherited from {http://www.vantivcnp.com/schema}recurringTransactionResponseType
    
    # Element location ({http://www.vantivcnp.com/schema}location) inherited from {http://www.vantivcnp.com/schema}recurringTransactionResponseType
    
    # Element {http://www.vantivcnp.com/schema}subscriptionId uses Python identifier subscriptionId
    __subscriptionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId'), 'subscriptionId', '__httpwww_vantivcnp_comschema_CTD_ANON_41_httpwww_vantivcnp_comschemasubscriptionId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 316, 24), )

    
    subscriptionId = property(__subscriptionId.value, __subscriptionId.set, None, None)

    _ElementMap.update({
        __subscriptionId.name() : __subscriptionId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_41 = CTD_ANON_41


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_42 (recurringTransactionResponseType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 324, 8)
    _ElementMap = recurringTransactionResponseType._ElementMap.copy()
    _AttributeMap = recurringTransactionResponseType._AttributeMap.copy()
    # Base type is recurringTransactionResponseType
    
    # Element cnpTxnId ({http://www.vantivcnp.com/schema}cnpTxnId) inherited from {http://www.vantivcnp.com/schema}recurringTransactionResponseType
    
    # Element response ({http://www.vantivcnp.com/schema}response) inherited from {http://www.vantivcnp.com/schema}recurringTransactionResponseType
    
    # Element message ({http://www.vantivcnp.com/schema}message) inherited from {http://www.vantivcnp.com/schema}recurringTransactionResponseType
    
    # Element responseTime ({http://www.vantivcnp.com/schema}responseTime) inherited from {http://www.vantivcnp.com/schema}recurringTransactionResponseType
    
    # Element location ({http://www.vantivcnp.com/schema}location) inherited from {http://www.vantivcnp.com/schema}recurringTransactionResponseType
    
    # Element {http://www.vantivcnp.com/schema}subscriptionId uses Python identifier subscriptionId
    __subscriptionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId'), 'subscriptionId', '__httpwww_vantivcnp_comschema_CTD_ANON_42_httpwww_vantivcnp_comschemasubscriptionId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 328, 24), )

    
    subscriptionId = property(__subscriptionId.value, __subscriptionId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), 'tokenResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_42_httpwww_vantivcnp_comschematokenResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 329, 24), )

    
    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)

    _ElementMap.update({
        __subscriptionId.name() : __subscriptionId,
        __tokenResponse.name() : __tokenResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_42 = CTD_ANON_42


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_43 (recurringTransactionResponseType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 337, 8)
    _ElementMap = recurringTransactionResponseType._ElementMap.copy()
    _AttributeMap = recurringTransactionResponseType._AttributeMap.copy()
    # Base type is recurringTransactionResponseType
    
    # Element cnpTxnId ({http://www.vantivcnp.com/schema}cnpTxnId) inherited from {http://www.vantivcnp.com/schema}recurringTransactionResponseType
    
    # Element response ({http://www.vantivcnp.com/schema}response) inherited from {http://www.vantivcnp.com/schema}recurringTransactionResponseType
    
    # Element message ({http://www.vantivcnp.com/schema}message) inherited from {http://www.vantivcnp.com/schema}recurringTransactionResponseType
    
    # Element responseTime ({http://www.vantivcnp.com/schema}responseTime) inherited from {http://www.vantivcnp.com/schema}recurringTransactionResponseType
    
    # Element location ({http://www.vantivcnp.com/schema}location) inherited from {http://www.vantivcnp.com/schema}recurringTransactionResponseType
    
    # Element {http://www.vantivcnp.com/schema}planCode uses Python identifier planCode
    __planCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'planCode'), 'planCode', '__httpwww_vantivcnp_comschema_CTD_ANON_43_httpwww_vantivcnp_comschemaplanCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 341, 24), )

    
    planCode = property(__planCode.value, __planCode.set, None, None)

    _ElementMap.update({
        __planCode.name() : __planCode
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_43 = CTD_ANON_43


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_44 (recurringTransactionResponseType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 349, 8)
    _ElementMap = recurringTransactionResponseType._ElementMap.copy()
    _AttributeMap = recurringTransactionResponseType._AttributeMap.copy()
    # Base type is recurringTransactionResponseType
    
    # Element cnpTxnId ({http://www.vantivcnp.com/schema}cnpTxnId) inherited from {http://www.vantivcnp.com/schema}recurringTransactionResponseType
    
    # Element response ({http://www.vantivcnp.com/schema}response) inherited from {http://www.vantivcnp.com/schema}recurringTransactionResponseType
    
    # Element message ({http://www.vantivcnp.com/schema}message) inherited from {http://www.vantivcnp.com/schema}recurringTransactionResponseType
    
    # Element responseTime ({http://www.vantivcnp.com/schema}responseTime) inherited from {http://www.vantivcnp.com/schema}recurringTransactionResponseType
    
    # Element location ({http://www.vantivcnp.com/schema}location) inherited from {http://www.vantivcnp.com/schema}recurringTransactionResponseType
    
    # Element {http://www.vantivcnp.com/schema}planCode uses Python identifier planCode
    __planCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'planCode'), 'planCode', '__httpwww_vantivcnp_comschema_CTD_ANON_44_httpwww_vantivcnp_comschemaplanCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 353, 24), )

    
    planCode = property(__planCode.value, __planCode.set, None, None)

    _ElementMap.update({
        __planCode.name() : __planCode
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_44 = CTD_ANON_44


# Complex type {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup with content type EMPTY
class transactionTypeWithReportGroup (transactionType):
    """Complex type {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'transactionTypeWithReportGroup')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 467, 4)
    _ElementMap = transactionType._ElementMap.copy()
    _AttributeMap = transactionType._AttributeMap.copy()
    # Base type is transactionType
    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup uses Python identifier reportGroup
    __reportGroup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'reportGroup'), 'reportGroup', '__httpwww_vantivcnp_comschema_transactionTypeWithReportGroup_reportGroup', pyxb.binding.datatypes.string, required=True)
    __reportGroup._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 470, 16)
    __reportGroup._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 470, 16)
    
    reportGroup = property(__reportGroup.value, __reportGroup.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __reportGroup.name() : __reportGroup
    })
_module_typeBindings.transactionTypeWithReportGroup = transactionTypeWithReportGroup
Namespace.addCategoryObject('typeBinding', 'transactionTypeWithReportGroup', transactionTypeWithReportGroup)


# Complex type {http://www.vantivcnp.com/schema}transactionTypeWithReportGroupAndPartial with content type EMPTY
class transactionTypeWithReportGroupAndPartial (transactionType):
    """Complex type {http://www.vantivcnp.com/schema}transactionTypeWithReportGroupAndPartial with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'transactionTypeWithReportGroupAndPartial')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 483, 4)
    _ElementMap = transactionType._ElementMap.copy()
    _AttributeMap = transactionType._AttributeMap.copy()
    # Base type is transactionType
    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup uses Python identifier reportGroup
    __reportGroup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'reportGroup'), 'reportGroup', '__httpwww_vantivcnp_comschema_transactionTypeWithReportGroupAndPartial_reportGroup', pyxb.binding.datatypes.string, required=True)
    __reportGroup._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 486, 16)
    __reportGroup._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 486, 16)
    
    reportGroup = property(__reportGroup.value, __reportGroup.set, None, None)

    
    # Attribute partial uses Python identifier partial
    __partial = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'partial'), 'partial', '__httpwww_vantivcnp_comschema_transactionTypeWithReportGroupAndPartial_partial', pyxb.binding.datatypes.boolean)
    __partial._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 487, 16)
    __partial._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 487, 16)
    
    partial = property(__partial.value, __partial.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __reportGroup.name() : __reportGroup,
        __partial.name() : __partial
    })
_module_typeBindings.transactionTypeWithReportGroupAndPartial = transactionTypeWithReportGroupAndPartial
Namespace.addCategoryObject('typeBinding', 'transactionTypeWithReportGroupAndPartial', transactionTypeWithReportGroupAndPartial)


# Complex type {http://www.vantivcnp.com/schema}transactionTypeOptionReportGroup with content type EMPTY
class transactionTypeOptionReportGroup (transactionType):
    """Complex type {http://www.vantivcnp.com/schema}transactionTypeOptionReportGroup with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'transactionTypeOptionReportGroup')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 492, 4)
    _ElementMap = transactionType._ElementMap.copy()
    _AttributeMap = transactionType._AttributeMap.copy()
    # Base type is transactionType
    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup uses Python identifier reportGroup
    __reportGroup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'reportGroup'), 'reportGroup', '__httpwww_vantivcnp_comschema_transactionTypeOptionReportGroup_reportGroup', pyxb.binding.datatypes.string)
    __reportGroup._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 495, 16)
    __reportGroup._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 495, 16)
    
    reportGroup = property(__reportGroup.value, __reportGroup.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __reportGroup.name() : __reportGroup
    })
_module_typeBindings.transactionTypeOptionReportGroup = transactionTypeOptionReportGroup
Namespace.addCategoryObject('typeBinding', 'transactionTypeOptionReportGroup', transactionTypeOptionReportGroup)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_45 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 540, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), 'billToAddress', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemabillToAddress', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 77, 4), )

    
    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customerInfo uses Python identifier customerInfo
    __customerInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerInfo'), 'customerInfo', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemacustomerInfo', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 508, 4), )

    
    customerInfo = property(__customerInfo.value, __customerInfo.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 545, 28), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemaorderId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 548, 28), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 549, 28), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}secondaryAmount uses Python identifier secondaryAmount
    __secondaryAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), 'secondaryAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemasecondaryAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 550, 28), )

    
    secondaryAmount = property(__secondaryAmount.value, __secondaryAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}surchargeAmount uses Python identifier surchargeAmount
    __surchargeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), 'surchargeAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemasurchargeAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 551, 28), )

    
    surchargeAmount = property(__surchargeAmount.value, __surchargeAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemaorderSource', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 552, 28), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}mpos uses Python identifier mpos
    __mpos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mpos'), 'mpos', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemampos', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 557, 32), )

    
    mpos = property(__mpos.value, __mpos.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemacard', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 558, 32), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}paypal uses Python identifier paypal
    __paypal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paypal'), 'paypal', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemapaypal', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 559, 32), )

    
    paypal = property(__paypal.value, __paypal.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}token uses Python identifier token
    __token = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'token'), 'token', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschematoken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 560, 32), )

    
    token = property(__token.value, __token.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}paypage uses Python identifier paypage
    __paypage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paypage'), 'paypage', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemapaypage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 561, 32), )

    
    paypage = property(__paypage.value, __paypage.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}applepay uses Python identifier applepay
    __applepay = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'applepay'), 'applepay', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemaapplepay', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 562, 32), )

    
    applepay = property(__applepay.value, __applepay.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cardholderAuthentication uses Python identifier cardholderAuthentication
    __cardholderAuthentication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardholderAuthentication'), 'cardholderAuthentication', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemacardholderAuthentication', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 564, 28), )

    
    cardholderAuthentication = property(__cardholderAuthentication.value, __cardholderAuthentication.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}taxType uses Python identifier taxType
    __taxType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'taxType'), 'taxType', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemataxType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 568, 28), )

    
    taxType = property(__taxType.value, __taxType.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}allowPartialAuth uses Python identifier allowPartialAuth
    __allowPartialAuth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'allowPartialAuth'), 'allowPartialAuth', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemaallowPartialAuth', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 570, 28), )

    
    allowPartialAuth = property(__allowPartialAuth.value, __allowPartialAuth.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}filtering uses Python identifier filtering
    __filtering = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'filtering'), 'filtering', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemafiltering', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 573, 28), )

    
    filtering = property(__filtering.value, __filtering.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), 'merchantData', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemamerchantData', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 574, 28), )

    
    merchantData = property(__merchantData.value, __merchantData.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}recyclingRequest uses Python identifier recyclingRequest
    __recyclingRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recyclingRequest'), 'recyclingRequest', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemarecyclingRequest', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 575, 28), )

    
    recyclingRequest = property(__recyclingRequest.value, __recyclingRequest.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fraudFilterOverride uses Python identifier fraudFilterOverride
    __fraudFilterOverride = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudFilterOverride'), 'fraudFilterOverride', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemafraudFilterOverride', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 576, 28), )

    
    fraudFilterOverride = property(__fraudFilterOverride.value, __fraudFilterOverride.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}recurringRequest uses Python identifier recurringRequest
    __recurringRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recurringRequest'), 'recurringRequest', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemarecurringRequest', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 577, 28), )

    
    recurringRequest = property(__recurringRequest.value, __recurringRequest.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}debtRepayment uses Python identifier debtRepayment
    __debtRepayment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'debtRepayment'), 'debtRepayment', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemadebtRepayment', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 578, 28), )

    
    debtRepayment = property(__debtRepayment.value, __debtRepayment.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}advancedFraudChecks uses Python identifier advancedFraudChecks
    __advancedFraudChecks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudChecks'), 'advancedFraudChecks', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemaadvancedFraudChecks', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 579, 28), )

    
    advancedFraudChecks = property(__advancedFraudChecks.value, __advancedFraudChecks.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}processingType uses Python identifier processingType
    __processingType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processingType'), 'processingType', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemaprocessingType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 581, 28), )

    
    processingType = property(__processingType.value, __processingType.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalNetworkTransactionId uses Python identifier originalNetworkTransactionId
    __originalNetworkTransactionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalNetworkTransactionId'), 'originalNetworkTransactionId', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemaoriginalNetworkTransactionId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 582, 28), )

    
    originalNetworkTransactionId = property(__originalNetworkTransactionId.value, __originalNetworkTransactionId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalTransactionAmount uses Python identifier originalTransactionAmount
    __originalTransactionAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalTransactionAmount'), 'originalTransactionAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemaoriginalTransactionAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 583, 28), )

    
    originalTransactionAmount = property(__originalTransactionAmount.value, __originalTransactionAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}pinlessDebitRequest uses Python identifier pinlessDebitRequest
    __pinlessDebitRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pinlessDebitRequest'), 'pinlessDebitRequest', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemapinlessDebitRequest', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 584, 28), )

    
    pinlessDebitRequest = property(__pinlessDebitRequest.value, __pinlessDebitRequest.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}skipRealtimeAU uses Python identifier skipRealtimeAU
    __skipRealtimeAU = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'skipRealtimeAU'), 'skipRealtimeAU', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemaskipRealtimeAU', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 585, 28), )

    
    skipRealtimeAU = property(__skipRealtimeAU.value, __skipRealtimeAU.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}merchantCategoryCode uses Python identifier merchantCategoryCode
    __merchantCategoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantCategoryCode'), 'merchantCategoryCode', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemamerchantCategoryCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 586, 28), )

    
    merchantCategoryCode = property(__merchantCategoryCode.value, __merchantCategoryCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}businessIndicator uses Python identifier businessIndicator
    __businessIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'businessIndicator'), 'businessIndicator', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemabusinessIndicator', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 587, 28), )

    
    businessIndicator = property(__businessIndicator.value, __businessIndicator.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}shipToAddress uses Python identifier shipToAddress
    __shipToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress'), 'shipToAddress', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemashipToAddress', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 942, 4), )

    
    shipToAddress = property(__shipToAddress.value, __shipToAddress.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}healthcareIIAS uses Python identifier healthcareIIAS
    __healthcareIIAS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'healthcareIIAS'), 'healthcareIIAS', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemahealthcareIIAS', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 969, 4), )

    
    healthcareIIAS = property(__healthcareIIAS.value, __healthcareIIAS.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}enhancedData uses Python identifier enhancedData
    __enhancedData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), 'enhancedData', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemaenhancedData', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 991, 4), )

    
    enhancedData = property(__enhancedData.value, __enhancedData.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customBilling uses Python identifier customBilling
    __customBilling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), 'customBilling', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemacustomBilling', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1076, 4), )

    
    customBilling = property(__customBilling.value, __customBilling.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}processingInstructions uses Python identifier processingInstructions
    __processingInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), 'processingInstructions', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemaprocessingInstructions', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1090, 4), )

    
    processingInstructions = property(__processingInstructions.value, __processingInstructions.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pos'), 'pos', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemapos', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1098, 4), )

    
    pos = property(__pos.value, __pos.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}wallet uses Python identifier wallet
    __wallet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'wallet'), 'wallet', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemawallet', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2151, 4), )

    
    wallet = property(__wallet.value, __wallet.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}lodgingInfo uses Python identifier lodgingInfo
    __lodgingInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'lodgingInfo'), 'lodgingInfo', '__httpwww_vantivcnp_comschema_CTD_ANON_45_httpwww_vantivcnp_comschemalodgingInfo', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2835, 4), )

    
    lodgingInfo = property(__lodgingInfo.value, __lodgingInfo.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __customerInfo.name() : __customerInfo,
        __cnpTxnId.name() : __cnpTxnId,
        __orderId.name() : __orderId,
        __amount.name() : __amount,
        __secondaryAmount.name() : __secondaryAmount,
        __surchargeAmount.name() : __surchargeAmount,
        __orderSource.name() : __orderSource,
        __mpos.name() : __mpos,
        __card.name() : __card,
        __paypal.name() : __paypal,
        __token.name() : __token,
        __paypage.name() : __paypage,
        __applepay.name() : __applepay,
        __cardholderAuthentication.name() : __cardholderAuthentication,
        __taxType.name() : __taxType,
        __allowPartialAuth.name() : __allowPartialAuth,
        __filtering.name() : __filtering,
        __merchantData.name() : __merchantData,
        __recyclingRequest.name() : __recyclingRequest,
        __fraudFilterOverride.name() : __fraudFilterOverride,
        __recurringRequest.name() : __recurringRequest,
        __debtRepayment.name() : __debtRepayment,
        __advancedFraudChecks.name() : __advancedFraudChecks,
        __processingType.name() : __processingType,
        __originalNetworkTransactionId.name() : __originalNetworkTransactionId,
        __originalTransactionAmount.name() : __originalTransactionAmount,
        __pinlessDebitRequest.name() : __pinlessDebitRequest,
        __skipRealtimeAU.name() : __skipRealtimeAU,
        __merchantCategoryCode.name() : __merchantCategoryCode,
        __businessIndicator.name() : __businessIndicator,
        __shipToAddress.name() : __shipToAddress,
        __healthcareIIAS.name() : __healthcareIIAS,
        __enhancedData.name() : __enhancedData,
        __customBilling.name() : __customBilling,
        __processingInstructions.name() : __processingInstructions,
        __pos.name() : __pos,
        __wallet.name() : __wallet,
        __lodgingInfo.name() : __lodgingInfo
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_45 = CTD_ANON_45


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_46 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 596, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_46_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 600, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_46_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 601, 24), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}surchargeAmount uses Python identifier surchargeAmount
    __surchargeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), 'surchargeAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_46_httpwww_vantivcnp_comschemasurchargeAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 602, 24), )

    
    surchargeAmount = property(__surchargeAmount.value, __surchargeAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}payPalNotes uses Python identifier payPalNotes
    __payPalNotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'payPalNotes'), 'payPalNotes', '__httpwww_vantivcnp_comschema_CTD_ANON_46_httpwww_vantivcnp_comschemapayPalNotes', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 603, 24), )

    
    payPalNotes = property(__payPalNotes.value, __payPalNotes.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}actionReason uses Python identifier actionReason
    __actionReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'actionReason'), 'actionReason', '__httpwww_vantivcnp_comschema_CTD_ANON_46_httpwww_vantivcnp_comschemaactionReason', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 604, 24), )

    
    actionReason = property(__actionReason.value, __actionReason.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __amount.name() : __amount,
        __surchargeAmount.name() : __surchargeAmount,
        __payPalNotes.name() : __payPalNotes,
        __actionReason.name() : __actionReason
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_46 = CTD_ANON_46


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_47 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 612, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_47_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 616, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_vantivcnp_comschema_CTD_ANON_47_httpwww_vantivcnp_comschemacard', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 617, 24), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalRefCode uses Python identifier originalRefCode
    __originalRefCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalRefCode'), 'originalRefCode', '__httpwww_vantivcnp_comschema_CTD_ANON_47_httpwww_vantivcnp_comschemaoriginalRefCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 618, 24), )

    
    originalRefCode = property(__originalRefCode.value, __originalRefCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalAmount uses Python identifier originalAmount
    __originalAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalAmount'), 'originalAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_47_httpwww_vantivcnp_comschemaoriginalAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 619, 24), )

    
    originalAmount = property(__originalAmount.value, __originalAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalTxnTime uses Python identifier originalTxnTime
    __originalTxnTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalTxnTime'), 'originalTxnTime', '__httpwww_vantivcnp_comschema_CTD_ANON_47_httpwww_vantivcnp_comschemaoriginalTxnTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 620, 24), )

    
    originalTxnTime = property(__originalTxnTime.value, __originalTxnTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalSystemTraceId uses Python identifier originalSystemTraceId
    __originalSystemTraceId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalSystemTraceId'), 'originalSystemTraceId', '__httpwww_vantivcnp_comschema_CTD_ANON_47_httpwww_vantivcnp_comschemaoriginalSystemTraceId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 621, 24), )

    
    originalSystemTraceId = property(__originalSystemTraceId.value, __originalSystemTraceId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalSequenceNumber uses Python identifier originalSequenceNumber
    __originalSequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalSequenceNumber'), 'originalSequenceNumber', '__httpwww_vantivcnp_comschema_CTD_ANON_47_httpwww_vantivcnp_comschemaoriginalSequenceNumber', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 622, 24), )

    
    originalSequenceNumber = property(__originalSequenceNumber.value, __originalSequenceNumber.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __card.name() : __card,
        __originalRefCode.name() : __originalRefCode,
        __originalAmount.name() : __originalAmount,
        __originalTxnTime.name() : __originalTxnTime,
        __originalSystemTraceId.name() : __originalSystemTraceId,
        __originalSequenceNumber.name() : __originalSequenceNumber
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_47 = CTD_ANON_47


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_48 (transactionTypeWithReportGroupAndPartial):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 630, 8)
    _ElementMap = transactionTypeWithReportGroupAndPartial._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroupAndPartial._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroupAndPartial
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_48_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 634, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_48_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 635, 24), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}surchargeAmount uses Python identifier surchargeAmount
    __surchargeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), 'surchargeAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_48_httpwww_vantivcnp_comschemasurchargeAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 636, 24), )

    
    surchargeAmount = property(__surchargeAmount.value, __surchargeAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}payPalOrderComplete uses Python identifier payPalOrderComplete
    __payPalOrderComplete = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'payPalOrderComplete'), 'payPalOrderComplete', '__httpwww_vantivcnp_comschema_CTD_ANON_48_httpwww_vantivcnp_comschemapayPalOrderComplete', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 639, 24), )

    
    payPalOrderComplete = property(__payPalOrderComplete.value, __payPalOrderComplete.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}payPalNotes uses Python identifier payPalNotes
    __payPalNotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'payPalNotes'), 'payPalNotes', '__httpwww_vantivcnp_comschema_CTD_ANON_48_httpwww_vantivcnp_comschemapayPalNotes', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 640, 24), )

    
    payPalNotes = property(__payPalNotes.value, __payPalNotes.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}pin uses Python identifier pin
    __pin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pin'), 'pin', '__httpwww_vantivcnp_comschema_CTD_ANON_48_httpwww_vantivcnp_comschemapin', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 643, 24), )

    
    pin = property(__pin.value, __pin.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}enhancedData uses Python identifier enhancedData
    __enhancedData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), 'enhancedData', '__httpwww_vantivcnp_comschema_CTD_ANON_48_httpwww_vantivcnp_comschemaenhancedData', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 991, 4), )

    
    enhancedData = property(__enhancedData.value, __enhancedData.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customBilling uses Python identifier customBilling
    __customBilling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), 'customBilling', '__httpwww_vantivcnp_comschema_CTD_ANON_48_httpwww_vantivcnp_comschemacustomBilling', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1076, 4), )

    
    customBilling = property(__customBilling.value, __customBilling.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}processingInstructions uses Python identifier processingInstructions
    __processingInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), 'processingInstructions', '__httpwww_vantivcnp_comschema_CTD_ANON_48_httpwww_vantivcnp_comschemaprocessingInstructions', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1090, 4), )

    
    processingInstructions = property(__processingInstructions.value, __processingInstructions.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}lodgingInfo uses Python identifier lodgingInfo
    __lodgingInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'lodgingInfo'), 'lodgingInfo', '__httpwww_vantivcnp_comschema_CTD_ANON_48_httpwww_vantivcnp_comschemalodgingInfo', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2835, 4), )

    
    lodgingInfo = property(__lodgingInfo.value, __lodgingInfo.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroupAndPartial
    
    # Attribute partial inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroupAndPartial
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __amount.name() : __amount,
        __surchargeAmount.name() : __surchargeAmount,
        __payPalOrderComplete.name() : __payPalOrderComplete,
        __payPalNotes.name() : __payPalNotes,
        __pin.name() : __pin,
        __enhancedData.name() : __enhancedData,
        __customBilling.name() : __customBilling,
        __processingInstructions.name() : __processingInstructions,
        __lodgingInfo.name() : __lodgingInfo
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_48 = CTD_ANON_48


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_49 (transactionTypeWithReportGroupAndPartial):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 651, 8)
    _ElementMap = transactionTypeWithReportGroupAndPartial._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroupAndPartial._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroupAndPartial
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_49_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 655, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}captureAmount uses Python identifier captureAmount
    __captureAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'captureAmount'), 'captureAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_49_httpwww_vantivcnp_comschemacaptureAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 656, 24), )

    
    captureAmount = property(__captureAmount.value, __captureAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_vantivcnp_comschema_CTD_ANON_49_httpwww_vantivcnp_comschemacard', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 657, 24), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalRefCode uses Python identifier originalRefCode
    __originalRefCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalRefCode'), 'originalRefCode', '__httpwww_vantivcnp_comschema_CTD_ANON_49_httpwww_vantivcnp_comschemaoriginalRefCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 658, 24), )

    
    originalRefCode = property(__originalRefCode.value, __originalRefCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalAmount uses Python identifier originalAmount
    __originalAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalAmount'), 'originalAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_49_httpwww_vantivcnp_comschemaoriginalAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 659, 24), )

    
    originalAmount = property(__originalAmount.value, __originalAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalTxnTime uses Python identifier originalTxnTime
    __originalTxnTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalTxnTime'), 'originalTxnTime', '__httpwww_vantivcnp_comschema_CTD_ANON_49_httpwww_vantivcnp_comschemaoriginalTxnTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 660, 24), )

    
    originalTxnTime = property(__originalTxnTime.value, __originalTxnTime.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroupAndPartial
    
    # Attribute partial inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroupAndPartial
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __captureAmount.name() : __captureAmount,
        __card.name() : __card,
        __originalRefCode.name() : __originalRefCode,
        __originalAmount.name() : __originalAmount,
        __originalTxnTime.name() : __originalTxnTime
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_49 = CTD_ANON_49


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_50 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 668, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), 'billToAddress', '__httpwww_vantivcnp_comschema_CTD_ANON_50_httpwww_vantivcnp_comschemabillToAddress', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 77, 4), )

    
    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_vantivcnp_comschema_CTD_ANON_50_httpwww_vantivcnp_comschemaorderId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 672, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_50_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 673, 24), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}secondaryAmount uses Python identifier secondaryAmount
    __secondaryAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), 'secondaryAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_50_httpwww_vantivcnp_comschemasecondaryAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 674, 24), )

    
    secondaryAmount = property(__secondaryAmount.value, __secondaryAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}surchargeAmount uses Python identifier surchargeAmount
    __surchargeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), 'surchargeAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_50_httpwww_vantivcnp_comschemasurchargeAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 675, 24), )

    
    surchargeAmount = property(__surchargeAmount.value, __surchargeAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_vantivcnp_comschema_CTD_ANON_50_httpwww_vantivcnp_comschemaorderSource', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 676, 24), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}mpos uses Python identifier mpos
    __mpos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mpos'), 'mpos', '__httpwww_vantivcnp_comschema_CTD_ANON_50_httpwww_vantivcnp_comschemampos', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 679, 28), )

    
    mpos = property(__mpos.value, __mpos.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_vantivcnp_comschema_CTD_ANON_50_httpwww_vantivcnp_comschemacard', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 680, 28), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}token uses Python identifier token
    __token = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'token'), 'token', '__httpwww_vantivcnp_comschema_CTD_ANON_50_httpwww_vantivcnp_comschematoken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 681, 28), )

    
    token = property(__token.value, __token.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}paypage uses Python identifier paypage
    __paypage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paypage'), 'paypage', '__httpwww_vantivcnp_comschema_CTD_ANON_50_httpwww_vantivcnp_comschemapaypage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 682, 28), )

    
    paypage = property(__paypage.value, __paypage.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}taxType uses Python identifier taxType
    __taxType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'taxType'), 'taxType', '__httpwww_vantivcnp_comschema_CTD_ANON_50_httpwww_vantivcnp_comschemataxType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 685, 24), )

    
    taxType = property(__taxType.value, __taxType.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), 'merchantData', '__httpwww_vantivcnp_comschema_CTD_ANON_50_httpwww_vantivcnp_comschemamerchantData', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 690, 24), )

    
    merchantData = property(__merchantData.value, __merchantData.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}debtRepayment uses Python identifier debtRepayment
    __debtRepayment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'debtRepayment'), 'debtRepayment', '__httpwww_vantivcnp_comschema_CTD_ANON_50_httpwww_vantivcnp_comschemadebtRepayment', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 691, 24), )

    
    debtRepayment = property(__debtRepayment.value, __debtRepayment.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}processingType uses Python identifier processingType
    __processingType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processingType'), 'processingType', '__httpwww_vantivcnp_comschema_CTD_ANON_50_httpwww_vantivcnp_comschemaprocessingType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 692, 24), )

    
    processingType = property(__processingType.value, __processingType.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}merchantCategoryCode uses Python identifier merchantCategoryCode
    __merchantCategoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantCategoryCode'), 'merchantCategoryCode', '__httpwww_vantivcnp_comschema_CTD_ANON_50_httpwww_vantivcnp_comschemamerchantCategoryCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 693, 24), )

    
    merchantCategoryCode = property(__merchantCategoryCode.value, __merchantCategoryCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}businessIndicator uses Python identifier businessIndicator
    __businessIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'businessIndicator'), 'businessIndicator', '__httpwww_vantivcnp_comschema_CTD_ANON_50_httpwww_vantivcnp_comschemabusinessIndicator', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 694, 24), )

    
    businessIndicator = property(__businessIndicator.value, __businessIndicator.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}enhancedData uses Python identifier enhancedData
    __enhancedData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), 'enhancedData', '__httpwww_vantivcnp_comschema_CTD_ANON_50_httpwww_vantivcnp_comschemaenhancedData', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 991, 4), )

    
    enhancedData = property(__enhancedData.value, __enhancedData.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customBilling uses Python identifier customBilling
    __customBilling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), 'customBilling', '__httpwww_vantivcnp_comschema_CTD_ANON_50_httpwww_vantivcnp_comschemacustomBilling', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1076, 4), )

    
    customBilling = property(__customBilling.value, __customBilling.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}processingInstructions uses Python identifier processingInstructions
    __processingInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), 'processingInstructions', '__httpwww_vantivcnp_comschema_CTD_ANON_50_httpwww_vantivcnp_comschemaprocessingInstructions', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1090, 4), )

    
    processingInstructions = property(__processingInstructions.value, __processingInstructions.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pos'), 'pos', '__httpwww_vantivcnp_comschema_CTD_ANON_50_httpwww_vantivcnp_comschemapos', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1098, 4), )

    
    pos = property(__pos.value, __pos.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}lodgingInfo uses Python identifier lodgingInfo
    __lodgingInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'lodgingInfo'), 'lodgingInfo', '__httpwww_vantivcnp_comschema_CTD_ANON_50_httpwww_vantivcnp_comschemalodgingInfo', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2835, 4), )

    
    lodgingInfo = property(__lodgingInfo.value, __lodgingInfo.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __orderId.name() : __orderId,
        __amount.name() : __amount,
        __secondaryAmount.name() : __secondaryAmount,
        __surchargeAmount.name() : __surchargeAmount,
        __orderSource.name() : __orderSource,
        __mpos.name() : __mpos,
        __card.name() : __card,
        __token.name() : __token,
        __paypage.name() : __paypage,
        __taxType.name() : __taxType,
        __merchantData.name() : __merchantData,
        __debtRepayment.name() : __debtRepayment,
        __processingType.name() : __processingType,
        __merchantCategoryCode.name() : __merchantCategoryCode,
        __businessIndicator.name() : __businessIndicator,
        __enhancedData.name() : __enhancedData,
        __customBilling.name() : __customBilling,
        __processingInstructions.name() : __processingInstructions,
        __pos.name() : __pos,
        __lodgingInfo.name() : __lodgingInfo
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_50 = CTD_ANON_50


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_51 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 702, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), 'billToAddress', '__httpwww_vantivcnp_comschema_CTD_ANON_51_httpwww_vantivcnp_comschemabillToAddress', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 77, 4), )

    
    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_vantivcnp_comschema_CTD_ANON_51_httpwww_vantivcnp_comschemaorderId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 706, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_51_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 708, 24), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}secondaryAmount uses Python identifier secondaryAmount
    __secondaryAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), 'secondaryAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_51_httpwww_vantivcnp_comschemasecondaryAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 709, 24), )

    
    secondaryAmount = property(__secondaryAmount.value, __secondaryAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}surchargeAmount uses Python identifier surchargeAmount
    __surchargeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), 'surchargeAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_51_httpwww_vantivcnp_comschemasurchargeAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 710, 24), )

    
    surchargeAmount = property(__surchargeAmount.value, __surchargeAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_vantivcnp_comschema_CTD_ANON_51_httpwww_vantivcnp_comschemaorderSource', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 711, 24), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}mpos uses Python identifier mpos
    __mpos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mpos'), 'mpos', '__httpwww_vantivcnp_comschema_CTD_ANON_51_httpwww_vantivcnp_comschemampos', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 715, 28), )

    
    mpos = property(__mpos.value, __mpos.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_vantivcnp_comschema_CTD_ANON_51_httpwww_vantivcnp_comschemacard', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 716, 28), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}token uses Python identifier token
    __token = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'token'), 'token', '__httpwww_vantivcnp_comschema_CTD_ANON_51_httpwww_vantivcnp_comschematoken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 717, 28), )

    
    token = property(__token.value, __token.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}paypage uses Python identifier paypage
    __paypage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paypage'), 'paypage', '__httpwww_vantivcnp_comschema_CTD_ANON_51_httpwww_vantivcnp_comschemapaypage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 718, 28), )

    
    paypage = property(__paypage.value, __paypage.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}taxType uses Python identifier taxType
    __taxType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'taxType'), 'taxType', '__httpwww_vantivcnp_comschema_CTD_ANON_51_httpwww_vantivcnp_comschemataxType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 721, 24), )

    
    taxType = property(__taxType.value, __taxType.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), 'merchantData', '__httpwww_vantivcnp_comschema_CTD_ANON_51_httpwww_vantivcnp_comschemamerchantData', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 726, 24), )

    
    merchantData = property(__merchantData.value, __merchantData.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}debtRepayment uses Python identifier debtRepayment
    __debtRepayment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'debtRepayment'), 'debtRepayment', '__httpwww_vantivcnp_comschema_CTD_ANON_51_httpwww_vantivcnp_comschemadebtRepayment', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 727, 24), )

    
    debtRepayment = property(__debtRepayment.value, __debtRepayment.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}processingType uses Python identifier processingType
    __processingType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processingType'), 'processingType', '__httpwww_vantivcnp_comschema_CTD_ANON_51_httpwww_vantivcnp_comschemaprocessingType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 728, 24), )

    
    processingType = property(__processingType.value, __processingType.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalNetworkTransactionId uses Python identifier originalNetworkTransactionId
    __originalNetworkTransactionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalNetworkTransactionId'), 'originalNetworkTransactionId', '__httpwww_vantivcnp_comschema_CTD_ANON_51_httpwww_vantivcnp_comschemaoriginalNetworkTransactionId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 729, 24), )

    
    originalNetworkTransactionId = property(__originalNetworkTransactionId.value, __originalNetworkTransactionId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalTransactionAmount uses Python identifier originalTransactionAmount
    __originalTransactionAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalTransactionAmount'), 'originalTransactionAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_51_httpwww_vantivcnp_comschemaoriginalTransactionAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 730, 24), )

    
    originalTransactionAmount = property(__originalTransactionAmount.value, __originalTransactionAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}merchantCategoryCode uses Python identifier merchantCategoryCode
    __merchantCategoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantCategoryCode'), 'merchantCategoryCode', '__httpwww_vantivcnp_comschema_CTD_ANON_51_httpwww_vantivcnp_comschemamerchantCategoryCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 731, 24), )

    
    merchantCategoryCode = property(__merchantCategoryCode.value, __merchantCategoryCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}businessIndicator uses Python identifier businessIndicator
    __businessIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'businessIndicator'), 'businessIndicator', '__httpwww_vantivcnp_comschema_CTD_ANON_51_httpwww_vantivcnp_comschemabusinessIndicator', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 732, 24), )

    
    businessIndicator = property(__businessIndicator.value, __businessIndicator.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}shipToAddress uses Python identifier shipToAddress
    __shipToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress'), 'shipToAddress', '__httpwww_vantivcnp_comschema_CTD_ANON_51_httpwww_vantivcnp_comschemashipToAddress', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 942, 4), )

    
    shipToAddress = property(__shipToAddress.value, __shipToAddress.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}authInformation uses Python identifier authInformation
    __authInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authInformation'), 'authInformation', '__httpwww_vantivcnp_comschema_CTD_ANON_51_httpwww_vantivcnp_comschemaauthInformation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 944, 4), )

    
    authInformation = property(__authInformation.value, __authInformation.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}enhancedData uses Python identifier enhancedData
    __enhancedData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), 'enhancedData', '__httpwww_vantivcnp_comschema_CTD_ANON_51_httpwww_vantivcnp_comschemaenhancedData', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 991, 4), )

    
    enhancedData = property(__enhancedData.value, __enhancedData.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customBilling uses Python identifier customBilling
    __customBilling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), 'customBilling', '__httpwww_vantivcnp_comschema_CTD_ANON_51_httpwww_vantivcnp_comschemacustomBilling', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1076, 4), )

    
    customBilling = property(__customBilling.value, __customBilling.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}processingInstructions uses Python identifier processingInstructions
    __processingInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), 'processingInstructions', '__httpwww_vantivcnp_comschema_CTD_ANON_51_httpwww_vantivcnp_comschemaprocessingInstructions', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1090, 4), )

    
    processingInstructions = property(__processingInstructions.value, __processingInstructions.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pos'), 'pos', '__httpwww_vantivcnp_comschema_CTD_ANON_51_httpwww_vantivcnp_comschemapos', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1098, 4), )

    
    pos = property(__pos.value, __pos.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}lodgingInfo uses Python identifier lodgingInfo
    __lodgingInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'lodgingInfo'), 'lodgingInfo', '__httpwww_vantivcnp_comschema_CTD_ANON_51_httpwww_vantivcnp_comschemalodgingInfo', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2835, 4), )

    
    lodgingInfo = property(__lodgingInfo.value, __lodgingInfo.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __orderId.name() : __orderId,
        __amount.name() : __amount,
        __secondaryAmount.name() : __secondaryAmount,
        __surchargeAmount.name() : __surchargeAmount,
        __orderSource.name() : __orderSource,
        __mpos.name() : __mpos,
        __card.name() : __card,
        __token.name() : __token,
        __paypage.name() : __paypage,
        __taxType.name() : __taxType,
        __merchantData.name() : __merchantData,
        __debtRepayment.name() : __debtRepayment,
        __processingType.name() : __processingType,
        __originalNetworkTransactionId.name() : __originalNetworkTransactionId,
        __originalTransactionAmount.name() : __originalTransactionAmount,
        __merchantCategoryCode.name() : __merchantCategoryCode,
        __businessIndicator.name() : __businessIndicator,
        __shipToAddress.name() : __shipToAddress,
        __authInformation.name() : __authInformation,
        __enhancedData.name() : __enhancedData,
        __customBilling.name() : __customBilling,
        __processingInstructions.name() : __processingInstructions,
        __pos.name() : __pos,
        __lodgingInfo.name() : __lodgingInfo
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_51 = CTD_ANON_51


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_52 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 740, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), 'billToAddress', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemabillToAddress', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 77, 4), )

    
    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customerInfo uses Python identifier customerInfo
    __customerInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerInfo'), 'customerInfo', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemacustomerInfo', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 508, 4), )

    
    customerInfo = property(__customerInfo.value, __customerInfo.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 745, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemaorderId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 746, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 747, 24), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}secondaryAmount uses Python identifier secondaryAmount
    __secondaryAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), 'secondaryAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemasecondaryAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 748, 24), )

    
    secondaryAmount = property(__secondaryAmount.value, __secondaryAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}surchargeAmount uses Python identifier surchargeAmount
    __surchargeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), 'surchargeAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemasurchargeAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 749, 24), )

    
    surchargeAmount = property(__surchargeAmount.value, __surchargeAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemaorderSource', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 750, 24), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}mpos uses Python identifier mpos
    __mpos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mpos'), 'mpos', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemampos', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 755, 28), )

    
    mpos = property(__mpos.value, __mpos.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemacard', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 756, 28), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}paypal uses Python identifier paypal
    __paypal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paypal'), 'paypal', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemapaypal', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 757, 28), )

    
    paypal = property(__paypal.value, __paypal.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}token uses Python identifier token
    __token = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'token'), 'token', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschematoken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 758, 28), )

    
    token = property(__token.value, __token.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}paypage uses Python identifier paypage
    __paypage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paypage'), 'paypage', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemapaypage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 759, 28), )

    
    paypage = property(__paypage.value, __paypage.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}applepay uses Python identifier applepay
    __applepay = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'applepay'), 'applepay', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemaapplepay', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 760, 28), )

    
    applepay = property(__applepay.value, __applepay.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}sepaDirectDebit uses Python identifier sepaDirectDebit
    __sepaDirectDebit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sepaDirectDebit'), 'sepaDirectDebit', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemasepaDirectDebit', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 761, 28), )

    
    sepaDirectDebit = property(__sepaDirectDebit.value, __sepaDirectDebit.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}ideal uses Python identifier ideal
    __ideal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ideal'), 'ideal', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemaideal', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 762, 28), )

    
    ideal = property(__ideal.value, __ideal.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}giropay uses Python identifier giropay
    __giropay = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giropay'), 'giropay', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemagiropay', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 763, 28), )

    
    giropay = property(__giropay.value, __giropay.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}sofort uses Python identifier sofort
    __sofort = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sofort'), 'sofort', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemasofort', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 764, 28), )

    
    sofort = property(__sofort.value, __sofort.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fraudCheck uses Python identifier fraudCheck
    __fraudCheck = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudCheck'), 'fraudCheck', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemafraudCheck', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 769, 28), )

    
    fraudCheck = property(__fraudCheck.value, __fraudCheck.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cardholderAuthentication uses Python identifier cardholderAuthentication
    __cardholderAuthentication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardholderAuthentication'), 'cardholderAuthentication', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemacardholderAuthentication', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 770, 28), )

    
    cardholderAuthentication = property(__cardholderAuthentication.value, __cardholderAuthentication.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}taxType uses Python identifier taxType
    __taxType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'taxType'), 'taxType', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemataxType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 773, 24), )

    
    taxType = property(__taxType.value, __taxType.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}payPalOrderComplete uses Python identifier payPalOrderComplete
    __payPalOrderComplete = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'payPalOrderComplete'), 'payPalOrderComplete', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemapayPalOrderComplete', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 777, 24), )

    
    payPalOrderComplete = property(__payPalOrderComplete.value, __payPalOrderComplete.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}payPalNotes uses Python identifier payPalNotes
    __payPalNotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'payPalNotes'), 'payPalNotes', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemapayPalNotes', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 778, 24), )

    
    payPalNotes = property(__payPalNotes.value, __payPalNotes.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}allowPartialAuth uses Python identifier allowPartialAuth
    __allowPartialAuth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'allowPartialAuth'), 'allowPartialAuth', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemaallowPartialAuth', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 779, 24), )

    
    allowPartialAuth = property(__allowPartialAuth.value, __allowPartialAuth.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}filtering uses Python identifier filtering
    __filtering = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'filtering'), 'filtering', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemafiltering', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 782, 24), )

    
    filtering = property(__filtering.value, __filtering.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), 'merchantData', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemamerchantData', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 783, 24), )

    
    merchantData = property(__merchantData.value, __merchantData.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}recyclingRequest uses Python identifier recyclingRequest
    __recyclingRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recyclingRequest'), 'recyclingRequest', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemarecyclingRequest', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 784, 24), )

    
    recyclingRequest = property(__recyclingRequest.value, __recyclingRequest.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fraudFilterOverride uses Python identifier fraudFilterOverride
    __fraudFilterOverride = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudFilterOverride'), 'fraudFilterOverride', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemafraudFilterOverride', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 785, 24), )

    
    fraudFilterOverride = property(__fraudFilterOverride.value, __fraudFilterOverride.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}recurringRequest uses Python identifier recurringRequest
    __recurringRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recurringRequest'), 'recurringRequest', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemarecurringRequest', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 786, 24), )

    
    recurringRequest = property(__recurringRequest.value, __recurringRequest.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cnpInternalRecurringRequest uses Python identifier cnpInternalRecurringRequest
    __cnpInternalRecurringRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpInternalRecurringRequest'), 'cnpInternalRecurringRequest', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemacnpInternalRecurringRequest', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 787, 24), )

    
    cnpInternalRecurringRequest = property(__cnpInternalRecurringRequest.value, __cnpInternalRecurringRequest.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}debtRepayment uses Python identifier debtRepayment
    __debtRepayment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'debtRepayment'), 'debtRepayment', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemadebtRepayment', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 788, 24), )

    
    debtRepayment = property(__debtRepayment.value, __debtRepayment.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}advancedFraudChecks uses Python identifier advancedFraudChecks
    __advancedFraudChecks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudChecks'), 'advancedFraudChecks', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemaadvancedFraudChecks', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 789, 24), )

    
    advancedFraudChecks = property(__advancedFraudChecks.value, __advancedFraudChecks.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}processingType uses Python identifier processingType
    __processingType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processingType'), 'processingType', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemaprocessingType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 791, 24), )

    
    processingType = property(__processingType.value, __processingType.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalNetworkTransactionId uses Python identifier originalNetworkTransactionId
    __originalNetworkTransactionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalNetworkTransactionId'), 'originalNetworkTransactionId', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemaoriginalNetworkTransactionId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 792, 24), )

    
    originalNetworkTransactionId = property(__originalNetworkTransactionId.value, __originalNetworkTransactionId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalTransactionAmount uses Python identifier originalTransactionAmount
    __originalTransactionAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalTransactionAmount'), 'originalTransactionAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemaoriginalTransactionAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 793, 24), )

    
    originalTransactionAmount = property(__originalTransactionAmount.value, __originalTransactionAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}pinlessDebitRequest uses Python identifier pinlessDebitRequest
    __pinlessDebitRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pinlessDebitRequest'), 'pinlessDebitRequest', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemapinlessDebitRequest', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 794, 24), )

    
    pinlessDebitRequest = property(__pinlessDebitRequest.value, __pinlessDebitRequest.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}skipRealtimeAU uses Python identifier skipRealtimeAU
    __skipRealtimeAU = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'skipRealtimeAU'), 'skipRealtimeAU', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemaskipRealtimeAU', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 795, 24), )

    
    skipRealtimeAU = property(__skipRealtimeAU.value, __skipRealtimeAU.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}merchantCategoryCode uses Python identifier merchantCategoryCode
    __merchantCategoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantCategoryCode'), 'merchantCategoryCode', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemamerchantCategoryCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 796, 24), )

    
    merchantCategoryCode = property(__merchantCategoryCode.value, __merchantCategoryCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}businessIndicator uses Python identifier businessIndicator
    __businessIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'businessIndicator'), 'businessIndicator', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemabusinessIndicator', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 797, 24), )

    
    businessIndicator = property(__businessIndicator.value, __businessIndicator.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}shipToAddress uses Python identifier shipToAddress
    __shipToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress'), 'shipToAddress', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemashipToAddress', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 942, 4), )

    
    shipToAddress = property(__shipToAddress.value, __shipToAddress.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}healthcareIIAS uses Python identifier healthcareIIAS
    __healthcareIIAS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'healthcareIIAS'), 'healthcareIIAS', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemahealthcareIIAS', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 969, 4), )

    
    healthcareIIAS = property(__healthcareIIAS.value, __healthcareIIAS.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}enhancedData uses Python identifier enhancedData
    __enhancedData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), 'enhancedData', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemaenhancedData', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 991, 4), )

    
    enhancedData = property(__enhancedData.value, __enhancedData.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customBilling uses Python identifier customBilling
    __customBilling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), 'customBilling', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemacustomBilling', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1076, 4), )

    
    customBilling = property(__customBilling.value, __customBilling.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}processingInstructions uses Python identifier processingInstructions
    __processingInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), 'processingInstructions', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemaprocessingInstructions', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1090, 4), )

    
    processingInstructions = property(__processingInstructions.value, __processingInstructions.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pos'), 'pos', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemapos', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1098, 4), )

    
    pos = property(__pos.value, __pos.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}wallet uses Python identifier wallet
    __wallet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'wallet'), 'wallet', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemawallet', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2151, 4), )

    
    wallet = property(__wallet.value, __wallet.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}lodgingInfo uses Python identifier lodgingInfo
    __lodgingInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'lodgingInfo'), 'lodgingInfo', '__httpwww_vantivcnp_comschema_CTD_ANON_52_httpwww_vantivcnp_comschemalodgingInfo', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2835, 4), )

    
    lodgingInfo = property(__lodgingInfo.value, __lodgingInfo.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __customerInfo.name() : __customerInfo,
        __cnpTxnId.name() : __cnpTxnId,
        __orderId.name() : __orderId,
        __amount.name() : __amount,
        __secondaryAmount.name() : __secondaryAmount,
        __surchargeAmount.name() : __surchargeAmount,
        __orderSource.name() : __orderSource,
        __mpos.name() : __mpos,
        __card.name() : __card,
        __paypal.name() : __paypal,
        __token.name() : __token,
        __paypage.name() : __paypage,
        __applepay.name() : __applepay,
        __sepaDirectDebit.name() : __sepaDirectDebit,
        __ideal.name() : __ideal,
        __giropay.name() : __giropay,
        __sofort.name() : __sofort,
        __fraudCheck.name() : __fraudCheck,
        __cardholderAuthentication.name() : __cardholderAuthentication,
        __taxType.name() : __taxType,
        __payPalOrderComplete.name() : __payPalOrderComplete,
        __payPalNotes.name() : __payPalNotes,
        __allowPartialAuth.name() : __allowPartialAuth,
        __filtering.name() : __filtering,
        __merchantData.name() : __merchantData,
        __recyclingRequest.name() : __recyclingRequest,
        __fraudFilterOverride.name() : __fraudFilterOverride,
        __recurringRequest.name() : __recurringRequest,
        __cnpInternalRecurringRequest.name() : __cnpInternalRecurringRequest,
        __debtRepayment.name() : __debtRepayment,
        __advancedFraudChecks.name() : __advancedFraudChecks,
        __processingType.name() : __processingType,
        __originalNetworkTransactionId.name() : __originalNetworkTransactionId,
        __originalTransactionAmount.name() : __originalTransactionAmount,
        __pinlessDebitRequest.name() : __pinlessDebitRequest,
        __skipRealtimeAU.name() : __skipRealtimeAU,
        __merchantCategoryCode.name() : __merchantCategoryCode,
        __businessIndicator.name() : __businessIndicator,
        __shipToAddress.name() : __shipToAddress,
        __healthcareIIAS.name() : __healthcareIIAS,
        __enhancedData.name() : __enhancedData,
        __customBilling.name() : __customBilling,
        __processingInstructions.name() : __processingInstructions,
        __pos.name() : __pos,
        __wallet.name() : __wallet,
        __lodgingInfo.name() : __lodgingInfo
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_52 = CTD_ANON_52


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_53 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 806, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), 'billToAddress', '__httpwww_vantivcnp_comschema_CTD_ANON_53_httpwww_vantivcnp_comschemabillToAddress', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 77, 4), )

    
    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_53_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 812, 32), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_53_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 813, 32), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}secondaryAmount uses Python identifier secondaryAmount
    __secondaryAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), 'secondaryAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_53_httpwww_vantivcnp_comschemasecondaryAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 814, 32), )

    
    secondaryAmount = property(__secondaryAmount.value, __secondaryAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}surchargeAmount uses Python identifier surchargeAmount
    __surchargeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), 'surchargeAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_53_httpwww_vantivcnp_comschemasurchargeAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 815, 32), )

    
    surchargeAmount = property(__surchargeAmount.value, __surchargeAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}pin uses Python identifier pin
    __pin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pin'), 'pin', '__httpwww_vantivcnp_comschema_CTD_ANON_53_httpwww_vantivcnp_comschemapin', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 821, 32), )

    
    pin = property(__pin.value, __pin.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_vantivcnp_comschema_CTD_ANON_53_httpwww_vantivcnp_comschemaorderId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 824, 32), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_vantivcnp_comschema_CTD_ANON_53_httpwww_vantivcnp_comschemaorderSource', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 828, 32), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}mpos uses Python identifier mpos
    __mpos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mpos'), 'mpos', '__httpwww_vantivcnp_comschema_CTD_ANON_53_httpwww_vantivcnp_comschemampos', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 831, 36), )

    
    mpos = property(__mpos.value, __mpos.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_vantivcnp_comschema_CTD_ANON_53_httpwww_vantivcnp_comschemacard', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 832, 36), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}token uses Python identifier token
    __token = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'token'), 'token', '__httpwww_vantivcnp_comschema_CTD_ANON_53_httpwww_vantivcnp_comschematoken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 833, 36), )

    
    token = property(__token.value, __token.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}paypage uses Python identifier paypage
    __paypage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paypage'), 'paypage', '__httpwww_vantivcnp_comschema_CTD_ANON_53_httpwww_vantivcnp_comschemapaypage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 834, 36), )

    
    paypage = property(__paypage.value, __paypage.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}paypal uses Python identifier paypal
    __paypal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paypal'), 'paypal', '__httpwww_vantivcnp_comschema_CTD_ANON_53_httpwww_vantivcnp_comschemapaypal', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 835, 36), )

    
    paypal = property(__paypal.value, __paypal.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}taxType uses Python identifier taxType
    __taxType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'taxType'), 'taxType', '__httpwww_vantivcnp_comschema_CTD_ANON_53_httpwww_vantivcnp_comschemataxType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 838, 32), )

    
    taxType = property(__taxType.value, __taxType.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), 'merchantData', '__httpwww_vantivcnp_comschema_CTD_ANON_53_httpwww_vantivcnp_comschemamerchantData', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 843, 32), )

    
    merchantData = property(__merchantData.value, __merchantData.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}merchantCategoryCode uses Python identifier merchantCategoryCode
    __merchantCategoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantCategoryCode'), 'merchantCategoryCode', '__httpwww_vantivcnp_comschema_CTD_ANON_53_httpwww_vantivcnp_comschemamerchantCategoryCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 844, 32), )

    
    merchantCategoryCode = property(__merchantCategoryCode.value, __merchantCategoryCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}payPalNotes uses Python identifier payPalNotes
    __payPalNotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'payPalNotes'), 'payPalNotes', '__httpwww_vantivcnp_comschema_CTD_ANON_53_httpwww_vantivcnp_comschemapayPalNotes', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 847, 24), )

    
    payPalNotes = property(__payPalNotes.value, __payPalNotes.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}actionReason uses Python identifier actionReason
    __actionReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'actionReason'), 'actionReason', '__httpwww_vantivcnp_comschema_CTD_ANON_53_httpwww_vantivcnp_comschemaactionReason', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 848, 24), )

    
    actionReason = property(__actionReason.value, __actionReason.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}businessIndicator uses Python identifier businessIndicator
    __businessIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'businessIndicator'), 'businessIndicator', '__httpwww_vantivcnp_comschema_CTD_ANON_53_httpwww_vantivcnp_comschemabusinessIndicator', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 849, 24), )

    
    businessIndicator = property(__businessIndicator.value, __businessIndicator.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}enhancedData uses Python identifier enhancedData
    __enhancedData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), 'enhancedData', '__httpwww_vantivcnp_comschema_CTD_ANON_53_httpwww_vantivcnp_comschemaenhancedData', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 991, 4), )

    
    enhancedData = property(__enhancedData.value, __enhancedData.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customBilling uses Python identifier customBilling
    __customBilling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), 'customBilling', '__httpwww_vantivcnp_comschema_CTD_ANON_53_httpwww_vantivcnp_comschemacustomBilling', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1076, 4), )

    
    customBilling = property(__customBilling.value, __customBilling.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}processingInstructions uses Python identifier processingInstructions
    __processingInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), 'processingInstructions', '__httpwww_vantivcnp_comschema_CTD_ANON_53_httpwww_vantivcnp_comschemaprocessingInstructions', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1090, 4), )

    
    processingInstructions = property(__processingInstructions.value, __processingInstructions.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pos'), 'pos', '__httpwww_vantivcnp_comschema_CTD_ANON_53_httpwww_vantivcnp_comschemapos', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1098, 4), )

    
    pos = property(__pos.value, __pos.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}lodgingInfo uses Python identifier lodgingInfo
    __lodgingInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'lodgingInfo'), 'lodgingInfo', '__httpwww_vantivcnp_comschema_CTD_ANON_53_httpwww_vantivcnp_comschemalodgingInfo', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2835, 4), )

    
    lodgingInfo = property(__lodgingInfo.value, __lodgingInfo.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __cnpTxnId.name() : __cnpTxnId,
        __amount.name() : __amount,
        __secondaryAmount.name() : __secondaryAmount,
        __surchargeAmount.name() : __surchargeAmount,
        __pin.name() : __pin,
        __orderId.name() : __orderId,
        __orderSource.name() : __orderSource,
        __mpos.name() : __mpos,
        __card.name() : __card,
        __token.name() : __token,
        __paypage.name() : __paypage,
        __paypal.name() : __paypal,
        __taxType.name() : __taxType,
        __merchantData.name() : __merchantData,
        __merchantCategoryCode.name() : __merchantCategoryCode,
        __payPalNotes.name() : __payPalNotes,
        __actionReason.name() : __actionReason,
        __businessIndicator.name() : __businessIndicator,
        __enhancedData.name() : __enhancedData,
        __customBilling.name() : __customBilling,
        __processingInstructions.name() : __processingInstructions,
        __pos.name() : __pos,
        __lodgingInfo.name() : __lodgingInfo
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_53 = CTD_ANON_53


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_54 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 857, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_54_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 863, 32), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}creditAmount uses Python identifier creditAmount
    __creditAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'creditAmount'), 'creditAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_54_httpwww_vantivcnp_comschemacreditAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 864, 32), )

    
    creditAmount = property(__creditAmount.value, __creditAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_vantivcnp_comschema_CTD_ANON_54_httpwww_vantivcnp_comschemacard', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 865, 32), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_vantivcnp_comschema_CTD_ANON_54_httpwww_vantivcnp_comschemaorderId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 868, 32), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_vantivcnp_comschema_CTD_ANON_54_httpwww_vantivcnp_comschemaorderSource', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 870, 32), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __creditAmount.name() : __creditAmount,
        __card.name() : __card,
        __orderId.name() : __orderId,
        __orderSource.name() : __orderSource
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_54 = CTD_ANON_54


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_55 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 881, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_vantivcnp_comschema_CTD_ANON_55_httpwww_vantivcnp_comschemaorderId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 885, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_55_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 886, 24), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_vantivcnp_comschema_CTD_ANON_55_httpwww_vantivcnp_comschemaorderSource', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 887, 24), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_vantivcnp_comschema_CTD_ANON_55_httpwww_vantivcnp_comschemacard', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 889, 28), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}virtualGiftCard uses Python identifier virtualGiftCard
    __virtualGiftCard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'virtualGiftCard'), 'virtualGiftCard', '__httpwww_vantivcnp_comschema_CTD_ANON_55_httpwww_vantivcnp_comschemavirtualGiftCard', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 890, 28), )

    
    virtualGiftCard = property(__virtualGiftCard.value, __virtualGiftCard.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __orderId.name() : __orderId,
        __amount.name() : __amount,
        __orderSource.name() : __orderSource,
        __card.name() : __card,
        __virtualGiftCard.name() : __virtualGiftCard
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_55 = CTD_ANON_55


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_56 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 899, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_vantivcnp_comschema_CTD_ANON_56_httpwww_vantivcnp_comschemaorderId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 903, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_vantivcnp_comschema_CTD_ANON_56_httpwww_vantivcnp_comschemaorderSource', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 904, 24), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_vantivcnp_comschema_CTD_ANON_56_httpwww_vantivcnp_comschemacard', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 905, 24), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __orderId.name() : __orderId,
        __orderSource.name() : __orderSource,
        __card.name() : __card
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_56 = CTD_ANON_56


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_57 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 913, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_vantivcnp_comschema_CTD_ANON_57_httpwww_vantivcnp_comschemaorderId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 917, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_57_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 918, 24), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_vantivcnp_comschema_CTD_ANON_57_httpwww_vantivcnp_comschemaorderSource', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 919, 24), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_vantivcnp_comschema_CTD_ANON_57_httpwww_vantivcnp_comschemacard', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 920, 24), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __orderId.name() : __orderId,
        __amount.name() : __amount,
        __orderSource.name() : __orderSource,
        __card.name() : __card
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_57 = CTD_ANON_57


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_58 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 928, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_vantivcnp_comschema_CTD_ANON_58_httpwww_vantivcnp_comschemaorderId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 932, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_58_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 933, 24), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_vantivcnp_comschema_CTD_ANON_58_httpwww_vantivcnp_comschemaorderSource', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 934, 24), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_vantivcnp_comschema_CTD_ANON_58_httpwww_vantivcnp_comschemacard', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 935, 24), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __orderId.name() : __orderId,
        __amount.name() : __amount,
        __orderSource.name() : __orderSource,
        __card.name() : __card
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_58 = CTD_ANON_58


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_59 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 956, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_vantivcnp_comschema_CTD_ANON_59_httpwww_vantivcnp_comschemaorderId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 960, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_vantivcnp_comschema_CTD_ANON_59_httpwww_vantivcnp_comschemaorderSource', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 961, 24), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_vantivcnp_comschema_CTD_ANON_59_httpwww_vantivcnp_comschemacard', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 962, 24), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __orderId.name() : __orderId,
        __orderSource.name() : __orderSource,
        __card.name() : __card
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_59 = CTD_ANON_59


# Complex type {http://www.vantivcnp.com/schema}registerTokenRequestType with content type ELEMENT_ONLY
class registerTokenRequestType (transactionTypeWithReportGroup):
    """Complex type {http://www.vantivcnp.com/schema}registerTokenRequestType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'registerTokenRequestType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1112, 4)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}encryptionKeyId uses Python identifier encryptionKeyId
    __encryptionKeyId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'encryptionKeyId'), 'encryptionKeyId', '__httpwww_vantivcnp_comschema_registerTokenRequestType_httpwww_vantivcnp_comschemaencryptionKeyId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1116, 20), )

    
    encryptionKeyId = property(__encryptionKeyId.value, __encryptionKeyId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_vantivcnp_comschema_registerTokenRequestType_httpwww_vantivcnp_comschemaorderId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1117, 20), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}mpos uses Python identifier mpos
    __mpos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mpos'), 'mpos', '__httpwww_vantivcnp_comschema_registerTokenRequestType_httpwww_vantivcnp_comschemampos', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1119, 24), )

    
    mpos = property(__mpos.value, __mpos.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}accountNumber uses Python identifier accountNumber
    __accountNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountNumber'), 'accountNumber', '__httpwww_vantivcnp_comschema_registerTokenRequestType_httpwww_vantivcnp_comschemaaccountNumber', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1120, 24), )

    
    accountNumber = property(__accountNumber.value, __accountNumber.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}encryptedAccountNumber uses Python identifier encryptedAccountNumber
    __encryptedAccountNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'encryptedAccountNumber'), 'encryptedAccountNumber', '__httpwww_vantivcnp_comschema_registerTokenRequestType_httpwww_vantivcnp_comschemaencryptedAccountNumber', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1121, 24), )

    
    encryptedAccountNumber = property(__encryptedAccountNumber.value, __encryptedAccountNumber.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}echeckForToken uses Python identifier echeckForToken
    __echeckForToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'echeckForToken'), 'echeckForToken', '__httpwww_vantivcnp_comschema_registerTokenRequestType_httpwww_vantivcnp_comschemaecheckForToken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1122, 24), )

    
    echeckForToken = property(__echeckForToken.value, __echeckForToken.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}paypageRegistrationId uses Python identifier paypageRegistrationId
    __paypageRegistrationId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paypageRegistrationId'), 'paypageRegistrationId', '__httpwww_vantivcnp_comschema_registerTokenRequestType_httpwww_vantivcnp_comschemapaypageRegistrationId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1123, 24), )

    
    paypageRegistrationId = property(__paypageRegistrationId.value, __paypageRegistrationId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}applepay uses Python identifier applepay
    __applepay = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'applepay'), 'applepay', '__httpwww_vantivcnp_comschema_registerTokenRequestType_httpwww_vantivcnp_comschemaapplepay', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1124, 24), )

    
    applepay = property(__applepay.value, __applepay.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cardValidationNum uses Python identifier cardValidationNum
    __cardValidationNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum'), 'cardValidationNum', '__httpwww_vantivcnp_comschema_registerTokenRequestType_httpwww_vantivcnp_comschemacardValidationNum', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1127, 24), )

    
    cardValidationNum = property(__cardValidationNum.value, __cardValidationNum.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}encryptedCardValidationNum uses Python identifier encryptedCardValidationNum
    __encryptedCardValidationNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'encryptedCardValidationNum'), 'encryptedCardValidationNum', '__httpwww_vantivcnp_comschema_registerTokenRequestType_httpwww_vantivcnp_comschemaencryptedCardValidationNum', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1128, 24), )

    
    encryptedCardValidationNum = property(__encryptedCardValidationNum.value, __encryptedCardValidationNum.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __encryptionKeyId.name() : __encryptionKeyId,
        __orderId.name() : __orderId,
        __mpos.name() : __mpos,
        __accountNumber.name() : __accountNumber,
        __encryptedAccountNumber.name() : __encryptedAccountNumber,
        __echeckForToken.name() : __echeckForToken,
        __paypageRegistrationId.name() : __paypageRegistrationId,
        __applepay.name() : __applepay,
        __cardValidationNum.name() : __cardValidationNum,
        __encryptedCardValidationNum.name() : __encryptedCardValidationNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.registerTokenRequestType = registerTokenRequestType
Namespace.addCategoryObject('typeBinding', 'registerTokenRequestType', registerTokenRequestType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_60 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1136, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_60_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1140, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cnpToken uses Python identifier cnpToken
    __cnpToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpToken'), 'cnpToken', '__httpwww_vantivcnp_comschema_CTD_ANON_60_httpwww_vantivcnp_comschemacnpToken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1141, 24), )

    
    cnpToken = property(__cnpToken.value, __cnpToken.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}bin uses Python identifier bin
    __bin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bin'), 'bin', '__httpwww_vantivcnp_comschema_CTD_ANON_60_httpwww_vantivcnp_comschemabin', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1142, 24), )

    
    bin = property(__bin.value, __bin.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__httpwww_vantivcnp_comschema_CTD_ANON_60_httpwww_vantivcnp_comschematype', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1143, 24), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}eCheckAccountSuffix uses Python identifier eCheckAccountSuffix
    __eCheckAccountSuffix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eCheckAccountSuffix'), 'eCheckAccountSuffix', '__httpwww_vantivcnp_comschema_CTD_ANON_60_httpwww_vantivcnp_comschemaeCheckAccountSuffix', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1144, 24), )

    
    eCheckAccountSuffix = property(__eCheckAccountSuffix.value, __eCheckAccountSuffix.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_60_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1145, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_60_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1146, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_60_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1147, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_60_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1148, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}accountRangeId uses Python identifier accountRangeId
    __accountRangeId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountRangeId'), 'accountRangeId', '__httpwww_vantivcnp_comschema_CTD_ANON_60_httpwww_vantivcnp_comschemaaccountRangeId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1151, 24), )

    
    accountRangeId = property(__accountRangeId.value, __accountRangeId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}applepayResponse uses Python identifier applepayResponse
    __applepayResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'applepayResponse'), 'applepayResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_60_httpwww_vantivcnp_comschemaapplepayResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2178, 4), )

    
    applepayResponse = property(__applepayResponse.value, __applepayResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}androidpayResponse uses Python identifier androidpayResponse
    __androidpayResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'androidpayResponse'), 'androidpayResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_60_httpwww_vantivcnp_comschemaandroidpayResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2194, 4), )

    
    androidpayResponse = property(__androidpayResponse.value, __androidpayResponse.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __cnpToken.name() : __cnpToken,
        __bin.name() : __bin,
        __type.name() : __type,
        __eCheckAccountSuffix.name() : __eCheckAccountSuffix,
        __response.name() : __response,
        __message.name() : __message,
        __location.name() : __location,
        __responseTime.name() : __responseTime,
        __accountRangeId.name() : __accountRangeId,
        __applepayResponse.name() : __applepayResponse,
        __androidpayResponse.name() : __androidpayResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_60 = CTD_ANON_60


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_61 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1162, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_61_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1166, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_vantivcnp_comschema_CTD_ANON_61_httpwww_vantivcnp_comschemaorderId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1167, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_61_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1168, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_61_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1169, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cardProductId uses Python identifier cardProductId
    __cardProductId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardProductId'), 'cardProductId', '__httpwww_vantivcnp_comschema_CTD_ANON_61_httpwww_vantivcnp_comschemacardProductId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1170, 24), )

    
    cardProductId = property(__cardProductId.value, __cardProductId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_61_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1172, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_61_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1173, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_61_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1174, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}authCode uses Python identifier authCode
    __authCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authCode'), 'authCode', '__httpwww_vantivcnp_comschema_CTD_ANON_61_httpwww_vantivcnp_comschemaauthCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1175, 24), )

    
    authCode = property(__authCode.value, __authCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}authorizationResponseSubCode uses Python identifier authorizationResponseSubCode
    __authorizationResponseSubCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authorizationResponseSubCode'), 'authorizationResponseSubCode', '__httpwww_vantivcnp_comschema_CTD_ANON_61_httpwww_vantivcnp_comschemaauthorizationResponseSubCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1176, 24), )

    
    authorizationResponseSubCode = property(__authorizationResponseSubCode.value, __authorizationResponseSubCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}approvedAmount uses Python identifier approvedAmount
    __approvedAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'approvedAmount'), 'approvedAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_61_httpwww_vantivcnp_comschemaapprovedAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1177, 24), )

    
    approvedAmount = property(__approvedAmount.value, __approvedAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}accountInformation uses Python identifier accountInformation
    __accountInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountInformation'), 'accountInformation', '__httpwww_vantivcnp_comschema_CTD_ANON_61_httpwww_vantivcnp_comschemaaccountInformation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1178, 24), )

    
    accountInformation = property(__accountInformation.value, __accountInformation.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), 'tokenResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_61_httpwww_vantivcnp_comschematokenResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1182, 24), )

    
    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}recyclingResponse uses Python identifier recyclingResponse
    __recyclingResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recyclingResponse'), 'recyclingResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_61_httpwww_vantivcnp_comschemarecyclingResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1184, 24), )

    
    recyclingResponse = property(__recyclingResponse.value, __recyclingResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}recurringResponse uses Python identifier recurringResponse
    __recurringResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recurringResponse'), 'recurringResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_61_httpwww_vantivcnp_comschemarecurringResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1185, 24), )

    
    recurringResponse = property(__recurringResponse.value, __recurringResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cardSuffix uses Python identifier cardSuffix
    __cardSuffix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardSuffix'), 'cardSuffix', '__httpwww_vantivcnp_comschema_CTD_ANON_61_httpwww_vantivcnp_comschemacardSuffix', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1189, 24), )

    
    cardSuffix = property(__cardSuffix.value, __cardSuffix.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}networkTransactionId uses Python identifier networkTransactionId
    __networkTransactionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'networkTransactionId'), 'networkTransactionId', '__httpwww_vantivcnp_comschema_CTD_ANON_61_httpwww_vantivcnp_comschemanetworkTransactionId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1192, 24), )

    
    networkTransactionId = property(__networkTransactionId.value, __networkTransactionId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}paymentAccountReferenceNumber uses Python identifier paymentAccountReferenceNumber
    __paymentAccountReferenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paymentAccountReferenceNumber'), 'paymentAccountReferenceNumber', '__httpwww_vantivcnp_comschema_CTD_ANON_61_httpwww_vantivcnp_comschemapaymentAccountReferenceNumber', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1193, 24), )

    
    paymentAccountReferenceNumber = property(__paymentAccountReferenceNumber.value, __paymentAccountReferenceNumber.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}enhancedAuthResponse uses Python identifier enhancedAuthResponse
    __enhancedAuthResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'enhancedAuthResponse'), 'enhancedAuthResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_61_httpwww_vantivcnp_comschemaenhancedAuthResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1260, 4), )

    
    enhancedAuthResponse = property(__enhancedAuthResponse.value, __enhancedAuthResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_vantivcnp_comschema_CTD_ANON_61_httpwww_vantivcnp_comschemafraudResult', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_61_httpwww_vantivcnp_comschemagiftCardResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}accountUpdater uses Python identifier accountUpdater
    __accountUpdater = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), 'accountUpdater', '__httpwww_vantivcnp_comschema_CTD_ANON_61_httpwww_vantivcnp_comschemaaccountUpdater', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1927, 4), )

    
    accountUpdater = property(__accountUpdater.value, __accountUpdater.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}applepayResponse uses Python identifier applepayResponse
    __applepayResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'applepayResponse'), 'applepayResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_61_httpwww_vantivcnp_comschemaapplepayResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2178, 4), )

    
    applepayResponse = property(__applepayResponse.value, __applepayResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}androidpayResponse uses Python identifier androidpayResponse
    __androidpayResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'androidpayResponse'), 'androidpayResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_61_httpwww_vantivcnp_comschemaandroidpayResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2194, 4), )

    
    androidpayResponse = property(__androidpayResponse.value, __androidpayResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}pinlessDebitResponse uses Python identifier pinlessDebitResponse
    __pinlessDebitResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pinlessDebitResponse'), 'pinlessDebitResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_61_httpwww_vantivcnp_comschemapinlessDebitResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2619, 4), )

    
    pinlessDebitResponse = property(__pinlessDebitResponse.value, __pinlessDebitResponse.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __cardProductId.name() : __cardProductId,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location,
        __authCode.name() : __authCode,
        __authorizationResponseSubCode.name() : __authorizationResponseSubCode,
        __approvedAmount.name() : __approvedAmount,
        __accountInformation.name() : __accountInformation,
        __tokenResponse.name() : __tokenResponse,
        __recyclingResponse.name() : __recyclingResponse,
        __recurringResponse.name() : __recurringResponse,
        __cardSuffix.name() : __cardSuffix,
        __networkTransactionId.name() : __networkTransactionId,
        __paymentAccountReferenceNumber.name() : __paymentAccountReferenceNumber,
        __enhancedAuthResponse.name() : __enhancedAuthResponse,
        __fraudResult.name() : __fraudResult,
        __giftCardResponse.name() : __giftCardResponse,
        __accountUpdater.name() : __accountUpdater,
        __applepayResponse.name() : __applepayResponse,
        __androidpayResponse.name() : __androidpayResponse,
        __pinlessDebitResponse.name() : __pinlessDebitResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_61 = CTD_ANON_61


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_62 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1284, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_62_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1288, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_62_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1289, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_62_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1290, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_62_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1292, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_62_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1293, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_62_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1294, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}pinlessDebitResponse uses Python identifier pinlessDebitResponse
    __pinlessDebitResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pinlessDebitResponse'), 'pinlessDebitResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_62_httpwww_vantivcnp_comschemapinlessDebitResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2619, 4), )

    
    pinlessDebitResponse = property(__pinlessDebitResponse.value, __pinlessDebitResponse.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location,
        __pinlessDebitResponse.name() : __pinlessDebitResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_62 = CTD_ANON_62


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_63 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1304, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_63_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1308, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_63_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1309, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_63_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1310, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_63_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1312, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_63_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1313, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_63_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1314, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_63_httpwww_vantivcnp_comschemagiftCardResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_63 = CTD_ANON_63


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_64 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1323, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_64_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1327, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_64_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1328, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_64_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1329, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_64_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1331, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_64_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1332, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_64_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1333, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_64_httpwww_vantivcnp_comschemagiftCardResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_64 = CTD_ANON_64


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_65 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1343, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_65_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1347, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_65_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1348, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_65_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1349, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_65_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1351, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_65_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1352, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_65_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1353, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_65_httpwww_vantivcnp_comschemagiftCardResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_65 = CTD_ANON_65


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_66 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1363, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_66_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1367, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_66_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1368, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_66_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1369, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_66_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1371, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_66_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1372, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_66_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1373, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_66_httpwww_vantivcnp_comschemagiftCardResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_66 = CTD_ANON_66


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_67 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1383, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_67_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1387, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_67_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1388, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_67_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1389, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_67_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1391, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_67_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1392, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_67_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1393, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_67_httpwww_vantivcnp_comschemagiftCardResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_67 = CTD_ANON_67


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_68 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1403, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_68_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1407, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_68_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1408, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_68_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1409, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_68_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1411, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_68_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1412, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_68_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1413, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_68_httpwww_vantivcnp_comschemagiftCardResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_68 = CTD_ANON_68


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_69 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1423, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_69_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1427, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_69_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1428, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_69_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1429, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_69_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1431, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_69_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1432, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_69_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1433, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_69_httpwww_vantivcnp_comschemagiftCardResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_69 = CTD_ANON_69


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_70 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1443, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_70_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1447, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_70_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1449, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_70_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1450, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_70_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1452, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_70_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1453, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_70_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1454, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_vantivcnp_comschema_CTD_ANON_70_httpwww_vantivcnp_comschemafraudResult', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}accountUpdater uses Python identifier accountUpdater
    __accountUpdater = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), 'accountUpdater', '__httpwww_vantivcnp_comschema_CTD_ANON_70_httpwww_vantivcnp_comschemaaccountUpdater', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1927, 4), )

    
    accountUpdater = property(__accountUpdater.value, __accountUpdater.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}pinlessDebitResponse uses Python identifier pinlessDebitResponse
    __pinlessDebitResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pinlessDebitResponse'), 'pinlessDebitResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_70_httpwww_vantivcnp_comschemapinlessDebitResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2619, 4), )

    
    pinlessDebitResponse = property(__pinlessDebitResponse.value, __pinlessDebitResponse.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location,
        __fraudResult.name() : __fraudResult,
        __accountUpdater.name() : __accountUpdater,
        __pinlessDebitResponse.name() : __pinlessDebitResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_70 = CTD_ANON_70


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_71 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1467, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_71_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1471, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_71_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1473, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_71_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1474, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_71_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1476, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_71_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1477, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_71_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1478, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_vantivcnp_comschema_CTD_ANON_71_httpwww_vantivcnp_comschemafraudResult', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_71_httpwww_vantivcnp_comschemagiftCardResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location,
        __fraudResult.name() : __fraudResult,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_71 = CTD_ANON_71


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_72 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1488, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_72_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1492, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_72_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1493, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_72_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1494, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_72_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1496, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_72_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1497, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_72_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1498, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), 'tokenResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_72_httpwww_vantivcnp_comschematokenResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1500, 24), )

    
    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_vantivcnp_comschema_CTD_ANON_72_httpwww_vantivcnp_comschemafraudResult', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_72_httpwww_vantivcnp_comschemagiftCardResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}accountUpdater uses Python identifier accountUpdater
    __accountUpdater = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), 'accountUpdater', '__httpwww_vantivcnp_comschema_CTD_ANON_72_httpwww_vantivcnp_comschemaaccountUpdater', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1927, 4), )

    
    accountUpdater = property(__accountUpdater.value, __accountUpdater.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location,
        __tokenResponse.name() : __tokenResponse,
        __fraudResult.name() : __fraudResult,
        __giftCardResponse.name() : __giftCardResponse,
        __accountUpdater.name() : __accountUpdater
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_72 = CTD_ANON_72


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_73 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1512, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_73_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1516, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_73_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1517, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_73_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1518, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_73_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1520, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_73_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1521, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_73_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1522, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), 'tokenResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_73_httpwww_vantivcnp_comschematokenResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1524, 24), )

    
    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_vantivcnp_comschema_CTD_ANON_73_httpwww_vantivcnp_comschemafraudResult', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_73_httpwww_vantivcnp_comschemagiftCardResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location,
        __tokenResponse.name() : __tokenResponse,
        __fraudResult.name() : __fraudResult,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_73 = CTD_ANON_73


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_74 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1535, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}enhancedAuthResponse uses Python identifier enhancedAuthResponse
    __enhancedAuthResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'enhancedAuthResponse'), 'enhancedAuthResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemaenhancedAuthResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1260, 4), )

    
    enhancedAuthResponse = property(__enhancedAuthResponse.value, __enhancedAuthResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1539, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1540, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemaorderId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1541, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1542, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cardProductId uses Python identifier cardProductId
    __cardProductId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardProductId'), 'cardProductId', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemacardProductId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1543, 24), )

    
    cardProductId = property(__cardProductId.value, __cardProductId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1544, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1545, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1546, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}authCode uses Python identifier authCode
    __authCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authCode'), 'authCode', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemaauthCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1547, 24), )

    
    authCode = property(__authCode.value, __authCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}authorizationResponseSubCode uses Python identifier authorizationResponseSubCode
    __authorizationResponseSubCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authorizationResponseSubCode'), 'authorizationResponseSubCode', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemaauthorizationResponseSubCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1548, 24), )

    
    authorizationResponseSubCode = property(__authorizationResponseSubCode.value, __authorizationResponseSubCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}approvedAmount uses Python identifier approvedAmount
    __approvedAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'approvedAmount'), 'approvedAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemaapprovedAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1549, 24), )

    
    approvedAmount = property(__approvedAmount.value, __approvedAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}accountInformation uses Python identifier accountInformation
    __accountInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountInformation'), 'accountInformation', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemaaccountInformation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1550, 24), )

    
    accountInformation = property(__accountInformation.value, __accountInformation.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), 'tokenResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschematokenResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1553, 24), )

    
    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}recyclingResponse uses Python identifier recyclingResponse
    __recyclingResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recyclingResponse'), 'recyclingResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemarecyclingResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1556, 24), )

    
    recyclingResponse = property(__recyclingResponse.value, __recyclingResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}recurringResponse uses Python identifier recurringResponse
    __recurringResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recurringResponse'), 'recurringResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemarecurringResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1557, 24), )

    
    recurringResponse = property(__recurringResponse.value, __recurringResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cardSuffix uses Python identifier cardSuffix
    __cardSuffix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardSuffix'), 'cardSuffix', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemacardSuffix', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1561, 24), )

    
    cardSuffix = property(__cardSuffix.value, __cardSuffix.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}networkTransactionId uses Python identifier networkTransactionId
    __networkTransactionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'networkTransactionId'), 'networkTransactionId', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemanetworkTransactionId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1572, 24), )

    
    networkTransactionId = property(__networkTransactionId.value, __networkTransactionId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}paymentAccountReferenceNumber uses Python identifier paymentAccountReferenceNumber
    __paymentAccountReferenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paymentAccountReferenceNumber'), 'paymentAccountReferenceNumber', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemapaymentAccountReferenceNumber', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1575, 24), )

    
    paymentAccountReferenceNumber = property(__paymentAccountReferenceNumber.value, __paymentAccountReferenceNumber.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemafraudResult', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemagiftCardResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}accountUpdater uses Python identifier accountUpdater
    __accountUpdater = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), 'accountUpdater', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemaaccountUpdater', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1927, 4), )

    
    accountUpdater = property(__accountUpdater.value, __accountUpdater.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}applepayResponse uses Python identifier applepayResponse
    __applepayResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'applepayResponse'), 'applepayResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemaapplepayResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2178, 4), )

    
    applepayResponse = property(__applepayResponse.value, __applepayResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}androidpayResponse uses Python identifier androidpayResponse
    __androidpayResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'androidpayResponse'), 'androidpayResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemaandroidpayResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2194, 4), )

    
    androidpayResponse = property(__androidpayResponse.value, __androidpayResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}sepaDirectDebitResponse uses Python identifier sepaDirectDebitResponse
    __sepaDirectDebitResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sepaDirectDebitResponse'), 'sepaDirectDebitResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemasepaDirectDebitResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2218, 4), )

    
    sepaDirectDebitResponse = property(__sepaDirectDebitResponse.value, __sepaDirectDebitResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}idealResponse uses Python identifier idealResponse
    __idealResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'idealResponse'), 'idealResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemaidealResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2234, 4), )

    
    idealResponse = property(__idealResponse.value, __idealResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}giropayResponse uses Python identifier giropayResponse
    __giropayResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giropayResponse'), 'giropayResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemagiropayResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2250, 4), )

    
    giropayResponse = property(__giropayResponse.value, __giropayResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}sofortResponse uses Python identifier sofortResponse
    __sofortResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sofortResponse'), 'sofortResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemasofortResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2266, 4), )

    
    sofortResponse = property(__sofortResponse.value, __sofortResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}pinlessDebitResponse uses Python identifier pinlessDebitResponse
    __pinlessDebitResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pinlessDebitResponse'), 'pinlessDebitResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_74_httpwww_vantivcnp_comschemapinlessDebitResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2619, 4), )

    
    pinlessDebitResponse = property(__pinlessDebitResponse.value, __pinlessDebitResponse.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __enhancedAuthResponse.name() : __enhancedAuthResponse,
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __orderId.name() : __orderId,
        __responseTime.name() : __responseTime,
        __cardProductId.name() : __cardProductId,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location,
        __authCode.name() : __authCode,
        __authorizationResponseSubCode.name() : __authorizationResponseSubCode,
        __approvedAmount.name() : __approvedAmount,
        __accountInformation.name() : __accountInformation,
        __tokenResponse.name() : __tokenResponse,
        __recyclingResponse.name() : __recyclingResponse,
        __recurringResponse.name() : __recurringResponse,
        __cardSuffix.name() : __cardSuffix,
        __networkTransactionId.name() : __networkTransactionId,
        __paymentAccountReferenceNumber.name() : __paymentAccountReferenceNumber,
        __fraudResult.name() : __fraudResult,
        __giftCardResponse.name() : __giftCardResponse,
        __accountUpdater.name() : __accountUpdater,
        __applepayResponse.name() : __applepayResponse,
        __androidpayResponse.name() : __androidpayResponse,
        __sepaDirectDebitResponse.name() : __sepaDirectDebitResponse,
        __idealResponse.name() : __idealResponse,
        __giropayResponse.name() : __giropayResponse,
        __sofortResponse.name() : __sofortResponse,
        __pinlessDebitResponse.name() : __pinlessDebitResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_74 = CTD_ANON_74


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_75 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1583, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_75_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1587, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_75_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1588, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_75_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1589, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_75_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1591, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_75_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1592, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_75_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1593, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), 'tokenResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_75_httpwww_vantivcnp_comschematokenResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1595, 24), )

    
    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_vantivcnp_comschema_CTD_ANON_75_httpwww_vantivcnp_comschemafraudResult', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location,
        __tokenResponse.name() : __tokenResponse,
        __fraudResult.name() : __fraudResult
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_75 = CTD_ANON_75


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_76 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1605, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_76_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1609, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_76_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1610, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_76_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1611, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_76_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1613, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_76_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1614, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_76_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1615, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_vantivcnp_comschema_CTD_ANON_76_httpwww_vantivcnp_comschemafraudResult', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_76_httpwww_vantivcnp_comschemagiftCardResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location,
        __fraudResult.name() : __fraudResult,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_76 = CTD_ANON_76


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_77 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1638, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_vantivcnp_comschema_CTD_ANON_77_httpwww_vantivcnp_comschemafraudResult', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_77_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1642, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_77_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1643, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_77_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1644, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_77_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1646, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_77_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1647, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_77_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1648, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_77_httpwww_vantivcnp_comschemagiftCardResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}virtualGiftCardResponse uses Python identifier virtualGiftCardResponse
    __virtualGiftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'virtualGiftCardResponse'), 'virtualGiftCardResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_77_httpwww_vantivcnp_comschemavirtualGiftCardResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1713, 4), )

    
    virtualGiftCardResponse = property(__virtualGiftCardResponse.value, __virtualGiftCardResponse.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fraudResult.name() : __fraudResult,
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location,
        __giftCardResponse.name() : __giftCardResponse,
        __virtualGiftCardResponse.name() : __virtualGiftCardResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_77 = CTD_ANON_77


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_78 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1659, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_vantivcnp_comschema_CTD_ANON_78_httpwww_vantivcnp_comschemafraudResult', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_78_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1663, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_78_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1664, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_78_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1665, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_78_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1667, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_78_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1668, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_78_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1669, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_78_httpwww_vantivcnp_comschemagiftCardResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fraudResult.name() : __fraudResult,
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_78 = CTD_ANON_78


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_79 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1679, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_vantivcnp_comschema_CTD_ANON_79_httpwww_vantivcnp_comschemafraudResult', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_79_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1683, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_79_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1684, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_79_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1685, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_79_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1687, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_79_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1688, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_79_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1689, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_79_httpwww_vantivcnp_comschemagiftCardResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fraudResult.name() : __fraudResult,
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_79 = CTD_ANON_79


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_80 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1723, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_vantivcnp_comschema_CTD_ANON_80_httpwww_vantivcnp_comschemafraudResult', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_80_httpwww_vantivcnp_comschemagiftCardResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_80_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1727, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_80_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1728, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_80_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1729, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_80_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1731, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_80_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1732, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_80_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1733, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fraudResult.name() : __fraudResult,
        __giftCardResponse.name() : __giftCardResponse,
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_80 = CTD_ANON_80


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_81 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1743, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_vantivcnp_comschema_CTD_ANON_81_httpwww_vantivcnp_comschemafraudResult', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_81_httpwww_vantivcnp_comschemagiftCardResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_81_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1747, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_81_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1748, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_81_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1749, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_81_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1751, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_81_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1752, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_81_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1753, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}approvedAmount uses Python identifier approvedAmount
    __approvedAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'approvedAmount'), 'approvedAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_81_httpwww_vantivcnp_comschemaapprovedAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1755, 24), )

    
    approvedAmount = property(__approvedAmount.value, __approvedAmount.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fraudResult.name() : __fraudResult,
        __giftCardResponse.name() : __giftCardResponse,
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location,
        __approvedAmount.name() : __approvedAmount
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_81 = CTD_ANON_81


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_82 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1766, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), 'billToAddress', '__httpwww_vantivcnp_comschema_CTD_ANON_82_httpwww_vantivcnp_comschemabillToAddress', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 77, 4), )

    
    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}shipToAddress uses Python identifier shipToAddress
    __shipToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress'), 'shipToAddress', '__httpwww_vantivcnp_comschema_CTD_ANON_82_httpwww_vantivcnp_comschemashipToAddress', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 942, 4), )

    
    shipToAddress = property(__shipToAddress.value, __shipToAddress.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customBilling uses Python identifier customBilling
    __customBilling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), 'customBilling', '__httpwww_vantivcnp_comschema_CTD_ANON_82_httpwww_vantivcnp_comschemacustomBilling', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1076, 4), )

    
    customBilling = property(__customBilling.value, __customBilling.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_82_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1771, 28), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_82_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1772, 28), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customIdentifier uses Python identifier customIdentifier
    __customIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customIdentifier'), 'customIdentifier', '__httpwww_vantivcnp_comschema_CTD_ANON_82_httpwww_vantivcnp_comschemacustomIdentifier', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1774, 28), )

    
    customIdentifier = property(__customIdentifier.value, __customIdentifier.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_vantivcnp_comschema_CTD_ANON_82_httpwww_vantivcnp_comschemaorderId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1777, 28), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}verify uses Python identifier verify
    __verify = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'verify'), 'verify', '__httpwww_vantivcnp_comschema_CTD_ANON_82_httpwww_vantivcnp_comschemaverify', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1778, 28), )

    
    verify = property(__verify.value, __verify.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}secondaryAmount uses Python identifier secondaryAmount
    __secondaryAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), 'secondaryAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_82_httpwww_vantivcnp_comschemasecondaryAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1780, 28), )

    
    secondaryAmount = property(__secondaryAmount.value, __secondaryAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_vantivcnp_comschema_CTD_ANON_82_httpwww_vantivcnp_comschemaorderSource', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1781, 28), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}echeck uses Python identifier echeck
    __echeck = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'echeck'), 'echeck', '__httpwww_vantivcnp_comschema_CTD_ANON_82_httpwww_vantivcnp_comschemaecheck', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1784, 39), )

    
    echeck = property(__echeck.value, __echeck.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}echeckToken uses Python identifier echeckToken
    __echeckToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'echeckToken'), 'echeckToken', '__httpwww_vantivcnp_comschema_CTD_ANON_82_httpwww_vantivcnp_comschemaecheckToken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1784, 101), )

    
    echeckToken = property(__echeckToken.value, __echeckToken.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), 'merchantData', '__httpwww_vantivcnp_comschema_CTD_ANON_82_httpwww_vantivcnp_comschemamerchantData', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1786, 28), )

    
    merchantData = property(__merchantData.value, __merchantData.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __shipToAddress.name() : __shipToAddress,
        __customBilling.name() : __customBilling,
        __cnpTxnId.name() : __cnpTxnId,
        __amount.name() : __amount,
        __customIdentifier.name() : __customIdentifier,
        __orderId.name() : __orderId,
        __verify.name() : __verify,
        __secondaryAmount.name() : __secondaryAmount,
        __orderSource.name() : __orderSource,
        __echeck.name() : __echeck,
        __echeckToken.name() : __echeckToken,
        __merchantData.name() : __merchantData
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_82 = CTD_ANON_82


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_83 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1796, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), 'billToAddress', '__httpwww_vantivcnp_comschema_CTD_ANON_83_httpwww_vantivcnp_comschemabillToAddress', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 77, 4), )

    
    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customBilling uses Python identifier customBilling
    __customBilling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), 'customBilling', '__httpwww_vantivcnp_comschema_CTD_ANON_83_httpwww_vantivcnp_comschemacustomBilling', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1076, 4), )

    
    customBilling = property(__customBilling.value, __customBilling.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_83_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1802, 32), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_83_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1803, 32), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}secondaryAmount uses Python identifier secondaryAmount
    __secondaryAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), 'secondaryAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_83_httpwww_vantivcnp_comschemasecondaryAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1804, 32), )

    
    secondaryAmount = property(__secondaryAmount.value, __secondaryAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customIdentifier uses Python identifier customIdentifier
    __customIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customIdentifier'), 'customIdentifier', '__httpwww_vantivcnp_comschema_CTD_ANON_83_httpwww_vantivcnp_comschemacustomIdentifier', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1806, 32), )

    
    customIdentifier = property(__customIdentifier.value, __customIdentifier.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_vantivcnp_comschema_CTD_ANON_83_httpwww_vantivcnp_comschemaorderId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1809, 32), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_vantivcnp_comschema_CTD_ANON_83_httpwww_vantivcnp_comschemaorderSource', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1812, 32), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}echeck uses Python identifier echeck
    __echeck = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'echeck'), 'echeck', '__httpwww_vantivcnp_comschema_CTD_ANON_83_httpwww_vantivcnp_comschemaecheck', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1814, 43), )

    
    echeck = property(__echeck.value, __echeck.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}echeckToken uses Python identifier echeckToken
    __echeckToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'echeckToken'), 'echeckToken', '__httpwww_vantivcnp_comschema_CTD_ANON_83_httpwww_vantivcnp_comschemaecheckToken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1814, 105), )

    
    echeckToken = property(__echeckToken.value, __echeckToken.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), 'merchantData', '__httpwww_vantivcnp_comschema_CTD_ANON_83_httpwww_vantivcnp_comschemamerchantData', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1816, 32), )

    
    merchantData = property(__merchantData.value, __merchantData.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __customBilling.name() : __customBilling,
        __cnpTxnId.name() : __cnpTxnId,
        __amount.name() : __amount,
        __secondaryAmount.name() : __secondaryAmount,
        __customIdentifier.name() : __customIdentifier,
        __orderId.name() : __orderId,
        __orderSource.name() : __orderSource,
        __echeck.name() : __echeck,
        __echeckToken.name() : __echeckToken,
        __merchantData.name() : __merchantData
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_83 = CTD_ANON_83


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_84 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1827, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), 'billToAddress', '__httpwww_vantivcnp_comschema_CTD_ANON_84_httpwww_vantivcnp_comschemabillToAddress', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 77, 4), )

    
    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_vantivcnp_comschema_CTD_ANON_84_httpwww_vantivcnp_comschemaorderId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1831, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_84_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1832, 24), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_vantivcnp_comschema_CTD_ANON_84_httpwww_vantivcnp_comschemaorderSource', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1833, 24), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}echeck uses Python identifier echeck
    __echeck = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'echeck'), 'echeck', '__httpwww_vantivcnp_comschema_CTD_ANON_84_httpwww_vantivcnp_comschemaecheck', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1835, 35), )

    
    echeck = property(__echeck.value, __echeck.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}echeckToken uses Python identifier echeckToken
    __echeckToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'echeckToken'), 'echeckToken', '__httpwww_vantivcnp_comschema_CTD_ANON_84_httpwww_vantivcnp_comschemaecheckToken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1835, 97), )

    
    echeckToken = property(__echeckToken.value, __echeckToken.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), 'merchantData', '__httpwww_vantivcnp_comschema_CTD_ANON_84_httpwww_vantivcnp_comschemamerchantData', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1836, 24), )

    
    merchantData = property(__merchantData.value, __merchantData.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __orderId.name() : __orderId,
        __amount.name() : __amount,
        __orderSource.name() : __orderSource,
        __echeck.name() : __echeck,
        __echeckToken.name() : __echeckToken,
        __merchantData.name() : __merchantData
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_84 = CTD_ANON_84


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_85 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1844, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_85_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1848, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_85_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1849, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_85_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1850, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_85_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1851, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_85_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1852, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}verificationCode uses Python identifier verificationCode
    __verificationCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'verificationCode'), 'verificationCode', '__httpwww_vantivcnp_comschema_CTD_ANON_85_httpwww_vantivcnp_comschemaverificationCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1853, 24), )

    
    verificationCode = property(__verificationCode.value, __verificationCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_85_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1855, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), 'tokenResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_85_httpwww_vantivcnp_comschematokenResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1857, 24), )

    
    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}accountUpdater uses Python identifier accountUpdater
    __accountUpdater = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), 'accountUpdater', '__httpwww_vantivcnp_comschema_CTD_ANON_85_httpwww_vantivcnp_comschemaaccountUpdater', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1927, 4), )

    
    accountUpdater = property(__accountUpdater.value, __accountUpdater.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __message.name() : __message,
        __location.name() : __location,
        __verificationCode.name() : __verificationCode,
        __postDate.name() : __postDate,
        __tokenResponse.name() : __tokenResponse,
        __accountUpdater.name() : __accountUpdater
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_85 = CTD_ANON_85


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_86 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1865, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_86_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1869, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_86_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1870, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_86_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1871, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_86_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1872, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_86_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1873, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_86_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1875, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), 'tokenResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_86_httpwww_vantivcnp_comschematokenResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1877, 24), )

    
    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}accountUpdater uses Python identifier accountUpdater
    __accountUpdater = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), 'accountUpdater', '__httpwww_vantivcnp_comschema_CTD_ANON_86_httpwww_vantivcnp_comschemaaccountUpdater', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1927, 4), )

    
    accountUpdater = property(__accountUpdater.value, __accountUpdater.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __message.name() : __message,
        __location.name() : __location,
        __postDate.name() : __postDate,
        __tokenResponse.name() : __tokenResponse,
        __accountUpdater.name() : __accountUpdater
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_86 = CTD_ANON_86


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_87 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1964, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_87_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1968, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_87_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1969, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_87_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1970, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_87_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1971, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_87_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1972, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_87_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1974, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), 'tokenResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_87_httpwww_vantivcnp_comschematokenResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1975, 24), )

    
    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __message.name() : __message,
        __location.name() : __location,
        __postDate.name() : __postDate,
        __tokenResponse.name() : __tokenResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_87 = CTD_ANON_87


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_88 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1983, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_88_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1987, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}echeck uses Python identifier echeck
    __echeck = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'echeck'), 'echeck', '__httpwww_vantivcnp_comschema_CTD_ANON_88_httpwww_vantivcnp_comschemaecheck', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1989, 28), )

    
    echeck = property(__echeck.value, __echeck.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}echeckToken uses Python identifier echeckToken
    __echeckToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'echeckToken'), 'echeckToken', '__httpwww_vantivcnp_comschema_CTD_ANON_88_httpwww_vantivcnp_comschemaecheckToken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1990, 28), )

    
    echeckToken = property(__echeckToken.value, __echeckToken.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), 'merchantData', '__httpwww_vantivcnp_comschema_CTD_ANON_88_httpwww_vantivcnp_comschemamerchantData', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1992, 24), )

    
    merchantData = property(__merchantData.value, __merchantData.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customIdentifier uses Python identifier customIdentifier
    __customIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customIdentifier'), 'customIdentifier', '__httpwww_vantivcnp_comschema_CTD_ANON_88_httpwww_vantivcnp_comschemacustomIdentifier', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1993, 24), )

    
    customIdentifier = property(__customIdentifier.value, __customIdentifier.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __echeck.name() : __echeck,
        __echeckToken.name() : __echeckToken,
        __merchantData.name() : __merchantData,
        __customIdentifier.name() : __customIdentifier
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_88 = CTD_ANON_88


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_89 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2001, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}accountUpdater uses Python identifier accountUpdater
    __accountUpdater = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), 'accountUpdater', '__httpwww_vantivcnp_comschema_CTD_ANON_89_httpwww_vantivcnp_comschemaaccountUpdater', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1927, 4), )

    
    accountUpdater = property(__accountUpdater.value, __accountUpdater.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_89_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2005, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_89_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2006, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_89_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2007, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_89_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2008, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_89_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2009, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_89_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2011, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), 'tokenResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_89_httpwww_vantivcnp_comschematokenResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2013, 24), )

    
    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __accountUpdater.name() : __accountUpdater,
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __message.name() : __message,
        __location.name() : __location,
        __postDate.name() : __postDate,
        __tokenResponse.name() : __tokenResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_89 = CTD_ANON_89


# Complex type {http://www.vantivcnp.com/schema}updateCardValidationNumOnToken with content type ELEMENT_ONLY
class updateCardValidationNumOnToken_ (transactionTypeWithReportGroup):
    """Complex type {http://www.vantivcnp.com/schema}updateCardValidationNumOnToken with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'updateCardValidationNumOnToken')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2080, 4)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_vantivcnp_comschema_updateCardValidationNumOnToken__httpwww_vantivcnp_comschemaorderId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2084, 20), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cnpToken uses Python identifier cnpToken
    __cnpToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpToken'), 'cnpToken', '__httpwww_vantivcnp_comschema_updateCardValidationNumOnToken__httpwww_vantivcnp_comschemacnpToken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2085, 20), )

    
    cnpToken = property(__cnpToken.value, __cnpToken.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cardValidationNum uses Python identifier cardValidationNum
    __cardValidationNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum'), 'cardValidationNum', '__httpwww_vantivcnp_comschema_updateCardValidationNumOnToken__httpwww_vantivcnp_comschemacardValidationNum', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2086, 20), )

    
    cardValidationNum = property(__cardValidationNum.value, __cardValidationNum.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __orderId.name() : __orderId,
        __cnpToken.name() : __cnpToken,
        __cardValidationNum.name() : __cardValidationNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.updateCardValidationNumOnToken_ = updateCardValidationNumOnToken_
Namespace.addCategoryObject('typeBinding', 'updateCardValidationNumOnToken', updateCardValidationNumOnToken_)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_90 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2093, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_90_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2097, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_90_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2098, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_90_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2099, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_90_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2100, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_90_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2101, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __message.name() : __message,
        __location.name() : __location,
        __responseTime.name() : __responseTime
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_90 = CTD_ANON_90


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_91 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2116, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), 'billToAddress', '__httpwww_vantivcnp_comschema_CTD_ANON_91_httpwww_vantivcnp_comschemabillToAddress', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 77, 4), )

    
    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}shipToAddress uses Python identifier shipToAddress
    __shipToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress'), 'shipToAddress', '__httpwww_vantivcnp_comschema_CTD_ANON_91_httpwww_vantivcnp_comschemashipToAddress', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 942, 4), )

    
    shipToAddress = property(__shipToAddress.value, __shipToAddress.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}advancedFraudChecks uses Python identifier advancedFraudChecks
    __advancedFraudChecks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudChecks'), 'advancedFraudChecks', '__httpwww_vantivcnp_comschema_CTD_ANON_91_httpwww_vantivcnp_comschemaadvancedFraudChecks', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2120, 24), )

    
    advancedFraudChecks = property(__advancedFraudChecks.value, __advancedFraudChecks.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_91_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2123, 24), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}eventType uses Python identifier eventType
    __eventType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eventType'), 'eventType', '__httpwww_vantivcnp_comschema_CTD_ANON_91_httpwww_vantivcnp_comschemaeventType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2124, 24), )

    
    eventType = property(__eventType.value, __eventType.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}accountLogin uses Python identifier accountLogin
    __accountLogin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountLogin'), 'accountLogin', '__httpwww_vantivcnp_comschema_CTD_ANON_91_httpwww_vantivcnp_comschemaaccountLogin', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2125, 24), )

    
    accountLogin = property(__accountLogin.value, __accountLogin.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}accountPasshash uses Python identifier accountPasshash
    __accountPasshash = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountPasshash'), 'accountPasshash', '__httpwww_vantivcnp_comschema_CTD_ANON_91_httpwww_vantivcnp_comschemaaccountPasshash', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2126, 24), )

    
    accountPasshash = property(__accountPasshash.value, __accountPasshash.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __shipToAddress.name() : __shipToAddress,
        __advancedFraudChecks.name() : __advancedFraudChecks,
        __amount.name() : __amount,
        __eventType.name() : __eventType,
        __accountLogin.name() : __accountLogin,
        __accountPasshash.name() : __accountPasshash
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_91 = CTD_ANON_91


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_92 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2134, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_92_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2138, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_92_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2139, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_92_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2140, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_92_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2141, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_92_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2142, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}advancedFraudResults uses Python identifier advancedFraudResults
    __advancedFraudResults = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudResults'), 'advancedFraudResults', '__httpwww_vantivcnp_comschema_CTD_ANON_92_httpwww_vantivcnp_comschemaadvancedFraudResults', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2143, 24), )

    
    advancedFraudResults = property(__advancedFraudResults.value, __advancedFraudResults.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __message.name() : __message,
        __location.name() : __location,
        __responseTime.name() : __responseTime,
        __advancedFraudResults.name() : __advancedFraudResults
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_92 = CTD_ANON_92


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_93 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2280, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_93_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2284, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_93_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2285, 24), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_93_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2286, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_93_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2287, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_93_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2289, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_93_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2290, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_93_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2291, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_vantivcnp_comschema_CTD_ANON_93_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2293, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2293, 20)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __fundsTransferId.name() : __fundsTransferId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_93 = CTD_ANON_93


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_94 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2300, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_94_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2304, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_94_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2305, 24), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_94_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2306, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_94_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2307, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_94_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2309, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_94_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2310, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_94_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2311, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_vantivcnp_comschema_CTD_ANON_94_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2313, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2313, 20)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __fundsTransferId.name() : __fundsTransferId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_94 = CTD_ANON_94


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_95 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2320, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}fundingSubmerchantId uses Python identifier fundingSubmerchantId
    __fundingSubmerchantId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId'), 'fundingSubmerchantId', '__httpwww_vantivcnp_comschema_CTD_ANON_95_httpwww_vantivcnp_comschemafundingSubmerchantId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2325, 28), )

    
    fundingSubmerchantId = property(__fundingSubmerchantId.value, __fundingSubmerchantId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_95_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2326, 28), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_95_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2327, 28), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fundingSubmerchantId.name() : __fundingSubmerchantId,
        __fundsTransferId.name() : __fundsTransferId,
        __amount.name() : __amount
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_95 = CTD_ANON_95


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_96 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2336, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}fundingSubmerchantId uses Python identifier fundingSubmerchantId
    __fundingSubmerchantId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId'), 'fundingSubmerchantId', '__httpwww_vantivcnp_comschema_CTD_ANON_96_httpwww_vantivcnp_comschemafundingSubmerchantId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2341, 28), )

    
    fundingSubmerchantId = property(__fundingSubmerchantId.value, __fundingSubmerchantId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_96_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2342, 28), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_96_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2343, 28), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fundingSubmerchantId.name() : __fundingSubmerchantId,
        __fundsTransferId.name() : __fundsTransferId,
        __amount.name() : __amount
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_96 = CTD_ANON_96


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_97 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2352, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_97_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2356, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_97_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2357, 24), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_97_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2358, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_97_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2359, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_97_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2361, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_97_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2362, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_97_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2363, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_vantivcnp_comschema_CTD_ANON_97_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2365, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2365, 20)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __fundsTransferId.name() : __fundsTransferId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_97 = CTD_ANON_97


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_98 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2372, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_98_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2376, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_98_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2377, 24), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_98_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2378, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_98_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2379, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_98_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2381, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_98_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2382, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_98_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2383, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_vantivcnp_comschema_CTD_ANON_98_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2385, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2385, 20)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __fundsTransferId.name() : __fundsTransferId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_98 = CTD_ANON_98


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_99 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2392, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}fundingCustomerId uses Python identifier fundingCustomerId
    __fundingCustomerId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId'), 'fundingCustomerId', '__httpwww_vantivcnp_comschema_CTD_ANON_99_httpwww_vantivcnp_comschemafundingCustomerId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2398, 32), )

    
    fundingCustomerId = property(__fundingCustomerId.value, __fundingCustomerId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundingSubmerchantId uses Python identifier fundingSubmerchantId
    __fundingSubmerchantId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId'), 'fundingSubmerchantId', '__httpwww_vantivcnp_comschema_CTD_ANON_99_httpwww_vantivcnp_comschemafundingSubmerchantId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2399, 32), )

    
    fundingSubmerchantId = property(__fundingSubmerchantId.value, __fundingSubmerchantId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_99_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2401, 28), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_99_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2402, 28), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fundingCustomerId.name() : __fundingCustomerId,
        __fundingSubmerchantId.name() : __fundingSubmerchantId,
        __fundsTransferId.name() : __fundsTransferId,
        __amount.name() : __amount
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_99 = CTD_ANON_99


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_100 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2411, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}fundingCustomerId uses Python identifier fundingCustomerId
    __fundingCustomerId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId'), 'fundingCustomerId', '__httpwww_vantivcnp_comschema_CTD_ANON_100_httpwww_vantivcnp_comschemafundingCustomerId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2417, 32), )

    
    fundingCustomerId = property(__fundingCustomerId.value, __fundingCustomerId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundingSubmerchantId uses Python identifier fundingSubmerchantId
    __fundingSubmerchantId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId'), 'fundingSubmerchantId', '__httpwww_vantivcnp_comschema_CTD_ANON_100_httpwww_vantivcnp_comschemafundingSubmerchantId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2418, 32), )

    
    fundingSubmerchantId = property(__fundingSubmerchantId.value, __fundingSubmerchantId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_100_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2420, 28), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_100_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2421, 28), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fundingCustomerId.name() : __fundingCustomerId,
        __fundingSubmerchantId.name() : __fundingSubmerchantId,
        __fundsTransferId.name() : __fundsTransferId,
        __amount.name() : __amount
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_100 = CTD_ANON_100


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_101 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2430, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_101_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2434, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_101_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2435, 24), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_101_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2436, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_101_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2437, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_101_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2439, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_101_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2440, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_101_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2441, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_vantivcnp_comschema_CTD_ANON_101_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2443, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2443, 20)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __fundsTransferId.name() : __fundsTransferId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_101 = CTD_ANON_101


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_102 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2450, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_102_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2454, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_102_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2455, 24), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_102_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2456, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_102_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2457, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_102_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2459, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_102_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2460, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_102_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2461, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_vantivcnp_comschema_CTD_ANON_102_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2463, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2463, 20)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __fundsTransferId.name() : __fundsTransferId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_102 = CTD_ANON_102


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_103 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2470, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}fundingCustomerId uses Python identifier fundingCustomerId
    __fundingCustomerId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId'), 'fundingCustomerId', '__httpwww_vantivcnp_comschema_CTD_ANON_103_httpwww_vantivcnp_comschemafundingCustomerId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2476, 32), )

    
    fundingCustomerId = property(__fundingCustomerId.value, __fundingCustomerId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundingSubmerchantId uses Python identifier fundingSubmerchantId
    __fundingSubmerchantId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId'), 'fundingSubmerchantId', '__httpwww_vantivcnp_comschema_CTD_ANON_103_httpwww_vantivcnp_comschemafundingSubmerchantId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2477, 32), )

    
    fundingSubmerchantId = property(__fundingSubmerchantId.value, __fundingSubmerchantId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_103_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2479, 28), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_103_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2480, 28), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fundingCustomerId.name() : __fundingCustomerId,
        __fundingSubmerchantId.name() : __fundingSubmerchantId,
        __fundsTransferId.name() : __fundsTransferId,
        __amount.name() : __amount
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_103 = CTD_ANON_103


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_104 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2489, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_104_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2493, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_104_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2494, 24), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_104_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2495, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_104_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2496, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_104_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2498, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_104_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2499, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_104_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2500, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_vantivcnp_comschema_CTD_ANON_104_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2502, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2502, 20)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __fundsTransferId.name() : __fundsTransferId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_104 = CTD_ANON_104


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_105 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2509, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}fundingCustomerId uses Python identifier fundingCustomerId
    __fundingCustomerId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId'), 'fundingCustomerId', '__httpwww_vantivcnp_comschema_CTD_ANON_105_httpwww_vantivcnp_comschemafundingCustomerId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2515, 32), )

    
    fundingCustomerId = property(__fundingCustomerId.value, __fundingCustomerId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundingSubmerchantId uses Python identifier fundingSubmerchantId
    __fundingSubmerchantId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId'), 'fundingSubmerchantId', '__httpwww_vantivcnp_comschema_CTD_ANON_105_httpwww_vantivcnp_comschemafundingSubmerchantId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2516, 32), )

    
    fundingSubmerchantId = property(__fundingSubmerchantId.value, __fundingSubmerchantId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_105_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2518, 28), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_105_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2519, 28), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fundingCustomerId.name() : __fundingCustomerId,
        __fundingSubmerchantId.name() : __fundingSubmerchantId,
        __fundsTransferId.name() : __fundsTransferId,
        __amount.name() : __amount
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_105 = CTD_ANON_105


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_106 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2528, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_106_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2532, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_106_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2533, 24), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_106_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2534, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_106_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2535, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_106_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2537, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_106_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2538, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_106_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2539, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_vantivcnp_comschema_CTD_ANON_106_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2541, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2541, 20)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __fundsTransferId.name() : __fundsTransferId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_106 = CTD_ANON_106


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_107 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2549, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_107_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2553, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_107_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2554, 24), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_107_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2555, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_107_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2556, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_107_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2558, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_107_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2559, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_107_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2560, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_vantivcnp_comschema_CTD_ANON_107_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2562, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2562, 20)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __fundsTransferId.name() : __fundsTransferId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_107 = CTD_ANON_107


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_108 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2569, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_108_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2573, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_108_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2574, 24), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_108_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2575, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_108_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2576, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_108_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2578, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_108_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2579, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_108_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2580, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_vantivcnp_comschema_CTD_ANON_108_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2582, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2582, 20)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __fundsTransferId.name() : __fundsTransferId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_108 = CTD_ANON_108


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_109 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2589, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_109_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2593, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_109 = CTD_ANON_109


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_110 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2601, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_110_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2605, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_110_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2606, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_110_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2607, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_110_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2609, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_110_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2610, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_110_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2611, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_vantivcnp_comschema_CTD_ANON_110_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2613, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2613, 20)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_110 = CTD_ANON_110


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_111 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2631, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}fundingCustomerId uses Python identifier fundingCustomerId
    __fundingCustomerId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId'), 'fundingCustomerId', '__httpwww_vantivcnp_comschema_CTD_ANON_111_httpwww_vantivcnp_comschemafundingCustomerId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2637, 32), )

    
    fundingCustomerId = property(__fundingCustomerId.value, __fundingCustomerId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundingSubmerchantId uses Python identifier fundingSubmerchantId
    __fundingSubmerchantId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId'), 'fundingSubmerchantId', '__httpwww_vantivcnp_comschema_CTD_ANON_111_httpwww_vantivcnp_comschemafundingSubmerchantId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2638, 32), )

    
    fundingSubmerchantId = property(__fundingSubmerchantId.value, __fundingSubmerchantId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customerName uses Python identifier customerName
    __customerName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerName'), 'customerName', '__httpwww_vantivcnp_comschema_CTD_ANON_111_httpwww_vantivcnp_comschemacustomerName', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2641, 32), )

    
    customerName = property(__customerName.value, __customerName.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}submerchantName uses Python identifier submerchantName
    __submerchantName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'submerchantName'), 'submerchantName', '__httpwww_vantivcnp_comschema_CTD_ANON_111_httpwww_vantivcnp_comschemasubmerchantName', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2642, 32), )

    
    submerchantName = property(__submerchantName.value, __submerchantName.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_111_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2644, 28), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_111_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2645, 28), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}disbursementType uses Python identifier disbursementType
    __disbursementType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'disbursementType'), 'disbursementType', '__httpwww_vantivcnp_comschema_CTD_ANON_111_httpwww_vantivcnp_comschemadisbursementType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2646, 28), )

    
    disbursementType = property(__disbursementType.value, __disbursementType.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_vantivcnp_comschema_CTD_ANON_111_httpwww_vantivcnp_comschemacard', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2648, 32), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}token uses Python identifier token
    __token = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'token'), 'token', '__httpwww_vantivcnp_comschema_CTD_ANON_111_httpwww_vantivcnp_comschematoken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2649, 32), )

    
    token = property(__token.value, __token.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}paypage uses Python identifier paypage
    __paypage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paypage'), 'paypage', '__httpwww_vantivcnp_comschema_CTD_ANON_111_httpwww_vantivcnp_comschemapaypage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2650, 32), )

    
    paypage = property(__paypage.value, __paypage.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fundingCustomerId.name() : __fundingCustomerId,
        __fundingSubmerchantId.name() : __fundingSubmerchantId,
        __customerName.name() : __customerName,
        __submerchantName.name() : __submerchantName,
        __fundsTransferId.name() : __fundsTransferId,
        __amount.name() : __amount,
        __disbursementType.name() : __disbursementType,
        __card.name() : __card,
        __token.name() : __token,
        __paypage.name() : __paypage
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_111 = CTD_ANON_111


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_112 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2660, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_112_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2664, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_112_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2665, 24), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_112_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2666, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_112_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2667, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_112_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2668, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_112_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2669, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_112_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2670, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), 'tokenResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_112_httpwww_vantivcnp_comschematokenResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2672, 24), )

    
    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_vantivcnp_comschema_CTD_ANON_112_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2674, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2674, 20)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __fundsTransferId.name() : __fundsTransferId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location,
        __tokenResponse.name() : __tokenResponse
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_112 = CTD_ANON_112


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_113 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2681, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_113_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2685, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_113_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2686, 24), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_113_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2687, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_113_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2688, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_113_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2690, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_113_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2691, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_113_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2692, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_vantivcnp_comschema_CTD_ANON_113_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2694, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2694, 20)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __fundsTransferId.name() : __fundsTransferId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_113 = CTD_ANON_113


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_114 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2701, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_114_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2705, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_114_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2706, 24), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_114_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2707, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_114_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2708, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_114_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2710, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_114_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2711, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_114_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2712, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_vantivcnp_comschema_CTD_ANON_114_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2714, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2714, 20)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __fundsTransferId.name() : __fundsTransferId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_114 = CTD_ANON_114


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_115 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2721, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}fundingCustomerId uses Python identifier fundingCustomerId
    __fundingCustomerId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId'), 'fundingCustomerId', '__httpwww_vantivcnp_comschema_CTD_ANON_115_httpwww_vantivcnp_comschemafundingCustomerId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2726, 28), )

    
    fundingCustomerId = property(__fundingCustomerId.value, __fundingCustomerId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_115_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2727, 28), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_115_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2728, 28), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fundingCustomerId.name() : __fundingCustomerId,
        __fundsTransferId.name() : __fundsTransferId,
        __amount.name() : __amount
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_115 = CTD_ANON_115


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_116 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2737, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}fundingCustomerId uses Python identifier fundingCustomerId
    __fundingCustomerId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId'), 'fundingCustomerId', '__httpwww_vantivcnp_comschema_CTD_ANON_116_httpwww_vantivcnp_comschemafundingCustomerId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2742, 28), )

    
    fundingCustomerId = property(__fundingCustomerId.value, __fundingCustomerId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_116_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2743, 28), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_116_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2744, 28), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fundingCustomerId.name() : __fundingCustomerId,
        __fundsTransferId.name() : __fundsTransferId,
        __amount.name() : __amount
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_116 = CTD_ANON_116


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_117 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2753, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_117_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2757, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_117_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2758, 24), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_117_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2759, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_117_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2760, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_117_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2762, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_117_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2763, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_117_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2764, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_vantivcnp_comschema_CTD_ANON_117_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2766, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2766, 20)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __fundsTransferId.name() : __fundsTransferId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_117 = CTD_ANON_117


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_118 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2773, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_118_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2777, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_118_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2778, 24), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_118_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2779, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_118_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2780, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_118_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2782, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_118_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2783, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_118_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2784, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_vantivcnp_comschema_CTD_ANON_118_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2786, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2786, 20)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __fundsTransferId.name() : __fundsTransferId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_118 = CTD_ANON_118


# Complex type {http://www.vantivcnp.com/schema}translateToLowValueTokenRequestType with content type ELEMENT_ONLY
class translateToLowValueTokenRequestType (transactionTypeWithReportGroup):
    """Complex type {http://www.vantivcnp.com/schema}translateToLowValueTokenRequestType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'translateToLowValueTokenRequestType')
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2794, 4)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_vantivcnp_comschema_translateToLowValueTokenRequestType_httpwww_vantivcnp_comschemaorderId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2798, 20), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}token uses Python identifier token
    __token = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'token'), 'token', '__httpwww_vantivcnp_comschema_translateToLowValueTokenRequestType_httpwww_vantivcnp_comschematoken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2799, 20), )

    
    token = property(__token.value, __token.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __orderId.name() : __orderId,
        __token.name() : __token
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.translateToLowValueTokenRequestType = translateToLowValueTokenRequestType
Namespace.addCategoryObject('typeBinding', 'translateToLowValueTokenRequestType', translateToLowValueTokenRequestType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_119 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2806, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_vantivcnp_comschema_CTD_ANON_119_httpwww_vantivcnp_comschemaorderId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2810, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}paypageRegistrationId uses Python identifier paypageRegistrationId
    __paypageRegistrationId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paypageRegistrationId'), 'paypageRegistrationId', '__httpwww_vantivcnp_comschema_CTD_ANON_119_httpwww_vantivcnp_comschemapaypageRegistrationId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2811, 24), )

    
    paypageRegistrationId = property(__paypageRegistrationId.value, __paypageRegistrationId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_119_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2812, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_119_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2813, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_119_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2814, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_119_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2815, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __orderId.name() : __orderId,
        __paypageRegistrationId.name() : __paypageRegistrationId,
        __response.name() : __response,
        __message.name() : __message,
        __location.name() : __location,
        __responseTime.name() : __responseTime
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_119 = CTD_ANON_119


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_120 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2855, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}enhancedData uses Python identifier enhancedData
    __enhancedData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), 'enhancedData', '__httpwww_vantivcnp_comschema_CTD_ANON_120_httpwww_vantivcnp_comschemaenhancedData', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 991, 4), )

    
    enhancedData = property(__enhancedData.value, __enhancedData.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customBilling uses Python identifier customBilling
    __customBilling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), 'customBilling', '__httpwww_vantivcnp_comschema_CTD_ANON_120_httpwww_vantivcnp_comschemacustomBilling', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1076, 4), )

    
    customBilling = property(__customBilling.value, __customBilling.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}processingInstructions uses Python identifier processingInstructions
    __processingInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), 'processingInstructions', '__httpwww_vantivcnp_comschema_CTD_ANON_120_httpwww_vantivcnp_comschemaprocessingInstructions', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1090, 4), )

    
    processingInstructions = property(__processingInstructions.value, __processingInstructions.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}lodgingInfo uses Python identifier lodgingInfo
    __lodgingInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'lodgingInfo'), 'lodgingInfo', '__httpwww_vantivcnp_comschema_CTD_ANON_120_httpwww_vantivcnp_comschemalodgingInfo', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2835, 4), )

    
    lodgingInfo = property(__lodgingInfo.value, __lodgingInfo.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_120_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2859, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_120_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2860, 24), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}surchargeAmount uses Python identifier surchargeAmount
    __surchargeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), 'surchargeAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_120_httpwww_vantivcnp_comschemasurchargeAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2861, 24), )

    
    surchargeAmount = property(__surchargeAmount.value, __surchargeAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}pin uses Python identifier pin
    __pin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pin'), 'pin', '__httpwww_vantivcnp_comschema_CTD_ANON_120_httpwww_vantivcnp_comschemapin', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2866, 24), )

    
    pin = property(__pin.value, __pin.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __enhancedData.name() : __enhancedData,
        __customBilling.name() : __customBilling,
        __processingInstructions.name() : __processingInstructions,
        __lodgingInfo.name() : __lodgingInfo,
        __cnpTxnId.name() : __cnpTxnId,
        __amount.name() : __amount,
        __surchargeAmount.name() : __surchargeAmount,
        __pin.name() : __pin
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_120 = CTD_ANON_120


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_121 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2874, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_121_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2878, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_121_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2879, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_121_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2880, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_121_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2881, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_121_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2882, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_121_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2883, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}recyclingResponse uses Python identifier recyclingResponse
    __recyclingResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recyclingResponse'), 'recyclingResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_121_httpwww_vantivcnp_comschemarecyclingResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2884, 24), )

    
    recyclingResponse = property(__recyclingResponse.value, __recyclingResponse.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location,
        __recyclingResponse.name() : __recyclingResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_121 = CTD_ANON_121


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_122 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3025, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cardOrToken uses Python identifier cardOrToken
    __cardOrToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardOrToken'), 'cardOrToken', '__httpwww_vantivcnp_comschema_CTD_ANON_122_httpwww_vantivcnp_comschemacardOrToken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3019, 4), )

    
    cardOrToken = property(__cardOrToken.value, __cardOrToken.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_vantivcnp_comschema_CTD_ANON_122_httpwww_vantivcnp_comschemaorderId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3029, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cardOrToken.name() : __cardOrToken,
        __orderId.name() : __orderId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_122 = CTD_ANON_122


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_123 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3072, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_123_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3076, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_vantivcnp_comschema_CTD_ANON_123_httpwww_vantivcnp_comschemaorderId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3077, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_123_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3078, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_123_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3079, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_123_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3080, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}updatedCard uses Python identifier updatedCard
    __updatedCard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'updatedCard'), 'updatedCard', '__httpwww_vantivcnp_comschema_CTD_ANON_123_httpwww_vantivcnp_comschemaupdatedCard', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3081, 24), )

    
    updatedCard = property(__updatedCard.value, __updatedCard.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalCard uses Python identifier originalCard
    __originalCard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalCard'), 'originalCard', '__httpwww_vantivcnp_comschema_CTD_ANON_123_httpwww_vantivcnp_comschemaoriginalCard', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3082, 24), )

    
    originalCard = property(__originalCard.value, __originalCard.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}updatedToken uses Python identifier updatedToken
    __updatedToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'updatedToken'), 'updatedToken', '__httpwww_vantivcnp_comschema_CTD_ANON_123_httpwww_vantivcnp_comschemaupdatedToken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3083, 24), )

    
    updatedToken = property(__updatedToken.value, __updatedToken.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalToken uses Python identifier originalToken
    __originalToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalToken'), 'originalToken', '__httpwww_vantivcnp_comschema_CTD_ANON_123_httpwww_vantivcnp_comschemaoriginalToken', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3084, 24), )

    
    originalToken = property(__originalToken.value, __originalToken.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __message.name() : __message,
        __updatedCard.name() : __updatedCard,
        __originalCard.name() : __originalCard,
        __updatedToken.name() : __updatedToken,
        __originalToken.name() : __originalToken
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_123 = CTD_ANON_123


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_124 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3112, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), 'billToAddress', '__httpwww_vantivcnp_comschema_CTD_ANON_124_httpwww_vantivcnp_comschemabillToAddress', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 77, 4), )

    
    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_vantivcnp_comschema_CTD_ANON_124_httpwww_vantivcnp_comschemaorderId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3116, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_vantivcnp_comschema_CTD_ANON_124_httpwww_vantivcnp_comschemaorderSource', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3117, 24), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}echeck uses Python identifier echeck
    __echeck = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'echeck'), 'echeck', '__httpwww_vantivcnp_comschema_CTD_ANON_124_httpwww_vantivcnp_comschemaecheck', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3119, 24), )

    
    echeck = property(__echeck.value, __echeck.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), 'merchantData', '__httpwww_vantivcnp_comschema_CTD_ANON_124_httpwww_vantivcnp_comschemamerchantData', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3120, 24), )

    
    merchantData = property(__merchantData.value, __merchantData.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __orderId.name() : __orderId,
        __orderSource.name() : __orderSource,
        __echeck.name() : __echeck,
        __merchantData.name() : __merchantData
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_124 = CTD_ANON_124


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_125 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3128, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), 'billToAddress', '__httpwww_vantivcnp_comschema_CTD_ANON_125_httpwww_vantivcnp_comschemabillToAddress', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 77, 4), )

    
    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_vantivcnp_comschema_CTD_ANON_125_httpwww_vantivcnp_comschemaorderId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3132, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_vantivcnp_comschema_CTD_ANON_125_httpwww_vantivcnp_comschemaorderSource', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3133, 24), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}echeck uses Python identifier echeck
    __echeck = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'echeck'), 'echeck', '__httpwww_vantivcnp_comschema_CTD_ANON_125_httpwww_vantivcnp_comschemaecheck', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3135, 24), )

    
    echeck = property(__echeck.value, __echeck.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), 'merchantData', '__httpwww_vantivcnp_comschema_CTD_ANON_125_httpwww_vantivcnp_comschemamerchantData', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3136, 24), )

    
    merchantData = property(__merchantData.value, __merchantData.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __orderId.name() : __orderId,
        __orderSource.name() : __orderSource,
        __echeck.name() : __echeck,
        __merchantData.name() : __merchantData
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_125 = CTD_ANON_125


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_126 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3144, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_126_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3148, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_126_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3149, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_126_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3150, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_126_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3151, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __message.name() : __message
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_126 = CTD_ANON_126


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_127 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3159, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_127_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3163, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_127_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3164, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_127_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3165, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_127_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3166, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __message.name() : __message
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_127 = CTD_ANON_127


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_128 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3174, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}fundingCustomerId uses Python identifier fundingCustomerId
    __fundingCustomerId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId'), 'fundingCustomerId', '__httpwww_vantivcnp_comschema_CTD_ANON_128_httpwww_vantivcnp_comschemafundingCustomerId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3180, 32), )

    
    fundingCustomerId = property(__fundingCustomerId.value, __fundingCustomerId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundingSubmerchantId uses Python identifier fundingSubmerchantId
    __fundingSubmerchantId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId'), 'fundingSubmerchantId', '__httpwww_vantivcnp_comschema_CTD_ANON_128_httpwww_vantivcnp_comschemafundingSubmerchantId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3181, 32), )

    
    fundingSubmerchantId = property(__fundingSubmerchantId.value, __fundingSubmerchantId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}vendorName uses Python identifier vendorName
    __vendorName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorName'), 'vendorName', '__httpwww_vantivcnp_comschema_CTD_ANON_128_httpwww_vantivcnp_comschemavendorName', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3183, 28), )

    
    vendorName = property(__vendorName.value, __vendorName.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_128_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3184, 28), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_128_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3185, 28), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}accountInfo uses Python identifier accountInfo
    __accountInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountInfo'), 'accountInfo', '__httpwww_vantivcnp_comschema_CTD_ANON_128_httpwww_vantivcnp_comschemaaccountInfo', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3186, 28), )

    
    accountInfo = property(__accountInfo.value, __accountInfo.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fundingCustomerId.name() : __fundingCustomerId,
        __fundingSubmerchantId.name() : __fundingSubmerchantId,
        __vendorName.name() : __vendorName,
        __fundsTransferId.name() : __fundsTransferId,
        __amount.name() : __amount,
        __accountInfo.name() : __accountInfo
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_128 = CTD_ANON_128


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_129 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3195, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}fundingCustomerId uses Python identifier fundingCustomerId
    __fundingCustomerId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId'), 'fundingCustomerId', '__httpwww_vantivcnp_comschema_CTD_ANON_129_httpwww_vantivcnp_comschemafundingCustomerId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3201, 32), )

    
    fundingCustomerId = property(__fundingCustomerId.value, __fundingCustomerId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundingSubmerchantId uses Python identifier fundingSubmerchantId
    __fundingSubmerchantId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId'), 'fundingSubmerchantId', '__httpwww_vantivcnp_comschema_CTD_ANON_129_httpwww_vantivcnp_comschemafundingSubmerchantId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3202, 32), )

    
    fundingSubmerchantId = property(__fundingSubmerchantId.value, __fundingSubmerchantId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}vendorName uses Python identifier vendorName
    __vendorName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorName'), 'vendorName', '__httpwww_vantivcnp_comschema_CTD_ANON_129_httpwww_vantivcnp_comschemavendorName', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3204, 28), )

    
    vendorName = property(__vendorName.value, __vendorName.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_129_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3205, 28), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_129_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3206, 28), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}accountInfo uses Python identifier accountInfo
    __accountInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountInfo'), 'accountInfo', '__httpwww_vantivcnp_comschema_CTD_ANON_129_httpwww_vantivcnp_comschemaaccountInfo', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3207, 28), )

    
    accountInfo = property(__accountInfo.value, __accountInfo.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fundingCustomerId.name() : __fundingCustomerId,
        __fundingSubmerchantId.name() : __fundingSubmerchantId,
        __vendorName.name() : __vendorName,
        __fundsTransferId.name() : __fundsTransferId,
        __amount.name() : __amount,
        __accountInfo.name() : __accountInfo
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_129 = CTD_ANON_129


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_130 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3217, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}fundingSubmerchantId uses Python identifier fundingSubmerchantId
    __fundingSubmerchantId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId'), 'fundingSubmerchantId', '__httpwww_vantivcnp_comschema_CTD_ANON_130_httpwww_vantivcnp_comschemafundingSubmerchantId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3222, 28), )

    
    fundingSubmerchantId = property(__fundingSubmerchantId.value, __fundingSubmerchantId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}submerchantName uses Python identifier submerchantName
    __submerchantName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'submerchantName'), 'submerchantName', '__httpwww_vantivcnp_comschema_CTD_ANON_130_httpwww_vantivcnp_comschemasubmerchantName', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3223, 28), )

    
    submerchantName = property(__submerchantName.value, __submerchantName.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_130_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3224, 28), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_130_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3225, 28), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}accountInfo uses Python identifier accountInfo
    __accountInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountInfo'), 'accountInfo', '__httpwww_vantivcnp_comschema_CTD_ANON_130_httpwww_vantivcnp_comschemaaccountInfo', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3226, 28), )

    
    accountInfo = property(__accountInfo.value, __accountInfo.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customIdentifier uses Python identifier customIdentifier
    __customIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customIdentifier'), 'customIdentifier', '__httpwww_vantivcnp_comschema_CTD_ANON_130_httpwww_vantivcnp_comschemacustomIdentifier', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3227, 28), )

    
    customIdentifier = property(__customIdentifier.value, __customIdentifier.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fundingSubmerchantId.name() : __fundingSubmerchantId,
        __submerchantName.name() : __submerchantName,
        __fundsTransferId.name() : __fundsTransferId,
        __amount.name() : __amount,
        __accountInfo.name() : __accountInfo,
        __customIdentifier.name() : __customIdentifier
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_130 = CTD_ANON_130


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_131 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3236, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}fundingSubmerchantId uses Python identifier fundingSubmerchantId
    __fundingSubmerchantId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId'), 'fundingSubmerchantId', '__httpwww_vantivcnp_comschema_CTD_ANON_131_httpwww_vantivcnp_comschemafundingSubmerchantId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3241, 28), )

    
    fundingSubmerchantId = property(__fundingSubmerchantId.value, __fundingSubmerchantId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}submerchantName uses Python identifier submerchantName
    __submerchantName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'submerchantName'), 'submerchantName', '__httpwww_vantivcnp_comschema_CTD_ANON_131_httpwww_vantivcnp_comschemasubmerchantName', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3242, 28), )

    
    submerchantName = property(__submerchantName.value, __submerchantName.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_131_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3243, 28), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_131_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3244, 28), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}accountInfo uses Python identifier accountInfo
    __accountInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountInfo'), 'accountInfo', '__httpwww_vantivcnp_comschema_CTD_ANON_131_httpwww_vantivcnp_comschemaaccountInfo', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3245, 28), )

    
    accountInfo = property(__accountInfo.value, __accountInfo.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customIdentifier uses Python identifier customIdentifier
    __customIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customIdentifier'), 'customIdentifier', '__httpwww_vantivcnp_comschema_CTD_ANON_131_httpwww_vantivcnp_comschemacustomIdentifier', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3246, 28), )

    
    customIdentifier = property(__customIdentifier.value, __customIdentifier.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fundingSubmerchantId.name() : __fundingSubmerchantId,
        __submerchantName.name() : __submerchantName,
        __fundsTransferId.name() : __fundsTransferId,
        __amount.name() : __amount,
        __accountInfo.name() : __accountInfo,
        __customIdentifier.name() : __customIdentifier
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_131 = CTD_ANON_131


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_132 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3255, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}fundingCustomerId uses Python identifier fundingCustomerId
    __fundingCustomerId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId'), 'fundingCustomerId', '__httpwww_vantivcnp_comschema_CTD_ANON_132_httpwww_vantivcnp_comschemafundingCustomerId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3260, 28), )

    
    fundingCustomerId = property(__fundingCustomerId.value, __fundingCustomerId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customerName uses Python identifier customerName
    __customerName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerName'), 'customerName', '__httpwww_vantivcnp_comschema_CTD_ANON_132_httpwww_vantivcnp_comschemacustomerName', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3261, 28), )

    
    customerName = property(__customerName.value, __customerName.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_132_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3262, 28), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_132_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3263, 28), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}accountInfo uses Python identifier accountInfo
    __accountInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountInfo'), 'accountInfo', '__httpwww_vantivcnp_comschema_CTD_ANON_132_httpwww_vantivcnp_comschemaaccountInfo', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3264, 28), )

    
    accountInfo = property(__accountInfo.value, __accountInfo.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customIdentifier uses Python identifier customIdentifier
    __customIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customIdentifier'), 'customIdentifier', '__httpwww_vantivcnp_comschema_CTD_ANON_132_httpwww_vantivcnp_comschemacustomIdentifier', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3265, 28), )

    
    customIdentifier = property(__customIdentifier.value, __customIdentifier.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fundingCustomerId.name() : __fundingCustomerId,
        __customerName.name() : __customerName,
        __fundsTransferId.name() : __fundsTransferId,
        __amount.name() : __amount,
        __accountInfo.name() : __accountInfo,
        __customIdentifier.name() : __customIdentifier
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_132 = CTD_ANON_132


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_133 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3274, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}fundingCustomerId uses Python identifier fundingCustomerId
    __fundingCustomerId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId'), 'fundingCustomerId', '__httpwww_vantivcnp_comschema_CTD_ANON_133_httpwww_vantivcnp_comschemafundingCustomerId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3279, 28), )

    
    fundingCustomerId = property(__fundingCustomerId.value, __fundingCustomerId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customerName uses Python identifier customerName
    __customerName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerName'), 'customerName', '__httpwww_vantivcnp_comschema_CTD_ANON_133_httpwww_vantivcnp_comschemacustomerName', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3280, 28), )

    
    customerName = property(__customerName.value, __customerName.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), 'fundsTransferId', '__httpwww_vantivcnp_comschema_CTD_ANON_133_httpwww_vantivcnp_comschemafundsTransferId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3281, 28), )

    
    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_vantivcnp_comschema_CTD_ANON_133_httpwww_vantivcnp_comschemaamount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3282, 28), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}accountInfo uses Python identifier accountInfo
    __accountInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountInfo'), 'accountInfo', '__httpwww_vantivcnp_comschema_CTD_ANON_133_httpwww_vantivcnp_comschemaaccountInfo', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3283, 28), )

    
    accountInfo = property(__accountInfo.value, __accountInfo.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}customIdentifier uses Python identifier customIdentifier
    __customIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customIdentifier'), 'customIdentifier', '__httpwww_vantivcnp_comschema_CTD_ANON_133_httpwww_vantivcnp_comschemacustomIdentifier', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3284, 28), )

    
    customIdentifier = property(__customIdentifier.value, __customIdentifier.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fundingCustomerId.name() : __fundingCustomerId,
        __customerName.name() : __customerName,
        __fundsTransferId.name() : __fundsTransferId,
        __amount.name() : __amount,
        __accountInfo.name() : __accountInfo,
        __customIdentifier.name() : __customIdentifier
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_133 = CTD_ANON_133


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_134 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3339, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}processingInstructions uses Python identifier processingInstructions
    __processingInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), 'processingInstructions', '__httpwww_vantivcnp_comschema_CTD_ANON_134_httpwww_vantivcnp_comschemaprocessingInstructions', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1090, 4), )

    
    processingInstructions = property(__processingInstructions.value, __processingInstructions.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_134_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3343, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __processingInstructions.name() : __processingInstructions,
        __cnpTxnId.name() : __cnpTxnId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_134 = CTD_ANON_134


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_135 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3352, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_135_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3356, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_135_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3357, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_135_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3358, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_135_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3359, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_135_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3360, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_135_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3361, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}recyclingResponse uses Python identifier recyclingResponse
    __recyclingResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recyclingResponse'), 'recyclingResponse', '__httpwww_vantivcnp_comschema_CTD_ANON_135_httpwww_vantivcnp_comschemarecyclingResponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3362, 24), )

    
    recyclingResponse = property(__recyclingResponse.value, __recyclingResponse.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location,
        __recyclingResponse.name() : __recyclingResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_135 = CTD_ANON_135


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_136 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3377, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_136_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3381, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_136 = CTD_ANON_136


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_137 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3389, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_137_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3393, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_137_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3394, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_137_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3395, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_vantivcnp_comschema_CTD_ANON_137_httpwww_vantivcnp_comschemapostDate', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3396, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_137_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3397, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_137_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3398, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __location.name() : __location
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_137 = CTD_ANON_137


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_138 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3406, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_138_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3410, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_vantivcnp_comschema_CTD_ANON_138_httpwww_vantivcnp_comschemacard', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3411, 24), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalRefCode uses Python identifier originalRefCode
    __originalRefCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalRefCode'), 'originalRefCode', '__httpwww_vantivcnp_comschema_CTD_ANON_138_httpwww_vantivcnp_comschemaoriginalRefCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3412, 24), )

    
    originalRefCode = property(__originalRefCode.value, __originalRefCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalAmount uses Python identifier originalAmount
    __originalAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalAmount'), 'originalAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_138_httpwww_vantivcnp_comschemaoriginalAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3413, 24), )

    
    originalAmount = property(__originalAmount.value, __originalAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalTxnTime uses Python identifier originalTxnTime
    __originalTxnTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalTxnTime'), 'originalTxnTime', '__httpwww_vantivcnp_comschema_CTD_ANON_138_httpwww_vantivcnp_comschemaoriginalTxnTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3414, 24), )

    
    originalTxnTime = property(__originalTxnTime.value, __originalTxnTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalSystemTraceId uses Python identifier originalSystemTraceId
    __originalSystemTraceId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalSystemTraceId'), 'originalSystemTraceId', '__httpwww_vantivcnp_comschema_CTD_ANON_138_httpwww_vantivcnp_comschemaoriginalSystemTraceId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3415, 24), )

    
    originalSystemTraceId = property(__originalSystemTraceId.value, __originalSystemTraceId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalSequenceNumber uses Python identifier originalSequenceNumber
    __originalSequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalSequenceNumber'), 'originalSequenceNumber', '__httpwww_vantivcnp_comschema_CTD_ANON_138_httpwww_vantivcnp_comschemaoriginalSequenceNumber', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3416, 24), )

    
    originalSequenceNumber = property(__originalSequenceNumber.value, __originalSequenceNumber.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __card.name() : __card,
        __originalRefCode.name() : __originalRefCode,
        __originalAmount.name() : __originalAmount,
        __originalTxnTime.name() : __originalTxnTime,
        __originalSystemTraceId.name() : __originalSystemTraceId,
        __originalSequenceNumber.name() : __originalSequenceNumber
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_138 = CTD_ANON_138


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_139 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3424, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_139_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3428, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_vantivcnp_comschema_CTD_ANON_139_httpwww_vantivcnp_comschemacard', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3429, 24), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalRefCode uses Python identifier originalRefCode
    __originalRefCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalRefCode'), 'originalRefCode', '__httpwww_vantivcnp_comschema_CTD_ANON_139_httpwww_vantivcnp_comschemaoriginalRefCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3430, 24), )

    
    originalRefCode = property(__originalRefCode.value, __originalRefCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalAmount uses Python identifier originalAmount
    __originalAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalAmount'), 'originalAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_139_httpwww_vantivcnp_comschemaoriginalAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3431, 24), )

    
    originalAmount = property(__originalAmount.value, __originalAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalTxnTime uses Python identifier originalTxnTime
    __originalTxnTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalTxnTime'), 'originalTxnTime', '__httpwww_vantivcnp_comschema_CTD_ANON_139_httpwww_vantivcnp_comschemaoriginalTxnTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3432, 24), )

    
    originalTxnTime = property(__originalTxnTime.value, __originalTxnTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalSystemTraceId uses Python identifier originalSystemTraceId
    __originalSystemTraceId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalSystemTraceId'), 'originalSystemTraceId', '__httpwww_vantivcnp_comschema_CTD_ANON_139_httpwww_vantivcnp_comschemaoriginalSystemTraceId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3433, 24), )

    
    originalSystemTraceId = property(__originalSystemTraceId.value, __originalSystemTraceId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalSequenceNumber uses Python identifier originalSequenceNumber
    __originalSequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalSequenceNumber'), 'originalSequenceNumber', '__httpwww_vantivcnp_comschema_CTD_ANON_139_httpwww_vantivcnp_comschemaoriginalSequenceNumber', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3434, 24), )

    
    originalSequenceNumber = property(__originalSequenceNumber.value, __originalSequenceNumber.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __card.name() : __card,
        __originalRefCode.name() : __originalRefCode,
        __originalAmount.name() : __originalAmount,
        __originalTxnTime.name() : __originalTxnTime,
        __originalSystemTraceId.name() : __originalSystemTraceId,
        __originalSequenceNumber.name() : __originalSequenceNumber
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_139 = CTD_ANON_139


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_140 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3442, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_140_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3446, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_vantivcnp_comschema_CTD_ANON_140_httpwww_vantivcnp_comschemacard', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3447, 24), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}virtualGiftCardBin uses Python identifier virtualGiftCardBin
    __virtualGiftCardBin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'virtualGiftCardBin'), 'virtualGiftCardBin', '__httpwww_vantivcnp_comschema_CTD_ANON_140_httpwww_vantivcnp_comschemavirtualGiftCardBin', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3448, 24), )

    
    virtualGiftCardBin = property(__virtualGiftCardBin.value, __virtualGiftCardBin.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalRefCode uses Python identifier originalRefCode
    __originalRefCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalRefCode'), 'originalRefCode', '__httpwww_vantivcnp_comschema_CTD_ANON_140_httpwww_vantivcnp_comschemaoriginalRefCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3449, 24), )

    
    originalRefCode = property(__originalRefCode.value, __originalRefCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalAmount uses Python identifier originalAmount
    __originalAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalAmount'), 'originalAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_140_httpwww_vantivcnp_comschemaoriginalAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3450, 24), )

    
    originalAmount = property(__originalAmount.value, __originalAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalTxnTime uses Python identifier originalTxnTime
    __originalTxnTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalTxnTime'), 'originalTxnTime', '__httpwww_vantivcnp_comschema_CTD_ANON_140_httpwww_vantivcnp_comschemaoriginalTxnTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3451, 24), )

    
    originalTxnTime = property(__originalTxnTime.value, __originalTxnTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalSystemTraceId uses Python identifier originalSystemTraceId
    __originalSystemTraceId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalSystemTraceId'), 'originalSystemTraceId', '__httpwww_vantivcnp_comschema_CTD_ANON_140_httpwww_vantivcnp_comschemaoriginalSystemTraceId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3452, 24), )

    
    originalSystemTraceId = property(__originalSystemTraceId.value, __originalSystemTraceId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalSequenceNumber uses Python identifier originalSequenceNumber
    __originalSequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalSequenceNumber'), 'originalSequenceNumber', '__httpwww_vantivcnp_comschema_CTD_ANON_140_httpwww_vantivcnp_comschemaoriginalSequenceNumber', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3453, 24), )

    
    originalSequenceNumber = property(__originalSequenceNumber.value, __originalSequenceNumber.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __card.name() : __card,
        __virtualGiftCardBin.name() : __virtualGiftCardBin,
        __originalRefCode.name() : __originalRefCode,
        __originalAmount.name() : __originalAmount,
        __originalTxnTime.name() : __originalTxnTime,
        __originalSystemTraceId.name() : __originalSystemTraceId,
        __originalSequenceNumber.name() : __originalSequenceNumber
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_140 = CTD_ANON_140


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_141 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3461, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_141_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3465, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_vantivcnp_comschema_CTD_ANON_141_httpwww_vantivcnp_comschemacard', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3466, 24), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalRefCode uses Python identifier originalRefCode
    __originalRefCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalRefCode'), 'originalRefCode', '__httpwww_vantivcnp_comschema_CTD_ANON_141_httpwww_vantivcnp_comschemaoriginalRefCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3467, 24), )

    
    originalRefCode = property(__originalRefCode.value, __originalRefCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalTxnTime uses Python identifier originalTxnTime
    __originalTxnTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalTxnTime'), 'originalTxnTime', '__httpwww_vantivcnp_comschema_CTD_ANON_141_httpwww_vantivcnp_comschemaoriginalTxnTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3468, 24), )

    
    originalTxnTime = property(__originalTxnTime.value, __originalTxnTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalSystemTraceId uses Python identifier originalSystemTraceId
    __originalSystemTraceId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalSystemTraceId'), 'originalSystemTraceId', '__httpwww_vantivcnp_comschema_CTD_ANON_141_httpwww_vantivcnp_comschemaoriginalSystemTraceId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3469, 24), )

    
    originalSystemTraceId = property(__originalSystemTraceId.value, __originalSystemTraceId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalSequenceNumber uses Python identifier originalSequenceNumber
    __originalSequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalSequenceNumber'), 'originalSequenceNumber', '__httpwww_vantivcnp_comschema_CTD_ANON_141_httpwww_vantivcnp_comschemaoriginalSequenceNumber', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3470, 24), )

    
    originalSequenceNumber = property(__originalSequenceNumber.value, __originalSequenceNumber.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __card.name() : __card,
        __originalRefCode.name() : __originalRefCode,
        __originalTxnTime.name() : __originalTxnTime,
        __originalSystemTraceId.name() : __originalSystemTraceId,
        __originalSequenceNumber.name() : __originalSequenceNumber
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_141 = CTD_ANON_141


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_142 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3478, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_142_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3482, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_vantivcnp_comschema_CTD_ANON_142_httpwww_vantivcnp_comschemacard', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3483, 24), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalRefCode uses Python identifier originalRefCode
    __originalRefCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalRefCode'), 'originalRefCode', '__httpwww_vantivcnp_comschema_CTD_ANON_142_httpwww_vantivcnp_comschemaoriginalRefCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3484, 24), )

    
    originalRefCode = property(__originalRefCode.value, __originalRefCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalAmount uses Python identifier originalAmount
    __originalAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalAmount'), 'originalAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_142_httpwww_vantivcnp_comschemaoriginalAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3485, 24), )

    
    originalAmount = property(__originalAmount.value, __originalAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalTxnTime uses Python identifier originalTxnTime
    __originalTxnTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalTxnTime'), 'originalTxnTime', '__httpwww_vantivcnp_comschema_CTD_ANON_142_httpwww_vantivcnp_comschemaoriginalTxnTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3486, 24), )

    
    originalTxnTime = property(__originalTxnTime.value, __originalTxnTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalSystemTraceId uses Python identifier originalSystemTraceId
    __originalSystemTraceId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalSystemTraceId'), 'originalSystemTraceId', '__httpwww_vantivcnp_comschema_CTD_ANON_142_httpwww_vantivcnp_comschemaoriginalSystemTraceId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3487, 24), )

    
    originalSystemTraceId = property(__originalSystemTraceId.value, __originalSystemTraceId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalSequenceNumber uses Python identifier originalSequenceNumber
    __originalSequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalSequenceNumber'), 'originalSequenceNumber', '__httpwww_vantivcnp_comschema_CTD_ANON_142_httpwww_vantivcnp_comschemaoriginalSequenceNumber', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3488, 24), )

    
    originalSequenceNumber = property(__originalSequenceNumber.value, __originalSequenceNumber.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __card.name() : __card,
        __originalRefCode.name() : __originalRefCode,
        __originalAmount.name() : __originalAmount,
        __originalTxnTime.name() : __originalTxnTime,
        __originalSystemTraceId.name() : __originalSystemTraceId,
        __originalSequenceNumber.name() : __originalSequenceNumber
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_142 = CTD_ANON_142


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_143 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3496, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_143_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3500, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_vantivcnp_comschema_CTD_ANON_143_httpwww_vantivcnp_comschemacard', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3501, 24), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalRefCode uses Python identifier originalRefCode
    __originalRefCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalRefCode'), 'originalRefCode', '__httpwww_vantivcnp_comschema_CTD_ANON_143_httpwww_vantivcnp_comschemaoriginalRefCode', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3502, 24), )

    
    originalRefCode = property(__originalRefCode.value, __originalRefCode.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalAmount uses Python identifier originalAmount
    __originalAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalAmount'), 'originalAmount', '__httpwww_vantivcnp_comschema_CTD_ANON_143_httpwww_vantivcnp_comschemaoriginalAmount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3503, 24), )

    
    originalAmount = property(__originalAmount.value, __originalAmount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalTxnTime uses Python identifier originalTxnTime
    __originalTxnTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalTxnTime'), 'originalTxnTime', '__httpwww_vantivcnp_comschema_CTD_ANON_143_httpwww_vantivcnp_comschemaoriginalTxnTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3504, 24), )

    
    originalTxnTime = property(__originalTxnTime.value, __originalTxnTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalSystemTraceId uses Python identifier originalSystemTraceId
    __originalSystemTraceId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalSystemTraceId'), 'originalSystemTraceId', '__httpwww_vantivcnp_comschema_CTD_ANON_143_httpwww_vantivcnp_comschemaoriginalSystemTraceId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3505, 24), )

    
    originalSystemTraceId = property(__originalSystemTraceId.value, __originalSystemTraceId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}originalSequenceNumber uses Python identifier originalSequenceNumber
    __originalSequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalSequenceNumber'), 'originalSequenceNumber', '__httpwww_vantivcnp_comschema_CTD_ANON_143_httpwww_vantivcnp_comschemaoriginalSequenceNumber', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3506, 24), )

    
    originalSequenceNumber = property(__originalSequenceNumber.value, __originalSequenceNumber.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __card.name() : __card,
        __originalRefCode.name() : __originalRefCode,
        __originalAmount.name() : __originalAmount,
        __originalTxnTime.name() : __originalTxnTime,
        __originalSystemTraceId.name() : __originalSystemTraceId,
        __originalSequenceNumber.name() : __originalSequenceNumber
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_143 = CTD_ANON_143


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_144 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3514, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}origId uses Python identifier origId
    __origId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'origId'), 'origId', '__httpwww_vantivcnp_comschema_CTD_ANON_144_httpwww_vantivcnp_comschemaorigId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3518, 24), )

    
    origId = property(__origId.value, __origId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}origActionType uses Python identifier origActionType
    __origActionType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'origActionType'), 'origActionType', '__httpwww_vantivcnp_comschema_CTD_ANON_144_httpwww_vantivcnp_comschemaorigActionType', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3519, 24), )

    
    origActionType = property(__origActionType.value, __origActionType.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}origCnpTxnId uses Python identifier origCnpTxnId
    __origCnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'origCnpTxnId'), 'origCnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_144_httpwww_vantivcnp_comschemaorigCnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3520, 24), )

    
    origCnpTxnId = property(__origCnpTxnId.value, __origCnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}showStatusOnly uses Python identifier showStatusOnly
    __showStatusOnly = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'showStatusOnly'), 'showStatusOnly', '__httpwww_vantivcnp_comschema_CTD_ANON_144_httpwww_vantivcnp_comschemashowStatusOnly', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3521, 24), )

    
    showStatusOnly = property(__showStatusOnly.value, __showStatusOnly.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __origId.name() : __origId,
        __origActionType.name() : __origActionType,
        __origCnpTxnId.name() : __origCnpTxnId,
        __showStatusOnly.name() : __showStatusOnly
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_144 = CTD_ANON_144


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_145 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3529, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_145_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3533, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_145_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3534, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_145_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3535, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_145_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3536, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}matchCount uses Python identifier matchCount
    __matchCount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'matchCount'), 'matchCount', '__httpwww_vantivcnp_comschema_CTD_ANON_145_httpwww_vantivcnp_comschemamatchCount', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3537, 24), )

    
    matchCount = property(__matchCount.value, __matchCount.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}results_max10 uses Python identifier results_max10
    __results_max10 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'results_max10'), 'results_max10', '__httpwww_vantivcnp_comschema_CTD_ANON_145_httpwww_vantivcnp_comschemaresults_max10', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3538, 24), )

    
    results_max10 = property(__results_max10.value, __results_max10.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __message.name() : __message,
        __location.name() : __location,
        __matchCount.name() : __matchCount,
        __results_max10.name() : __results_max10
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_145 = CTD_ANON_145


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_146 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3552, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_146_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3556, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_146_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3557, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_146_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3558, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_146_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3559, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __message.name() : __message,
        __location.name() : __location
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_146 = CTD_ANON_146


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_147 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3567, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}serviceId uses Python identifier serviceId
    __serviceId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'serviceId'), 'serviceId', '__httpwww_vantivcnp_comschema_CTD_ANON_147_httpwww_vantivcnp_comschemaserviceId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3571, 24), )

    
    serviceId = property(__serviceId.value, __serviceId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}pathId uses Python identifier pathId
    __pathId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pathId'), 'pathId', '__httpwww_vantivcnp_comschema_CTD_ANON_147_httpwww_vantivcnp_comschemapathId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3572, 24), )

    
    pathId = property(__pathId.value, __pathId.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __serviceId.name() : __serviceId,
        __pathId.name() : __pathId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_147 = CTD_ANON_147


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_148 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3580, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.vantivcnp.com/schema}cnpTxnId uses Python identifier cnpTxnId
    __cnpTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), 'cnpTxnId', '__httpwww_vantivcnp_comschema_CTD_ANON_148_httpwww_vantivcnp_comschemacnpTxnId', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3584, 24), )

    
    cnpTxnId = property(__cnpTxnId.value, __cnpTxnId.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_vantivcnp_comschema_CTD_ANON_148_httpwww_vantivcnp_comschemaresponse', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3585, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_vantivcnp_comschema_CTD_ANON_148_httpwww_vantivcnp_comschemaresponseTime', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3586, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_vantivcnp_comschema_CTD_ANON_148_httpwww_vantivcnp_comschemamessage', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3587, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.vantivcnp.com/schema}location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'location'), 'location', '__httpwww_vantivcnp_comschema_CTD_ANON_148_httpwww_vantivcnp_comschemalocation', False, pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3588, 24), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Attribute id inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.vantivcnp.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.vantivcnp.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cnpTxnId.name() : __cnpTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __message.name() : __message,
        __location.name() : __location
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_148 = CTD_ANON_148


cardOrToken = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardOrToken'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3019, 4))
Namespace.addCategoryObject('elementBinding', cardOrToken.name().localName(), cardOrToken)

authentication = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authentication'), CTD_ANON, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 5, 4))
Namespace.addCategoryObject('elementBinding', authentication.name().localName(), authentication)

billToAddress = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), contact, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 77, 4))
Namespace.addCategoryObject('elementBinding', billToAddress.name().localName(), billToAddress)

lodgingCharge = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'lodgingCharge'), CTD_ANON_, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 200, 4))
Namespace.addCategoryObject('elementBinding', lodgingCharge.name().localName(), lodgingCharge)

customerInfo = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerInfo'), CTD_ANON_2, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 508, 4))
Namespace.addCategoryObject('elementBinding', customerInfo.name().localName(), customerInfo)

shipToAddress = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress'), contact, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 942, 4))
Namespace.addCategoryObject('elementBinding', shipToAddress.name().localName(), shipToAddress)

authInformation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authInformation'), CTD_ANON_3, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 944, 4))
Namespace.addCategoryObject('elementBinding', authInformation.name().localName(), authInformation)

healthcareIIAS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'healthcareIIAS'), CTD_ANON_4, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 969, 4))
Namespace.addCategoryObject('elementBinding', healthcareIIAS.name().localName(), healthcareIIAS)

healthcareAmounts = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'healthcareAmounts'), CTD_ANON_5, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 978, 4))
Namespace.addCategoryObject('elementBinding', healthcareAmounts.name().localName(), healthcareAmounts)

enhancedData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), CTD_ANON_6, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 991, 4))
Namespace.addCategoryObject('elementBinding', enhancedData.name().localName(), enhancedData)

detailTax = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'detailTax'), CTD_ANON_7, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1012, 4))
Namespace.addCategoryObject('elementBinding', detailTax.name().localName(), detailTax)

lineItemData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'lineItemData'), CTD_ANON_8, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1024, 4))
Namespace.addCategoryObject('elementBinding', lineItemData.name().localName(), lineItemData)

customBilling = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), CTD_ANON_9, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1076, 4))
Namespace.addCategoryObject('elementBinding', customBilling.name().localName(), customBilling)

processingInstructions = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), CTD_ANON_10, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1090, 4))
Namespace.addCategoryObject('elementBinding', processingInstructions.name().localName(), processingInstructions)

pos = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pos'), CTD_ANON_11, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1098, 4))
Namespace.addCategoryObject('elementBinding', pos.name().localName(), pos)

enhancedAuthResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enhancedAuthResponse'), CTD_ANON_12, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1260, 4))
Namespace.addCategoryObject('elementBinding', enhancedAuthResponse.name().localName(), enhancedAuthResponse)

fraudResult = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_14, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4))
Namespace.addCategoryObject('elementBinding', fraudResult.name().localName(), fraudResult)

giftCardResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_15, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4))
Namespace.addCategoryObject('elementBinding', giftCardResponse.name().localName(), giftCardResponse)

virtualGiftCardResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'virtualGiftCardResponse'), CTD_ANON_16, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1713, 4))
Namespace.addCategoryObject('elementBinding', virtualGiftCardResponse.name().localName(), virtualGiftCardResponse)

accountUpdater = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), CTD_ANON_17, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1927, 4))
Namespace.addCategoryObject('elementBinding', accountUpdater.name().localName(), accountUpdater)

wallet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'wallet'), CTD_ANON_18, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2151, 4))
Namespace.addCategoryObject('elementBinding', wallet.name().localName(), wallet)

applepayResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'applepayResponse'), CTD_ANON_19, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2178, 4))
Namespace.addCategoryObject('elementBinding', applepayResponse.name().localName(), applepayResponse)

androidpayResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'androidpayResponse'), CTD_ANON_20, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2194, 4))
Namespace.addCategoryObject('elementBinding', androidpayResponse.name().localName(), androidpayResponse)

sepaDirectDebitResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sepaDirectDebitResponse'), CTD_ANON_21, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2218, 4))
Namespace.addCategoryObject('elementBinding', sepaDirectDebitResponse.name().localName(), sepaDirectDebitResponse)

idealResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'idealResponse'), CTD_ANON_22, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2234, 4))
Namespace.addCategoryObject('elementBinding', idealResponse.name().localName(), idealResponse)

giropayResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giropayResponse'), CTD_ANON_23, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2250, 4))
Namespace.addCategoryObject('elementBinding', giropayResponse.name().localName(), giropayResponse)

sofortResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sofortResponse'), CTD_ANON_24, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2266, 4))
Namespace.addCategoryObject('elementBinding', sofortResponse.name().localName(), sofortResponse)

pinlessDebitResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pinlessDebitResponse'), CTD_ANON_25, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2619, 4))
Namespace.addCategoryObject('elementBinding', pinlessDebitResponse.name().localName(), pinlessDebitResponse)

lodgingInfo = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'lodgingInfo'), CTD_ANON_26, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2835, 4))
Namespace.addCategoryObject('elementBinding', lodgingInfo.name().localName(), lodgingInfo)

cnpRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpRequest'), CTD_ANON_27, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2904, 4))
Namespace.addCategoryObject('elementBinding', cnpRequest.name().localName(), cnpRequest)

RFRRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RFRRequest'), CTD_ANON_28, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2918, 4))
Namespace.addCategoryObject('elementBinding', RFRRequest.name().localName(), RFRRequest)

batchRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'batchRequest'), CTD_ANON_29, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2926, 4))
Namespace.addCategoryObject('elementBinding', batchRequest.name().localName(), batchRequest)

card = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), cardType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3020, 4))
Namespace.addCategoryObject('elementBinding', card.name().localName(), card)

token = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'token'), cardTokenType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3021, 4))
Namespace.addCategoryObject('elementBinding', token.name().localName(), token)

cnpResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpResponse'), CTD_ANON_30, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3037, 4))
Namespace.addCategoryObject('elementBinding', cnpResponse.name().localName(), cnpResponse)

RFRResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RFRResponse'), CTD_ANON_31, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3052, 4))
Namespace.addCategoryObject('elementBinding', RFRResponse.name().localName(), RFRResponse)

batchResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'batchResponse'), CTD_ANON_32, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3058, 4))
Namespace.addCategoryObject('elementBinding', batchResponse.name().localName(), batchResponse)

accountUpdateFileRequestData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountUpdateFileRequestData'), CTD_ANON_33, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3102, 4))
Namespace.addCategoryObject('elementBinding', accountUpdateFileRequestData.name().localName(), accountUpdateFileRequestData)

cnpOnlineResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpOnlineResponse'), CTD_ANON_34, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3326, 4))
Namespace.addCategoryObject('elementBinding', cnpOnlineResponse.name().localName(), cnpOnlineResponse)

recurringTransaction = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recurringTransaction'), recurringTransactionType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 215, 4))
Namespace.addCategoryObject('elementBinding', recurringTransaction.name().localName(), recurringTransaction)

recurringTransactionResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recurringTransactionResponse'), recurringTransactionResponseType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 216, 4))
Namespace.addCategoryObject('elementBinding', recurringTransactionResponse.name().localName(), recurringTransactionResponse)

transaction = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transaction'), transactionType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 456, 4))
Namespace.addCategoryObject('elementBinding', transaction.name().localName(), transaction)

cnpOnlineRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpOnlineRequest'), CTD_ANON_36, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3313, 4))
Namespace.addCategoryObject('elementBinding', cnpOnlineRequest.name().localName(), cnpOnlineRequest)

cancelSubscription = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cancelSubscription'), CTD_ANON_37, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 240, 4))
Namespace.addCategoryObject('elementBinding', cancelSubscription.name().localName(), cancelSubscription)

updateSubscription = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'updateSubscription'), CTD_ANON_38, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 252, 4))
Namespace.addCategoryObject('elementBinding', updateSubscription.name().localName(), updateSubscription)

createPlan = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'createPlan'), CTD_ANON_39, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 278, 4))
Namespace.addCategoryObject('elementBinding', createPlan.name().localName(), createPlan)

updatePlan = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'updatePlan'), CTD_ANON_40, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 298, 4))
Namespace.addCategoryObject('elementBinding', updatePlan.name().localName(), updatePlan)

cancelSubscriptionResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cancelSubscriptionResponse'), CTD_ANON_41, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 311, 4))
Namespace.addCategoryObject('elementBinding', cancelSubscriptionResponse.name().localName(), cancelSubscriptionResponse)

updateSubscriptionResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'updateSubscriptionResponse'), CTD_ANON_42, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 323, 4))
Namespace.addCategoryObject('elementBinding', updateSubscriptionResponse.name().localName(), updateSubscriptionResponse)

createPlanResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'createPlanResponse'), CTD_ANON_43, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 336, 4))
Namespace.addCategoryObject('elementBinding', createPlanResponse.name().localName(), createPlanResponse)

updatePlanResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'updatePlanResponse'), CTD_ANON_44, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 348, 4))
Namespace.addCategoryObject('elementBinding', updatePlanResponse.name().localName(), updatePlanResponse)

transactionResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transactionResponse'), transactionTypeWithReportGroup, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1159, 4))
Namespace.addCategoryObject('elementBinding', transactionResponse.name().localName(), transactionResponse)

authorization = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authorization'), CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 539, 4))
Namespace.addCategoryObject('elementBinding', authorization.name().localName(), authorization)

authReversal = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authReversal'), CTD_ANON_46, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 595, 4))
Namespace.addCategoryObject('elementBinding', authReversal.name().localName(), authReversal)

giftCardAuthReversal = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardAuthReversal'), CTD_ANON_47, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 611, 4))
Namespace.addCategoryObject('elementBinding', giftCardAuthReversal.name().localName(), giftCardAuthReversal)

capture = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'capture'), CTD_ANON_48, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 629, 4))
Namespace.addCategoryObject('elementBinding', capture.name().localName(), capture)

giftCardCapture = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardCapture'), CTD_ANON_49, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 650, 4))
Namespace.addCategoryObject('elementBinding', giftCardCapture.name().localName(), giftCardCapture)

forceCapture = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'forceCapture'), CTD_ANON_50, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 667, 4))
Namespace.addCategoryObject('elementBinding', forceCapture.name().localName(), forceCapture)

captureGivenAuth = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'captureGivenAuth'), CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 701, 4))
Namespace.addCategoryObject('elementBinding', captureGivenAuth.name().localName(), captureGivenAuth)

sale = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sale'), CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 739, 4))
Namespace.addCategoryObject('elementBinding', sale.name().localName(), sale)

credit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'credit'), CTD_ANON_53, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 805, 4))
Namespace.addCategoryObject('elementBinding', credit.name().localName(), credit)

giftCardCredit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardCredit'), CTD_ANON_54, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 856, 4))
Namespace.addCategoryObject('elementBinding', giftCardCredit.name().localName(), giftCardCredit)

activate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'activate'), CTD_ANON_55, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 880, 4))
Namespace.addCategoryObject('elementBinding', activate.name().localName(), activate)

deactivate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deactivate'), CTD_ANON_56, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 898, 4))
Namespace.addCategoryObject('elementBinding', deactivate.name().localName(), deactivate)

load = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'load'), CTD_ANON_57, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 912, 4))
Namespace.addCategoryObject('elementBinding', load.name().localName(), load)

unload = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'unload'), CTD_ANON_58, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 927, 4))
Namespace.addCategoryObject('elementBinding', unload.name().localName(), unload)

balanceInquiry = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'balanceInquiry'), CTD_ANON_59, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 955, 4))
Namespace.addCategoryObject('elementBinding', balanceInquiry.name().localName(), balanceInquiry)

registerTokenRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'registerTokenRequest'), registerTokenRequestType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1110, 4))
Namespace.addCategoryObject('elementBinding', registerTokenRequest.name().localName(), registerTokenRequest)

registerTokenResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'registerTokenResponse'), CTD_ANON_60, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1135, 4))
Namespace.addCategoryObject('elementBinding', registerTokenResponse.name().localName(), registerTokenResponse)

authorizationResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authorizationResponse'), CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1161, 4))
Namespace.addCategoryObject('elementBinding', authorizationResponse.name().localName(), authorizationResponse)

authReversalResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authReversalResponse'), CTD_ANON_62, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1283, 4))
Namespace.addCategoryObject('elementBinding', authReversalResponse.name().localName(), authReversalResponse)

giftCardAuthReversalResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardAuthReversalResponse'), CTD_ANON_63, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1303, 4))
Namespace.addCategoryObject('elementBinding', giftCardAuthReversalResponse.name().localName(), giftCardAuthReversalResponse)

depositReversalResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'depositReversalResponse'), CTD_ANON_64, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1322, 4))
Namespace.addCategoryObject('elementBinding', depositReversalResponse.name().localName(), depositReversalResponse)

refundReversalResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'refundReversalResponse'), CTD_ANON_65, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1342, 4))
Namespace.addCategoryObject('elementBinding', refundReversalResponse.name().localName(), refundReversalResponse)

activateReversalResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'activateReversalResponse'), CTD_ANON_66, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1362, 4))
Namespace.addCategoryObject('elementBinding', activateReversalResponse.name().localName(), activateReversalResponse)

deactivateReversalResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deactivateReversalResponse'), CTD_ANON_67, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1382, 4))
Namespace.addCategoryObject('elementBinding', deactivateReversalResponse.name().localName(), deactivateReversalResponse)

loadReversalResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'loadReversalResponse'), CTD_ANON_68, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1402, 4))
Namespace.addCategoryObject('elementBinding', loadReversalResponse.name().localName(), loadReversalResponse)

unloadReversalResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'unloadReversalResponse'), CTD_ANON_69, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1422, 4))
Namespace.addCategoryObject('elementBinding', unloadReversalResponse.name().localName(), unloadReversalResponse)

captureResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'captureResponse'), CTD_ANON_70, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1442, 4))
Namespace.addCategoryObject('elementBinding', captureResponse.name().localName(), captureResponse)

giftCardCaptureResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardCaptureResponse'), CTD_ANON_71, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1466, 4))
Namespace.addCategoryObject('elementBinding', giftCardCaptureResponse.name().localName(), giftCardCaptureResponse)

forceCaptureResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'forceCaptureResponse'), CTD_ANON_72, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1487, 4))
Namespace.addCategoryObject('elementBinding', forceCaptureResponse.name().localName(), forceCaptureResponse)

captureGivenAuthResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'captureGivenAuthResponse'), CTD_ANON_73, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1511, 4))
Namespace.addCategoryObject('elementBinding', captureGivenAuthResponse.name().localName(), captureGivenAuthResponse)

saleResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'saleResponse'), CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1534, 4))
Namespace.addCategoryObject('elementBinding', saleResponse.name().localName(), saleResponse)

creditResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'creditResponse'), CTD_ANON_75, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1582, 4))
Namespace.addCategoryObject('elementBinding', creditResponse.name().localName(), creditResponse)

giftCardCreditResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardCreditResponse'), CTD_ANON_76, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1604, 4))
Namespace.addCategoryObject('elementBinding', giftCardCreditResponse.name().localName(), giftCardCreditResponse)

activateResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'activateResponse'), CTD_ANON_77, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1637, 4))
Namespace.addCategoryObject('elementBinding', activateResponse.name().localName(), activateResponse)

loadResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'loadResponse'), CTD_ANON_78, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1658, 4))
Namespace.addCategoryObject('elementBinding', loadResponse.name().localName(), loadResponse)

unloadResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'unloadResponse'), CTD_ANON_79, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1678, 4))
Namespace.addCategoryObject('elementBinding', unloadResponse.name().localName(), unloadResponse)

balanceInquiryResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'balanceInquiryResponse'), CTD_ANON_80, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1722, 4))
Namespace.addCategoryObject('elementBinding', balanceInquiryResponse.name().localName(), balanceInquiryResponse)

deactivateResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deactivateResponse'), CTD_ANON_81, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1742, 4))
Namespace.addCategoryObject('elementBinding', deactivateResponse.name().localName(), deactivateResponse)

echeckSale = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckSale'), CTD_ANON_82, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1765, 4))
Namespace.addCategoryObject('elementBinding', echeckSale.name().localName(), echeckSale)

echeckCredit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckCredit'), CTD_ANON_83, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1795, 4))
Namespace.addCategoryObject('elementBinding', echeckCredit.name().localName(), echeckCredit)

echeckVerification = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckVerification'), CTD_ANON_84, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1826, 4))
Namespace.addCategoryObject('elementBinding', echeckVerification.name().localName(), echeckVerification)

echeckSalesResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckSalesResponse'), CTD_ANON_85, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1843, 4))
Namespace.addCategoryObject('elementBinding', echeckSalesResponse.name().localName(), echeckSalesResponse)

echeckCreditResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckCreditResponse'), CTD_ANON_86, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1864, 4))
Namespace.addCategoryObject('elementBinding', echeckCreditResponse.name().localName(), echeckCreditResponse)

echeckVerificationResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckVerificationResponse'), CTD_ANON_87, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1963, 4))
Namespace.addCategoryObject('elementBinding', echeckVerificationResponse.name().localName(), echeckVerificationResponse)

echeckRedeposit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckRedeposit'), CTD_ANON_88, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1982, 4))
Namespace.addCategoryObject('elementBinding', echeckRedeposit.name().localName(), echeckRedeposit)

echeckRedepositResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckRedepositResponse'), CTD_ANON_89, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2000, 4))
Namespace.addCategoryObject('elementBinding', echeckRedepositResponse.name().localName(), echeckRedepositResponse)

updateCardValidationNumOnToken = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'updateCardValidationNumOnToken'), updateCardValidationNumOnToken_, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2078, 4))
Namespace.addCategoryObject('elementBinding', updateCardValidationNumOnToken.name().localName(), updateCardValidationNumOnToken)

updateCardValidationNumOnTokenResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'updateCardValidationNumOnTokenResponse'), CTD_ANON_90, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2092, 4))
Namespace.addCategoryObject('elementBinding', updateCardValidationNumOnTokenResponse.name().localName(), updateCardValidationNumOnTokenResponse)

fraudCheck = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudCheck'), CTD_ANON_91, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2115, 4))
Namespace.addCategoryObject('elementBinding', fraudCheck.name().localName(), fraudCheck)

fraudCheckResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudCheckResponse'), CTD_ANON_92, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2133, 4))
Namespace.addCategoryObject('elementBinding', fraudCheckResponse.name().localName(), fraudCheckResponse)

submerchantCreditResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'submerchantCreditResponse'), CTD_ANON_93, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2279, 4))
Namespace.addCategoryObject('elementBinding', submerchantCreditResponse.name().localName(), submerchantCreditResponse)

submerchantDebitResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'submerchantDebitResponse'), CTD_ANON_94, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2299, 4))
Namespace.addCategoryObject('elementBinding', submerchantDebitResponse.name().localName(), submerchantDebitResponse)

payFacDebit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payFacDebit'), CTD_ANON_95, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2319, 4))
Namespace.addCategoryObject('elementBinding', payFacDebit.name().localName(), payFacDebit)

payFacCredit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payFacCredit'), CTD_ANON_96, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2335, 4))
Namespace.addCategoryObject('elementBinding', payFacCredit.name().localName(), payFacCredit)

payFacCreditResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payFacCreditResponse'), CTD_ANON_97, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2351, 4))
Namespace.addCategoryObject('elementBinding', payFacCreditResponse.name().localName(), payFacCreditResponse)

payFacDebitResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payFacDebitResponse'), CTD_ANON_98, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2371, 4))
Namespace.addCategoryObject('elementBinding', payFacDebitResponse.name().localName(), payFacDebitResponse)

reserveCredit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'reserveCredit'), CTD_ANON_99, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2391, 4))
Namespace.addCategoryObject('elementBinding', reserveCredit.name().localName(), reserveCredit)

reserveDebit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'reserveDebit'), CTD_ANON_100, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2410, 4))
Namespace.addCategoryObject('elementBinding', reserveDebit.name().localName(), reserveDebit)

reserveCreditResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'reserveCreditResponse'), CTD_ANON_101, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2429, 4))
Namespace.addCategoryObject('elementBinding', reserveCreditResponse.name().localName(), reserveCreditResponse)

reserveDebitResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'reserveDebitResponse'), CTD_ANON_102, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2449, 4))
Namespace.addCategoryObject('elementBinding', reserveDebitResponse.name().localName(), reserveDebitResponse)

physicalCheckCredit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'physicalCheckCredit'), CTD_ANON_103, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2469, 4))
Namespace.addCategoryObject('elementBinding', physicalCheckCredit.name().localName(), physicalCheckCredit)

physicalCheckCreditResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'physicalCheckCreditResponse'), CTD_ANON_104, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2488, 4))
Namespace.addCategoryObject('elementBinding', physicalCheckCreditResponse.name().localName(), physicalCheckCreditResponse)

physicalCheckDebit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'physicalCheckDebit'), CTD_ANON_105, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2508, 4))
Namespace.addCategoryObject('elementBinding', physicalCheckDebit.name().localName(), physicalCheckDebit)

physicalCheckDebitResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'physicalCheckDebitResponse'), CTD_ANON_106, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2527, 4))
Namespace.addCategoryObject('elementBinding', physicalCheckDebitResponse.name().localName(), physicalCheckDebitResponse)

vendorDebitResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorDebitResponse'), CTD_ANON_107, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2548, 4))
Namespace.addCategoryObject('elementBinding', vendorDebitResponse.name().localName(), vendorDebitResponse)

vendorCreditResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorCreditResponse'), CTD_ANON_108, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2568, 4))
Namespace.addCategoryObject('elementBinding', vendorCreditResponse.name().localName(), vendorCreditResponse)

fundingInstructionVoid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingInstructionVoid'), CTD_ANON_109, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2588, 4))
Namespace.addCategoryObject('elementBinding', fundingInstructionVoid.name().localName(), fundingInstructionVoid)

fundingInstructionVoidResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingInstructionVoidResponse'), CTD_ANON_110, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2600, 4))
Namespace.addCategoryObject('elementBinding', fundingInstructionVoidResponse.name().localName(), fundingInstructionVoidResponse)

fastAccessFunding = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fastAccessFunding'), CTD_ANON_111, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2630, 4))
Namespace.addCategoryObject('elementBinding', fastAccessFunding.name().localName(), fastAccessFunding)

fastAccessFundingResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fastAccessFundingResponse'), CTD_ANON_112, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2659, 4))
Namespace.addCategoryObject('elementBinding', fastAccessFundingResponse.name().localName(), fastAccessFundingResponse)

customerCreditResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerCreditResponse'), CTD_ANON_113, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2680, 4))
Namespace.addCategoryObject('elementBinding', customerCreditResponse.name().localName(), customerCreditResponse)

customerDebitResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerDebitResponse'), CTD_ANON_114, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2700, 4))
Namespace.addCategoryObject('elementBinding', customerDebitResponse.name().localName(), customerDebitResponse)

payoutOrgDebit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payoutOrgDebit'), CTD_ANON_115, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2720, 4))
Namespace.addCategoryObject('elementBinding', payoutOrgDebit.name().localName(), payoutOrgDebit)

payoutOrgCredit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payoutOrgCredit'), CTD_ANON_116, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2736, 4))
Namespace.addCategoryObject('elementBinding', payoutOrgCredit.name().localName(), payoutOrgCredit)

payoutOrgCreditResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payoutOrgCreditResponse'), CTD_ANON_117, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2752, 4))
Namespace.addCategoryObject('elementBinding', payoutOrgCreditResponse.name().localName(), payoutOrgCreditResponse)

payoutOrgDebitResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payoutOrgDebitResponse'), CTD_ANON_118, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2772, 4))
Namespace.addCategoryObject('elementBinding', payoutOrgDebitResponse.name().localName(), payoutOrgDebitResponse)

translateToLowValueTokenRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'translateToLowValueTokenRequest'), translateToLowValueTokenRequestType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2792, 4))
Namespace.addCategoryObject('elementBinding', translateToLowValueTokenRequest.name().localName(), translateToLowValueTokenRequest)

translateToLowValueTokenResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'translateToLowValueTokenResponse'), CTD_ANON_119, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2805, 4))
Namespace.addCategoryObject('elementBinding', translateToLowValueTokenResponse.name().localName(), translateToLowValueTokenResponse)

transactionReversal = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transactionReversal'), CTD_ANON_120, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2854, 4))
Namespace.addCategoryObject('elementBinding', transactionReversal.name().localName(), transactionReversal)

transactionReversalResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transactionReversalResponse'), CTD_ANON_121, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2873, 4))
Namespace.addCategoryObject('elementBinding', transactionReversalResponse.name().localName(), transactionReversalResponse)

accountUpdate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountUpdate'), CTD_ANON_122, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3024, 4))
Namespace.addCategoryObject('elementBinding', accountUpdate.name().localName(), accountUpdate)

accountUpdateResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountUpdateResponse'), CTD_ANON_123, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3071, 4))
Namespace.addCategoryObject('elementBinding', accountUpdateResponse.name().localName(), accountUpdateResponse)

echeckPreNoteSale = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckPreNoteSale'), CTD_ANON_124, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3111, 4))
Namespace.addCategoryObject('elementBinding', echeckPreNoteSale.name().localName(), echeckPreNoteSale)

echeckPreNoteCredit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckPreNoteCredit'), CTD_ANON_125, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3127, 4))
Namespace.addCategoryObject('elementBinding', echeckPreNoteCredit.name().localName(), echeckPreNoteCredit)

echeckPreNoteSaleResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckPreNoteSaleResponse'), CTD_ANON_126, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3143, 4))
Namespace.addCategoryObject('elementBinding', echeckPreNoteSaleResponse.name().localName(), echeckPreNoteSaleResponse)

echeckPreNoteCreditResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckPreNoteCreditResponse'), CTD_ANON_127, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3158, 4))
Namespace.addCategoryObject('elementBinding', echeckPreNoteCreditResponse.name().localName(), echeckPreNoteCreditResponse)

vendorCredit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorCredit'), CTD_ANON_128, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3173, 4))
Namespace.addCategoryObject('elementBinding', vendorCredit.name().localName(), vendorCredit)

vendorDebit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorDebit'), CTD_ANON_129, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3194, 4))
Namespace.addCategoryObject('elementBinding', vendorDebit.name().localName(), vendorDebit)

submerchantCredit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'submerchantCredit'), CTD_ANON_130, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3216, 4))
Namespace.addCategoryObject('elementBinding', submerchantCredit.name().localName(), submerchantCredit)

submerchantDebit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'submerchantDebit'), CTD_ANON_131, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3235, 4))
Namespace.addCategoryObject('elementBinding', submerchantDebit.name().localName(), submerchantDebit)

customerCredit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerCredit'), CTD_ANON_132, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3254, 4))
Namespace.addCategoryObject('elementBinding', customerCredit.name().localName(), customerCredit)

customerDebit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerDebit'), CTD_ANON_133, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3273, 4))
Namespace.addCategoryObject('elementBinding', customerDebit.name().localName(), customerDebit)

void = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'void'), CTD_ANON_134, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3338, 4))
Namespace.addCategoryObject('elementBinding', void.name().localName(), void)

voidResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'voidResponse'), CTD_ANON_135, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3351, 4))
Namespace.addCategoryObject('elementBinding', voidResponse.name().localName(), voidResponse)

echeckVoid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckVoid'), CTD_ANON_136, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3376, 4))
Namespace.addCategoryObject('elementBinding', echeckVoid.name().localName(), echeckVoid)

echeckVoidResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckVoidResponse'), CTD_ANON_137, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3388, 4))
Namespace.addCategoryObject('elementBinding', echeckVoidResponse.name().localName(), echeckVoidResponse)

depositReversal = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'depositReversal'), CTD_ANON_138, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3405, 4))
Namespace.addCategoryObject('elementBinding', depositReversal.name().localName(), depositReversal)

refundReversal = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'refundReversal'), CTD_ANON_139, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3423, 4))
Namespace.addCategoryObject('elementBinding', refundReversal.name().localName(), refundReversal)

activateReversal = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'activateReversal'), CTD_ANON_140, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3441, 4))
Namespace.addCategoryObject('elementBinding', activateReversal.name().localName(), activateReversal)

deactivateReversal = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deactivateReversal'), CTD_ANON_141, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3460, 4))
Namespace.addCategoryObject('elementBinding', deactivateReversal.name().localName(), deactivateReversal)

loadReversal = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'loadReversal'), CTD_ANON_142, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3477, 4))
Namespace.addCategoryObject('elementBinding', loadReversal.name().localName(), loadReversal)

unloadReversal = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'unloadReversal'), CTD_ANON_143, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3495, 4))
Namespace.addCategoryObject('elementBinding', unloadReversal.name().localName(), unloadReversal)

queryTransaction = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'queryTransaction'), CTD_ANON_144, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3513, 4))
Namespace.addCategoryObject('elementBinding', queryTransaction.name().localName(), queryTransaction)

queryTransactionResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'queryTransactionResponse'), CTD_ANON_145, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3528, 4))
Namespace.addCategoryObject('elementBinding', queryTransactionResponse.name().localName(), queryTransactionResponse)

queryTransactionUnavailableResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'queryTransactionUnavailableResponse'), CTD_ANON_146, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3551, 4))
Namespace.addCategoryObject('elementBinding', queryTransactionUnavailableResponse.name().localName(), queryTransactionUnavailableResponse)

serviceStatusRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'serviceStatusRequest'), CTD_ANON_147, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3566, 4))
Namespace.addCategoryObject('elementBinding', serviceStatusRequest.name().localName(), serviceStatusRequest)

serviceStatusResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'serviceStatusResponse'), CTD_ANON_148, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3579, 4))
Namespace.addCategoryObject('elementBinding', serviceStatusResponse.name().localName(), serviceStatusResponse)



CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'user'), pyxb.binding.datatypes.string, scope=CTD_ANON, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 8, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'password'), pyxb.binding.datatypes.string, scope=CTD_ANON, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 9, 16)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 8, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 9, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'user')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 8, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'password')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 9, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton()




contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.string, scope=contact, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 60, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'firstName'), pyxb.binding.datatypes.string, scope=contact, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 61, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'middleInitial'), pyxb.binding.datatypes.string, scope=contact, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 62, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'lastName'), pyxb.binding.datatypes.string, scope=contact, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 63, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'companyName'), pyxb.binding.datatypes.string, scope=contact, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 64, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressLine1'), pyxb.binding.datatypes.string, scope=contact, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 65, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressLine2'), pyxb.binding.datatypes.string, scope=contact, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 66, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressLine3'), pyxb.binding.datatypes.string, scope=contact, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 67, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'city'), pyxb.binding.datatypes.string, scope=contact, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 68, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'state'), pyxb.binding.datatypes.string, scope=contact, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 69, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'zip'), pyxb.binding.datatypes.string, scope=contact, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 70, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'country'), pyxb.binding.datatypes.string, scope=contact, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 71, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'email'), pyxb.binding.datatypes.string, scope=contact, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 72, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'phone'), pyxb.binding.datatypes.string, scope=contact, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 73, 12)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 60, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 60, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 61, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'firstName')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 61, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 62, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'middleInitial')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 62, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 63, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'lastName')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 63, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 64, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'companyName')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 64, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 65, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressLine1')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 65, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 66, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressLine2')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 66, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 67, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressLine3')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 67, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 68, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'city')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 68, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 69, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'state')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 69, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 70, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zip')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 70, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 71, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'country')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 71, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 72, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'email')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 72, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 73, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'phone')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 73, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 60, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 61, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 62, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 63, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 64, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 65, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 66, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 67, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 68, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 69, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 70, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 71, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 72, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 73, 12))
    counters.add(cc_13)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_2())
    sub_automata.append(_BuildAutomaton_3())
    sub_automata.append(_BuildAutomaton_4())
    sub_automata.append(_BuildAutomaton_5())
    sub_automata.append(_BuildAutomaton_6())
    sub_automata.append(_BuildAutomaton_7())
    sub_automata.append(_BuildAutomaton_8())
    sub_automata.append(_BuildAutomaton_9())
    sub_automata.append(_BuildAutomaton_10())
    sub_automata.append(_BuildAutomaton_11())
    sub_automata.append(_BuildAutomaton_12())
    sub_automata.append(_BuildAutomaton_13())
    sub_automata.append(_BuildAutomaton_14())
    sub_automata.append(_BuildAutomaton_15())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 59, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
contact._Automaton = _BuildAutomaton_()




mposType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ksn'), pyxb.binding.datatypes.string, scope=mposType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 81, 12)))

mposType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'formatId'), pyxb.binding.datatypes.string, scope=mposType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 82, 12)))

mposType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'encryptedTrack'), pyxb.binding.datatypes.string, scope=mposType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 83, 12)))

mposType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'track1Status'), pyxb.binding.datatypes.int, scope=mposType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 84, 12)))

mposType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'track2Status'), pyxb.binding.datatypes.int, scope=mposType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 85, 12)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 81, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 82, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 83, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 84, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 85, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(mposType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ksn')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 81, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(mposType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'formatId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 82, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(mposType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'encryptedTrack')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 83, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(mposType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'track1Status')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 84, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(mposType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'track2Status')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 85, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
mposType._Automaton = _BuildAutomaton_16()




cardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), pyxb.binding.datatypes.string, scope=cardType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 93, 20)))

cardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'number'), pyxb.binding.datatypes.string, scope=cardType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 94, 20)))

cardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'expDate'), pyxb.binding.datatypes.string, scope=cardType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 95, 20)))

cardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'track'), pyxb.binding.datatypes.string, scope=cardType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 98, 20)))

cardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum'), pyxb.binding.datatypes.string, scope=cardType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 101, 12)))

cardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pin'), pyxb.binding.datatypes.string, scope=cardType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 102, 12)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 94, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 95, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 101, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 102, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 93, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(cardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 94, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(cardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 95, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'track')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 98, 20))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(cardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 101, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(cardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pin')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 102, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
cardType._Automaton = _BuildAutomaton_17()




cardTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpToken'), pyxb.binding.datatypes.string, scope=cardTokenType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 131, 16)))

cardTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenURL'), pyxb.binding.datatypes.string, scope=cardTokenType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 132, 16)))

cardTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'expDate'), pyxb.binding.datatypes.string, scope=cardTokenType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 134, 12)))

cardTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum'), pyxb.binding.datatypes.string, scope=cardTokenType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 135, 12)))

cardTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), pyxb.binding.datatypes.string, scope=cardTokenType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 136, 12)))

cardTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'checkoutId'), pyxb.binding.datatypes.string, scope=cardTokenType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 137, 12)))

cardTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authenticatedShopperID'), pyxb.binding.datatypes.string, scope=cardTokenType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 138, 12)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 134, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 135, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 136, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 137, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 138, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpToken')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 131, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenURL')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 132, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 134, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 135, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 136, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'checkoutId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 137, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authenticatedShopperID')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 138, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
cardTokenType._Automaton = _BuildAutomaton_18()




cardPaypageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paypageRegistrationId'), pyxb.binding.datatypes.string, scope=cardPaypageType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 146, 12)))

cardPaypageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'expDate'), pyxb.binding.datatypes.string, scope=cardPaypageType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 147, 12)))

cardPaypageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum'), pyxb.binding.datatypes.string, scope=cardPaypageType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 148, 12)))

cardPaypageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), pyxb.binding.datatypes.string, scope=cardPaypageType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 149, 12)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 146, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 147, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 148, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 149, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(cardPaypageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paypageRegistrationId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 146, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(cardPaypageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 147, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(cardPaypageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 148, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(cardPaypageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 149, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
cardPaypageType._Automaton = _BuildAutomaton_19()




tokenResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpToken'), pyxb.binding.datatypes.string, scope=tokenResponseType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 155, 12)))

tokenResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenResponseCode'), pyxb.binding.datatypes.string, scope=tokenResponseType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 156, 12)))

tokenResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenMessage'), pyxb.binding.datatypes.string, scope=tokenResponseType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 157, 12)))

tokenResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), pyxb.binding.datatypes.string, scope=tokenResponseType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 158, 12)))

tokenResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bin'), pyxb.binding.datatypes.string, scope=tokenResponseType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 159, 12)))

tokenResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eCheckAccountSuffix'), pyxb.binding.datatypes.string, scope=tokenResponseType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 160, 12)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 155, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 156, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 157, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 158, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 159, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 160, 12))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(tokenResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpToken')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 155, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(tokenResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenResponseCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 156, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(tokenResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenMessage')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 157, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(tokenResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 158, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(tokenResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bin')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 159, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(tokenResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eCheckAccountSuffix')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 160, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
tokenResponseType._Automaton = _BuildAutomaton_20()




advancedFraudChecksType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'threatMetrixSessionId'), pyxb.binding.datatypes.token, scope=advancedFraudChecksType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 172, 12)))

advancedFraudChecksType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'webSessionId'), pyxb.binding.datatypes.token, scope=advancedFraudChecksType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 173, 12)))

advancedFraudChecksType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customAttribute1'), pyxb.binding.datatypes.string, scope=advancedFraudChecksType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 174, 12)))

advancedFraudChecksType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customAttribute2'), pyxb.binding.datatypes.string, scope=advancedFraudChecksType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 175, 12)))

advancedFraudChecksType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customAttribute3'), pyxb.binding.datatypes.string, scope=advancedFraudChecksType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 176, 12)))

advancedFraudChecksType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customAttribute4'), pyxb.binding.datatypes.string, scope=advancedFraudChecksType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 177, 12)))

advancedFraudChecksType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customAttribute5'), pyxb.binding.datatypes.string, scope=advancedFraudChecksType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 178, 12)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 172, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 173, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 174, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 175, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 176, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 177, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 178, 12))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(advancedFraudChecksType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'threatMetrixSessionId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 172, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(advancedFraudChecksType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'webSessionId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 173, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(advancedFraudChecksType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customAttribute1')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 174, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(advancedFraudChecksType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customAttribute2')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 175, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(advancedFraudChecksType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customAttribute3')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 176, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(advancedFraudChecksType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customAttribute4')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 177, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(advancedFraudChecksType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customAttribute5')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 178, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
advancedFraudChecksType._Automaton = _BuildAutomaton_21()




advancedFraudResultsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deviceReviewStatus'), pyxb.binding.datatypes.string, scope=advancedFraudResultsType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 186, 12)))

advancedFraudResultsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deviceReputationScore'), pyxb.binding.datatypes.int, scope=advancedFraudResultsType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 187, 12)))

advancedFraudResultsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'triggeredRule'), pyxb.binding.datatypes.string, scope=advancedFraudResultsType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 188, 12)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 186, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 187, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 188, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(advancedFraudResultsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deviceReviewStatus')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 186, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(advancedFraudResultsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deviceReputationScore')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 187, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(advancedFraudResultsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'triggeredRule')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 188, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
advancedFraudResultsType._Automaton = _BuildAutomaton_22()




CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.string, scope=CTD_ANON_, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 203, 16)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 203, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 203, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_._Automaton = _BuildAutomaton_23()




recurringSubscriptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'planCode'), pyxb.binding.datatypes.string, scope=recurringSubscriptionType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 363, 12)))

recurringSubscriptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'numberOfPayments'), pyxb.binding.datatypes.integer, scope=recurringSubscriptionType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 364, 12)))

recurringSubscriptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'startDate'), pyxb.binding.datatypes.date, scope=recurringSubscriptionType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 365, 12)))

recurringSubscriptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=recurringSubscriptionType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 366, 12)))

recurringSubscriptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'createDiscount'), createDiscountType, scope=recurringSubscriptionType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 367, 12)))

recurringSubscriptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'createAddOn'), createAddOnType, scope=recurringSubscriptionType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 368, 12)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 363, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 364, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 365, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 366, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 367, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 368, 12))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(recurringSubscriptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'planCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 363, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(recurringSubscriptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'numberOfPayments')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 364, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(recurringSubscriptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'startDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 365, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(recurringSubscriptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 366, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(recurringSubscriptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'createDiscount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 367, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(recurringSubscriptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'createAddOn')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 368, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
recurringSubscriptionType._Automaton = _BuildAutomaton_24()




cnpInternalRecurringRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId'), pyxb.binding.datatypes.long, scope=cnpInternalRecurringRequestType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 377, 12)))

cnpInternalRecurringRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recurringTxnId'), pyxb.binding.datatypes.long, scope=cnpInternalRecurringRequestType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 378, 12)))

cnpInternalRecurringRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'finalPayment'), pyxb.binding.datatypes.boolean, scope=cnpInternalRecurringRequestType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 379, 12)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 377, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 378, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 379, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(cnpInternalRecurringRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 377, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(cnpInternalRecurringRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recurringTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 378, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(cnpInternalRecurringRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'finalPayment')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 379, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
cnpInternalRecurringRequestType._Automaton = _BuildAutomaton_25()




recurringRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'createSubscription'), recurringSubscriptionType, scope=recurringRequestType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 385, 12)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 385, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(recurringRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'createSubscription')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 385, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
recurringRequestType._Automaton = _BuildAutomaton_26()




recurringResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId'), pyxb.binding.datatypes.long, scope=recurringResponseType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 391, 12)))

recurringResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseCode'), pyxb.binding.datatypes.string, scope=recurringResponseType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 392, 12)))

recurringResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseMessage'), pyxb.binding.datatypes.string, scope=recurringResponseType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 393, 12)))

recurringResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recurringTxnId'), pyxb.binding.datatypes.long, scope=recurringResponseType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 394, 12)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 391, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 392, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 393, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 394, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(recurringResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 391, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(recurringResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 392, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(recurringResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseMessage')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 393, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(recurringResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recurringTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 394, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
recurringResponseType._Automaton = _BuildAutomaton_27()




createDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'discountCode'), pyxb.binding.datatypes.string, scope=createDiscountType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 400, 12)))

createDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.string, scope=createDiscountType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 401, 12)))

createDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=createDiscountType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 402, 12)))

createDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'startDate'), pyxb.binding.datatypes.date, scope=createDiscountType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 403, 12)))

createDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'endDate'), pyxb.binding.datatypes.date, scope=createDiscountType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 404, 12)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 400, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 401, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 402, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 403, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 404, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(createDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'discountCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 400, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(createDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 401, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(createDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 402, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(createDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'startDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 403, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(createDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'endDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 404, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
createDiscountType._Automaton = _BuildAutomaton_28()




updateDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'discountCode'), pyxb.binding.datatypes.string, scope=updateDiscountType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 410, 12)))

updateDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.string, scope=updateDiscountType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 411, 12)))

updateDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=updateDiscountType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 412, 12)))

updateDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'startDate'), pyxb.binding.datatypes.date, scope=updateDiscountType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 413, 12)))

updateDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'endDate'), pyxb.binding.datatypes.date, scope=updateDiscountType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 414, 12)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 410, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 411, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 412, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 413, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 414, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(updateDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'discountCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 410, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(updateDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 411, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(updateDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 412, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(updateDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'startDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 413, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(updateDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'endDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 414, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
updateDiscountType._Automaton = _BuildAutomaton_29()




deleteDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'discountCode'), pyxb.binding.datatypes.string, scope=deleteDiscountType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 420, 12)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 420, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(deleteDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'discountCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 420, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
deleteDiscountType._Automaton = _BuildAutomaton_30()




createAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addOnCode'), pyxb.binding.datatypes.string, scope=createAddOnType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 426, 12)))

createAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.string, scope=createAddOnType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 427, 12)))

createAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=createAddOnType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 428, 12)))

createAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'startDate'), pyxb.binding.datatypes.date, scope=createAddOnType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 429, 12)))

createAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'endDate'), pyxb.binding.datatypes.date, scope=createAddOnType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 430, 12)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 426, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 427, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 428, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 429, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 430, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(createAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addOnCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 426, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(createAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 427, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(createAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 428, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(createAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'startDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 429, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(createAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'endDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 430, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
createAddOnType._Automaton = _BuildAutomaton_31()




updateAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addOnCode'), pyxb.binding.datatypes.string, scope=updateAddOnType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 436, 12)))

updateAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.string, scope=updateAddOnType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 437, 12)))

updateAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=updateAddOnType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 438, 12)))

updateAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'startDate'), pyxb.binding.datatypes.date, scope=updateAddOnType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 439, 12)))

updateAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'endDate'), pyxb.binding.datatypes.date, scope=updateAddOnType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 440, 12)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 436, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 437, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 438, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 439, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 440, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(updateAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addOnCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 436, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(updateAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 437, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(updateAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 438, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(updateAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'startDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 439, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(updateAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'endDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 440, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
updateAddOnType._Automaton = _BuildAutomaton_32()




deleteAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addOnCode'), pyxb.binding.datatypes.string, scope=deleteAddOnType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 446, 12)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 446, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(deleteAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addOnCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 446, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
deleteAddOnType._Automaton = _BuildAutomaton_33()




merchantDataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'campaign'), pyxb.binding.datatypes.string, scope=merchantDataType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 477, 12)))

merchantDataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'affiliate'), pyxb.binding.datatypes.string, scope=merchantDataType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 478, 12)))

merchantDataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantGroupingId'), pyxb.binding.datatypes.string, scope=merchantDataType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 479, 12)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 477, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(merchantDataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'campaign')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 477, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 478, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(merchantDataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'affiliate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 478, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 479, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(merchantDataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantGroupingId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 479, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 477, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 478, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 479, 12))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_35())
    sub_automata.append(_BuildAutomaton_36())
    sub_automata.append(_BuildAutomaton_37())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 476, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
merchantDataType._Automaton = _BuildAutomaton_34()




driversLicenseInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'licenseNumber'), pyxb.binding.datatypes.string, scope=driversLicenseInfo, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 502, 12)))

driversLicenseInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'state'), pyxb.binding.datatypes.string, scope=driversLicenseInfo, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 503, 12)))

driversLicenseInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateOfBirth'), pyxb.binding.datatypes.string, scope=driversLicenseInfo, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 504, 12)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 502, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(driversLicenseInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'licenseNumber')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 502, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 503, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(driversLicenseInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'state')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 503, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 504, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(driversLicenseInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateOfBirth')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 504, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 502, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 503, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 504, 12))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_39())
    sub_automata.append(_BuildAutomaton_40())
    sub_automata.append(_BuildAutomaton_41())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 501, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
driversLicenseInfo._Automaton = _BuildAutomaton_38()




CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ssn'), pyxb.binding.datatypes.string, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 511, 16)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dob'), pyxb.binding.datatypes.date, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 512, 16)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerRegistrationDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 513, 16)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerType'), pyxb.binding.datatypes.string, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 514, 16)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'incomeAmount'), pyxb.binding.datatypes.long, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 515, 16)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'incomeCurrency'), pyxb.binding.datatypes.string, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 516, 16), unicode_default='USD'))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerCheckingAccount'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 517, 16)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerSavingAccount'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 518, 16)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'employerName'), pyxb.binding.datatypes.string, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 519, 16)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerWorkTelephone'), pyxb.binding.datatypes.string, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 520, 16)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'residenceStatus'), pyxb.binding.datatypes.string, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 521, 16)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'yearsAtResidence'), pyxb.binding.datatypes.int, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 522, 16)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'yearsAtEmployer'), pyxb.binding.datatypes.int, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 523, 16)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 511, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ssn')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 511, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 512, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dob')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 512, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 513, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerRegistrationDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 513, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 514, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 514, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 515, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'incomeAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 515, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 516, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'incomeCurrency')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 516, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 517, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerCheckingAccount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 517, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 518, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerSavingAccount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 518, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 519, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'employerName')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 519, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 520, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerWorkTelephone')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 520, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 521, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'residenceStatus')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 521, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 522, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'yearsAtResidence')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 522, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 523, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'yearsAtEmployer')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 523, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 511, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 512, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 513, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 514, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 515, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 516, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 517, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 518, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 519, 16))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 520, 16))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 521, 16))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 522, 16))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 523, 16))
    counters.add(cc_12)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_43())
    sub_automata.append(_BuildAutomaton_44())
    sub_automata.append(_BuildAutomaton_45())
    sub_automata.append(_BuildAutomaton_46())
    sub_automata.append(_BuildAutomaton_47())
    sub_automata.append(_BuildAutomaton_48())
    sub_automata.append(_BuildAutomaton_49())
    sub_automata.append(_BuildAutomaton_50())
    sub_automata.append(_BuildAutomaton_51())
    sub_automata.append(_BuildAutomaton_52())
    sub_automata.append(_BuildAutomaton_53())
    sub_automata.append(_BuildAutomaton_54())
    sub_automata.append(_BuildAutomaton_55())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 510, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_2._Automaton = _BuildAutomaton_42()




fraudCheckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authenticationValue'), pyxb.binding.datatypes.string, scope=fraudCheckType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 530, 12)))

fraudCheckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authenticationTransactionId'), pyxb.binding.datatypes.string, scope=fraudCheckType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 531, 12)))

fraudCheckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerIpAddress'), pyxb.binding.datatypes.string, scope=fraudCheckType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 532, 12)))

fraudCheckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authenticatedByMerchant'), pyxb.binding.datatypes.boolean, scope=fraudCheckType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 533, 12)))

fraudCheckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authenticationProtocolVersion'), pyxb.binding.datatypes.integer, scope=fraudCheckType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 534, 12)))

fraudCheckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenAuthenticationValue'), pyxb.binding.datatypes.string, scope=fraudCheckType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 535, 12)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 530, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(fraudCheckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authenticationValue')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 530, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 531, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(fraudCheckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authenticationTransactionId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 531, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 532, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(fraudCheckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerIpAddress')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 532, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 533, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(fraudCheckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authenticatedByMerchant')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 533, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 534, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(fraudCheckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authenticationProtocolVersion')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 534, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 535, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(fraudCheckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenAuthenticationValue')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 535, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 530, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 531, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 532, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 533, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 534, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 535, 12))
    counters.add(cc_5)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_57())
    sub_automata.append(_BuildAutomaton_58())
    sub_automata.append(_BuildAutomaton_59())
    sub_automata.append(_BuildAutomaton_60())
    sub_automata.append(_BuildAutomaton_61())
    sub_automata.append(_BuildAutomaton_62())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 529, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
fraudCheckType._Automaton = _BuildAutomaton_56()




CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 947, 16)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 948, 16)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 950, 16)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_14, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4)))

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 947, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 947, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 948, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 948, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 949, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 949, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 950, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 950, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 947, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 948, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 949, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 950, 16))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_64())
    sub_automata.append(_BuildAutomaton_65())
    sub_automata.append(_BuildAutomaton_66())
    sub_automata.append(_BuildAutomaton_67())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 946, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_3._Automaton = _BuildAutomaton_63()




CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IIASFlag'), pyxb.binding.datatypes.string, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 973, 16)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'healthcareAmounts'), CTD_ANON_5, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 978, 4)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 972, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 973, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'healthcareAmounts')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 972, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IIASFlag')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 973, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_4._Automaton = _BuildAutomaton_68()




CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'totalHealthcareAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 981, 16)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RxAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 982, 16)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'visionAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 983, 16)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'clinicOtherAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 984, 16)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dentalAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 985, 16)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'copayAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 986, 16)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 981, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 982, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 983, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 984, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 985, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 986, 16))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'totalHealthcareAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 981, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RxAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 982, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'visionAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 983, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'clinicOtherAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 984, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dentalAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 985, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'copayAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 986, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_5._Automaton = _BuildAutomaton_69()




CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerReference'), pyxb.binding.datatypes.string, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 994, 16)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'salesTax'), pyxb.binding.datatypes.integer, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 995, 16)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deliveryType'), pyxb.binding.datatypes.string, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 996, 16), unicode_default='TBD'))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'taxExempt'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 997, 16)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'discountAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 998, 16)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'shippingAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 999, 16)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dutyAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1000, 16)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'shipFromPostalCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1001, 16)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'destinationPostalCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1002, 16)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'destinationCountryCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1003, 16)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'invoiceReferenceNumber'), pyxb.binding.datatypes.string, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1004, 16)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1005, 16)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'detailTax'), CTD_ANON_7, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1012, 4)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'lineItemData'), CTD_ANON_8, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1024, 4)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 994, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 995, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 996, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 997, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 998, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 999, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1000, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1001, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1002, 16))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1003, 16))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1004, 16))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1005, 16))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=6, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1006, 16))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=99, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1007, 16))
    counters.add(cc_13)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerReference')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 994, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'salesTax')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 995, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deliveryType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 996, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'taxExempt')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 997, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'discountAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 998, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'shippingAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 999, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dutyAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1000, 16))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'shipFromPostalCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1001, 16))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'destinationPostalCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1002, 16))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'destinationCountryCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1003, 16))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'invoiceReferenceNumber')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1004, 16))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1005, 16))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'detailTax')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1006, 16))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'lineItemData')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1007, 16))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_6._Automaton = _BuildAutomaton_70()




CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'taxIncludedInTotal'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1015, 16)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'taxAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1016, 16)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'taxRate'), pyxb.binding.datatypes.decimal, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1017, 16)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'taxTypeIdentifier'), pyxb.binding.datatypes.string, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1018, 16)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardAcceptorTaxId'), pyxb.binding.datatypes.string, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1019, 16)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1015, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1016, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1017, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1018, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1019, 16))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'taxIncludedInTotal')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1015, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'taxAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1016, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'taxRate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1017, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'taxTypeIdentifier')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1018, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardAcceptorTaxId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1019, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_7._Automaton = _BuildAutomaton_71()




CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'detailTax'), CTD_ANON_7, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1012, 4)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'itemSequenceNumber'), pyxb.binding.datatypes.integer, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1027, 16)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'itemDescription'), pyxb.binding.datatypes.string, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1028, 16)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'productCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1029, 16)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'quantity'), pyxb.binding.datatypes.decimal, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1030, 16)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'unitOfMeasure'), pyxb.binding.datatypes.string, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1031, 16)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'taxAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1032, 16)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'lineItemTotal'), pyxb.binding.datatypes.integer, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1033, 16)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'lineItemTotalWithTax'), pyxb.binding.datatypes.integer, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1035, 16)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'itemDiscountAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1037, 16)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'commodityCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1038, 16)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'unitCost'), pyxb.binding.datatypes.decimal, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1039, 16)))

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1027, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1028, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1029, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1030, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1031, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1032, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1033, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1035, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1037, 16))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1038, 16))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1039, 16))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=6, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1040, 16))
    counters.add(cc_11)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'itemSequenceNumber')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1027, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'itemDescription')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1028, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'productCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1029, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'quantity')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1030, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'unitOfMeasure')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1031, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'taxAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1032, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'lineItemTotal')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1033, 16))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'lineItemTotalWithTax')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1035, 16))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'itemDiscountAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1037, 16))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'commodityCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1038, 16))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'unitCost')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1039, 16))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'detailTax')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1040, 16))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_8._Automaton = _BuildAutomaton_72()




accountInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), pyxb.binding.datatypes.string, scope=accountInfoType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1047, 12)))

accountInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'number'), pyxb.binding.datatypes.string, scope=accountInfoType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1048, 12)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1047, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1048, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(accountInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1047, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(accountInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1048, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
accountInfoType._Automaton = _BuildAutomaton_73()




echeckTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpToken'), pyxb.binding.datatypes.string, scope=echeckTokenType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1054, 12)))

echeckTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'routingNum'), pyxb.binding.datatypes.string, scope=echeckTokenType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1055, 12)))

echeckTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accType'), pyxb.binding.datatypes.string, scope=echeckTokenType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1056, 12)))

echeckTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'checkNum'), pyxb.binding.datatypes.string, scope=echeckTokenType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1057, 12)))

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1054, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1055, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1056, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1057, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(echeckTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpToken')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1054, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(echeckTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'routingNum')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1055, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(echeckTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1056, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(echeckTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'checkNum')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1057, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
echeckTokenType._Automaton = _BuildAutomaton_74()




payPal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payerEmail'), pyxb.binding.datatypes.string, scope=payPal, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1064, 16)))

payPal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payerId'), pyxb.binding.datatypes.string, scope=payPal, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1067, 16)))

payPal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'token'), pyxb.binding.datatypes.string, scope=payPal, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1068, 16)))

payPal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transactionId'), pyxb.binding.datatypes.string, scope=payPal, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1069, 16)))

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1068, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1069, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(payPal._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'payerEmail')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1064, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(payPal._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'payerId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1067, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(payPal._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'token')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1068, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(payPal._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transactionId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1069, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
payPal._Automaton = _BuildAutomaton_75()




CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'phone'), pyxb.binding.datatypes.string, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1080, 20)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'city'), pyxb.binding.datatypes.string, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1081, 20)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'url'), pyxb.binding.datatypes.string, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1082, 20)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'descriptor'), pyxb.binding.datatypes.string, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1084, 16)))

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1080, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1081, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1082, 20))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1084, 16))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'phone')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1080, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'city')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1081, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'url')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1082, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'descriptor')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1084, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_9._Automaton = _BuildAutomaton_76()




CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bypassVelocityCheck'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_10, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1093, 16)))

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1093, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bypassVelocityCheck')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1093, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_10._Automaton = _BuildAutomaton_77()




CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'capability'), pyxb.binding.datatypes.string, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1101, 16)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'entryMode'), pyxb.binding.datatypes.string, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1102, 16)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardholderId'), pyxb.binding.datatypes.string, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1103, 16)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'terminalId'), pyxb.binding.datatypes.string, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1104, 16)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'catLevel'), pyxb.binding.datatypes.string, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1105, 16)))

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1101, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'capability')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1101, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1102, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entryMode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1102, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1103, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardholderId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1103, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1104, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'terminalId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1104, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1105, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'catLevel')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1105, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1101, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1102, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1103, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1104, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1105, 16))
    counters.add(cc_4)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_79())
    sub_automata.append(_BuildAutomaton_80())
    sub_automata.append(_BuildAutomaton_81())
    sub_automata.append(_BuildAutomaton_82())
    sub_automata.append(_BuildAutomaton_83())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1100, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_11._Automaton = _BuildAutomaton_78()




recycleAdviceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nextRecycleTime'), pyxb.binding.datatypes.dateTime, scope=recycleAdviceType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1213, 12)))

recycleAdviceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recycleAdviceEnd'), pyxb.binding.datatypes.string, scope=recycleAdviceType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1214, 12)))

def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(recycleAdviceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nextRecycleTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1213, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(recycleAdviceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recycleAdviceEnd')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1214, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
recycleAdviceType._Automaton = _BuildAutomaton_84()




recyclingResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recycleAdvice'), recycleAdviceType, scope=recyclingResponseType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1222, 12)))

recyclingResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recycleEngineActive'), pyxb.binding.datatypes.boolean, scope=recyclingResponseType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1223, 12)))

def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1222, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1223, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(recyclingResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recycleAdvice')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1222, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(recyclingResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recycleEngineActive')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1223, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
recyclingResponseType._Automaton = _BuildAutomaton_85()




networkSubField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fieldValue'), pyxb.binding.datatypes.string, scope=networkSubField, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1229, 12)))

def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1229, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(networkSubField._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fieldValue')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1229, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
networkSubField._Automaton = _BuildAutomaton_86()




networkField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fieldValue'), pyxb.binding.datatypes.string, scope=networkField, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1238, 16)))

networkField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'networkSubField'), networkSubField, scope=networkField, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1239, 16)))

def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1239, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(networkField._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fieldValue')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1238, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(networkField._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'networkSubField')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1239, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
networkField._Automaton = _BuildAutomaton_87()




networkResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'endpoint'), pyxb.binding.datatypes.string, scope=networkResponse, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1248, 12)))

networkResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'networkField'), networkField, scope=networkResponse, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1249, 12)))

def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1248, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1249, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(networkResponse._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'endpoint')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1248, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(networkResponse._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'networkField')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1249, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
networkResponse._Automaton = _BuildAutomaton_88()




recyclingRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recycleBy'), pyxb.binding.datatypes.string, scope=recyclingRequestType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1255, 12)))

recyclingRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recycleId'), pyxb.binding.datatypes.string, scope=recyclingRequestType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1256, 12)))

def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1255, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1256, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(recyclingRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recycleBy')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1255, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(recyclingRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recycleId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1256, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
recyclingRequestType._Automaton = _BuildAutomaton_89()




CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingSource'), CTD_ANON_13, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1263, 16)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'affluence'), pyxb.binding.datatypes.string, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1273, 16)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'issuerCountry'), pyxb.binding.datatypes.string, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1274, 16)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardProductType'), pyxb.binding.datatypes.string, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1275, 16)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'virtualAccountNumber'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1276, 16)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'networkResponse'), networkResponse, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1277, 16)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountRangeId'), pyxb.binding.datatypes.long, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1278, 16)))

def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1263, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1273, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1274, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1275, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1276, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1277, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1278, 16))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundingSource')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1263, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'affluence')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1273, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'issuerCountry')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1274, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardProductType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1275, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'virtualAccountNumber')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1276, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'networkResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1277, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountRangeId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1278, 16))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_12._Automaton = _BuildAutomaton_90()




CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), pyxb.binding.datatypes.string, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1266, 28)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'availableBalance'), pyxb.binding.datatypes.string, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1267, 28)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'reloadable'), pyxb.binding.datatypes.string, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1268, 28)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'prepaidCardType'), pyxb.binding.datatypes.string, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1269, 28)))

def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1266, 28))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1267, 28))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1268, 28))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1269, 28))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1266, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'availableBalance')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1267, 28))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'reloadable')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1268, 28))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'prepaidCardType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1269, 28))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_13._Automaton = _BuildAutomaton_91()




CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'avsResult'), pyxb.binding.datatypes.string, scope=CTD_ANON_14, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1627, 16)))

CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardValidationResult'), pyxb.binding.datatypes.string, scope=CTD_ANON_14, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1628, 16)))

CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authenticationResult'), pyxb.binding.datatypes.string, scope=CTD_ANON_14, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1630, 16)))

CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'advancedAVSResult'), pyxb.binding.datatypes.string, scope=CTD_ANON_14, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1631, 16)))

CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudResults'), advancedFraudResultsType, scope=CTD_ANON_14, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1632, 16)))

def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1627, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'avsResult')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1627, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_94 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1628, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardValidationResult')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1628, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_95 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1630, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authenticationResult')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1630, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_96 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1631, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'advancedAVSResult')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1631, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_97 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1632, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudResults')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1632, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1627, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1628, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1630, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1631, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1632, 16))
    counters.add(cc_4)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_93())
    sub_automata.append(_BuildAutomaton_94())
    sub_automata.append(_BuildAutomaton_95())
    sub_automata.append(_BuildAutomaton_96())
    sub_automata.append(_BuildAutomaton_97())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1626, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_14._Automaton = _BuildAutomaton_92()




CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'txnTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1701, 16)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'refCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1702, 16)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'systemTraceId'), pyxb.binding.datatypes.int, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1703, 16)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sequenceNumber'), pyxb.binding.datatypes.string, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1704, 16)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'availableBalance'), pyxb.binding.datatypes.string, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1705, 16)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'beginningBalance'), pyxb.binding.datatypes.string, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1706, 16)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'endingBalance'), pyxb.binding.datatypes.string, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1707, 16)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cashBackAmount'), pyxb.binding.datatypes.string, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1708, 16)))

def _BuildAutomaton_99 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1701, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'txnTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1701, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_100 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1702, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'refCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1702, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_101 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1703, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'systemTraceId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1703, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_102 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1704, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sequenceNumber')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1704, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_103 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1705, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'availableBalance')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1705, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_104 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1706, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'beginningBalance')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1706, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_105 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_105
    del _BuildAutomaton_105
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1707, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'endingBalance')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1707, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_106 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_106
    del _BuildAutomaton_106
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1708, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cashBackAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1708, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_98 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1701, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1702, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1703, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1704, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1705, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1706, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1707, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1708, 16))
    counters.add(cc_7)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_99())
    sub_automata.append(_BuildAutomaton_100())
    sub_automata.append(_BuildAutomaton_101())
    sub_automata.append(_BuildAutomaton_102())
    sub_automata.append(_BuildAutomaton_103())
    sub_automata.append(_BuildAutomaton_104())
    sub_automata.append(_BuildAutomaton_105())
    sub_automata.append(_BuildAutomaton_106())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1700, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_15._Automaton = _BuildAutomaton_98()




CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountNumber'), pyxb.binding.datatypes.string, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1716, 16)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pin'), pyxb.binding.datatypes.string, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1717, 16)))

def _BuildAutomaton_107 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_107
    del _BuildAutomaton_107
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1716, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1717, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountNumber')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1716, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pin')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1717, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_16._Automaton = _BuildAutomaton_107()




echeckAccountInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accType'), pyxb.binding.datatypes.string, scope=echeckAccountInfoType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1886, 12)))

echeckAccountInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accNum'), pyxb.binding.datatypes.string, scope=echeckAccountInfoType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1887, 12)))

echeckAccountInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'routingNum'), pyxb.binding.datatypes.string, scope=echeckAccountInfoType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1888, 12)))

def _BuildAutomaton_109 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_109
    del _BuildAutomaton_109
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1886, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(echeckAccountInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1886, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_110 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_110
    del _BuildAutomaton_110
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1887, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(echeckAccountInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accNum')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1887, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_111 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_111
    del _BuildAutomaton_111
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1888, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(echeckAccountInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'routingNum')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1888, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_108 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_108
    del _BuildAutomaton_108
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1886, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1887, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1888, 12))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_109())
    sub_automata.append(_BuildAutomaton_110())
    sub_automata.append(_BuildAutomaton_111())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1885, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
echeckAccountInfoType._Automaton = _BuildAutomaton_108()




echeckTokenInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accType'), pyxb.binding.datatypes.string, scope=echeckTokenInfoType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1894, 12)))

echeckTokenInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpToken'), pyxb.binding.datatypes.string, scope=echeckTokenInfoType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1895, 12)))

echeckTokenInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'routingNum'), pyxb.binding.datatypes.string, scope=echeckTokenInfoType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1896, 12)))

def _BuildAutomaton_113 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_113
    del _BuildAutomaton_113
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1894, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(echeckTokenInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1894, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_114 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_114
    del _BuildAutomaton_114
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1895, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(echeckTokenInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpToken')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1895, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_115 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_115
    del _BuildAutomaton_115
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1896, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(echeckTokenInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'routingNum')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1896, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_112 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_112
    del _BuildAutomaton_112
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1894, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1895, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1896, 12))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_113())
    sub_automata.append(_BuildAutomaton_114())
    sub_automata.append(_BuildAutomaton_115())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1893, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
echeckTokenInfoType._Automaton = _BuildAutomaton_112()




cardAccountInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), pyxb.binding.datatypes.string, scope=cardAccountInfoType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1903, 12)))

cardAccountInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'number'), pyxb.binding.datatypes.string, scope=cardAccountInfoType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1904, 12)))

cardAccountInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'expDate'), pyxb.binding.datatypes.string, scope=cardAccountInfoType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1905, 12)))

def _BuildAutomaton_117 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_117
    del _BuildAutomaton_117
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1903, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(cardAccountInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1903, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_118 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_118
    del _BuildAutomaton_118
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1904, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(cardAccountInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1904, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_119 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_119
    del _BuildAutomaton_119
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1905, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(cardAccountInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1905, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_116 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_116
    del _BuildAutomaton_116
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1903, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1904, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1905, 12))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_117())
    sub_automata.append(_BuildAutomaton_118())
    sub_automata.append(_BuildAutomaton_119())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1902, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
cardAccountInfoType._Automaton = _BuildAutomaton_116()




cardTokenInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpToken'), pyxb.binding.datatypes.string, scope=cardTokenInfoType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1911, 12)))

cardTokenInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), pyxb.binding.datatypes.string, scope=cardTokenInfoType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1912, 12)))

cardTokenInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'expDate'), pyxb.binding.datatypes.string, scope=cardTokenInfoType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1913, 12)))

cardTokenInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bin'), pyxb.binding.datatypes.string, scope=cardTokenInfoType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1914, 12)))

def _BuildAutomaton_121 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_121
    del _BuildAutomaton_121
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1911, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpToken')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1911, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_122 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_122
    del _BuildAutomaton_122
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1912, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1912, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_123 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_123
    del _BuildAutomaton_123
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1913, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1913, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_124 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_124
    del _BuildAutomaton_124
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1914, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bin')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1914, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_120 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_120
    del _BuildAutomaton_120
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1911, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1912, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1913, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1914, 12))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_121())
    sub_automata.append(_BuildAutomaton_122())
    sub_automata.append(_BuildAutomaton_123())
    sub_automata.append(_BuildAutomaton_124())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1910, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
cardTokenInfoType._Automaton = _BuildAutomaton_120()




extendedCardResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=extendedCardResponseType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1921, 12)))

extendedCardResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'code'), pyxb.binding.datatypes.string, scope=extendedCardResponseType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1922, 12)))

def _BuildAutomaton_126 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_126
    del _BuildAutomaton_126
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1921, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(extendedCardResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1921, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_127 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_127
    del _BuildAutomaton_127
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1922, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(extendedCardResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'code')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1922, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_125 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_125
    del _BuildAutomaton_125
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1921, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1922, 12))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_126())
    sub_automata.append(_BuildAutomaton_127())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1920, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
extendedCardResponseType._Automaton = _BuildAutomaton_125()




CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalAccountInfo'), echeckAccountInfoType, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1931, 20)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'newAccountInfo'), echeckAccountInfoType, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1932, 20)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalTokenInfo'), echeckTokenInfoType, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1936, 20)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'newTokenInfo'), echeckTokenInfoType, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1937, 20)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalCardInfo'), cardAccountInfoType, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1941, 20)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'newCardInfo'), cardAccountInfoType, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1942, 20)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extendedCardResponse'), extendedCardResponseType, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1943, 20)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountUpdateSource'), pyxb.binding.datatypes.string, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1944, 20)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalCardTokenInfo'), cardTokenInfoType, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1948, 20)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'newCardTokenInfo'), cardTokenInfoType, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1949, 20)))

def _BuildAutomaton_128 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_128
    del _BuildAutomaton_128
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1943, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1944, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1950, 20))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1951, 20))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1955, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1956, 20))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalAccountInfo')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1931, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'newAccountInfo')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1932, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalTokenInfo')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1936, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'newTokenInfo')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1937, 20))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalCardInfo')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1941, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'newCardInfo')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1942, 20))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extendedCardResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1943, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountUpdateSource')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1944, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalCardTokenInfo')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1948, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'newCardTokenInfo')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1949, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extendedCardResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1950, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountUpdateSource')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1951, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extendedCardResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1955, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountUpdateSource')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1956, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_17._Automaton = _BuildAutomaton_128()




echeckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accType'), pyxb.binding.datatypes.string, scope=echeckType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2022, 12)))

echeckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accNum'), pyxb.binding.datatypes.string, scope=echeckType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2023, 12)))

echeckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'routingNum'), pyxb.binding.datatypes.string, scope=echeckType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2024, 12)))

echeckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'checkNum'), pyxb.binding.datatypes.string, scope=echeckType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2025, 12)))

echeckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ccdPaymentInformation'), pyxb.binding.datatypes.string, scope=echeckType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2026, 12)))

def _BuildAutomaton_130 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_130
    del _BuildAutomaton_130
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2022, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(echeckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2022, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_131 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_131
    del _BuildAutomaton_131
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2023, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(echeckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accNum')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2023, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_132 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_132
    del _BuildAutomaton_132
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2024, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(echeckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'routingNum')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2024, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_133 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_133
    del _BuildAutomaton_133
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2025, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(echeckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'checkNum')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2025, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_134 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_134
    del _BuildAutomaton_134
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2026, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(echeckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ccdPaymentInformation')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2026, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_129 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_129
    del _BuildAutomaton_129
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2022, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2023, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2024, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2025, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2026, 12))
    counters.add(cc_4)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_130())
    sub_automata.append(_BuildAutomaton_131())
    sub_automata.append(_BuildAutomaton_132())
    sub_automata.append(_BuildAutomaton_133())
    sub_automata.append(_BuildAutomaton_134())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2021, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
echeckType._Automaton = _BuildAutomaton_129()




echeckTypeCtx._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accType'), pyxb.binding.datatypes.string, scope=echeckTypeCtx, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2032, 12)))

echeckTypeCtx._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accNum'), pyxb.binding.datatypes.string, scope=echeckTypeCtx, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2033, 12)))

echeckTypeCtx._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'routingNum'), pyxb.binding.datatypes.string, scope=echeckTypeCtx, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2034, 12)))

echeckTypeCtx._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'checkNum'), pyxb.binding.datatypes.string, scope=echeckTypeCtx, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2035, 12)))

echeckTypeCtx._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ccdPaymentInformation'), pyxb.binding.datatypes.string, scope=echeckTypeCtx, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2036, 12)))

echeckTypeCtx._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ctxPaymentInformation'), ctxPaymentInformationType, scope=echeckTypeCtx, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2037, 12)))

def _BuildAutomaton_136 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_136
    del _BuildAutomaton_136
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2032, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(echeckTypeCtx._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2032, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_137 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_137
    del _BuildAutomaton_137
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2033, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(echeckTypeCtx._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accNum')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2033, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_138 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_138
    del _BuildAutomaton_138
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2034, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(echeckTypeCtx._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'routingNum')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2034, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_139 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_139
    del _BuildAutomaton_139
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2035, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(echeckTypeCtx._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'checkNum')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2035, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_140 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_140
    del _BuildAutomaton_140
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2036, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(echeckTypeCtx._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ccdPaymentInformation')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2036, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_141 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_141
    del _BuildAutomaton_141
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2037, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(echeckTypeCtx._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ctxPaymentInformation')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2037, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_135 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_135
    del _BuildAutomaton_135
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2032, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2033, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2034, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2035, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2036, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2037, 12))
    counters.add(cc_5)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_136())
    sub_automata.append(_BuildAutomaton_137())
    sub_automata.append(_BuildAutomaton_138())
    sub_automata.append(_BuildAutomaton_139())
    sub_automata.append(_BuildAutomaton_140())
    sub_automata.append(_BuildAutomaton_141())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2031, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
echeckTypeCtx._Automaton = _BuildAutomaton_135()




ctxPaymentInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ctxPaymentDetail'), pyxb.binding.datatypes.string, scope=ctxPaymentInformationType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2043, 12)))

def _BuildAutomaton_142 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_142
    del _BuildAutomaton_142
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2043, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctxPaymentInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ctxPaymentDetail')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2043, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctxPaymentInformationType._Automaton = _BuildAutomaton_142()




echeckForTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accNum'), pyxb.binding.datatypes.string, scope=echeckForTokenType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2049, 12)))

echeckForTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'routingNum'), pyxb.binding.datatypes.string, scope=echeckForTokenType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2050, 12)))

def _BuildAutomaton_144 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_144
    del _BuildAutomaton_144
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2049, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(echeckForTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accNum')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2049, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_145 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_145
    del _BuildAutomaton_145
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2050, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(echeckForTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'routingNum')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2050, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_143 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_143
    del _BuildAutomaton_143
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2049, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2050, 12))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_144())
    sub_automata.append(_BuildAutomaton_145())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2048, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
echeckForTokenType._Automaton = _BuildAutomaton_143()




filteringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'prepaid'), pyxb.binding.datatypes.boolean, scope=filteringType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2069, 12)))

filteringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'international'), pyxb.binding.datatypes.boolean, scope=filteringType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2070, 12)))

filteringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'chargeback'), pyxb.binding.datatypes.boolean, scope=filteringType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2071, 12)))

def _BuildAutomaton_146 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_146
    del _BuildAutomaton_146
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2069, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2070, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2071, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(filteringType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'prepaid')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2069, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(filteringType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'international')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2070, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(filteringType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'chargeback')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2071, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
filteringType._Automaton = _BuildAutomaton_146()




virtualGiftCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountNumberLength'), pyxb.binding.datatypes.integer, scope=virtualGiftCardType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2110, 12)))

virtualGiftCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardBin'), pyxb.binding.datatypes.string, scope=virtualGiftCardType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2111, 12)))

def _BuildAutomaton_147 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_147
    del _BuildAutomaton_147
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2110, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2111, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(virtualGiftCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountNumberLength')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2110, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(virtualGiftCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardBin')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2111, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
virtualGiftCardType._Automaton = _BuildAutomaton_147()




CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'walletSourceType'), pyxb.binding.datatypes.string, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2154, 16)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'walletSourceTypeId'), pyxb.binding.datatypes.string, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2155, 16)))

def _BuildAutomaton_149 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_149
    del _BuildAutomaton_149
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2154, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'walletSourceType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2154, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_150 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_150
    del _BuildAutomaton_150
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2155, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'walletSourceTypeId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2155, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_148 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_148
    del _BuildAutomaton_148
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2154, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2155, 16))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_149())
    sub_automata.append(_BuildAutomaton_150())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2153, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_18._Automaton = _BuildAutomaton_148()




applepayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'data'), pyxb.binding.datatypes.string, scope=applepayType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2162, 12)))

applepayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'header'), applepayHeaderType, scope=applepayType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2163, 12)))

applepayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'signature'), pyxb.binding.datatypes.string, scope=applepayType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2164, 12)))

applepayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'version'), pyxb.binding.datatypes.string, scope=applepayType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2165, 12)))

def _BuildAutomaton_151 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_151
    del _BuildAutomaton_151
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2162, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2163, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2164, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2165, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(applepayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'data')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2162, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(applepayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'header')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2163, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(applepayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'signature')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2164, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(applepayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'version')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2165, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
applepayType._Automaton = _BuildAutomaton_151()




applepayHeaderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'applicationData'), pyxb.binding.datatypes.string, scope=applepayHeaderType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2171, 12)))

applepayHeaderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ephemeralPublicKey'), pyxb.binding.datatypes.string, scope=applepayHeaderType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2172, 12)))

applepayHeaderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'publicKeyHash'), pyxb.binding.datatypes.string, scope=applepayHeaderType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2173, 12)))

applepayHeaderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transactionId'), pyxb.binding.datatypes.string, scope=applepayHeaderType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2174, 12)))

def _BuildAutomaton_152 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_152
    del _BuildAutomaton_152
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2171, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2172, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2173, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2174, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(applepayHeaderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'applicationData')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2171, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(applepayHeaderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ephemeralPublicKey')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2172, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(applepayHeaderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'publicKeyHash')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2173, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(applepayHeaderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transactionId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2174, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
applepayHeaderType._Automaton = _BuildAutomaton_152()




CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'applicationPrimaryAccountNumber'), pyxb.binding.datatypes.string, scope=CTD_ANON_19, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2181, 16)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'applicationExpirationDate'), pyxb.binding.datatypes.string, scope=CTD_ANON_19, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2182, 16)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'currencyCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_19, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2183, 16)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transactionAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_19, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2184, 16)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardholderName'), pyxb.binding.datatypes.string, scope=CTD_ANON_19, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2185, 16)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deviceManufacturerIdentifier'), pyxb.binding.datatypes.string, scope=CTD_ANON_19, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2186, 16)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paymentDataType'), pyxb.binding.datatypes.string, scope=CTD_ANON_19, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2187, 16)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'onlinePaymentCryptogram'), pyxb.binding.datatypes.string, scope=CTD_ANON_19, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2188, 16)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eciIndicator'), pyxb.binding.datatypes.string, scope=CTD_ANON_19, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2189, 16)))

def _BuildAutomaton_153 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_153
    del _BuildAutomaton_153
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2181, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2182, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2183, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2184, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2185, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2186, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2187, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2188, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2189, 16))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'applicationPrimaryAccountNumber')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2181, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'applicationExpirationDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2182, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'currencyCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2183, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transactionAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2184, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardholderName')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2185, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deviceManufacturerIdentifier')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2186, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paymentDataType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2187, 16))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'onlinePaymentCryptogram')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2188, 16))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eciIndicator')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2189, 16))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_19._Automaton = _BuildAutomaton_153()




CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cryptogram'), pyxb.binding.datatypes.string, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2197, 16)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'expMonth'), pyxb.binding.datatypes.string, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2198, 16)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'expYear'), pyxb.binding.datatypes.string, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2199, 16)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eciIndicator'), pyxb.binding.datatypes.string, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2200, 16)))

def _BuildAutomaton_154 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_154
    del _BuildAutomaton_154
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2197, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2198, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2199, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2200, 16))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cryptogram')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2197, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expMonth')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2198, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expYear')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2199, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eciIndicator')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2200, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_20._Automaton = _BuildAutomaton_154()




sepaDirectDebitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mandateProvider'), pyxb.binding.datatypes.string, scope=sepaDirectDebitType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2208, 12)))

sepaDirectDebitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sequenceType'), pyxb.binding.datatypes.string, scope=sepaDirectDebitType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2209, 12)))

sepaDirectDebitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mandateReference'), pyxb.binding.datatypes.string, scope=sepaDirectDebitType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2210, 12)))

sepaDirectDebitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mandateUrl'), pyxb.binding.datatypes.string, scope=sepaDirectDebitType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2211, 12)))

sepaDirectDebitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mandateSignatureDate'), pyxb.binding.datatypes.date, scope=sepaDirectDebitType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2212, 12)))

sepaDirectDebitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'iban'), pyxb.binding.datatypes.string, scope=sepaDirectDebitType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2213, 12)))

sepaDirectDebitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'preferredLanguage'), pyxb.binding.datatypes.string, scope=sepaDirectDebitType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2214, 12)))

def _BuildAutomaton_155 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_155
    del _BuildAutomaton_155
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2208, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2209, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2210, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2211, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2212, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2213, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2214, 12))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(sepaDirectDebitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mandateProvider')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2208, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(sepaDirectDebitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sequenceType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2209, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(sepaDirectDebitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mandateReference')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2210, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(sepaDirectDebitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mandateUrl')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2211, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(sepaDirectDebitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mandateSignatureDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2212, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(sepaDirectDebitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'iban')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2213, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(sepaDirectDebitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'preferredLanguage')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2214, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
sepaDirectDebitType._Automaton = _BuildAutomaton_155()




CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'redirectUrl'), pyxb.binding.datatypes.string, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2221, 16)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'redirectToken'), pyxb.binding.datatypes.string, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2222, 16)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mandateReference'), pyxb.binding.datatypes.string, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2223, 16)))

def _BuildAutomaton_157 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_157
    del _BuildAutomaton_157
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2221, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'redirectUrl')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2221, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_158 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_158
    del _BuildAutomaton_158
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2222, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'redirectToken')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2222, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_159 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_159
    del _BuildAutomaton_159
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2223, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mandateReference')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2223, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_156 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_156
    del _BuildAutomaton_156
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2221, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2222, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2223, 16))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_157())
    sub_automata.append(_BuildAutomaton_158())
    sub_automata.append(_BuildAutomaton_159())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2220, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_21._Automaton = _BuildAutomaton_156()




idealType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'preferredLanguage'), pyxb.binding.datatypes.string, scope=idealType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2230, 12)))

def _BuildAutomaton_160 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_160
    del _BuildAutomaton_160
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2230, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(idealType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'preferredLanguage')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2230, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
idealType._Automaton = _BuildAutomaton_160()




CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'redirectUrl'), pyxb.binding.datatypes.string, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2237, 16)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'redirectToken'), pyxb.binding.datatypes.string, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2238, 16)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paymentPurpose'), pyxb.binding.datatypes.string, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2239, 16)))

def _BuildAutomaton_162 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_162
    del _BuildAutomaton_162
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2237, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'redirectUrl')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2237, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_163 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_163
    del _BuildAutomaton_163
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2238, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'redirectToken')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2238, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_164 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_164
    del _BuildAutomaton_164
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2239, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paymentPurpose')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2239, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_161 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_161
    del _BuildAutomaton_161
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2237, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2238, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2239, 16))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_162())
    sub_automata.append(_BuildAutomaton_163())
    sub_automata.append(_BuildAutomaton_164())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2236, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_22._Automaton = _BuildAutomaton_161()




giropayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'preferredLanguage'), pyxb.binding.datatypes.string, scope=giropayType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2246, 12)))

def _BuildAutomaton_165 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_165
    del _BuildAutomaton_165
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2246, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(giropayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'preferredLanguage')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2246, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
giropayType._Automaton = _BuildAutomaton_165()




CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'redirectUrl'), pyxb.binding.datatypes.string, scope=CTD_ANON_23, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2253, 16)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'redirectToken'), pyxb.binding.datatypes.string, scope=CTD_ANON_23, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2254, 16)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paymentPurpose'), pyxb.binding.datatypes.string, scope=CTD_ANON_23, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2255, 16)))

def _BuildAutomaton_167 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_167
    del _BuildAutomaton_167
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2253, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'redirectUrl')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2253, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_168 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_168
    del _BuildAutomaton_168
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2254, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'redirectToken')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2254, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_169 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_169
    del _BuildAutomaton_169
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2255, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paymentPurpose')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2255, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_166 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_166
    del _BuildAutomaton_166
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2253, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2254, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2255, 16))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_167())
    sub_automata.append(_BuildAutomaton_168())
    sub_automata.append(_BuildAutomaton_169())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2252, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_23._Automaton = _BuildAutomaton_166()




sofortType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'preferredLanguage'), pyxb.binding.datatypes.string, scope=sofortType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2262, 12)))

def _BuildAutomaton_170 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_170
    del _BuildAutomaton_170
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2262, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(sofortType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'preferredLanguage')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2262, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
sofortType._Automaton = _BuildAutomaton_170()




CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'redirectUrl'), pyxb.binding.datatypes.string, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2269, 16)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'redirectToken'), pyxb.binding.datatypes.string, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2270, 16)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paymentPurpose'), pyxb.binding.datatypes.string, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2271, 16)))

def _BuildAutomaton_172 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_172
    del _BuildAutomaton_172
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2269, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'redirectUrl')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2269, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_173 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_173
    del _BuildAutomaton_173
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2270, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'redirectToken')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2270, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_174 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_174
    del _BuildAutomaton_174
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2271, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paymentPurpose')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2271, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_171 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_171
    del _BuildAutomaton_171
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2269, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2270, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2271, 16))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_172())
    sub_automata.append(_BuildAutomaton_173())
    sub_automata.append(_BuildAutomaton_174())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2268, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_24._Automaton = _BuildAutomaton_171()




CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'networkName'), pyxb.binding.datatypes.string, scope=CTD_ANON_25, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2622, 16)))

CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'debitResponse'), pyxb.binding.datatypes.string, scope=CTD_ANON_25, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2623, 16)))

CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'debitMessage'), pyxb.binding.datatypes.string, scope=CTD_ANON_25, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2624, 16)))

def _BuildAutomaton_176 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_176
    del _BuildAutomaton_176
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2622, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'networkName')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2622, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_177 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_177
    del _BuildAutomaton_177
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2623, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'debitResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2623, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_178 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_178
    del _BuildAutomaton_178
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2624, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'debitMessage')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2624, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_175 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_175
    del _BuildAutomaton_175
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2622, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2623, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2624, 16))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_176())
    sub_automata.append(_BuildAutomaton_177())
    sub_automata.append(_BuildAutomaton_178())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2621, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_25._Automaton = _BuildAutomaton_175()




pinlessDebitRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'routingPreference'), pyxb.binding.datatypes.string, scope=pinlessDebitRequestType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2824, 12)))

pinlessDebitRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'preferredDebitNetworks'), preferredDebitNetworksType, scope=pinlessDebitRequestType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2825, 12)))

def _BuildAutomaton_179 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_179
    del _BuildAutomaton_179
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2824, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2825, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(pinlessDebitRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'routingPreference')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2824, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(pinlessDebitRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'preferredDebitNetworks')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2825, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
pinlessDebitRequestType._Automaton = _BuildAutomaton_179()




preferredDebitNetworksType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'debitNetworkName'), pyxb.binding.datatypes.string, scope=preferredDebitNetworksType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2831, 12)))

def _BuildAutomaton_180 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_180
    del _BuildAutomaton_180
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=12, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2831, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(preferredDebitNetworksType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'debitNetworkName')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2831, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
preferredDebitNetworksType._Automaton = _BuildAutomaton_180()




CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'lodgingCharge'), CTD_ANON_, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 200, 4)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'hotelFolioNumber'), pyxb.binding.datatypes.string, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2838, 16)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'checkInDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2839, 16)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'checkOutDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2840, 16)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'duration'), pyxb.binding.datatypes.integer, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2841, 16)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerServicePhone'), pyxb.binding.datatypes.string, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2842, 16)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'programCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2843, 16), unicode_default='LODGING'))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'roomRate'), pyxb.binding.datatypes.integer, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2844, 16)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'roomTax'), pyxb.binding.datatypes.integer, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2845, 16)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'numAdults'), pyxb.binding.datatypes.integer, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2846, 16)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'propertyLocalPhone'), pyxb.binding.datatypes.string, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2847, 16)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fireSafetyIndicator'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2848, 16)))

def _BuildAutomaton_181 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_181
    del _BuildAutomaton_181
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2838, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2839, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2840, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2841, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2842, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2843, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2844, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2845, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2846, 16))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2847, 16))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2848, 16))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=6, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2849, 16))
    counters.add(cc_11)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'hotelFolioNumber')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2838, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'checkInDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2839, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'checkOutDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2840, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'duration')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2841, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerServicePhone')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2842, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'programCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2843, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'roomRate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2844, 16))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'roomTax')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2845, 16))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'numAdults')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2846, 16))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'propertyLocalPhone')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2847, 16))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fireSafetyIndicator')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2848, 16))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'lodgingCharge')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2849, 16))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_26._Automaton = _BuildAutomaton_181()




transactionReversalRecyclingResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'creditCnpTxnId'), pyxb.binding.datatypes.long, scope=transactionReversalRecyclingResponseType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2894, 12)))

def _BuildAutomaton_182 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_182
    del _BuildAutomaton_182
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2894, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(transactionReversalRecyclingResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'creditCnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2894, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
transactionReversalRecyclingResponseType._Automaton = _BuildAutomaton_182()




CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authentication'), CTD_ANON, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 5, 4)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RFRRequest'), CTD_ANON_28, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2918, 4)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'batchRequest'), CTD_ANON_29, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2926, 4)))

def _BuildAutomaton_183 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_183
    del _BuildAutomaton_183
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2907, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2909, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2910, 20))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authentication')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2907, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'batchRequest')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2909, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RFRRequest')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2910, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_27._Automaton = _BuildAutomaton_183()




CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpSessionId'), pyxb.binding.datatypes.long, scope=CTD_ANON_28, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2921, 16)))

CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountUpdateFileRequestData'), CTD_ANON_33, scope=CTD_ANON_28, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3102, 4)))

def _BuildAutomaton_184 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_184
    del _BuildAutomaton_184
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpSessionId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2921, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountUpdateFileRequestData')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2922, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_28._Automaton = _BuildAutomaton_184()




CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recurringTransaction'), recurringTransactionType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_29, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 215, 4)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transaction'), transactionType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_29, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 456, 4)))

def _BuildAutomaton_185 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_185
    del _BuildAutomaton_185
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transaction')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2929, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recurringTransaction')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2930, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_29._Automaton = _BuildAutomaton_185()




CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RFRResponse'), CTD_ANON_31, scope=CTD_ANON_30, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3052, 4)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'batchResponse'), CTD_ANON_32, scope=CTD_ANON_30, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3058, 4)))

def _BuildAutomaton_186 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_186
    del _BuildAutomaton_186
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3041, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'batchResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3041, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RFRResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3042, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_30._Automaton = _BuildAutomaton_186()




CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recurringTransactionResponse'), recurringTransactionResponseType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_32, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 216, 4)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transactionResponse'), transactionTypeWithReportGroup, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_32, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1159, 4)))

def _BuildAutomaton_187 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_187
    del _BuildAutomaton_187
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3061, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3062, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transactionResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3061, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recurringTransactionResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3062, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_32._Automaton = _BuildAutomaton_187()




CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantId'), pyxb.binding.datatypes.string, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3105, 16)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDay'), pyxb.binding.datatypes.date, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3106, 16)))

def _BuildAutomaton_189 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_189
    del _BuildAutomaton_189
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3105, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3105, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_190 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_190
    del _BuildAutomaton_190
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3106, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDay')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3106, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_188 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_188
    del _BuildAutomaton_188
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3105, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3106, 16))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_189())
    sub_automata.append(_BuildAutomaton_190())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3104, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_33._Automaton = _BuildAutomaton_188()




baseRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authentication'), CTD_ANON, scope=baseRequest, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 5, 4)))

baseRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recurringTransaction'), recurringTransactionType, abstract=pyxb.binding.datatypes.boolean(1), scope=baseRequest, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 215, 4)))

baseRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transaction'), transactionType, abstract=pyxb.binding.datatypes.boolean(1), scope=baseRequest, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 456, 4)))

def _BuildAutomaton_191 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_191
    del _BuildAutomaton_191
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3304, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseRequest._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authentication')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3304, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(baseRequest._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transaction')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3306, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(baseRequest._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recurringTransaction')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3307, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
baseRequest._Automaton = _BuildAutomaton_191()




CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recurringTransactionResponse'), recurringTransactionResponseType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_34, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 216, 4)))

CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transactionResponse'), transactionTypeWithReportGroup, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_34, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1159, 4)))

def _BuildAutomaton_192 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_192
    del _BuildAutomaton_192
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3329, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3330, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transactionResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3329, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recurringTransactionResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3330, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_34._Automaton = _BuildAutomaton_192()




voidRecyclingResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'creditCnpTxnId'), pyxb.binding.datatypes.long, scope=voidRecyclingResponseType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3372, 12)))

def _BuildAutomaton_193 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_193
    del _BuildAutomaton_193
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3372, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(voidRecyclingResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'creditCnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3372, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
voidRecyclingResponseType._Automaton = _BuildAutomaton_193()




CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transactionResponse'), transactionTypeWithReportGroup, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_35, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1159, 4)))

def _BuildAutomaton_194 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_194
    del _BuildAutomaton_194
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=10, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3541, 36))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transactionResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3541, 36))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_35._Automaton = _BuildAutomaton_194()




def _BuildAutomaton_195 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_195
    del _BuildAutomaton_195
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 113, 28))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 114, 28))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 120, 20))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 121, 20))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(giftCardCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 112, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(giftCardCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 113, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(giftCardCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 114, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(giftCardCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'track')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 117, 28))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(giftCardCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 120, 20))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(giftCardCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pin')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 121, 20))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
giftCardCardType._Automaton = _BuildAutomaton_195()




recurringTransactionResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=recurringTransactionResponseType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 230, 20)))

recurringTransactionResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=recurringTransactionResponseType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 231, 20)))

recurringTransactionResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=recurringTransactionResponseType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 232, 20)))

recurringTransactionResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=recurringTransactionResponseType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 233, 20)))

recurringTransactionResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=recurringTransactionResponseType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 234, 20)))

def _BuildAutomaton_196 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_196
    del _BuildAutomaton_196
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 230, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 231, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 232, 20))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 233, 20))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 234, 20))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(recurringTransactionResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 230, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(recurringTransactionResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 231, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(recurringTransactionResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 232, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(recurringTransactionResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 233, 20))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(recurringTransactionResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 234, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
recurringTransactionResponseType._Automaton = _BuildAutomaton_196()




cardTokenTypeAU._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bin'), pyxb.binding.datatypes.string, scope=cardTokenTypeAU, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3095, 20)))

def _BuildAutomaton_197 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_197
    del _BuildAutomaton_197
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 134, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 135, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 136, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 137, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 138, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3095, 20))
    counters.add(cc_5)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardTokenTypeAU._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpToken')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 131, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardTokenTypeAU._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenURL')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 132, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenTypeAU._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 134, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenTypeAU._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 135, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenTypeAU._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 136, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenTypeAU._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'checkoutId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 137, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenTypeAU._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authenticatedShopperID')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 138, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenTypeAU._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bin')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3095, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
cardTokenTypeAU._Automaton = _BuildAutomaton_197()




def _BuildAutomaton_198 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_198
    del _BuildAutomaton_198
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3304, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authentication')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3304, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transaction')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3306, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recurringTransaction')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3307, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_36._Automaton = _BuildAutomaton_198()




CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId'), pyxb.binding.datatypes.long, scope=CTD_ANON_37, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 245, 24)))

def _BuildAutomaton_199 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_199
    del _BuildAutomaton_199
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 245, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 245, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_37._Automaton = _BuildAutomaton_199()




CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), contact, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 77, 4)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId'), pyxb.binding.datatypes.long, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 257, 24)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'planCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 258, 24)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), cardType, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 261, 28)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'token'), cardTokenType, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 262, 28)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paypage'), cardPaypageType, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 263, 28)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billingDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 265, 24)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'createDiscount'), createDiscountType, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 266, 24)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'updateDiscount'), updateDiscountType, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 267, 24)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deleteDiscount'), deleteDiscountType, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 268, 24)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'createAddOn'), createAddOnType, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 269, 24)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'updateAddOn'), updateAddOnType, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 270, 24)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deleteAddOn'), deleteAddOnType, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 271, 24)))

def _BuildAutomaton_200 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_200
    del _BuildAutomaton_200
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 257, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 258, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 259, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 260, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 265, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 266, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 267, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 268, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 269, 24))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 270, 24))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 271, 24))
    counters.add(cc_10)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 257, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'planCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 258, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billToAddress')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 259, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 261, 28))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'token')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 262, 28))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paypage')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 263, 28))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billingDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 265, 24))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'createDiscount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 266, 24))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'updateDiscount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 267, 24))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deleteDiscount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 268, 24))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'createAddOn')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 269, 24))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'updateAddOn')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 270, 24))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deleteAddOn')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 271, 24))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_38._Automaton = _BuildAutomaton_200()




CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'planCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 283, 24)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.string, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 284, 24)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 285, 24)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'intervalType'), pyxb.binding.datatypes.string, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 286, 24)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 287, 24)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'numberOfPayments'), pyxb.binding.datatypes.integer, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 288, 24)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'trialNumberOfIntervals'), pyxb.binding.datatypes.integer, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 289, 24)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'trialIntervalType'), pyxb.binding.datatypes.string, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 290, 24)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'active'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 291, 24)))

def _BuildAutomaton_201 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_201
    del _BuildAutomaton_201
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 283, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 284, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 285, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 286, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 287, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 288, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 289, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 290, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 291, 24))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'planCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 283, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 284, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 285, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'intervalType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 286, 24))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 287, 24))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'numberOfPayments')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 288, 24))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'trialNumberOfIntervals')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 289, 24))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'trialIntervalType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 290, 24))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'active')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 291, 24))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_39._Automaton = _BuildAutomaton_201()




CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'planCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 303, 24)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'active'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 304, 24)))

def _BuildAutomaton_202 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_202
    del _BuildAutomaton_202
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 303, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 304, 24))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'planCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 303, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'active')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 304, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_40._Automaton = _BuildAutomaton_202()




CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId'), pyxb.binding.datatypes.long, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 316, 24)))

def _BuildAutomaton_203 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_203
    del _BuildAutomaton_203
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 230, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 231, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 232, 20))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 233, 20))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 234, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 316, 24))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 230, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 231, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 232, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 233, 20))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 234, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 316, 24))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_41._Automaton = _BuildAutomaton_203()




CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId'), pyxb.binding.datatypes.long, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 328, 24)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), tokenResponseType, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 329, 24)))

def _BuildAutomaton_204 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_204
    del _BuildAutomaton_204
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 230, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 231, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 232, 20))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 233, 20))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 234, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 328, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 329, 24))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 230, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 231, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 232, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 233, 20))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 234, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 328, 24))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 329, 24))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_42._Automaton = _BuildAutomaton_204()




CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'planCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 341, 24)))

def _BuildAutomaton_205 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_205
    del _BuildAutomaton_205
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 230, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 231, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 232, 20))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 233, 20))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 234, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 341, 24))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 230, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 231, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 232, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 233, 20))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 234, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'planCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 341, 24))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_43._Automaton = _BuildAutomaton_205()




CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'planCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 353, 24)))

def _BuildAutomaton_206 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_206
    del _BuildAutomaton_206
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 230, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 231, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 232, 20))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 233, 20))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 234, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 353, 24))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 230, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 231, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 232, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 233, 20))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 234, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'planCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 353, 24))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_44._Automaton = _BuildAutomaton_206()




CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), contact, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 77, 4)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerInfo'), CTD_ANON_2, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 508, 4)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 545, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), pyxb.binding.datatypes.string, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 548, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 549, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 550, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 551, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), pyxb.binding.datatypes.string, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 552, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mpos'), mposType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 557, 32)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), cardType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 558, 32)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paypal'), payPal, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 559, 32)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'token'), cardTokenType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 560, 32)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paypage'), cardPaypageType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 561, 32)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'applepay'), applepayType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 562, 32)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardholderAuthentication'), fraudCheckType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 564, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'taxType'), pyxb.binding.datatypes.string, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 568, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'allowPartialAuth'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 570, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'filtering'), filteringType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 573, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), merchantDataType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 574, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recyclingRequest'), recyclingRequestType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 575, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudFilterOverride'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 576, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recurringRequest'), recurringRequestType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 577, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'debtRepayment'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 578, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudChecks'), advancedFraudChecksType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 579, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processingType'), pyxb.binding.datatypes.string, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 581, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalNetworkTransactionId'), pyxb.binding.datatypes.string, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 582, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalTransactionAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 583, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pinlessDebitRequest'), pinlessDebitRequestType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 584, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'skipRealtimeAU'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 585, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantCategoryCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 586, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'businessIndicator'), pyxb.binding.datatypes.string, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 587, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress'), contact, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 942, 4)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'healthcareIIAS'), CTD_ANON_4, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 969, 4)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), CTD_ANON_6, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 991, 4)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), CTD_ANON_9, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1076, 4)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), CTD_ANON_10, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1090, 4)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pos'), CTD_ANON_11, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1098, 4)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'wallet'), CTD_ANON_18, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2151, 4)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'lodgingInfo'), CTD_ANON_26, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2835, 4)))

def _BuildAutomaton_207 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_207
    del _BuildAutomaton_207
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 550, 28))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 551, 28))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 553, 28))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 554, 28))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 555, 28))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 564, 28))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 565, 28))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 566, 28))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 567, 28))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 568, 28))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 569, 28))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 570, 28))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 571, 28))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 572, 28))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 573, 28))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 574, 28))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 575, 28))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 576, 28))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 577, 28))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 578, 28))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 579, 28))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 580, 28))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 581, 28))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 582, 28))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 583, 28))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 584, 28))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 585, 28))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 586, 28))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 587, 28))
    counters.add(cc_28)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 545, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 548, 28))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 549, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 550, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 551, 28))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 552, 28))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerInfo')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 553, 28))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billToAddress')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 554, 28))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 555, 28))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mpos')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 557, 32))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 558, 32))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paypal')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 559, 32))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'token')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 560, 32))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paypage')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 561, 32))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'applepay')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 562, 32))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardholderAuthentication')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 564, 28))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 565, 28))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pos')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 566, 28))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customBilling')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 567, 28))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'taxType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 568, 28))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enhancedData')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 569, 28))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'allowPartialAuth')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 570, 28))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'healthcareIIAS')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 571, 28))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'lodgingInfo')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 572, 28))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'filtering')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 573, 28))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantData')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 574, 28))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recyclingRequest')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 575, 28))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudFilterOverride')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 576, 28))
    st_27 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recurringRequest')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 577, 28))
    st_28 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'debtRepayment')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 578, 28))
    st_29 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudChecks')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 579, 28))
    st_30 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'wallet')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 580, 28))
    st_31 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processingType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 581, 28))
    st_32 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalNetworkTransactionId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 582, 28))
    st_33 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_33)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalTransactionAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 583, 28))
    st_34 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_34)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pinlessDebitRequest')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 584, 28))
    st_35 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_35)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'skipRealtimeAU')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 585, 28))
    st_36 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_36)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_27, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantCategoryCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 586, 28))
    st_37 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_37)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_28, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'businessIndicator')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 587, 28))
    st_38 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_38)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    transitions.append(fac.Transition(st_36, [
         ]))
    transitions.append(fac.Transition(st_37, [
         ]))
    transitions.append(fac.Transition(st_38, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    transitions.append(fac.Transition(st_36, [
         ]))
    transitions.append(fac.Transition(st_37, [
         ]))
    transitions.append(fac.Transition(st_38, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    transitions.append(fac.Transition(st_36, [
         ]))
    transitions.append(fac.Transition(st_37, [
         ]))
    transitions.append(fac.Transition(st_38, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    transitions.append(fac.Transition(st_36, [
         ]))
    transitions.append(fac.Transition(st_37, [
         ]))
    transitions.append(fac.Transition(st_38, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    transitions.append(fac.Transition(st_36, [
         ]))
    transitions.append(fac.Transition(st_37, [
         ]))
    transitions.append(fac.Transition(st_38, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    transitions.append(fac.Transition(st_36, [
         ]))
    transitions.append(fac.Transition(st_37, [
         ]))
    transitions.append(fac.Transition(st_38, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_32._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_33._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_34._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_25, True) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_25, False) ]))
    st_35._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_26, True) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_26, False) ]))
    st_36._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_27, True) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_27, False) ]))
    st_37._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_28, True) ]))
    st_38._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_45._Automaton = _BuildAutomaton_207()




CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 600, 24)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 601, 24)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 602, 24)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payPalNotes'), pyxb.binding.datatypes.string, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 603, 24)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'actionReason'), pyxb.binding.datatypes.string, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 604, 24)))

def _BuildAutomaton_209 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_209
    del _BuildAutomaton_209
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 600, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 600, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_210 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_210
    del _BuildAutomaton_210
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 601, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 601, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_211 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_211
    del _BuildAutomaton_211
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 602, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 602, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_212 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_212
    del _BuildAutomaton_212
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 603, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'payPalNotes')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 603, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_213 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_213
    del _BuildAutomaton_213
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 604, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'actionReason')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 604, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_208 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_208
    del _BuildAutomaton_208
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 600, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 601, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 602, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 603, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 604, 24))
    counters.add(cc_4)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_209())
    sub_automata.append(_BuildAutomaton_210())
    sub_automata.append(_BuildAutomaton_211())
    sub_automata.append(_BuildAutomaton_212())
    sub_automata.append(_BuildAutomaton_213())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 599, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_46._Automaton = _BuildAutomaton_208()




CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_47, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 616, 24)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), giftCardCardType, scope=CTD_ANON_47, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 617, 24)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalRefCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_47, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 618, 24)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_47, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 619, 24)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalTxnTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_47, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 620, 24)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalSystemTraceId'), pyxb.binding.datatypes.int, scope=CTD_ANON_47, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 621, 24)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalSequenceNumber'), pyxb.binding.datatypes.string, scope=CTD_ANON_47, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 622, 24)))

def _BuildAutomaton_215 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_215
    del _BuildAutomaton_215
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 616, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 616, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_216 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_216
    del _BuildAutomaton_216
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 617, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 617, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_217 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_217
    del _BuildAutomaton_217
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 618, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalRefCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 618, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_218 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_218
    del _BuildAutomaton_218
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 619, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 619, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_219 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_219
    del _BuildAutomaton_219
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 620, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalTxnTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 620, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_220 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_220
    del _BuildAutomaton_220
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 621, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalSystemTraceId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 621, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_221 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_221
    del _BuildAutomaton_221
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 622, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalSequenceNumber')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 622, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_214 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_214
    del _BuildAutomaton_214
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 616, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 617, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 618, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 619, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 620, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 621, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 622, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_215())
    sub_automata.append(_BuildAutomaton_216())
    sub_automata.append(_BuildAutomaton_217())
    sub_automata.append(_BuildAutomaton_218())
    sub_automata.append(_BuildAutomaton_219())
    sub_automata.append(_BuildAutomaton_220())
    sub_automata.append(_BuildAutomaton_221())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 615, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_47._Automaton = _BuildAutomaton_214()




CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 634, 24)))

CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 635, 24)))

CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 636, 24)))

CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payPalOrderComplete'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 639, 24)))

CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payPalNotes'), pyxb.binding.datatypes.string, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 640, 24)))

CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pin'), pyxb.binding.datatypes.string, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 643, 24)))

CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), CTD_ANON_6, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 991, 4)))

CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), CTD_ANON_9, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1076, 4)))

CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), CTD_ANON_10, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1090, 4)))

CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'lodgingInfo'), CTD_ANON_26, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2835, 4)))

def _BuildAutomaton_223 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_223
    del _BuildAutomaton_223
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 634, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 634, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_224 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_224
    del _BuildAutomaton_224
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 635, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 635, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_225 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_225
    del _BuildAutomaton_225
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 636, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 636, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_226 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_226
    del _BuildAutomaton_226
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 637, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enhancedData')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 637, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_227 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_227
    del _BuildAutomaton_227
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 638, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 638, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_228 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_228
    del _BuildAutomaton_228
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 639, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'payPalOrderComplete')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 639, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_229 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_229
    del _BuildAutomaton_229
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 640, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'payPalNotes')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 640, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_230 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_230
    del _BuildAutomaton_230
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 641, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customBilling')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 641, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_231 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_231
    del _BuildAutomaton_231
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 642, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'lodgingInfo')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 642, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_232 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_232
    del _BuildAutomaton_232
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 643, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pin')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 643, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_222 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_222
    del _BuildAutomaton_222
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 634, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 635, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 636, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 637, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 638, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 639, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 640, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 641, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 642, 24))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 643, 24))
    counters.add(cc_9)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_223())
    sub_automata.append(_BuildAutomaton_224())
    sub_automata.append(_BuildAutomaton_225())
    sub_automata.append(_BuildAutomaton_226())
    sub_automata.append(_BuildAutomaton_227())
    sub_automata.append(_BuildAutomaton_228())
    sub_automata.append(_BuildAutomaton_229())
    sub_automata.append(_BuildAutomaton_230())
    sub_automata.append(_BuildAutomaton_231())
    sub_automata.append(_BuildAutomaton_232())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 633, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_48._Automaton = _BuildAutomaton_222()




CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 655, 24)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'captureAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 656, 24)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), giftCardCardType, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 657, 24)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalRefCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 658, 24)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 659, 24)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalTxnTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 660, 24)))

def _BuildAutomaton_234 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_234
    del _BuildAutomaton_234
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 655, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 655, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_235 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_235
    del _BuildAutomaton_235
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 656, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'captureAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 656, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_236 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_236
    del _BuildAutomaton_236
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 657, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 657, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_237 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_237
    del _BuildAutomaton_237
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 658, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalRefCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 658, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_238 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_238
    del _BuildAutomaton_238
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 659, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 659, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_239 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_239
    del _BuildAutomaton_239
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 660, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalTxnTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 660, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_233 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_233
    del _BuildAutomaton_233
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 655, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 656, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 657, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 658, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 659, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 660, 24))
    counters.add(cc_5)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_234())
    sub_automata.append(_BuildAutomaton_235())
    sub_automata.append(_BuildAutomaton_236())
    sub_automata.append(_BuildAutomaton_237())
    sub_automata.append(_BuildAutomaton_238())
    sub_automata.append(_BuildAutomaton_239())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 654, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_49._Automaton = _BuildAutomaton_233()




CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), contact, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 77, 4)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), pyxb.binding.datatypes.string, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 672, 24)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 673, 24)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 674, 24)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 675, 24)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), pyxb.binding.datatypes.string, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 676, 24)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mpos'), mposType, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 679, 28)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), cardType, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 680, 28)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'token'), cardTokenType, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 681, 28)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paypage'), cardPaypageType, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 682, 28)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'taxType'), pyxb.binding.datatypes.string, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 685, 24)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), merchantDataType, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 690, 24)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'debtRepayment'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 691, 24)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processingType'), pyxb.binding.datatypes.string, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 692, 24)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantCategoryCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 693, 24)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'businessIndicator'), pyxb.binding.datatypes.string, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 694, 24)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), CTD_ANON_6, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 991, 4)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), CTD_ANON_9, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1076, 4)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), CTD_ANON_10, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1090, 4)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pos'), CTD_ANON_11, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1098, 4)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'lodgingInfo'), CTD_ANON_26, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2835, 4)))

def _BuildAutomaton_240 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_240
    del _BuildAutomaton_240
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 672, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 673, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 674, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 675, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 676, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 677, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 684, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 685, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 686, 24))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 687, 24))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 688, 24))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 689, 24))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 690, 24))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 691, 24))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 692, 24))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 693, 24))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 694, 24))
    counters.add(cc_16)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 672, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 673, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 674, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 675, 24))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 676, 24))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billToAddress')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 677, 24))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mpos')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 679, 28))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 680, 28))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'token')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 681, 28))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paypage')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 682, 28))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customBilling')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 684, 24))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'taxType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 685, 24))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enhancedData')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 686, 24))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'lodgingInfo')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 687, 24))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 688, 24))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pos')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 689, 24))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantData')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 690, 24))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'debtRepayment')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 691, 24))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processingType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 692, 24))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantCategoryCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 693, 24))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'businessIndicator')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 694, 24))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_20._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_50._Automaton = _BuildAutomaton_240()




CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), contact, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 77, 4)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), pyxb.binding.datatypes.string, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 706, 24)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 708, 24)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 709, 24)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 710, 24)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), pyxb.binding.datatypes.string, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 711, 24)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mpos'), mposType, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 715, 28)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), cardType, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 716, 28)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'token'), cardTokenType, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 717, 28)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paypage'), cardPaypageType, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 718, 28)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'taxType'), pyxb.binding.datatypes.string, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 721, 24)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), merchantDataType, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 726, 24)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'debtRepayment'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 727, 24)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processingType'), pyxb.binding.datatypes.string, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 728, 24)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalNetworkTransactionId'), pyxb.binding.datatypes.string, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 729, 24)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalTransactionAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 730, 24)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantCategoryCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 731, 24)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'businessIndicator'), pyxb.binding.datatypes.string, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 732, 24)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress'), contact, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 942, 4)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authInformation'), CTD_ANON_3, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 944, 4)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), CTD_ANON_6, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 991, 4)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), CTD_ANON_9, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1076, 4)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), CTD_ANON_10, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1090, 4)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pos'), CTD_ANON_11, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1098, 4)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'lodgingInfo'), CTD_ANON_26, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2835, 4)))

def _BuildAutomaton_241 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_241
    del _BuildAutomaton_241
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 706, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 707, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 708, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 709, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 710, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 711, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 712, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 713, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 720, 24))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 721, 24))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 722, 24))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 723, 24))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 724, 24))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 725, 24))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 726, 24))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 727, 24))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 728, 24))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 729, 24))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 730, 24))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 731, 24))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 732, 24))
    counters.add(cc_20)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 706, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authInformation')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 707, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 708, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 709, 24))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 710, 24))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 711, 24))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billToAddress')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 712, 24))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 713, 24))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mpos')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 715, 28))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 716, 28))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'token')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 717, 28))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paypage')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 718, 28))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customBilling')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 720, 24))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'taxType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 721, 24))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enhancedData')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 722, 24))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'lodgingInfo')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 723, 24))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 724, 24))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pos')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 725, 24))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantData')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 726, 24))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'debtRepayment')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 727, 24))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processingType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 728, 24))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalNetworkTransactionId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 729, 24))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalTransactionAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 730, 24))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantCategoryCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 731, 24))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'businessIndicator')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 732, 24))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, True) ]))
    st_24._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_51._Automaton = _BuildAutomaton_241()




CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), contact, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 77, 4)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerInfo'), CTD_ANON_2, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 508, 4)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 745, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), pyxb.binding.datatypes.string, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 746, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 747, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 748, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 749, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), pyxb.binding.datatypes.string, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 750, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mpos'), mposType, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 755, 28)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), cardType, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 756, 28)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paypal'), payPal, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 757, 28)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'token'), cardTokenType, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 758, 28)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paypage'), cardPaypageType, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 759, 28)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'applepay'), applepayType, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 760, 28)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sepaDirectDebit'), sepaDirectDebitType, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 761, 28)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ideal'), idealType, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 762, 28)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giropay'), giropayType, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 763, 28)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sofort'), sofortType, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 764, 28)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudCheck'), fraudCheckType, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 769, 28)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardholderAuthentication'), fraudCheckType, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 770, 28)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'taxType'), pyxb.binding.datatypes.string, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 773, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payPalOrderComplete'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 777, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payPalNotes'), pyxb.binding.datatypes.string, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 778, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'allowPartialAuth'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 779, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'filtering'), filteringType, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 782, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), merchantDataType, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 783, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recyclingRequest'), recyclingRequestType, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 784, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudFilterOverride'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 785, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recurringRequest'), recurringRequestType, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 786, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpInternalRecurringRequest'), cnpInternalRecurringRequestType, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 787, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'debtRepayment'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 788, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudChecks'), advancedFraudChecksType, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 789, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processingType'), pyxb.binding.datatypes.string, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 791, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalNetworkTransactionId'), pyxb.binding.datatypes.string, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 792, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalTransactionAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 793, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pinlessDebitRequest'), pinlessDebitRequestType, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 794, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'skipRealtimeAU'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 795, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantCategoryCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 796, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'businessIndicator'), pyxb.binding.datatypes.string, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 797, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress'), contact, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 942, 4)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'healthcareIIAS'), CTD_ANON_4, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 969, 4)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), CTD_ANON_6, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 991, 4)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), CTD_ANON_9, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1076, 4)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), CTD_ANON_10, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1090, 4)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pos'), CTD_ANON_11, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1098, 4)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'wallet'), CTD_ANON_18, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2151, 4)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'lodgingInfo'), CTD_ANON_26, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2835, 4)))

def _BuildAutomaton_242 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_242
    del _BuildAutomaton_242
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 745, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 746, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 747, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 748, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 749, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 750, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 751, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 752, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 753, 24))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 769, 28))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 770, 28))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 772, 24))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 773, 24))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 774, 24))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 775, 24))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 776, 24))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 777, 24))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 778, 24))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 779, 24))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 780, 24))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 781, 24))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 782, 24))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 783, 24))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 784, 24))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 785, 24))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 786, 24))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 787, 24))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 788, 24))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 789, 24))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 790, 24))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 791, 24))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 792, 24))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 793, 24))
    counters.add(cc_32)
    cc_33 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 794, 24))
    counters.add(cc_33)
    cc_34 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 795, 24))
    counters.add(cc_34)
    cc_35 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 796, 24))
    counters.add(cc_35)
    cc_36 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 797, 24))
    counters.add(cc_36)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 745, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 746, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 747, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 748, 24))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 749, 24))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 750, 24))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerInfo')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 751, 24))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billToAddress')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 752, 24))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 753, 24))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mpos')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 755, 28))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 756, 28))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paypal')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 757, 28))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'token')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 758, 28))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paypage')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 759, 28))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'applepay')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 760, 28))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sepaDirectDebit')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 761, 28))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ideal')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 762, 28))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giropay')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 763, 28))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sofort')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 764, 28))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudCheck')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 769, 28))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardholderAuthentication')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 770, 28))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customBilling')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 772, 24))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'taxType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 773, 24))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enhancedData')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 774, 24))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 775, 24))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pos')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 776, 24))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'payPalOrderComplete')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 777, 24))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'payPalNotes')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 778, 24))
    st_27 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'allowPartialAuth')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 779, 24))
    st_28 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'healthcareIIAS')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 780, 24))
    st_29 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'lodgingInfo')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 781, 24))
    st_30 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'filtering')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 782, 24))
    st_31 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantData')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 783, 24))
    st_32 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recyclingRequest')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 784, 24))
    st_33 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_33)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudFilterOverride')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 785, 24))
    st_34 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_34)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recurringRequest')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 786, 24))
    st_35 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_35)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpInternalRecurringRequest')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 787, 24))
    st_36 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_36)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_27, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'debtRepayment')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 788, 24))
    st_37 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_37)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_28, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudChecks')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 789, 24))
    st_38 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_38)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_29, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'wallet')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 790, 24))
    st_39 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_39)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_30, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processingType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 791, 24))
    st_40 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_40)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_31, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalNetworkTransactionId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 792, 24))
    st_41 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_41)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_32, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalTransactionAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 793, 24))
    st_42 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_42)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_33, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pinlessDebitRequest')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 794, 24))
    st_43 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_43)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_34, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'skipRealtimeAU')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 795, 24))
    st_44 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_44)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_35, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantCategoryCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 796, 24))
    st_45 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_45)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_36, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'businessIndicator')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 797, 24))
    st_46 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_46)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    transitions.append(fac.Transition(st_36, [
         ]))
    transitions.append(fac.Transition(st_37, [
         ]))
    transitions.append(fac.Transition(st_38, [
         ]))
    transitions.append(fac.Transition(st_39, [
         ]))
    transitions.append(fac.Transition(st_40, [
         ]))
    transitions.append(fac.Transition(st_41, [
         ]))
    transitions.append(fac.Transition(st_42, [
         ]))
    transitions.append(fac.Transition(st_43, [
         ]))
    transitions.append(fac.Transition(st_44, [
         ]))
    transitions.append(fac.Transition(st_45, [
         ]))
    transitions.append(fac.Transition(st_46, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    transitions.append(fac.Transition(st_36, [
         ]))
    transitions.append(fac.Transition(st_37, [
         ]))
    transitions.append(fac.Transition(st_38, [
         ]))
    transitions.append(fac.Transition(st_39, [
         ]))
    transitions.append(fac.Transition(st_40, [
         ]))
    transitions.append(fac.Transition(st_41, [
         ]))
    transitions.append(fac.Transition(st_42, [
         ]))
    transitions.append(fac.Transition(st_43, [
         ]))
    transitions.append(fac.Transition(st_44, [
         ]))
    transitions.append(fac.Transition(st_45, [
         ]))
    transitions.append(fac.Transition(st_46, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    transitions.append(fac.Transition(st_36, [
         ]))
    transitions.append(fac.Transition(st_37, [
         ]))
    transitions.append(fac.Transition(st_38, [
         ]))
    transitions.append(fac.Transition(st_39, [
         ]))
    transitions.append(fac.Transition(st_40, [
         ]))
    transitions.append(fac.Transition(st_41, [
         ]))
    transitions.append(fac.Transition(st_42, [
         ]))
    transitions.append(fac.Transition(st_43, [
         ]))
    transitions.append(fac.Transition(st_44, [
         ]))
    transitions.append(fac.Transition(st_45, [
         ]))
    transitions.append(fac.Transition(st_46, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    transitions.append(fac.Transition(st_36, [
         ]))
    transitions.append(fac.Transition(st_37, [
         ]))
    transitions.append(fac.Transition(st_38, [
         ]))
    transitions.append(fac.Transition(st_39, [
         ]))
    transitions.append(fac.Transition(st_40, [
         ]))
    transitions.append(fac.Transition(st_41, [
         ]))
    transitions.append(fac.Transition(st_42, [
         ]))
    transitions.append(fac.Transition(st_43, [
         ]))
    transitions.append(fac.Transition(st_44, [
         ]))
    transitions.append(fac.Transition(st_45, [
         ]))
    transitions.append(fac.Transition(st_46, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    transitions.append(fac.Transition(st_36, [
         ]))
    transitions.append(fac.Transition(st_37, [
         ]))
    transitions.append(fac.Transition(st_38, [
         ]))
    transitions.append(fac.Transition(st_39, [
         ]))
    transitions.append(fac.Transition(st_40, [
         ]))
    transitions.append(fac.Transition(st_41, [
         ]))
    transitions.append(fac.Transition(st_42, [
         ]))
    transitions.append(fac.Transition(st_43, [
         ]))
    transitions.append(fac.Transition(st_44, [
         ]))
    transitions.append(fac.Transition(st_45, [
         ]))
    transitions.append(fac.Transition(st_46, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    transitions.append(fac.Transition(st_36, [
         ]))
    transitions.append(fac.Transition(st_37, [
         ]))
    transitions.append(fac.Transition(st_38, [
         ]))
    transitions.append(fac.Transition(st_39, [
         ]))
    transitions.append(fac.Transition(st_40, [
         ]))
    transitions.append(fac.Transition(st_41, [
         ]))
    transitions.append(fac.Transition(st_42, [
         ]))
    transitions.append(fac.Transition(st_43, [
         ]))
    transitions.append(fac.Transition(st_44, [
         ]))
    transitions.append(fac.Transition(st_45, [
         ]))
    transitions.append(fac.Transition(st_46, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    transitions.append(fac.Transition(st_36, [
         ]))
    transitions.append(fac.Transition(st_37, [
         ]))
    transitions.append(fac.Transition(st_38, [
         ]))
    transitions.append(fac.Transition(st_39, [
         ]))
    transitions.append(fac.Transition(st_40, [
         ]))
    transitions.append(fac.Transition(st_41, [
         ]))
    transitions.append(fac.Transition(st_42, [
         ]))
    transitions.append(fac.Transition(st_43, [
         ]))
    transitions.append(fac.Transition(st_44, [
         ]))
    transitions.append(fac.Transition(st_45, [
         ]))
    transitions.append(fac.Transition(st_46, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    transitions.append(fac.Transition(st_36, [
         ]))
    transitions.append(fac.Transition(st_37, [
         ]))
    transitions.append(fac.Transition(st_38, [
         ]))
    transitions.append(fac.Transition(st_39, [
         ]))
    transitions.append(fac.Transition(st_40, [
         ]))
    transitions.append(fac.Transition(st_41, [
         ]))
    transitions.append(fac.Transition(st_42, [
         ]))
    transitions.append(fac.Transition(st_43, [
         ]))
    transitions.append(fac.Transition(st_44, [
         ]))
    transitions.append(fac.Transition(st_45, [
         ]))
    transitions.append(fac.Transition(st_46, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    transitions.append(fac.Transition(st_36, [
         ]))
    transitions.append(fac.Transition(st_37, [
         ]))
    transitions.append(fac.Transition(st_38, [
         ]))
    transitions.append(fac.Transition(st_39, [
         ]))
    transitions.append(fac.Transition(st_40, [
         ]))
    transitions.append(fac.Transition(st_41, [
         ]))
    transitions.append(fac.Transition(st_42, [
         ]))
    transitions.append(fac.Transition(st_43, [
         ]))
    transitions.append(fac.Transition(st_44, [
         ]))
    transitions.append(fac.Transition(st_45, [
         ]))
    transitions.append(fac.Transition(st_46, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    transitions.append(fac.Transition(st_36, [
         ]))
    transitions.append(fac.Transition(st_37, [
         ]))
    transitions.append(fac.Transition(st_38, [
         ]))
    transitions.append(fac.Transition(st_39, [
         ]))
    transitions.append(fac.Transition(st_40, [
         ]))
    transitions.append(fac.Transition(st_41, [
         ]))
    transitions.append(fac.Transition(st_42, [
         ]))
    transitions.append(fac.Transition(st_43, [
         ]))
    transitions.append(fac.Transition(st_44, [
         ]))
    transitions.append(fac.Transition(st_45, [
         ]))
    transitions.append(fac.Transition(st_46, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_32._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_33._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_34._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_25, True) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_25, False) ]))
    st_35._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_26, True) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_26, False) ]))
    st_36._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_27, True) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_27, False) ]))
    st_37._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_28, True) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_28, False) ]))
    st_38._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_29, True) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_29, False) ]))
    st_39._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_30, True) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_30, False) ]))
    st_40._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_31, True) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_31, False) ]))
    st_41._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_32, True) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_32, False) ]))
    st_42._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_33, True) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_33, False) ]))
    st_43._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_34, True) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_34, False) ]))
    st_44._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_35, True) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_35, False) ]))
    st_45._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_36, True) ]))
    st_46._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_52._Automaton = _BuildAutomaton_242()




CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), contact, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 77, 4)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 812, 32)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 813, 32)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 814, 32)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 815, 32)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pin'), pyxb.binding.datatypes.string, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 821, 32)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), pyxb.binding.datatypes.string, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 824, 32)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), pyxb.binding.datatypes.string, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 828, 32)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mpos'), mposType, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 831, 36)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), cardType, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 832, 36)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'token'), cardTokenType, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 833, 36)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paypage'), cardPaypageType, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 834, 36)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paypal'), payPal, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 835, 36)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'taxType'), pyxb.binding.datatypes.string, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 838, 32)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), merchantDataType, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 843, 32)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantCategoryCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 844, 32)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payPalNotes'), pyxb.binding.datatypes.string, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 847, 24)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'actionReason'), pyxb.binding.datatypes.string, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 848, 24)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'businessIndicator'), pyxb.binding.datatypes.string, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 849, 24)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), CTD_ANON_6, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 991, 4)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), CTD_ANON_9, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1076, 4)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), CTD_ANON_10, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1090, 4)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pos'), CTD_ANON_11, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1098, 4)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'lodgingInfo'), CTD_ANON_26, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2835, 4)))

def _BuildAutomaton_243 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_243
    del _BuildAutomaton_243
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 813, 32))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 814, 32))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 815, 32))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 816, 32))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 817, 32))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 818, 32))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 819, 32))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 820, 32))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 821, 32))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 826, 32))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 827, 32))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 829, 32))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 837, 32))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 838, 32))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 839, 32))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 840, 32))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 841, 32))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 842, 32))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 843, 32))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 844, 32))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 847, 24))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 848, 24))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 849, 24))
    counters.add(cc_22)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 812, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 813, 32))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 814, 32))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 815, 32))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customBilling')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 816, 32))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enhancedData')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 817, 32))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'lodgingInfo')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 818, 32))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 819, 32))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pos')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 820, 32))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pin')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 821, 32))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 824, 32))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 825, 32))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 826, 32))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 827, 32))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 828, 32))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billToAddress')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 829, 32))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mpos')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 831, 36))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 832, 36))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'token')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 833, 36))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paypage')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 834, 36))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paypal')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 835, 36))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customBilling')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 837, 32))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'taxType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 838, 32))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enhancedData')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 839, 32))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'lodgingInfo')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 840, 32))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 841, 32))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pos')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 842, 32))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantData')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 843, 32))
    st_27 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantCategoryCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 844, 32))
    st_28 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'payPalNotes')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 847, 24))
    st_29 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'actionReason')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 848, 24))
    st_30 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'businessIndicator')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 849, 24))
    st_31 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_22, True) ]))
    st_31._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_53._Automaton = _BuildAutomaton_243()




CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 863, 32)))

CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'creditAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 864, 32)))

CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), giftCardCardType, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 865, 32)))

CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), pyxb.binding.datatypes.string, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 868, 32)))

CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), pyxb.binding.datatypes.string, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 870, 32)))

def _BuildAutomaton_244 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_244
    del _BuildAutomaton_244
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 863, 32))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 863, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'creditAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 864, 32))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 865, 32))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 868, 32))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'creditAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 869, 32))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 870, 32))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 871, 32))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_54._Automaton = _BuildAutomaton_244()




CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), pyxb.binding.datatypes.string, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 885, 24)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 886, 24)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), pyxb.binding.datatypes.string, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 887, 24)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), giftCardCardType, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 889, 28)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'virtualGiftCard'), virtualGiftCardType, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 890, 28)))

def _BuildAutomaton_245 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_245
    del _BuildAutomaton_245
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 885, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 886, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 887, 24))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 885, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 886, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 887, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 889, 28))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'virtualGiftCard')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 890, 28))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_55._Automaton = _BuildAutomaton_245()




CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), pyxb.binding.datatypes.string, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 903, 24)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), pyxb.binding.datatypes.string, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 904, 24)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), giftCardCardType, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 905, 24)))

def _BuildAutomaton_246 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_246
    del _BuildAutomaton_246
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 903, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 904, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 905, 24))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 903, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 904, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 905, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_56._Automaton = _BuildAutomaton_246()




CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), pyxb.binding.datatypes.string, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 917, 24)))

CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 918, 24)))

CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), pyxb.binding.datatypes.string, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 919, 24)))

CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), giftCardCardType, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 920, 24)))

def _BuildAutomaton_247 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_247
    del _BuildAutomaton_247
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 917, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 918, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 919, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 920, 24))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 917, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 918, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 919, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 920, 24))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_57._Automaton = _BuildAutomaton_247()




CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), pyxb.binding.datatypes.string, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 932, 24)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 933, 24)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), pyxb.binding.datatypes.string, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 934, 24)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), giftCardCardType, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 935, 24)))

def _BuildAutomaton_248 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_248
    del _BuildAutomaton_248
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 932, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 933, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 934, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 935, 24))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 932, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 933, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 934, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 935, 24))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_58._Automaton = _BuildAutomaton_248()




CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), pyxb.binding.datatypes.string, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 960, 24)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), pyxb.binding.datatypes.string, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 961, 24)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), giftCardCardType, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 962, 24)))

def _BuildAutomaton_249 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_249
    del _BuildAutomaton_249
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 960, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 961, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 962, 24))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 960, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 961, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 962, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_59._Automaton = _BuildAutomaton_249()




registerTokenRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'encryptionKeyId'), pyxb.binding.datatypes.string, scope=registerTokenRequestType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1116, 20)))

registerTokenRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), pyxb.binding.datatypes.string, scope=registerTokenRequestType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1117, 20)))

registerTokenRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mpos'), mposType, scope=registerTokenRequestType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1119, 24)))

registerTokenRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountNumber'), pyxb.binding.datatypes.string, scope=registerTokenRequestType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1120, 24)))

registerTokenRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'encryptedAccountNumber'), pyxb.binding.datatypes.string, scope=registerTokenRequestType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1121, 24)))

registerTokenRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckForToken'), echeckForTokenType, scope=registerTokenRequestType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1122, 24)))

registerTokenRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paypageRegistrationId'), pyxb.binding.datatypes.string, scope=registerTokenRequestType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1123, 24)))

registerTokenRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'applepay'), applepayType, scope=registerTokenRequestType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1124, 24)))

registerTokenRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum'), pyxb.binding.datatypes.string, scope=registerTokenRequestType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1127, 24)))

registerTokenRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'encryptedCardValidationNum'), pyxb.binding.datatypes.string, scope=registerTokenRequestType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1128, 24)))

def _BuildAutomaton_250 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_250
    del _BuildAutomaton_250
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1116, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1117, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1127, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1128, 24))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(registerTokenRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'encryptionKeyId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1116, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(registerTokenRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1117, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(registerTokenRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mpos')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1119, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(registerTokenRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountNumber')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1120, 24))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(registerTokenRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'encryptedAccountNumber')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1121, 24))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(registerTokenRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'echeckForToken')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1122, 24))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(registerTokenRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paypageRegistrationId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1123, 24))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(registerTokenRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'applepay')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1124, 24))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(registerTokenRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1127, 24))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(registerTokenRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'encryptedCardValidationNum')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1128, 24))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
registerTokenRequestType._Automaton = _BuildAutomaton_250()




CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1140, 24)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpToken'), pyxb.binding.datatypes.string, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1141, 24)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bin'), pyxb.binding.datatypes.string, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1142, 24)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), pyxb.binding.datatypes.string, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1143, 24)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eCheckAccountSuffix'), pyxb.binding.datatypes.string, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1144, 24)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1145, 24)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1146, 24)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1147, 24)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1148, 24)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountRangeId'), pyxb.binding.datatypes.long, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1151, 24)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'applepayResponse'), CTD_ANON_19, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2178, 4)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'androidpayResponse'), CTD_ANON_20, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2194, 4)))

def _BuildAutomaton_252 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_252
    del _BuildAutomaton_252
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1140, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1140, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_253 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_253
    del _BuildAutomaton_253
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1141, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpToken')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1141, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_254 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_254
    del _BuildAutomaton_254
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1142, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bin')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1142, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_255 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_255
    del _BuildAutomaton_255
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1143, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1143, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_256 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_256
    del _BuildAutomaton_256
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1144, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eCheckAccountSuffix')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1144, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_257 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_257
    del _BuildAutomaton_257
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1145, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1145, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_258 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_258
    del _BuildAutomaton_258
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1146, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1146, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_259 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_259
    del _BuildAutomaton_259
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1147, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1147, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_260 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_260
    del _BuildAutomaton_260
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1148, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1148, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_261 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_261
    del _BuildAutomaton_261
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1149, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'applepayResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1149, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_262 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_262
    del _BuildAutomaton_262
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1150, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'androidpayResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1150, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_263 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_263
    del _BuildAutomaton_263
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1151, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountRangeId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1151, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_251 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_251
    del _BuildAutomaton_251
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1140, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1141, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1142, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1143, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1144, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1145, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1146, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1147, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1148, 24))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1149, 24))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1150, 24))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1151, 24))
    counters.add(cc_11)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_252())
    sub_automata.append(_BuildAutomaton_253())
    sub_automata.append(_BuildAutomaton_254())
    sub_automata.append(_BuildAutomaton_255())
    sub_automata.append(_BuildAutomaton_256())
    sub_automata.append(_BuildAutomaton_257())
    sub_automata.append(_BuildAutomaton_258())
    sub_automata.append(_BuildAutomaton_259())
    sub_automata.append(_BuildAutomaton_260())
    sub_automata.append(_BuildAutomaton_261())
    sub_automata.append(_BuildAutomaton_262())
    sub_automata.append(_BuildAutomaton_263())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1139, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_60._Automaton = _BuildAutomaton_251()




CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1166, 24)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), pyxb.binding.datatypes.string, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1167, 24)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1168, 24)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1169, 24)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardProductId'), pyxb.binding.datatypes.string, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1170, 24)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1172, 24)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1173, 24)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1174, 24)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1175, 24)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authorizationResponseSubCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1176, 24)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'approvedAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1177, 24)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountInformation'), accountInfoType, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1178, 24)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), tokenResponseType, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1182, 24)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recyclingResponse'), recyclingResponseType, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1184, 24)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recurringResponse'), recurringResponseType, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1185, 24)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardSuffix'), pyxb.binding.datatypes.string, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1189, 24)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'networkTransactionId'), pyxb.binding.datatypes.string, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1192, 24)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paymentAccountReferenceNumber'), pyxb.binding.datatypes.string, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1193, 24)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enhancedAuthResponse'), CTD_ANON_12, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1260, 4)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_14, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_15, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), CTD_ANON_17, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1927, 4)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'applepayResponse'), CTD_ANON_19, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2178, 4)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'androidpayResponse'), CTD_ANON_20, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2194, 4)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pinlessDebitResponse'), CTD_ANON_25, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2619, 4)))

def _BuildAutomaton_265 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_265
    del _BuildAutomaton_265
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1166, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1166, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_266 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_266
    del _BuildAutomaton_266
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1167, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1167, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_267 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_267
    del _BuildAutomaton_267
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1168, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1168, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_268 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_268
    del _BuildAutomaton_268
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1169, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1169, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_269 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_269
    del _BuildAutomaton_269
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1170, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardProductId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1170, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_270 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_270
    del _BuildAutomaton_270
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1172, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1172, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_271 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_271
    del _BuildAutomaton_271
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1173, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1173, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_272 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_272
    del _BuildAutomaton_272
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1174, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1174, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_273 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_273
    del _BuildAutomaton_273
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1175, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1175, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_274 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_274
    del _BuildAutomaton_274
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1176, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authorizationResponseSubCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1176, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_275 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_275
    del _BuildAutomaton_275
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1177, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'approvedAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1177, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_276 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_276
    del _BuildAutomaton_276
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1178, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountInformation')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1178, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_277 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_277
    del _BuildAutomaton_277
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1179, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1179, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_278 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_278
    del _BuildAutomaton_278
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1180, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1180, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_279 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_279
    del _BuildAutomaton_279
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1182, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1182, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_280 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_280
    del _BuildAutomaton_280
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1183, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enhancedAuthResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1183, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_281 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_281
    del _BuildAutomaton_281
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1184, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recyclingResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1184, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_282 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_282
    del _BuildAutomaton_282
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1185, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recurringResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1185, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_283 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_283
    del _BuildAutomaton_283
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1187, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1187, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_284 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_284
    del _BuildAutomaton_284
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1188, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'applepayResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1188, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_285 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_285
    del _BuildAutomaton_285
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1189, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardSuffix')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1189, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_286 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_286
    del _BuildAutomaton_286
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1190, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'androidpayResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1190, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_287 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_287
    del _BuildAutomaton_287
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1192, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'networkTransactionId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1192, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_288 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_288
    del _BuildAutomaton_288
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1193, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paymentAccountReferenceNumber')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1193, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_289 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_289
    del _BuildAutomaton_289
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1195, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pinlessDebitResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1195, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_264 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_264
    del _BuildAutomaton_264
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1166, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1167, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1168, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1169, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1170, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1172, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1173, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1174, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1175, 24))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1176, 24))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1177, 24))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1178, 24))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1179, 24))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1180, 24))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1182, 24))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1183, 24))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1184, 24))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1185, 24))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1187, 24))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1188, 24))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1189, 24))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1190, 24))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1192, 24))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1193, 24))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1195, 24))
    counters.add(cc_24)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_265())
    sub_automata.append(_BuildAutomaton_266())
    sub_automata.append(_BuildAutomaton_267())
    sub_automata.append(_BuildAutomaton_268())
    sub_automata.append(_BuildAutomaton_269())
    sub_automata.append(_BuildAutomaton_270())
    sub_automata.append(_BuildAutomaton_271())
    sub_automata.append(_BuildAutomaton_272())
    sub_automata.append(_BuildAutomaton_273())
    sub_automata.append(_BuildAutomaton_274())
    sub_automata.append(_BuildAutomaton_275())
    sub_automata.append(_BuildAutomaton_276())
    sub_automata.append(_BuildAutomaton_277())
    sub_automata.append(_BuildAutomaton_278())
    sub_automata.append(_BuildAutomaton_279())
    sub_automata.append(_BuildAutomaton_280())
    sub_automata.append(_BuildAutomaton_281())
    sub_automata.append(_BuildAutomaton_282())
    sub_automata.append(_BuildAutomaton_283())
    sub_automata.append(_BuildAutomaton_284())
    sub_automata.append(_BuildAutomaton_285())
    sub_automata.append(_BuildAutomaton_286())
    sub_automata.append(_BuildAutomaton_287())
    sub_automata.append(_BuildAutomaton_288())
    sub_automata.append(_BuildAutomaton_289())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1165, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_61._Automaton = _BuildAutomaton_264()




CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1288, 24)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1289, 24)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1290, 24)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1292, 24)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1293, 24)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1294, 24)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pinlessDebitResponse'), CTD_ANON_25, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2619, 4)))

def _BuildAutomaton_291 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_291
    del _BuildAutomaton_291
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1288, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1288, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_292 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_292
    del _BuildAutomaton_292
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1289, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1289, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_293 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_293
    del _BuildAutomaton_293
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1290, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1290, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_294 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_294
    del _BuildAutomaton_294
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1292, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1292, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_295 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_295
    del _BuildAutomaton_295
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1293, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1293, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_296 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_296
    del _BuildAutomaton_296
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1294, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1294, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_297 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_297
    del _BuildAutomaton_297
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1296, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pinlessDebitResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1296, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_290 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_290
    del _BuildAutomaton_290
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1288, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1289, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1290, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1292, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1293, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1294, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1296, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_291())
    sub_automata.append(_BuildAutomaton_292())
    sub_automata.append(_BuildAutomaton_293())
    sub_automata.append(_BuildAutomaton_294())
    sub_automata.append(_BuildAutomaton_295())
    sub_automata.append(_BuildAutomaton_296())
    sub_automata.append(_BuildAutomaton_297())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1287, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_62._Automaton = _BuildAutomaton_290()




CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_63, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1308, 24)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_63, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1309, 24)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_63, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1310, 24)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_63, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1312, 24)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_63, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1313, 24)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_63, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1314, 24)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_15, scope=CTD_ANON_63, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4)))

def _BuildAutomaton_299 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_299
    del _BuildAutomaton_299
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1308, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1308, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_300 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_300
    del _BuildAutomaton_300
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1309, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1309, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_301 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_301
    del _BuildAutomaton_301
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1310, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1310, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_302 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_302
    del _BuildAutomaton_302
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1312, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1312, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_303 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_303
    del _BuildAutomaton_303
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1313, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1313, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_304 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_304
    del _BuildAutomaton_304
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1314, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1314, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_305 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_305
    del _BuildAutomaton_305
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1315, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1315, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_298 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_298
    del _BuildAutomaton_298
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1308, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1309, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1310, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1312, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1313, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1314, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1315, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_299())
    sub_automata.append(_BuildAutomaton_300())
    sub_automata.append(_BuildAutomaton_301())
    sub_automata.append(_BuildAutomaton_302())
    sub_automata.append(_BuildAutomaton_303())
    sub_automata.append(_BuildAutomaton_304())
    sub_automata.append(_BuildAutomaton_305())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1307, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_63._Automaton = _BuildAutomaton_298()




CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1327, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1328, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1329, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1331, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1332, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1333, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_15, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4)))

def _BuildAutomaton_307 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_307
    del _BuildAutomaton_307
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1327, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1327, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_308 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_308
    del _BuildAutomaton_308
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1328, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1328, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_309 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_309
    del _BuildAutomaton_309
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1329, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1329, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_310 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_310
    del _BuildAutomaton_310
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1331, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1331, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_311 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_311
    del _BuildAutomaton_311
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1332, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1332, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_312 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_312
    del _BuildAutomaton_312
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1333, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1333, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_313 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_313
    del _BuildAutomaton_313
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1335, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1335, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_306 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_306
    del _BuildAutomaton_306
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1327, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1328, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1329, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1331, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1332, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1333, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1335, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_307())
    sub_automata.append(_BuildAutomaton_308())
    sub_automata.append(_BuildAutomaton_309())
    sub_automata.append(_BuildAutomaton_310())
    sub_automata.append(_BuildAutomaton_311())
    sub_automata.append(_BuildAutomaton_312())
    sub_automata.append(_BuildAutomaton_313())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1326, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_64._Automaton = _BuildAutomaton_306()




CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1347, 24)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1348, 24)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1349, 24)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1351, 24)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1352, 24)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1353, 24)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_15, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4)))

def _BuildAutomaton_315 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_315
    del _BuildAutomaton_315
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1347, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1347, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_316 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_316
    del _BuildAutomaton_316
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1348, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1348, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_317 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_317
    del _BuildAutomaton_317
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1349, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1349, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_318 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_318
    del _BuildAutomaton_318
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1351, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1351, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_319 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_319
    del _BuildAutomaton_319
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1352, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1352, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_320 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_320
    del _BuildAutomaton_320
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1353, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1353, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_321 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_321
    del _BuildAutomaton_321
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1355, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1355, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_314 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_314
    del _BuildAutomaton_314
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1347, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1348, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1349, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1351, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1352, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1353, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1355, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_315())
    sub_automata.append(_BuildAutomaton_316())
    sub_automata.append(_BuildAutomaton_317())
    sub_automata.append(_BuildAutomaton_318())
    sub_automata.append(_BuildAutomaton_319())
    sub_automata.append(_BuildAutomaton_320())
    sub_automata.append(_BuildAutomaton_321())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1346, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_65._Automaton = _BuildAutomaton_314()




CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1367, 24)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1368, 24)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1369, 24)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1371, 24)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1372, 24)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1373, 24)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_15, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4)))

def _BuildAutomaton_323 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_323
    del _BuildAutomaton_323
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1367, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1367, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_324 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_324
    del _BuildAutomaton_324
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1368, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1368, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_325 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_325
    del _BuildAutomaton_325
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1369, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1369, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_326 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_326
    del _BuildAutomaton_326
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1371, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1371, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_327 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_327
    del _BuildAutomaton_327
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1372, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1372, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_328 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_328
    del _BuildAutomaton_328
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1373, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1373, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_329 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_329
    del _BuildAutomaton_329
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1375, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1375, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_322 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_322
    del _BuildAutomaton_322
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1367, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1368, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1369, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1371, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1372, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1373, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1375, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_323())
    sub_automata.append(_BuildAutomaton_324())
    sub_automata.append(_BuildAutomaton_325())
    sub_automata.append(_BuildAutomaton_326())
    sub_automata.append(_BuildAutomaton_327())
    sub_automata.append(_BuildAutomaton_328())
    sub_automata.append(_BuildAutomaton_329())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1366, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_66._Automaton = _BuildAutomaton_322()




CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1387, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1388, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1389, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1391, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1392, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1393, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_15, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4)))

def _BuildAutomaton_331 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_331
    del _BuildAutomaton_331
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1387, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1387, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_332 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_332
    del _BuildAutomaton_332
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1388, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1388, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_333 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_333
    del _BuildAutomaton_333
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1389, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1389, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_334 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_334
    del _BuildAutomaton_334
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1391, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1391, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_335 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_335
    del _BuildAutomaton_335
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1392, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1392, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_336 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_336
    del _BuildAutomaton_336
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1393, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1393, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_337 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_337
    del _BuildAutomaton_337
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1395, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1395, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_330 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_330
    del _BuildAutomaton_330
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1387, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1388, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1389, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1391, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1392, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1393, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1395, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_331())
    sub_automata.append(_BuildAutomaton_332())
    sub_automata.append(_BuildAutomaton_333())
    sub_automata.append(_BuildAutomaton_334())
    sub_automata.append(_BuildAutomaton_335())
    sub_automata.append(_BuildAutomaton_336())
    sub_automata.append(_BuildAutomaton_337())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1386, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_67._Automaton = _BuildAutomaton_330()




CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1407, 24)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1408, 24)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1409, 24)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1411, 24)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1412, 24)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1413, 24)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_15, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4)))

def _BuildAutomaton_339 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_339
    del _BuildAutomaton_339
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1407, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1407, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_340 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_340
    del _BuildAutomaton_340
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1408, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1408, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_341 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_341
    del _BuildAutomaton_341
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1409, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1409, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_342 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_342
    del _BuildAutomaton_342
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1411, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1411, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_343 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_343
    del _BuildAutomaton_343
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1412, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1412, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_344 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_344
    del _BuildAutomaton_344
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1413, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1413, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_345 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_345
    del _BuildAutomaton_345
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1415, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1415, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_338 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_338
    del _BuildAutomaton_338
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1407, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1408, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1409, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1411, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1412, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1413, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1415, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_339())
    sub_automata.append(_BuildAutomaton_340())
    sub_automata.append(_BuildAutomaton_341())
    sub_automata.append(_BuildAutomaton_342())
    sub_automata.append(_BuildAutomaton_343())
    sub_automata.append(_BuildAutomaton_344())
    sub_automata.append(_BuildAutomaton_345())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1406, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_68._Automaton = _BuildAutomaton_338()




CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1427, 24)))

CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1428, 24)))

CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1429, 24)))

CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1431, 24)))

CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1432, 24)))

CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1433, 24)))

CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_15, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4)))

def _BuildAutomaton_347 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_347
    del _BuildAutomaton_347
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1427, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1427, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_348 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_348
    del _BuildAutomaton_348
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1428, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1428, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_349 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_349
    del _BuildAutomaton_349
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1429, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1429, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_350 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_350
    del _BuildAutomaton_350
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1431, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1431, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_351 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_351
    del _BuildAutomaton_351
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1432, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1432, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_352 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_352
    del _BuildAutomaton_352
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1433, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1433, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_353 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_353
    del _BuildAutomaton_353
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1435, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1435, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_346 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_346
    del _BuildAutomaton_346
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1427, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1428, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1429, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1431, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1432, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1433, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1435, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_347())
    sub_automata.append(_BuildAutomaton_348())
    sub_automata.append(_BuildAutomaton_349())
    sub_automata.append(_BuildAutomaton_350())
    sub_automata.append(_BuildAutomaton_351())
    sub_automata.append(_BuildAutomaton_352())
    sub_automata.append(_BuildAutomaton_353())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1426, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_69._Automaton = _BuildAutomaton_346()




CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1447, 24)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1449, 24)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1450, 24)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1452, 24)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1453, 24)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1454, 24)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_14, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), CTD_ANON_17, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1927, 4)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pinlessDebitResponse'), CTD_ANON_25, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2619, 4)))

def _BuildAutomaton_355 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_355
    del _BuildAutomaton_355
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1447, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1447, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_356 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_356
    del _BuildAutomaton_356
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1449, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1449, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_357 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_357
    del _BuildAutomaton_357
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1450, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1450, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_358 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_358
    del _BuildAutomaton_358
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1452, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1452, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_359 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_359
    del _BuildAutomaton_359
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1453, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1453, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_360 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_360
    del _BuildAutomaton_360
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1454, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1454, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_361 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_361
    del _BuildAutomaton_361
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1455, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1455, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_362 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_362
    del _BuildAutomaton_362
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1457, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1457, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_363 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_363
    del _BuildAutomaton_363
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1459, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pinlessDebitResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1459, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_354 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_354
    del _BuildAutomaton_354
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1447, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1449, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1450, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1452, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1453, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1454, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1455, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1457, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1459, 24))
    counters.add(cc_8)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_355())
    sub_automata.append(_BuildAutomaton_356())
    sub_automata.append(_BuildAutomaton_357())
    sub_automata.append(_BuildAutomaton_358())
    sub_automata.append(_BuildAutomaton_359())
    sub_automata.append(_BuildAutomaton_360())
    sub_automata.append(_BuildAutomaton_361())
    sub_automata.append(_BuildAutomaton_362())
    sub_automata.append(_BuildAutomaton_363())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1446, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_70._Automaton = _BuildAutomaton_354()




CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1471, 24)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1473, 24)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1474, 24)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1476, 24)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1477, 24)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1478, 24)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_14, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_15, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4)))

def _BuildAutomaton_365 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_365
    del _BuildAutomaton_365
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1471, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1471, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_366 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_366
    del _BuildAutomaton_366
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1473, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1473, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_367 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_367
    del _BuildAutomaton_367
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1474, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1474, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_368 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_368
    del _BuildAutomaton_368
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1476, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1476, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_369 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_369
    del _BuildAutomaton_369
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1477, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1477, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_370 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_370
    del _BuildAutomaton_370
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1478, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1478, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_371 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_371
    del _BuildAutomaton_371
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1479, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1479, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_372 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_372
    del _BuildAutomaton_372
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1480, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1480, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_364 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_364
    del _BuildAutomaton_364
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1471, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1473, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1474, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1476, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1477, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1478, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1479, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1480, 24))
    counters.add(cc_7)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_365())
    sub_automata.append(_BuildAutomaton_366())
    sub_automata.append(_BuildAutomaton_367())
    sub_automata.append(_BuildAutomaton_368())
    sub_automata.append(_BuildAutomaton_369())
    sub_automata.append(_BuildAutomaton_370())
    sub_automata.append(_BuildAutomaton_371())
    sub_automata.append(_BuildAutomaton_372())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1470, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_71._Automaton = _BuildAutomaton_364()




CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1492, 24)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1493, 24)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1494, 24)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1496, 24)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1497, 24)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1498, 24)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), tokenResponseType, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1500, 24)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_14, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_15, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), CTD_ANON_17, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1927, 4)))

def _BuildAutomaton_374 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_374
    del _BuildAutomaton_374
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1492, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1492, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_375 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_375
    del _BuildAutomaton_375
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1493, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1493, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_376 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_376
    del _BuildAutomaton_376
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1494, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1494, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_377 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_377
    del _BuildAutomaton_377
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1496, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1496, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_378 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_378
    del _BuildAutomaton_378
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1497, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1497, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_379 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_379
    del _BuildAutomaton_379
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1498, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1498, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_380 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_380
    del _BuildAutomaton_380
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1500, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1500, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_381 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_381
    del _BuildAutomaton_381
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1501, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1501, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_382 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_382
    del _BuildAutomaton_382
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1503, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1503, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_383 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_383
    del _BuildAutomaton_383
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1504, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1504, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_373 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_373
    del _BuildAutomaton_373
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1492, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1493, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1494, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1496, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1497, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1498, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1500, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1501, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1503, 24))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1504, 24))
    counters.add(cc_9)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_374())
    sub_automata.append(_BuildAutomaton_375())
    sub_automata.append(_BuildAutomaton_376())
    sub_automata.append(_BuildAutomaton_377())
    sub_automata.append(_BuildAutomaton_378())
    sub_automata.append(_BuildAutomaton_379())
    sub_automata.append(_BuildAutomaton_380())
    sub_automata.append(_BuildAutomaton_381())
    sub_automata.append(_BuildAutomaton_382())
    sub_automata.append(_BuildAutomaton_383())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1491, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_72._Automaton = _BuildAutomaton_373()




CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1516, 24)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1517, 24)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1518, 24)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1520, 24)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1521, 24)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1522, 24)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), tokenResponseType, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1524, 24)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_14, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_15, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4)))

def _BuildAutomaton_385 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_385
    del _BuildAutomaton_385
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1516, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1516, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_386 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_386
    del _BuildAutomaton_386
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1517, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1517, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_387 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_387
    del _BuildAutomaton_387
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1518, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1518, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_388 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_388
    del _BuildAutomaton_388
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1520, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1520, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_389 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_389
    del _BuildAutomaton_389
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1521, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1521, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_390 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_390
    del _BuildAutomaton_390
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1522, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1522, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_391 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_391
    del _BuildAutomaton_391
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1524, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1524, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_392 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_392
    del _BuildAutomaton_392
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1526, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1526, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_393 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_393
    del _BuildAutomaton_393
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1527, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1527, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_384 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_384
    del _BuildAutomaton_384
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1516, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1517, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1518, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1520, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1521, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1522, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1524, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1526, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1527, 24))
    counters.add(cc_8)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_385())
    sub_automata.append(_BuildAutomaton_386())
    sub_automata.append(_BuildAutomaton_387())
    sub_automata.append(_BuildAutomaton_388())
    sub_automata.append(_BuildAutomaton_389())
    sub_automata.append(_BuildAutomaton_390())
    sub_automata.append(_BuildAutomaton_391())
    sub_automata.append(_BuildAutomaton_392())
    sub_automata.append(_BuildAutomaton_393())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1515, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_73._Automaton = _BuildAutomaton_384()




CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enhancedAuthResponse'), CTD_ANON_12, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1260, 4)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1539, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1540, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), pyxb.binding.datatypes.string, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1541, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1542, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardProductId'), pyxb.binding.datatypes.string, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1543, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1544, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1545, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1546, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1547, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authorizationResponseSubCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1548, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'approvedAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1549, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountInformation'), accountInfoType, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1550, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), tokenResponseType, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1553, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recyclingResponse'), recyclingResponseType, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1556, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recurringResponse'), recurringResponseType, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1557, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardSuffix'), pyxb.binding.datatypes.string, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1561, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'networkTransactionId'), pyxb.binding.datatypes.string, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1572, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paymentAccountReferenceNumber'), pyxb.binding.datatypes.string, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1575, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_14, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_15, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), CTD_ANON_17, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1927, 4)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'applepayResponse'), CTD_ANON_19, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2178, 4)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'androidpayResponse'), CTD_ANON_20, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2194, 4)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sepaDirectDebitResponse'), CTD_ANON_21, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2218, 4)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'idealResponse'), CTD_ANON_22, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2234, 4)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giropayResponse'), CTD_ANON_23, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2250, 4)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sofortResponse'), CTD_ANON_24, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2266, 4)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pinlessDebitResponse'), CTD_ANON_25, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2619, 4)))

def _BuildAutomaton_395 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_395
    del _BuildAutomaton_395
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1539, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1539, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_396 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_396
    del _BuildAutomaton_396
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1540, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1540, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_397 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_397
    del _BuildAutomaton_397
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1541, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1541, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_398 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_398
    del _BuildAutomaton_398
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1542, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1542, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_399 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_399
    del _BuildAutomaton_399
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1543, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardProductId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1543, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_400 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_400
    del _BuildAutomaton_400
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1544, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1544, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_401 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_401
    del _BuildAutomaton_401
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1545, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1545, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_402 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_402
    del _BuildAutomaton_402
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1546, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1546, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_403 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_403
    del _BuildAutomaton_403
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1547, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1547, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_404 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_404
    del _BuildAutomaton_404
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1548, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authorizationResponseSubCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1548, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_405 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_405
    del _BuildAutomaton_405
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1549, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'approvedAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1549, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_406 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_406
    del _BuildAutomaton_406
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1550, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountInformation')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1550, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_407 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_407
    del _BuildAutomaton_407
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1551, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1551, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_408 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_408
    del _BuildAutomaton_408
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1553, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1553, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_409 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_409
    del _BuildAutomaton_409
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1554, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enhancedAuthResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1554, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_410 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_410
    del _BuildAutomaton_410
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1555, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1555, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_411 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_411
    del _BuildAutomaton_411
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1556, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recyclingResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1556, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_412 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_412
    del _BuildAutomaton_412
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1557, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recurringResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1557, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_413 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_413
    del _BuildAutomaton_413
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1559, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1559, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_414 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_414
    del _BuildAutomaton_414
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1560, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'applepayResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1560, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_415 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_415
    del _BuildAutomaton_415
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1561, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardSuffix')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1561, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_416 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_416
    del _BuildAutomaton_416
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1562, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'androidpayResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1562, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_417 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_417
    del _BuildAutomaton_417
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1564, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sepaDirectDebitResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1564, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_418 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_418
    del _BuildAutomaton_418
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1566, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'idealResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1566, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_419 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_419
    del _BuildAutomaton_419
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1568, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giropayResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1568, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_420 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_420
    del _BuildAutomaton_420
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1570, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sofortResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1570, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_421 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_421
    del _BuildAutomaton_421
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1572, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'networkTransactionId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1572, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_422 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_422
    del _BuildAutomaton_422
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1574, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pinlessDebitResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1574, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_423 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_423
    del _BuildAutomaton_423
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1575, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paymentAccountReferenceNumber')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1575, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_394 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_394
    del _BuildAutomaton_394
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1539, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1540, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1541, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1542, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1543, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1544, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1545, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1546, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1547, 24))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1548, 24))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1549, 24))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1550, 24))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1551, 24))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1553, 24))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1554, 24))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1555, 24))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1556, 24))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1557, 24))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1559, 24))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1560, 24))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1561, 24))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1562, 24))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1564, 24))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1566, 24))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1568, 24))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1570, 24))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1572, 24))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1574, 24))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1575, 24))
    counters.add(cc_28)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_395())
    sub_automata.append(_BuildAutomaton_396())
    sub_automata.append(_BuildAutomaton_397())
    sub_automata.append(_BuildAutomaton_398())
    sub_automata.append(_BuildAutomaton_399())
    sub_automata.append(_BuildAutomaton_400())
    sub_automata.append(_BuildAutomaton_401())
    sub_automata.append(_BuildAutomaton_402())
    sub_automata.append(_BuildAutomaton_403())
    sub_automata.append(_BuildAutomaton_404())
    sub_automata.append(_BuildAutomaton_405())
    sub_automata.append(_BuildAutomaton_406())
    sub_automata.append(_BuildAutomaton_407())
    sub_automata.append(_BuildAutomaton_408())
    sub_automata.append(_BuildAutomaton_409())
    sub_automata.append(_BuildAutomaton_410())
    sub_automata.append(_BuildAutomaton_411())
    sub_automata.append(_BuildAutomaton_412())
    sub_automata.append(_BuildAutomaton_413())
    sub_automata.append(_BuildAutomaton_414())
    sub_automata.append(_BuildAutomaton_415())
    sub_automata.append(_BuildAutomaton_416())
    sub_automata.append(_BuildAutomaton_417())
    sub_automata.append(_BuildAutomaton_418())
    sub_automata.append(_BuildAutomaton_419())
    sub_automata.append(_BuildAutomaton_420())
    sub_automata.append(_BuildAutomaton_421())
    sub_automata.append(_BuildAutomaton_422())
    sub_automata.append(_BuildAutomaton_423())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1538, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_74._Automaton = _BuildAutomaton_394()




CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1587, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1588, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1589, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1591, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1592, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1593, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), tokenResponseType, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1595, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_14, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4)))

def _BuildAutomaton_425 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_425
    del _BuildAutomaton_425
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1587, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1587, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_426 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_426
    del _BuildAutomaton_426
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1588, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1588, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_427 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_427
    del _BuildAutomaton_427
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1589, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1589, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_428 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_428
    del _BuildAutomaton_428
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1591, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1591, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_429 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_429
    del _BuildAutomaton_429
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1592, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1592, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_430 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_430
    del _BuildAutomaton_430
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1593, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1593, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_431 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_431
    del _BuildAutomaton_431
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1595, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1595, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_432 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_432
    del _BuildAutomaton_432
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1597, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1597, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_424 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_424
    del _BuildAutomaton_424
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1587, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1588, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1589, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1591, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1592, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1593, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1595, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1597, 24))
    counters.add(cc_7)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_425())
    sub_automata.append(_BuildAutomaton_426())
    sub_automata.append(_BuildAutomaton_427())
    sub_automata.append(_BuildAutomaton_428())
    sub_automata.append(_BuildAutomaton_429())
    sub_automata.append(_BuildAutomaton_430())
    sub_automata.append(_BuildAutomaton_431())
    sub_automata.append(_BuildAutomaton_432())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1586, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_75._Automaton = _BuildAutomaton_424()




CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1609, 24)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1610, 24)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1611, 24)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1613, 24)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1614, 24)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1615, 24)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_14, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_15, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4)))

def _BuildAutomaton_434 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_434
    del _BuildAutomaton_434
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1609, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1609, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_435 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_435
    del _BuildAutomaton_435
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1610, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1610, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_436 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_436
    del _BuildAutomaton_436
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1611, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1611, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_437 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_437
    del _BuildAutomaton_437
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1613, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1613, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_438 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_438
    del _BuildAutomaton_438
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1614, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1614, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_439 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_439
    del _BuildAutomaton_439
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1615, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1615, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_440 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_440
    del _BuildAutomaton_440
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1616, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1616, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_441 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_441
    del _BuildAutomaton_441
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1617, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1617, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_433 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_433
    del _BuildAutomaton_433
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1609, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1610, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1611, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1613, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1614, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1615, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1616, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1617, 24))
    counters.add(cc_7)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_434())
    sub_automata.append(_BuildAutomaton_435())
    sub_automata.append(_BuildAutomaton_436())
    sub_automata.append(_BuildAutomaton_437())
    sub_automata.append(_BuildAutomaton_438())
    sub_automata.append(_BuildAutomaton_439())
    sub_automata.append(_BuildAutomaton_440())
    sub_automata.append(_BuildAutomaton_441())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1608, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_76._Automaton = _BuildAutomaton_433()




CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_14, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1642, 24)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1643, 24)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1644, 24)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1646, 24)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1647, 24)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1648, 24)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_15, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'virtualGiftCardResponse'), CTD_ANON_16, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1713, 4)))

def _BuildAutomaton_443 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_443
    del _BuildAutomaton_443
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1642, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1642, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_444 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_444
    del _BuildAutomaton_444
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1643, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1643, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_445 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_445
    del _BuildAutomaton_445
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1644, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1644, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_446 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_446
    del _BuildAutomaton_446
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1646, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1646, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_447 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_447
    del _BuildAutomaton_447
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1647, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1647, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_448 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_448
    del _BuildAutomaton_448
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1648, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1648, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_449 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_449
    del _BuildAutomaton_449
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1649, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1649, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_450 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_450
    del _BuildAutomaton_450
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1650, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1650, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_451 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_451
    del _BuildAutomaton_451
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1651, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'virtualGiftCardResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1651, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_442 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_442
    del _BuildAutomaton_442
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1642, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1643, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1644, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1646, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1647, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1648, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1649, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1650, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1651, 24))
    counters.add(cc_8)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_443())
    sub_automata.append(_BuildAutomaton_444())
    sub_automata.append(_BuildAutomaton_445())
    sub_automata.append(_BuildAutomaton_446())
    sub_automata.append(_BuildAutomaton_447())
    sub_automata.append(_BuildAutomaton_448())
    sub_automata.append(_BuildAutomaton_449())
    sub_automata.append(_BuildAutomaton_450())
    sub_automata.append(_BuildAutomaton_451())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1641, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_77._Automaton = _BuildAutomaton_442()




CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_14, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1663, 24)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1664, 24)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1665, 24)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1667, 24)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1668, 24)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1669, 24)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_15, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4)))

def _BuildAutomaton_453 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_453
    del _BuildAutomaton_453
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1663, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1663, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_454 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_454
    del _BuildAutomaton_454
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1664, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1664, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_455 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_455
    del _BuildAutomaton_455
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1665, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1665, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_456 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_456
    del _BuildAutomaton_456
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1667, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1667, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_457 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_457
    del _BuildAutomaton_457
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1668, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1668, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_458 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_458
    del _BuildAutomaton_458
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1669, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1669, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_459 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_459
    del _BuildAutomaton_459
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1670, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1670, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_460 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_460
    del _BuildAutomaton_460
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1671, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1671, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_452 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_452
    del _BuildAutomaton_452
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1663, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1664, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1665, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1667, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1668, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1669, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1670, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1671, 24))
    counters.add(cc_7)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_453())
    sub_automata.append(_BuildAutomaton_454())
    sub_automata.append(_BuildAutomaton_455())
    sub_automata.append(_BuildAutomaton_456())
    sub_automata.append(_BuildAutomaton_457())
    sub_automata.append(_BuildAutomaton_458())
    sub_automata.append(_BuildAutomaton_459())
    sub_automata.append(_BuildAutomaton_460())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1662, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_78._Automaton = _BuildAutomaton_452()




CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_14, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1683, 24)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1684, 24)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1685, 24)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1687, 24)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1688, 24)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1689, 24)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_15, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4)))

def _BuildAutomaton_462 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_462
    del _BuildAutomaton_462
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1683, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1683, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_463 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_463
    del _BuildAutomaton_463
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1684, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1684, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_464 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_464
    del _BuildAutomaton_464
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1685, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1685, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_465 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_465
    del _BuildAutomaton_465
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1687, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1687, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_466 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_466
    del _BuildAutomaton_466
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1688, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1688, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_467 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_467
    del _BuildAutomaton_467
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1689, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1689, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_468 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_468
    del _BuildAutomaton_468
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1690, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1690, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_469 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_469
    del _BuildAutomaton_469
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1691, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1691, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_461 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_461
    del _BuildAutomaton_461
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1683, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1684, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1685, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1687, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1688, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1689, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1690, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1691, 24))
    counters.add(cc_7)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_462())
    sub_automata.append(_BuildAutomaton_463())
    sub_automata.append(_BuildAutomaton_464())
    sub_automata.append(_BuildAutomaton_465())
    sub_automata.append(_BuildAutomaton_466())
    sub_automata.append(_BuildAutomaton_467())
    sub_automata.append(_BuildAutomaton_468())
    sub_automata.append(_BuildAutomaton_469())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1682, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_79._Automaton = _BuildAutomaton_461()




CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_14, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_15, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1727, 24)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1728, 24)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1729, 24)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1731, 24)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1732, 24)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1733, 24)))

def _BuildAutomaton_471 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_471
    del _BuildAutomaton_471
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1727, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1727, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_472 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_472
    del _BuildAutomaton_472
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1728, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1728, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_473 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_473
    del _BuildAutomaton_473
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1729, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1729, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_474 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_474
    del _BuildAutomaton_474
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1731, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1731, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_475 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_475
    del _BuildAutomaton_475
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1732, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1732, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_476 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_476
    del _BuildAutomaton_476
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1733, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1733, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_477 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_477
    del _BuildAutomaton_477
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1734, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1734, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_478 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_478
    del _BuildAutomaton_478
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1735, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1735, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_470 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_470
    del _BuildAutomaton_470
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1727, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1728, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1729, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1731, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1732, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1733, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1734, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1735, 24))
    counters.add(cc_7)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_471())
    sub_automata.append(_BuildAutomaton_472())
    sub_automata.append(_BuildAutomaton_473())
    sub_automata.append(_BuildAutomaton_474())
    sub_automata.append(_BuildAutomaton_475())
    sub_automata.append(_BuildAutomaton_476())
    sub_automata.append(_BuildAutomaton_477())
    sub_automata.append(_BuildAutomaton_478())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1726, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_80._Automaton = _BuildAutomaton_470()




CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_14, scope=CTD_ANON_81, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1624, 4)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_15, scope=CTD_ANON_81, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1698, 4)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_81, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1747, 24)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_81, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1748, 24)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_81, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1749, 24)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_81, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1751, 24)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_81, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1752, 24)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_81, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1753, 24)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'approvedAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_81, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1755, 24)))

def _BuildAutomaton_480 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_480
    del _BuildAutomaton_480
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1747, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1747, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_481 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_481
    del _BuildAutomaton_481
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1748, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1748, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_482 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_482
    del _BuildAutomaton_482
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1749, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1749, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_483 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_483
    del _BuildAutomaton_483
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1751, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1751, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_484 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_484
    del _BuildAutomaton_484
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1752, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1752, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_485 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_485
    del _BuildAutomaton_485
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1753, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1753, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_486 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_486
    del _BuildAutomaton_486
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1754, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1754, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_487 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_487
    del _BuildAutomaton_487
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1755, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'approvedAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1755, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_488 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_488
    del _BuildAutomaton_488
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1756, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1756, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_479 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_479
    del _BuildAutomaton_479
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1747, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1748, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1749, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1751, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1752, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1753, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1754, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1755, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1756, 24))
    counters.add(cc_8)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_480())
    sub_automata.append(_BuildAutomaton_481())
    sub_automata.append(_BuildAutomaton_482())
    sub_automata.append(_BuildAutomaton_483())
    sub_automata.append(_BuildAutomaton_484())
    sub_automata.append(_BuildAutomaton_485())
    sub_automata.append(_BuildAutomaton_486())
    sub_automata.append(_BuildAutomaton_487())
    sub_automata.append(_BuildAutomaton_488())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1746, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_81._Automaton = _BuildAutomaton_479()




CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), contact, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 77, 4)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress'), contact, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 942, 4)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), CTD_ANON_9, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1076, 4)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1771, 28)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1772, 28)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customIdentifier'), pyxb.binding.datatypes.string, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1774, 28)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), pyxb.binding.datatypes.string, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1777, 28)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'verify'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1778, 28)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1780, 28)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), pyxb.binding.datatypes.string, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1781, 28)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeck'), echeckType, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1784, 39)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckToken'), echeckTokenType, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1784, 101)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), merchantDataType, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1786, 28)))

def _BuildAutomaton_489 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_489
    del _BuildAutomaton_489
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1772, 28))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1773, 28))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1774, 28))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1778, 28))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1780, 28))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1783, 28))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1784, 39))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1784, 101))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1785, 28))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1786, 28))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1787, 28))
    counters.add(cc_10)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1771, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1772, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customBilling')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1773, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customIdentifier')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1774, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1777, 28))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'verify')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1778, 28))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1779, 28))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1780, 28))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1781, 28))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billToAddress')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1782, 28))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1783, 28))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'echeck')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1784, 39))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'echeckToken')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1784, 101))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customBilling')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1785, 28))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantData')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1786, 28))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customIdentifier')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1787, 28))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_82._Automaton = _BuildAutomaton_489()




CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), contact, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 77, 4)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), CTD_ANON_9, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1076, 4)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1802, 32)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1803, 32)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1804, 32)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customIdentifier'), pyxb.binding.datatypes.string, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1806, 32)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), pyxb.binding.datatypes.string, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1809, 32)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), pyxb.binding.datatypes.string, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1812, 32)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeck'), echeckType, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1814, 43)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckToken'), echeckTokenType, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1814, 105)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), merchantDataType, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1816, 32)))

def _BuildAutomaton_490 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_490
    del _BuildAutomaton_490
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1803, 32))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1804, 32))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1805, 32))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1806, 32))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1811, 32))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1814, 43))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1814, 105))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1815, 32))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1816, 32))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1817, 32))
    counters.add(cc_9)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1802, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1803, 32))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1804, 32))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customBilling')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1805, 32))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customIdentifier')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1806, 32))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1809, 32))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1810, 32))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1811, 32))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1812, 32))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billToAddress')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1813, 32))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'echeck')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1814, 43))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'echeckToken')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1814, 105))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customBilling')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1815, 32))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantData')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1816, 32))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customIdentifier')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1817, 32))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_83._Automaton = _BuildAutomaton_490()




CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), contact, scope=CTD_ANON_84, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 77, 4)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), pyxb.binding.datatypes.string, scope=CTD_ANON_84, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1831, 24)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_84, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1832, 24)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), pyxb.binding.datatypes.string, scope=CTD_ANON_84, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1833, 24)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeck'), echeckType, scope=CTD_ANON_84, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1835, 35)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckToken'), echeckTokenType, scope=CTD_ANON_84, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1835, 97)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), merchantDataType, scope=CTD_ANON_84, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1836, 24)))

def _BuildAutomaton_491 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_491
    del _BuildAutomaton_491
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1831, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1832, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1833, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1834, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1835, 35))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1835, 97))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1836, 24))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1831, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1832, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1833, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billToAddress')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1834, 24))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'echeck')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1835, 35))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'echeckToken')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1835, 97))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantData')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1836, 24))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_84._Automaton = _BuildAutomaton_491()




CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1848, 24)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1849, 24)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1850, 24)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1851, 24)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1852, 24)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'verificationCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1853, 24)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1855, 24)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), tokenResponseType, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1857, 24)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), CTD_ANON_17, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1927, 4)))

def _BuildAutomaton_493 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_493
    del _BuildAutomaton_493
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1848, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1848, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_494 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_494
    del _BuildAutomaton_494
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1849, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1849, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_495 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_495
    del _BuildAutomaton_495
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1850, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1850, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_496 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_496
    del _BuildAutomaton_496
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1851, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1851, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_497 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_497
    del _BuildAutomaton_497
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1852, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1852, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_498 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_498
    del _BuildAutomaton_498
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1853, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'verificationCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1853, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_499 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_499
    del _BuildAutomaton_499
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1855, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1855, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_500 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_500
    del _BuildAutomaton_500
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1856, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1856, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_501 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_501
    del _BuildAutomaton_501
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1857, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1857, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_492 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_492
    del _BuildAutomaton_492
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1848, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1849, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1850, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1851, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1852, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1853, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1855, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1856, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1857, 24))
    counters.add(cc_8)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_493())
    sub_automata.append(_BuildAutomaton_494())
    sub_automata.append(_BuildAutomaton_495())
    sub_automata.append(_BuildAutomaton_496())
    sub_automata.append(_BuildAutomaton_497())
    sub_automata.append(_BuildAutomaton_498())
    sub_automata.append(_BuildAutomaton_499())
    sub_automata.append(_BuildAutomaton_500())
    sub_automata.append(_BuildAutomaton_501())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1847, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_85._Automaton = _BuildAutomaton_492()




CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_86, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1869, 24)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_86, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1870, 24)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_86, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1871, 24)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_86, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1872, 24)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_86, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1873, 24)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_86, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1875, 24)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), tokenResponseType, scope=CTD_ANON_86, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1877, 24)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), CTD_ANON_17, scope=CTD_ANON_86, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1927, 4)))

def _BuildAutomaton_503 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_503
    del _BuildAutomaton_503
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1869, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1869, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_504 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_504
    del _BuildAutomaton_504
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1870, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1870, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_505 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_505
    del _BuildAutomaton_505
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1871, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1871, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_506 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_506
    del _BuildAutomaton_506
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1872, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1872, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_507 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_507
    del _BuildAutomaton_507
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1873, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1873, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_508 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_508
    del _BuildAutomaton_508
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1875, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1875, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_509 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_509
    del _BuildAutomaton_509
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1876, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1876, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_510 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_510
    del _BuildAutomaton_510
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1877, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1877, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_502 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_502
    del _BuildAutomaton_502
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1869, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1870, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1871, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1872, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1873, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1875, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1876, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1877, 24))
    counters.add(cc_7)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_503())
    sub_automata.append(_BuildAutomaton_504())
    sub_automata.append(_BuildAutomaton_505())
    sub_automata.append(_BuildAutomaton_506())
    sub_automata.append(_BuildAutomaton_507())
    sub_automata.append(_BuildAutomaton_508())
    sub_automata.append(_BuildAutomaton_509())
    sub_automata.append(_BuildAutomaton_510())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1868, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_86._Automaton = _BuildAutomaton_502()




CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_87, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1968, 24)))

CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_87, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1969, 24)))

CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_87, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1970, 24)))

CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_87, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1971, 24)))

CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_87, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1972, 24)))

CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_87, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1974, 24)))

CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), tokenResponseType, scope=CTD_ANON_87, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1975, 24)))

def _BuildAutomaton_512 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_512
    del _BuildAutomaton_512
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1968, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1968, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_513 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_513
    del _BuildAutomaton_513
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1969, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1969, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_514 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_514
    del _BuildAutomaton_514
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1970, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1970, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_515 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_515
    del _BuildAutomaton_515
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1971, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1971, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_516 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_516
    del _BuildAutomaton_516
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1972, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1972, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_517 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_517
    del _BuildAutomaton_517
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1974, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1974, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_518 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_518
    del _BuildAutomaton_518
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1975, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1975, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_511 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_511
    del _BuildAutomaton_511
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1968, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1969, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1970, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1971, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1972, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1974, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1975, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_512())
    sub_automata.append(_BuildAutomaton_513())
    sub_automata.append(_BuildAutomaton_514())
    sub_automata.append(_BuildAutomaton_515())
    sub_automata.append(_BuildAutomaton_516())
    sub_automata.append(_BuildAutomaton_517())
    sub_automata.append(_BuildAutomaton_518())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1967, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_87._Automaton = _BuildAutomaton_511()




CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_88, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1987, 24)))

CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeck'), echeckType, scope=CTD_ANON_88, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1989, 28)))

CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckToken'), echeckTokenType, scope=CTD_ANON_88, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1990, 28)))

CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), merchantDataType, scope=CTD_ANON_88, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1992, 24)))

CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customIdentifier'), pyxb.binding.datatypes.string, scope=CTD_ANON_88, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1993, 24)))

def _BuildAutomaton_519 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_519
    del _BuildAutomaton_519
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1987, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1988, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1992, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1993, 24))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1987, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'echeck')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1989, 28))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'echeckToken')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1990, 28))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantData')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1992, 24))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customIdentifier')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1993, 24))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_88._Automaton = _BuildAutomaton_519()




CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), CTD_ANON_17, scope=CTD_ANON_89, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1927, 4)))

CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_89, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2005, 24)))

CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_89, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2006, 24)))

CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_89, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2007, 24)))

CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_89, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2008, 24)))

CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_89, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2009, 24)))

CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_89, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2011, 24)))

CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), tokenResponseType, scope=CTD_ANON_89, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2013, 24)))

def _BuildAutomaton_521 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_521
    del _BuildAutomaton_521
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2005, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2005, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_522 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_522
    del _BuildAutomaton_522
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2006, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2006, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_523 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_523
    del _BuildAutomaton_523
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2007, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2007, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_524 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_524
    del _BuildAutomaton_524
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2008, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2008, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_525 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_525
    del _BuildAutomaton_525
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2009, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2009, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_526 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_526
    del _BuildAutomaton_526
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2011, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2011, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_527 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_527
    del _BuildAutomaton_527
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2012, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2012, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_528 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_528
    del _BuildAutomaton_528
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2013, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2013, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_520 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_520
    del _BuildAutomaton_520
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2005, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2006, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2007, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2008, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2009, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2011, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2012, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2013, 24))
    counters.add(cc_7)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_521())
    sub_automata.append(_BuildAutomaton_522())
    sub_automata.append(_BuildAutomaton_523())
    sub_automata.append(_BuildAutomaton_524())
    sub_automata.append(_BuildAutomaton_525())
    sub_automata.append(_BuildAutomaton_526())
    sub_automata.append(_BuildAutomaton_527())
    sub_automata.append(_BuildAutomaton_528())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2004, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_89._Automaton = _BuildAutomaton_520()




updateCardValidationNumOnToken_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), pyxb.binding.datatypes.string, scope=updateCardValidationNumOnToken_, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2084, 20)))

updateCardValidationNumOnToken_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpToken'), pyxb.binding.datatypes.string, scope=updateCardValidationNumOnToken_, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2085, 20)))

updateCardValidationNumOnToken_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum'), pyxb.binding.datatypes.string, scope=updateCardValidationNumOnToken_, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2086, 20)))

def _BuildAutomaton_529 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_529
    del _BuildAutomaton_529
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2084, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2085, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2086, 20))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(updateCardValidationNumOnToken_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2084, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(updateCardValidationNumOnToken_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpToken')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2085, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(updateCardValidationNumOnToken_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2086, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
updateCardValidationNumOnToken_._Automaton = _BuildAutomaton_529()




CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_90, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2097, 24)))

CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_90, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2098, 24)))

CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_90, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2099, 24)))

CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_90, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2100, 24)))

CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_90, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2101, 24)))

def _BuildAutomaton_531 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_531
    del _BuildAutomaton_531
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2097, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2097, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_532 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_532
    del _BuildAutomaton_532
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2098, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2098, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_533 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_533
    del _BuildAutomaton_533
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2099, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2099, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_534 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_534
    del _BuildAutomaton_534
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2100, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2100, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_535 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_535
    del _BuildAutomaton_535
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2101, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2101, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_530 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_530
    del _BuildAutomaton_530
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2097, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2098, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2099, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2100, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2101, 24))
    counters.add(cc_4)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_531())
    sub_automata.append(_BuildAutomaton_532())
    sub_automata.append(_BuildAutomaton_533())
    sub_automata.append(_BuildAutomaton_534())
    sub_automata.append(_BuildAutomaton_535())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2096, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_90._Automaton = _BuildAutomaton_530()




CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), contact, scope=CTD_ANON_91, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 77, 4)))

CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress'), contact, scope=CTD_ANON_91, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 942, 4)))

CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudChecks'), advancedFraudChecksType, scope=CTD_ANON_91, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2120, 24)))

CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_91, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2123, 24)))

CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eventType'), pyxb.binding.datatypes.string, scope=CTD_ANON_91, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2124, 24)))

CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountLogin'), pyxb.binding.datatypes.string, scope=CTD_ANON_91, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2125, 24)))

CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountPasshash'), pyxb.binding.datatypes.string, scope=CTD_ANON_91, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2126, 24)))

def _BuildAutomaton_536 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_536
    del _BuildAutomaton_536
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2120, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2121, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2122, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2123, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2124, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2125, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2126, 24))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudChecks')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2120, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billToAddress')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2121, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2122, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2123, 24))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eventType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2124, 24))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountLogin')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2125, 24))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountPasshash')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2126, 24))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_91._Automaton = _BuildAutomaton_536()




CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_92, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2138, 24)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_92, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2139, 24)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_92, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2140, 24)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_92, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2141, 24)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_92, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2142, 24)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudResults'), advancedFraudResultsType, scope=CTD_ANON_92, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2143, 24)))

def _BuildAutomaton_538 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_538
    del _BuildAutomaton_538
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2138, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2138, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_539 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_539
    del _BuildAutomaton_539
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2139, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2139, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_540 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_540
    del _BuildAutomaton_540
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2140, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2140, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_541 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_541
    del _BuildAutomaton_541
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2141, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2141, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_542 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_542
    del _BuildAutomaton_542
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2142, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2142, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_543 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_543
    del _BuildAutomaton_543
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2143, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudResults')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2143, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_537 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_537
    del _BuildAutomaton_537
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2138, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2139, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2140, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2141, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2142, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2143, 24))
    counters.add(cc_5)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_538())
    sub_automata.append(_BuildAutomaton_539())
    sub_automata.append(_BuildAutomaton_540())
    sub_automata.append(_BuildAutomaton_541())
    sub_automata.append(_BuildAutomaton_542())
    sub_automata.append(_BuildAutomaton_543())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2137, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_92._Automaton = _BuildAutomaton_537()




CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_93, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2284, 24)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_93, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2285, 24)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_93, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2286, 24)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_93, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2287, 24)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_93, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2289, 24)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_93, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2290, 24)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_93, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2291, 24)))

def _BuildAutomaton_545 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_545
    del _BuildAutomaton_545
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2284, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2284, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_546 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_546
    del _BuildAutomaton_546
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2285, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2285, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_547 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_547
    del _BuildAutomaton_547
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2286, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2286, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_548 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_548
    del _BuildAutomaton_548
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2287, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2287, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_549 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_549
    del _BuildAutomaton_549
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2289, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2289, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_550 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_550
    del _BuildAutomaton_550
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2290, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2290, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_551 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_551
    del _BuildAutomaton_551
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2291, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2291, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_544 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_544
    del _BuildAutomaton_544
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2284, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2285, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2286, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2287, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2289, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2290, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2291, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_545())
    sub_automata.append(_BuildAutomaton_546())
    sub_automata.append(_BuildAutomaton_547())
    sub_automata.append(_BuildAutomaton_548())
    sub_automata.append(_BuildAutomaton_549())
    sub_automata.append(_BuildAutomaton_550())
    sub_automata.append(_BuildAutomaton_551())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2283, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_93._Automaton = _BuildAutomaton_544()




CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_94, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2304, 24)))

CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_94, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2305, 24)))

CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_94, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2306, 24)))

CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_94, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2307, 24)))

CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_94, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2309, 24)))

CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_94, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2310, 24)))

CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_94, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2311, 24)))

def _BuildAutomaton_553 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_553
    del _BuildAutomaton_553
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2304, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2304, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_554 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_554
    del _BuildAutomaton_554
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2305, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2305, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_555 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_555
    del _BuildAutomaton_555
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2306, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2306, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_556 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_556
    del _BuildAutomaton_556
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2307, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2307, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_557 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_557
    del _BuildAutomaton_557
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2309, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2309, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_558 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_558
    del _BuildAutomaton_558
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2310, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2310, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_559 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_559
    del _BuildAutomaton_559
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2311, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2311, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_552 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_552
    del _BuildAutomaton_552
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2304, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2305, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2306, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2307, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2309, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2310, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2311, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_553())
    sub_automata.append(_BuildAutomaton_554())
    sub_automata.append(_BuildAutomaton_555())
    sub_automata.append(_BuildAutomaton_556())
    sub_automata.append(_BuildAutomaton_557())
    sub_automata.append(_BuildAutomaton_558())
    sub_automata.append(_BuildAutomaton_559())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2303, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_94._Automaton = _BuildAutomaton_552()




CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId'), pyxb.binding.datatypes.string, scope=CTD_ANON_95, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2325, 28)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_95, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2326, 28)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_95, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2327, 28)))

def _BuildAutomaton_560 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_560
    del _BuildAutomaton_560
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2325, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2326, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2327, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_95._Automaton = _BuildAutomaton_560()




CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId'), pyxb.binding.datatypes.string, scope=CTD_ANON_96, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2341, 28)))

CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_96, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2342, 28)))

CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_96, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2343, 28)))

def _BuildAutomaton_561 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_561
    del _BuildAutomaton_561
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2341, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2342, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2343, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_96._Automaton = _BuildAutomaton_561()




CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_97, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2356, 24)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_97, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2357, 24)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_97, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2358, 24)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_97, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2359, 24)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_97, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2361, 24)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_97, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2362, 24)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_97, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2363, 24)))

def _BuildAutomaton_563 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_563
    del _BuildAutomaton_563
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2356, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2356, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_564 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_564
    del _BuildAutomaton_564
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2357, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2357, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_565 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_565
    del _BuildAutomaton_565
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2358, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2358, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_566 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_566
    del _BuildAutomaton_566
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2359, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2359, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_567 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_567
    del _BuildAutomaton_567
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2361, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2361, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_568 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_568
    del _BuildAutomaton_568
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2362, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2362, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_569 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_569
    del _BuildAutomaton_569
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2363, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2363, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_562 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_562
    del _BuildAutomaton_562
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2356, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2357, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2358, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2359, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2361, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2362, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2363, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_563())
    sub_automata.append(_BuildAutomaton_564())
    sub_automata.append(_BuildAutomaton_565())
    sub_automata.append(_BuildAutomaton_566())
    sub_automata.append(_BuildAutomaton_567())
    sub_automata.append(_BuildAutomaton_568())
    sub_automata.append(_BuildAutomaton_569())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2355, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_97._Automaton = _BuildAutomaton_562()




CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_98, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2376, 24)))

CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_98, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2377, 24)))

CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_98, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2378, 24)))

CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_98, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2379, 24)))

CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_98, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2381, 24)))

CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_98, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2382, 24)))

CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_98, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2383, 24)))

def _BuildAutomaton_571 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_571
    del _BuildAutomaton_571
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2376, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2376, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_572 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_572
    del _BuildAutomaton_572
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2377, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2377, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_573 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_573
    del _BuildAutomaton_573
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2378, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2378, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_574 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_574
    del _BuildAutomaton_574
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2379, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2379, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_575 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_575
    del _BuildAutomaton_575
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2381, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2381, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_576 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_576
    del _BuildAutomaton_576
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2382, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2382, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_577 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_577
    del _BuildAutomaton_577
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2383, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2383, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_570 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_570
    del _BuildAutomaton_570
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2376, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2377, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2378, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2379, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2381, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2382, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2383, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_571())
    sub_automata.append(_BuildAutomaton_572())
    sub_automata.append(_BuildAutomaton_573())
    sub_automata.append(_BuildAutomaton_574())
    sub_automata.append(_BuildAutomaton_575())
    sub_automata.append(_BuildAutomaton_576())
    sub_automata.append(_BuildAutomaton_577())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2375, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_98._Automaton = _BuildAutomaton_570()




CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId'), pyxb.binding.datatypes.string, scope=CTD_ANON_99, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2398, 32)))

CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId'), pyxb.binding.datatypes.string, scope=CTD_ANON_99, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2399, 32)))

CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_99, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2401, 28)))

CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_99, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2402, 28)))

def _BuildAutomaton_578 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_578
    del _BuildAutomaton_578
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2401, 28))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2402, 28))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2398, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2399, 32))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2401, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2402, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_99._Automaton = _BuildAutomaton_578()




CTD_ANON_100._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId'), pyxb.binding.datatypes.string, scope=CTD_ANON_100, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2417, 32)))

CTD_ANON_100._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId'), pyxb.binding.datatypes.string, scope=CTD_ANON_100, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2418, 32)))

CTD_ANON_100._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_100, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2420, 28)))

CTD_ANON_100._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_100, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2421, 28)))

def _BuildAutomaton_579 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_579
    del _BuildAutomaton_579
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2420, 28))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2421, 28))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2417, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2418, 32))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2420, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2421, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_100._Automaton = _BuildAutomaton_579()




CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_101, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2434, 24)))

CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_101, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2435, 24)))

CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_101, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2436, 24)))

CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_101, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2437, 24)))

CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_101, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2439, 24)))

CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_101, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2440, 24)))

CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_101, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2441, 24)))

def _BuildAutomaton_581 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_581
    del _BuildAutomaton_581
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2434, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2434, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_582 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_582
    del _BuildAutomaton_582
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2435, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2435, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_583 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_583
    del _BuildAutomaton_583
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2436, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2436, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_584 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_584
    del _BuildAutomaton_584
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2437, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2437, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_585 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_585
    del _BuildAutomaton_585
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2439, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2439, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_586 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_586
    del _BuildAutomaton_586
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2440, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2440, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_587 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_587
    del _BuildAutomaton_587
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2441, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2441, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_580 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_580
    del _BuildAutomaton_580
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2434, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2435, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2436, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2437, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2439, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2440, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2441, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_581())
    sub_automata.append(_BuildAutomaton_582())
    sub_automata.append(_BuildAutomaton_583())
    sub_automata.append(_BuildAutomaton_584())
    sub_automata.append(_BuildAutomaton_585())
    sub_automata.append(_BuildAutomaton_586())
    sub_automata.append(_BuildAutomaton_587())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2433, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_101._Automaton = _BuildAutomaton_580()




CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_102, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2454, 24)))

CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_102, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2455, 24)))

CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_102, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2456, 24)))

CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_102, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2457, 24)))

CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_102, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2459, 24)))

CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_102, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2460, 24)))

CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_102, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2461, 24)))

def _BuildAutomaton_589 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_589
    del _BuildAutomaton_589
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2454, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2454, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_590 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_590
    del _BuildAutomaton_590
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2455, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2455, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_591 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_591
    del _BuildAutomaton_591
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2456, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2456, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_592 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_592
    del _BuildAutomaton_592
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2457, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2457, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_593 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_593
    del _BuildAutomaton_593
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2459, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2459, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_594 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_594
    del _BuildAutomaton_594
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2460, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2460, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_595 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_595
    del _BuildAutomaton_595
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2461, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2461, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_588 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_588
    del _BuildAutomaton_588
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2454, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2455, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2456, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2457, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2459, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2460, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2461, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_589())
    sub_automata.append(_BuildAutomaton_590())
    sub_automata.append(_BuildAutomaton_591())
    sub_automata.append(_BuildAutomaton_592())
    sub_automata.append(_BuildAutomaton_593())
    sub_automata.append(_BuildAutomaton_594())
    sub_automata.append(_BuildAutomaton_595())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2453, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_102._Automaton = _BuildAutomaton_588()




CTD_ANON_103._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId'), pyxb.binding.datatypes.string, scope=CTD_ANON_103, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2476, 32)))

CTD_ANON_103._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId'), pyxb.binding.datatypes.string, scope=CTD_ANON_103, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2477, 32)))

CTD_ANON_103._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_103, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2479, 28)))

CTD_ANON_103._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_103, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2480, 28)))

def _BuildAutomaton_596 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_596
    del _BuildAutomaton_596
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2479, 28))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2480, 28))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_103._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2476, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_103._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2477, 32))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_103._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2479, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_103._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2480, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_103._Automaton = _BuildAutomaton_596()




CTD_ANON_104._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_104, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2493, 24)))

CTD_ANON_104._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_104, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2494, 24)))

CTD_ANON_104._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_104, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2495, 24)))

CTD_ANON_104._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_104, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2496, 24)))

CTD_ANON_104._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_104, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2498, 24)))

CTD_ANON_104._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_104, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2499, 24)))

CTD_ANON_104._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_104, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2500, 24)))

def _BuildAutomaton_598 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_598
    del _BuildAutomaton_598
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2493, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2493, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_599 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_599
    del _BuildAutomaton_599
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2494, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2494, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_600 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_600
    del _BuildAutomaton_600
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2495, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2495, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_601 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_601
    del _BuildAutomaton_601
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2496, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2496, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_602 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_602
    del _BuildAutomaton_602
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2498, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2498, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_603 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_603
    del _BuildAutomaton_603
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2499, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2499, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_604 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_604
    del _BuildAutomaton_604
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2500, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2500, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_597 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_597
    del _BuildAutomaton_597
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2493, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2494, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2495, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2496, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2498, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2499, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2500, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_598())
    sub_automata.append(_BuildAutomaton_599())
    sub_automata.append(_BuildAutomaton_600())
    sub_automata.append(_BuildAutomaton_601())
    sub_automata.append(_BuildAutomaton_602())
    sub_automata.append(_BuildAutomaton_603())
    sub_automata.append(_BuildAutomaton_604())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2492, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_104._Automaton = _BuildAutomaton_597()




CTD_ANON_105._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId'), pyxb.binding.datatypes.string, scope=CTD_ANON_105, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2515, 32)))

CTD_ANON_105._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId'), pyxb.binding.datatypes.string, scope=CTD_ANON_105, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2516, 32)))

CTD_ANON_105._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_105, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2518, 28)))

CTD_ANON_105._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_105, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2519, 28)))

def _BuildAutomaton_605 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_605
    del _BuildAutomaton_605
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2518, 28))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2519, 28))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_105._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2515, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_105._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2516, 32))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_105._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2518, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_105._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2519, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_105._Automaton = _BuildAutomaton_605()




CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2532, 24)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2533, 24)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2534, 24)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2535, 24)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2537, 24)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2538, 24)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2539, 24)))

def _BuildAutomaton_607 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_607
    del _BuildAutomaton_607
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2532, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2532, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_608 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_608
    del _BuildAutomaton_608
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2533, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2533, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_609 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_609
    del _BuildAutomaton_609
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2534, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2534, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_610 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_610
    del _BuildAutomaton_610
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2535, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2535, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_611 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_611
    del _BuildAutomaton_611
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2537, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2537, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_612 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_612
    del _BuildAutomaton_612
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2538, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2538, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_613 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_613
    del _BuildAutomaton_613
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2539, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2539, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_606 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_606
    del _BuildAutomaton_606
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2532, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2533, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2534, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2535, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2537, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2538, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2539, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_607())
    sub_automata.append(_BuildAutomaton_608())
    sub_automata.append(_BuildAutomaton_609())
    sub_automata.append(_BuildAutomaton_610())
    sub_automata.append(_BuildAutomaton_611())
    sub_automata.append(_BuildAutomaton_612())
    sub_automata.append(_BuildAutomaton_613())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2531, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_106._Automaton = _BuildAutomaton_606()




CTD_ANON_107._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_107, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2553, 24)))

CTD_ANON_107._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_107, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2554, 24)))

CTD_ANON_107._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_107, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2555, 24)))

CTD_ANON_107._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_107, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2556, 24)))

CTD_ANON_107._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_107, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2558, 24)))

CTD_ANON_107._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_107, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2559, 24)))

CTD_ANON_107._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_107, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2560, 24)))

def _BuildAutomaton_615 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_615
    del _BuildAutomaton_615
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2553, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2553, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_616 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_616
    del _BuildAutomaton_616
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2554, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2554, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_617 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_617
    del _BuildAutomaton_617
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2555, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2555, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_618 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_618
    del _BuildAutomaton_618
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2556, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2556, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_619 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_619
    del _BuildAutomaton_619
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2558, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2558, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_620 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_620
    del _BuildAutomaton_620
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2559, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2559, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_621 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_621
    del _BuildAutomaton_621
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2560, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2560, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_614 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_614
    del _BuildAutomaton_614
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2553, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2554, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2555, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2556, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2558, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2559, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2560, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_615())
    sub_automata.append(_BuildAutomaton_616())
    sub_automata.append(_BuildAutomaton_617())
    sub_automata.append(_BuildAutomaton_618())
    sub_automata.append(_BuildAutomaton_619())
    sub_automata.append(_BuildAutomaton_620())
    sub_automata.append(_BuildAutomaton_621())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2552, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_107._Automaton = _BuildAutomaton_614()




CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_108, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2573, 24)))

CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_108, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2574, 24)))

CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_108, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2575, 24)))

CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_108, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2576, 24)))

CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_108, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2578, 24)))

CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_108, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2579, 24)))

CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_108, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2580, 24)))

def _BuildAutomaton_623 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_623
    del _BuildAutomaton_623
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2573, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2573, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_624 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_624
    del _BuildAutomaton_624
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2574, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2574, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_625 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_625
    del _BuildAutomaton_625
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2575, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2575, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_626 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_626
    del _BuildAutomaton_626
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2576, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2576, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_627 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_627
    del _BuildAutomaton_627
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2578, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2578, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_628 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_628
    del _BuildAutomaton_628
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2579, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2579, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_629 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_629
    del _BuildAutomaton_629
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2580, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2580, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_622 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_622
    del _BuildAutomaton_622
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2573, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2574, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2575, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2576, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2578, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2579, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2580, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_623())
    sub_automata.append(_BuildAutomaton_624())
    sub_automata.append(_BuildAutomaton_625())
    sub_automata.append(_BuildAutomaton_626())
    sub_automata.append(_BuildAutomaton_627())
    sub_automata.append(_BuildAutomaton_628())
    sub_automata.append(_BuildAutomaton_629())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2572, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_108._Automaton = _BuildAutomaton_622()




CTD_ANON_109._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_109, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2593, 24)))

def _BuildAutomaton_630 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_630
    del _BuildAutomaton_630
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2593, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_109._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2593, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_109._Automaton = _BuildAutomaton_630()




CTD_ANON_110._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_110, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2605, 24)))

CTD_ANON_110._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_110, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2606, 24)))

CTD_ANON_110._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_110, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2607, 24)))

CTD_ANON_110._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_110, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2609, 24)))

CTD_ANON_110._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_110, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2610, 24)))

CTD_ANON_110._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_110, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2611, 24)))

def _BuildAutomaton_632 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_632
    del _BuildAutomaton_632
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2605, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_110._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2605, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_633 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_633
    del _BuildAutomaton_633
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2606, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_110._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2606, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_634 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_634
    del _BuildAutomaton_634
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2607, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_110._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2607, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_635 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_635
    del _BuildAutomaton_635
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2609, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_110._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2609, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_636 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_636
    del _BuildAutomaton_636
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2610, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_110._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2610, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_637 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_637
    del _BuildAutomaton_637
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2611, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_110._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2611, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_631 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_631
    del _BuildAutomaton_631
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2605, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2606, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2607, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2609, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2610, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2611, 24))
    counters.add(cc_5)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_632())
    sub_automata.append(_BuildAutomaton_633())
    sub_automata.append(_BuildAutomaton_634())
    sub_automata.append(_BuildAutomaton_635())
    sub_automata.append(_BuildAutomaton_636())
    sub_automata.append(_BuildAutomaton_637())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2604, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_110._Automaton = _BuildAutomaton_631()




CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId'), pyxb.binding.datatypes.string, scope=CTD_ANON_111, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2637, 32)))

CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId'), pyxb.binding.datatypes.string, scope=CTD_ANON_111, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2638, 32)))

CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerName'), pyxb.binding.datatypes.string, scope=CTD_ANON_111, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2641, 32)))

CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'submerchantName'), pyxb.binding.datatypes.string, scope=CTD_ANON_111, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2642, 32)))

CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_111, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2644, 28)))

CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_111, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2645, 28)))

CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'disbursementType'), pyxb.binding.datatypes.string, scope=CTD_ANON_111, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2646, 28)))

CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), cardType, scope=CTD_ANON_111, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2648, 32)))

CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'token'), cardTokenType, scope=CTD_ANON_111, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2649, 32)))

CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paypage'), cardPaypageType, scope=CTD_ANON_111, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2650, 32)))

def _BuildAutomaton_638 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_638
    del _BuildAutomaton_638
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2644, 28))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2645, 28))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2646, 28))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2637, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2638, 32))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerName')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2641, 32))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'submerchantName')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2642, 32))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2644, 28))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2645, 28))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'disbursementType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2646, 28))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2648, 32))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'token')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2649, 32))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paypage')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2650, 32))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_111._Automaton = _BuildAutomaton_638()




CTD_ANON_112._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_112, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2664, 24)))

CTD_ANON_112._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_112, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2665, 24)))

CTD_ANON_112._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_112, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2666, 24)))

CTD_ANON_112._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_112, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2667, 24)))

CTD_ANON_112._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_112, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2668, 24)))

CTD_ANON_112._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_112, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2669, 24)))

CTD_ANON_112._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_112, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2670, 24)))

CTD_ANON_112._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), tokenResponseType, scope=CTD_ANON_112, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2672, 24)))

def _BuildAutomaton_640 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_640
    del _BuildAutomaton_640
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2664, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_112._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2664, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_641 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_641
    del _BuildAutomaton_641
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2665, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_112._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2665, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_642 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_642
    del _BuildAutomaton_642
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2666, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_112._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2666, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_643 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_643
    del _BuildAutomaton_643
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2667, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_112._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2667, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_644 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_644
    del _BuildAutomaton_644
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2668, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_112._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2668, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_645 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_645
    del _BuildAutomaton_645
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2669, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_112._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2669, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_646 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_646
    del _BuildAutomaton_646
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2670, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_112._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2670, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_647 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_647
    del _BuildAutomaton_647
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2672, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_112._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2672, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_639 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_639
    del _BuildAutomaton_639
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2664, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2665, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2666, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2667, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2668, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2669, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2670, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2672, 24))
    counters.add(cc_7)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_640())
    sub_automata.append(_BuildAutomaton_641())
    sub_automata.append(_BuildAutomaton_642())
    sub_automata.append(_BuildAutomaton_643())
    sub_automata.append(_BuildAutomaton_644())
    sub_automata.append(_BuildAutomaton_645())
    sub_automata.append(_BuildAutomaton_646())
    sub_automata.append(_BuildAutomaton_647())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2663, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_112._Automaton = _BuildAutomaton_639()




CTD_ANON_113._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_113, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2685, 24)))

CTD_ANON_113._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_113, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2686, 24)))

CTD_ANON_113._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_113, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2687, 24)))

CTD_ANON_113._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_113, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2688, 24)))

CTD_ANON_113._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_113, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2690, 24)))

CTD_ANON_113._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_113, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2691, 24)))

CTD_ANON_113._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_113, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2692, 24)))

def _BuildAutomaton_649 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_649
    del _BuildAutomaton_649
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2685, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_113._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2685, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_650 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_650
    del _BuildAutomaton_650
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2686, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_113._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2686, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_651 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_651
    del _BuildAutomaton_651
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2687, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_113._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2687, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_652 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_652
    del _BuildAutomaton_652
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2688, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_113._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2688, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_653 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_653
    del _BuildAutomaton_653
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2690, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_113._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2690, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_654 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_654
    del _BuildAutomaton_654
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2691, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_113._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2691, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_655 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_655
    del _BuildAutomaton_655
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2692, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_113._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2692, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_648 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_648
    del _BuildAutomaton_648
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2685, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2686, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2687, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2688, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2690, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2691, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2692, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_649())
    sub_automata.append(_BuildAutomaton_650())
    sub_automata.append(_BuildAutomaton_651())
    sub_automata.append(_BuildAutomaton_652())
    sub_automata.append(_BuildAutomaton_653())
    sub_automata.append(_BuildAutomaton_654())
    sub_automata.append(_BuildAutomaton_655())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2684, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_113._Automaton = _BuildAutomaton_648()




CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_114, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2705, 24)))

CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_114, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2706, 24)))

CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_114, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2707, 24)))

CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_114, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2708, 24)))

CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_114, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2710, 24)))

CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_114, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2711, 24)))

CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_114, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2712, 24)))

def _BuildAutomaton_657 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_657
    del _BuildAutomaton_657
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2705, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2705, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_658 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_658
    del _BuildAutomaton_658
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2706, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2706, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_659 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_659
    del _BuildAutomaton_659
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2707, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2707, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_660 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_660
    del _BuildAutomaton_660
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2708, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2708, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_661 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_661
    del _BuildAutomaton_661
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2710, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2710, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_662 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_662
    del _BuildAutomaton_662
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2711, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2711, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_663 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_663
    del _BuildAutomaton_663
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2712, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2712, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_656 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_656
    del _BuildAutomaton_656
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2705, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2706, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2707, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2708, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2710, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2711, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2712, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_657())
    sub_automata.append(_BuildAutomaton_658())
    sub_automata.append(_BuildAutomaton_659())
    sub_automata.append(_BuildAutomaton_660())
    sub_automata.append(_BuildAutomaton_661())
    sub_automata.append(_BuildAutomaton_662())
    sub_automata.append(_BuildAutomaton_663())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2704, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_114._Automaton = _BuildAutomaton_656()




CTD_ANON_115._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId'), pyxb.binding.datatypes.string, scope=CTD_ANON_115, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2726, 28)))

CTD_ANON_115._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_115, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2727, 28)))

CTD_ANON_115._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_115, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2728, 28)))

def _BuildAutomaton_664 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_664
    del _BuildAutomaton_664
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_115._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2726, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_115._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2727, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_115._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2728, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_115._Automaton = _BuildAutomaton_664()




CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId'), pyxb.binding.datatypes.string, scope=CTD_ANON_116, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2742, 28)))

CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_116, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2743, 28)))

CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_116, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2744, 28)))

def _BuildAutomaton_665 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_665
    del _BuildAutomaton_665
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2742, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2743, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2744, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_116._Automaton = _BuildAutomaton_665()




CTD_ANON_117._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_117, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2757, 24)))

CTD_ANON_117._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_117, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2758, 24)))

CTD_ANON_117._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_117, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2759, 24)))

CTD_ANON_117._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_117, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2760, 24)))

CTD_ANON_117._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_117, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2762, 24)))

CTD_ANON_117._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_117, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2763, 24)))

CTD_ANON_117._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_117, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2764, 24)))

def _BuildAutomaton_667 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_667
    del _BuildAutomaton_667
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2757, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_117._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2757, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_668 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_668
    del _BuildAutomaton_668
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2758, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_117._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2758, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_669 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_669
    del _BuildAutomaton_669
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2759, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_117._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2759, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_670 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_670
    del _BuildAutomaton_670
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2760, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_117._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2760, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_671 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_671
    del _BuildAutomaton_671
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2762, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_117._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2762, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_672 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_672
    del _BuildAutomaton_672
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2763, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_117._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2763, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_673 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_673
    del _BuildAutomaton_673
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2764, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_117._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2764, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_666 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_666
    del _BuildAutomaton_666
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2757, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2758, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2759, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2760, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2762, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2763, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2764, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_667())
    sub_automata.append(_BuildAutomaton_668())
    sub_automata.append(_BuildAutomaton_669())
    sub_automata.append(_BuildAutomaton_670())
    sub_automata.append(_BuildAutomaton_671())
    sub_automata.append(_BuildAutomaton_672())
    sub_automata.append(_BuildAutomaton_673())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2756, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_117._Automaton = _BuildAutomaton_666()




CTD_ANON_118._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_118, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2777, 24)))

CTD_ANON_118._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_118, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2778, 24)))

CTD_ANON_118._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_118, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2779, 24)))

CTD_ANON_118._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_118, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2780, 24)))

CTD_ANON_118._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_118, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2782, 24)))

CTD_ANON_118._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_118, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2783, 24)))

CTD_ANON_118._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_118, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2784, 24)))

def _BuildAutomaton_675 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_675
    del _BuildAutomaton_675
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2777, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_118._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2777, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_676 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_676
    del _BuildAutomaton_676
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2778, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_118._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2778, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_677 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_677
    del _BuildAutomaton_677
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2779, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_118._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2779, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_678 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_678
    del _BuildAutomaton_678
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2780, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_118._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2780, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_679 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_679
    del _BuildAutomaton_679
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2782, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_118._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2782, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_680 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_680
    del _BuildAutomaton_680
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2783, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_118._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2783, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_681 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_681
    del _BuildAutomaton_681
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2784, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_118._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2784, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_674 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_674
    del _BuildAutomaton_674
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2777, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2778, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2779, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2780, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2782, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2783, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2784, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_675())
    sub_automata.append(_BuildAutomaton_676())
    sub_automata.append(_BuildAutomaton_677())
    sub_automata.append(_BuildAutomaton_678())
    sub_automata.append(_BuildAutomaton_679())
    sub_automata.append(_BuildAutomaton_680())
    sub_automata.append(_BuildAutomaton_681())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2776, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_118._Automaton = _BuildAutomaton_674()




translateToLowValueTokenRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), pyxb.binding.datatypes.string, scope=translateToLowValueTokenRequestType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2798, 20)))

translateToLowValueTokenRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'token'), pyxb.binding.datatypes.string, scope=translateToLowValueTokenRequestType, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2799, 20)))

def _BuildAutomaton_682 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_682
    del _BuildAutomaton_682
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2798, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2799, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(translateToLowValueTokenRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2798, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(translateToLowValueTokenRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'token')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2799, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
translateToLowValueTokenRequestType._Automaton = _BuildAutomaton_682()




CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), pyxb.binding.datatypes.string, scope=CTD_ANON_119, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2810, 24)))

CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paypageRegistrationId'), pyxb.binding.datatypes.string, scope=CTD_ANON_119, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2811, 24)))

CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_119, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2812, 24)))

CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_119, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2813, 24)))

CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_119, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2814, 24)))

CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_119, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2815, 24)))

def _BuildAutomaton_684 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_684
    del _BuildAutomaton_684
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2810, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2810, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_685 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_685
    del _BuildAutomaton_685
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2811, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paypageRegistrationId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2811, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_686 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_686
    del _BuildAutomaton_686
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2812, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2812, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_687 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_687
    del _BuildAutomaton_687
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2813, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2813, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_688 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_688
    del _BuildAutomaton_688
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2814, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2814, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_689 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_689
    del _BuildAutomaton_689
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2815, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2815, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_683 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_683
    del _BuildAutomaton_683
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2810, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2811, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2812, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2813, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2814, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2815, 24))
    counters.add(cc_5)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_684())
    sub_automata.append(_BuildAutomaton_685())
    sub_automata.append(_BuildAutomaton_686())
    sub_automata.append(_BuildAutomaton_687())
    sub_automata.append(_BuildAutomaton_688())
    sub_automata.append(_BuildAutomaton_689())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2809, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_119._Automaton = _BuildAutomaton_683()




CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), CTD_ANON_6, scope=CTD_ANON_120, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 991, 4)))

CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), CTD_ANON_9, scope=CTD_ANON_120, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1076, 4)))

CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), CTD_ANON_10, scope=CTD_ANON_120, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1090, 4)))

CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'lodgingInfo'), CTD_ANON_26, scope=CTD_ANON_120, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2835, 4)))

CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_120, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2859, 24)))

CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_120, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2860, 24)))

CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_120, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2861, 24)))

CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pin'), pyxb.binding.datatypes.string, scope=CTD_ANON_120, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2866, 24)))

def _BuildAutomaton_691 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_691
    del _BuildAutomaton_691
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2859, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2859, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_692 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_692
    del _BuildAutomaton_692
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2860, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2860, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_693 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_693
    del _BuildAutomaton_693
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2861, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2861, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_694 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_694
    del _BuildAutomaton_694
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2862, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enhancedData')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2862, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_695 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_695
    del _BuildAutomaton_695
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2863, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2863, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_696 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_696
    del _BuildAutomaton_696
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2864, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customBilling')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2864, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_697 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_697
    del _BuildAutomaton_697
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2865, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'lodgingInfo')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2865, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_698 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_698
    del _BuildAutomaton_698
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2866, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pin')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2866, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_690 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_690
    del _BuildAutomaton_690
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2859, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2860, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2861, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2862, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2863, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2864, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2865, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2866, 24))
    counters.add(cc_7)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_691())
    sub_automata.append(_BuildAutomaton_692())
    sub_automata.append(_BuildAutomaton_693())
    sub_automata.append(_BuildAutomaton_694())
    sub_automata.append(_BuildAutomaton_695())
    sub_automata.append(_BuildAutomaton_696())
    sub_automata.append(_BuildAutomaton_697())
    sub_automata.append(_BuildAutomaton_698())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2858, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_120._Automaton = _BuildAutomaton_690()




CTD_ANON_121._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_121, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2878, 24)))

CTD_ANON_121._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_121, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2879, 24)))

CTD_ANON_121._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_121, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2880, 24)))

CTD_ANON_121._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_121, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2881, 24)))

CTD_ANON_121._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_121, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2882, 24)))

CTD_ANON_121._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_121, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2883, 24)))

CTD_ANON_121._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recyclingResponse'), transactionReversalRecyclingResponseType, scope=CTD_ANON_121, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2884, 24)))

def _BuildAutomaton_700 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_700
    del _BuildAutomaton_700
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2878, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_121._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2878, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_701 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_701
    del _BuildAutomaton_701
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2879, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_121._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2879, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_702 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_702
    del _BuildAutomaton_702
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2880, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_121._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2880, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_703 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_703
    del _BuildAutomaton_703
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2881, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_121._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2881, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_704 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_704
    del _BuildAutomaton_704
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2882, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_121._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2882, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_705 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_705
    del _BuildAutomaton_705
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2883, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_121._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2883, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_706 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_706
    del _BuildAutomaton_706
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2884, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_121._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recyclingResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2884, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_699 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_699
    del _BuildAutomaton_699
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2878, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2879, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2880, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2881, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2882, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2883, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2884, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_700())
    sub_automata.append(_BuildAutomaton_701())
    sub_automata.append(_BuildAutomaton_702())
    sub_automata.append(_BuildAutomaton_703())
    sub_automata.append(_BuildAutomaton_704())
    sub_automata.append(_BuildAutomaton_705())
    sub_automata.append(_BuildAutomaton_706())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 2877, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_121._Automaton = _BuildAutomaton_699()




CTD_ANON_122._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardOrToken'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_122, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3019, 4)))

CTD_ANON_122._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), pyxb.binding.datatypes.string, scope=CTD_ANON_122, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3029, 24)))

def _BuildAutomaton_708 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_708
    del _BuildAutomaton_708
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3029, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_122._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3029, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_709 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_709
    del _BuildAutomaton_709
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3030, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_122._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardOrToken')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3030, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_707 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_707
    del _BuildAutomaton_707
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3029, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3030, 24))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_708())
    sub_automata.append(_BuildAutomaton_709())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3028, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_122._Automaton = _BuildAutomaton_707()




CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_123, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3076, 24)))

CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), pyxb.binding.datatypes.string, scope=CTD_ANON_123, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3077, 24)))

CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_123, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3078, 24)))

CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_123, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3079, 24)))

CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_123, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3080, 24)))

CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'updatedCard'), cardType, scope=CTD_ANON_123, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3081, 24)))

CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalCard'), cardType, scope=CTD_ANON_123, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3082, 24)))

CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'updatedToken'), cardTokenTypeAU, scope=CTD_ANON_123, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3083, 24)))

CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalToken'), cardTokenTypeAU, scope=CTD_ANON_123, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3084, 24)))

def _BuildAutomaton_711 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_711
    del _BuildAutomaton_711
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3076, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3076, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_712 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_712
    del _BuildAutomaton_712
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3077, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3077, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_713 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_713
    del _BuildAutomaton_713
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3078, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3078, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_714 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_714
    del _BuildAutomaton_714
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3079, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3079, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_715 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_715
    del _BuildAutomaton_715
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3080, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3080, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_716 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_716
    del _BuildAutomaton_716
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3081, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'updatedCard')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3081, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_717 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_717
    del _BuildAutomaton_717
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3082, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalCard')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3082, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_718 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_718
    del _BuildAutomaton_718
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3083, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'updatedToken')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3083, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_719 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_719
    del _BuildAutomaton_719
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3084, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalToken')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3084, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_710 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_710
    del _BuildAutomaton_710
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3076, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3077, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3078, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3079, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3080, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3081, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3082, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3083, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3084, 24))
    counters.add(cc_8)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_711())
    sub_automata.append(_BuildAutomaton_712())
    sub_automata.append(_BuildAutomaton_713())
    sub_automata.append(_BuildAutomaton_714())
    sub_automata.append(_BuildAutomaton_715())
    sub_automata.append(_BuildAutomaton_716())
    sub_automata.append(_BuildAutomaton_717())
    sub_automata.append(_BuildAutomaton_718())
    sub_automata.append(_BuildAutomaton_719())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3075, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_123._Automaton = _BuildAutomaton_710()




CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), contact, scope=CTD_ANON_124, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 77, 4)))

CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), pyxb.binding.datatypes.string, scope=CTD_ANON_124, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3116, 24)))

CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), pyxb.binding.datatypes.string, scope=CTD_ANON_124, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3117, 24)))

CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeck'), echeckType, scope=CTD_ANON_124, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3119, 24)))

CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), merchantDataType, scope=CTD_ANON_124, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3120, 24)))

def _BuildAutomaton_720 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_720
    del _BuildAutomaton_720
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3116, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3117, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3118, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3119, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3120, 24))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3116, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3117, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billToAddress')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3118, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'echeck')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3119, 24))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantData')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3120, 24))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_124._Automaton = _BuildAutomaton_720()




CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), contact, scope=CTD_ANON_125, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 77, 4)))

CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), pyxb.binding.datatypes.string, scope=CTD_ANON_125, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3132, 24)))

CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), pyxb.binding.datatypes.string, scope=CTD_ANON_125, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3133, 24)))

CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeck'), echeckType, scope=CTD_ANON_125, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3135, 24)))

CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), merchantDataType, scope=CTD_ANON_125, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3136, 24)))

def _BuildAutomaton_721 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_721
    del _BuildAutomaton_721
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3132, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3133, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3134, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3135, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3136, 24))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3132, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3133, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billToAddress')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3134, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'echeck')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3135, 24))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantData')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3136, 24))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_125._Automaton = _BuildAutomaton_721()




CTD_ANON_126._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_126, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3148, 24)))

CTD_ANON_126._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_126, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3149, 24)))

CTD_ANON_126._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_126, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3150, 24)))

CTD_ANON_126._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_126, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3151, 24)))

def _BuildAutomaton_723 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_723
    del _BuildAutomaton_723
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3148, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_126._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3148, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_724 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_724
    del _BuildAutomaton_724
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3149, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_126._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3149, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_725 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_725
    del _BuildAutomaton_725
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3150, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_126._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3150, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_726 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_726
    del _BuildAutomaton_726
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3151, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_126._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3151, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_722 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_722
    del _BuildAutomaton_722
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3148, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3149, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3150, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3151, 24))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_723())
    sub_automata.append(_BuildAutomaton_724())
    sub_automata.append(_BuildAutomaton_725())
    sub_automata.append(_BuildAutomaton_726())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3147, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_126._Automaton = _BuildAutomaton_722()




CTD_ANON_127._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_127, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3163, 24)))

CTD_ANON_127._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_127, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3164, 24)))

CTD_ANON_127._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_127, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3165, 24)))

CTD_ANON_127._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_127, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3166, 24)))

def _BuildAutomaton_728 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_728
    del _BuildAutomaton_728
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3163, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_127._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3163, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_729 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_729
    del _BuildAutomaton_729
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3164, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_127._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3164, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_730 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_730
    del _BuildAutomaton_730
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3165, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_127._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3165, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_731 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_731
    del _BuildAutomaton_731
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3166, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_127._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3166, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_727 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_727
    del _BuildAutomaton_727
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3163, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3164, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3165, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3166, 24))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_728())
    sub_automata.append(_BuildAutomaton_729())
    sub_automata.append(_BuildAutomaton_730())
    sub_automata.append(_BuildAutomaton_731())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3162, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_127._Automaton = _BuildAutomaton_727()




CTD_ANON_128._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId'), pyxb.binding.datatypes.string, scope=CTD_ANON_128, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3180, 32)))

CTD_ANON_128._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId'), pyxb.binding.datatypes.string, scope=CTD_ANON_128, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3181, 32)))

CTD_ANON_128._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorName'), pyxb.binding.datatypes.string, scope=CTD_ANON_128, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3183, 28)))

CTD_ANON_128._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_128, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3184, 28)))

CTD_ANON_128._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_128, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3185, 28)))

CTD_ANON_128._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountInfo'), echeckTypeCtx, scope=CTD_ANON_128, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3186, 28)))

def _BuildAutomaton_732 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_732
    del _BuildAutomaton_732
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3183, 28))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3184, 28))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3185, 28))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3186, 28))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_128._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3180, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_128._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3181, 32))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_128._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorName')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3183, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_128._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3184, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_128._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3185, 28))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_128._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountInfo')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3186, 28))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_128._Automaton = _BuildAutomaton_732()




CTD_ANON_129._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId'), pyxb.binding.datatypes.string, scope=CTD_ANON_129, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3201, 32)))

CTD_ANON_129._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId'), pyxb.binding.datatypes.string, scope=CTD_ANON_129, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3202, 32)))

CTD_ANON_129._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorName'), pyxb.binding.datatypes.string, scope=CTD_ANON_129, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3204, 28)))

CTD_ANON_129._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_129, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3205, 28)))

CTD_ANON_129._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_129, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3206, 28)))

CTD_ANON_129._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountInfo'), echeckTypeCtx, scope=CTD_ANON_129, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3207, 28)))

def _BuildAutomaton_733 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_733
    del _BuildAutomaton_733
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3204, 28))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3205, 28))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3206, 28))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3207, 28))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_129._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3201, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_129._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3202, 32))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_129._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorName')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3204, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_129._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3205, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_129._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3206, 28))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_129._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountInfo')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3207, 28))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_129._Automaton = _BuildAutomaton_733()




CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId'), pyxb.binding.datatypes.string, scope=CTD_ANON_130, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3222, 28)))

CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'submerchantName'), pyxb.binding.datatypes.string, scope=CTD_ANON_130, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3223, 28)))

CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_130, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3224, 28)))

CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_130, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3225, 28)))

CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountInfo'), echeckTypeCtx, scope=CTD_ANON_130, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3226, 28)))

CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customIdentifier'), pyxb.binding.datatypes.string, scope=CTD_ANON_130, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3227, 28)))

def _BuildAutomaton_734 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_734
    del _BuildAutomaton_734
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3227, 28))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3222, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'submerchantName')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3223, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3224, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3225, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountInfo')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3226, 28))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customIdentifier')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3227, 28))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_130._Automaton = _BuildAutomaton_734()




CTD_ANON_131._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId'), pyxb.binding.datatypes.string, scope=CTD_ANON_131, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3241, 28)))

CTD_ANON_131._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'submerchantName'), pyxb.binding.datatypes.string, scope=CTD_ANON_131, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3242, 28)))

CTD_ANON_131._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_131, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3243, 28)))

CTD_ANON_131._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_131, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3244, 28)))

CTD_ANON_131._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountInfo'), echeckTypeCtx, scope=CTD_ANON_131, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3245, 28)))

CTD_ANON_131._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customIdentifier'), pyxb.binding.datatypes.string, scope=CTD_ANON_131, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3246, 28)))

def _BuildAutomaton_735 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_735
    del _BuildAutomaton_735
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3246, 28))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_131._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundingSubmerchantId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3241, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_131._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'submerchantName')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3242, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_131._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3243, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_131._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3244, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_131._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountInfo')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3245, 28))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_131._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customIdentifier')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3246, 28))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_131._Automaton = _BuildAutomaton_735()




CTD_ANON_132._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId'), pyxb.binding.datatypes.string, scope=CTD_ANON_132, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3260, 28)))

CTD_ANON_132._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerName'), pyxb.binding.datatypes.string, scope=CTD_ANON_132, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3261, 28)))

CTD_ANON_132._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_132, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3262, 28)))

CTD_ANON_132._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_132, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3263, 28)))

CTD_ANON_132._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountInfo'), echeckTypeCtx, scope=CTD_ANON_132, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3264, 28)))

CTD_ANON_132._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customIdentifier'), pyxb.binding.datatypes.string, scope=CTD_ANON_132, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3265, 28)))

def _BuildAutomaton_736 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_736
    del _BuildAutomaton_736
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3265, 28))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_132._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3260, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_132._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerName')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3261, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_132._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3262, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_132._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3263, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_132._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountInfo')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3264, 28))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_132._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customIdentifier')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3265, 28))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_132._Automaton = _BuildAutomaton_736()




CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId'), pyxb.binding.datatypes.string, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3279, 28)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerName'), pyxb.binding.datatypes.string, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3280, 28)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId'), pyxb.binding.datatypes.string, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3281, 28)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3282, 28)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountInfo'), echeckTypeCtx, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3283, 28)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customIdentifier'), pyxb.binding.datatypes.string, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3284, 28)))

def _BuildAutomaton_737 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_737
    del _BuildAutomaton_737
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3284, 28))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundingCustomerId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3279, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerName')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3280, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundsTransferId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3281, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3282, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountInfo')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3283, 28))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customIdentifier')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3284, 28))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_133._Automaton = _BuildAutomaton_737()




CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), CTD_ANON_10, scope=CTD_ANON_134, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 1090, 4)))

CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_134, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3343, 24)))

def _BuildAutomaton_739 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_739
    del _BuildAutomaton_739
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3343, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3343, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_740 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_740
    del _BuildAutomaton_740
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3344, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3344, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_738 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_738
    del _BuildAutomaton_738
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3343, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3344, 24))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_739())
    sub_automata.append(_BuildAutomaton_740())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3342, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_134._Automaton = _BuildAutomaton_738()




CTD_ANON_135._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_135, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3356, 24)))

CTD_ANON_135._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_135, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3357, 24)))

CTD_ANON_135._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_135, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3358, 24)))

CTD_ANON_135._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_135, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3359, 24)))

CTD_ANON_135._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_135, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3360, 24)))

CTD_ANON_135._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_135, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3361, 24)))

CTD_ANON_135._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recyclingResponse'), voidRecyclingResponseType, scope=CTD_ANON_135, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3362, 24)))

def _BuildAutomaton_742 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_742
    del _BuildAutomaton_742
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3356, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_135._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3356, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_743 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_743
    del _BuildAutomaton_743
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3357, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_135._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3357, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_744 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_744
    del _BuildAutomaton_744
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3358, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_135._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3358, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_745 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_745
    del _BuildAutomaton_745
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3359, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_135._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3359, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_746 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_746
    del _BuildAutomaton_746
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3360, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_135._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3360, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_747 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_747
    del _BuildAutomaton_747
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3361, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_135._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3361, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_748 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_748
    del _BuildAutomaton_748
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3362, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_135._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recyclingResponse')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3362, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_741 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_741
    del _BuildAutomaton_741
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3356, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3357, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3358, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3359, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3360, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3361, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3362, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_742())
    sub_automata.append(_BuildAutomaton_743())
    sub_automata.append(_BuildAutomaton_744())
    sub_automata.append(_BuildAutomaton_745())
    sub_automata.append(_BuildAutomaton_746())
    sub_automata.append(_BuildAutomaton_747())
    sub_automata.append(_BuildAutomaton_748())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3355, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_135._Automaton = _BuildAutomaton_741()




CTD_ANON_136._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_136, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3381, 24)))

def _BuildAutomaton_749 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_749
    del _BuildAutomaton_749
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3381, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3381, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_136._Automaton = _BuildAutomaton_749()




CTD_ANON_137._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_137, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3393, 24)))

CTD_ANON_137._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_137, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3394, 24)))

CTD_ANON_137._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_137, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3395, 24)))

CTD_ANON_137._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_137, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3396, 24)))

CTD_ANON_137._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_137, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3397, 24)))

CTD_ANON_137._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_137, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3398, 24)))

def _BuildAutomaton_751 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_751
    del _BuildAutomaton_751
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3393, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_137._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3393, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_752 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_752
    del _BuildAutomaton_752
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3394, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_137._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3394, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_753 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_753
    del _BuildAutomaton_753
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3395, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_137._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3395, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_754 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_754
    del _BuildAutomaton_754
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3396, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_137._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3396, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_755 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_755
    del _BuildAutomaton_755
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3397, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_137._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3397, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_756 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_756
    del _BuildAutomaton_756
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3398, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_137._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3398, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_750 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_750
    del _BuildAutomaton_750
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3393, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3394, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3395, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3396, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3397, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3398, 24))
    counters.add(cc_5)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_751())
    sub_automata.append(_BuildAutomaton_752())
    sub_automata.append(_BuildAutomaton_753())
    sub_automata.append(_BuildAutomaton_754())
    sub_automata.append(_BuildAutomaton_755())
    sub_automata.append(_BuildAutomaton_756())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3392, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_137._Automaton = _BuildAutomaton_750()




CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3410, 24)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), giftCardCardType, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3411, 24)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalRefCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3412, 24)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3413, 24)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalTxnTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3414, 24)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalSystemTraceId'), pyxb.binding.datatypes.int, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3415, 24)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalSequenceNumber'), pyxb.binding.datatypes.string, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3416, 24)))

def _BuildAutomaton_758 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_758
    del _BuildAutomaton_758
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3410, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3410, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_759 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_759
    del _BuildAutomaton_759
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3411, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3411, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_760 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_760
    del _BuildAutomaton_760
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3412, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalRefCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3412, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_761 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_761
    del _BuildAutomaton_761
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3413, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3413, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_762 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_762
    del _BuildAutomaton_762
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3414, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalTxnTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3414, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_763 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_763
    del _BuildAutomaton_763
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3415, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalSystemTraceId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3415, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_764 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_764
    del _BuildAutomaton_764
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3416, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalSequenceNumber')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3416, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_757 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_757
    del _BuildAutomaton_757
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3410, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3411, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3412, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3413, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3414, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3415, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3416, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_758())
    sub_automata.append(_BuildAutomaton_759())
    sub_automata.append(_BuildAutomaton_760())
    sub_automata.append(_BuildAutomaton_761())
    sub_automata.append(_BuildAutomaton_762())
    sub_automata.append(_BuildAutomaton_763())
    sub_automata.append(_BuildAutomaton_764())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3409, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_138._Automaton = _BuildAutomaton_757()




CTD_ANON_139._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_139, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3428, 24)))

CTD_ANON_139._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), giftCardCardType, scope=CTD_ANON_139, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3429, 24)))

CTD_ANON_139._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalRefCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_139, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3430, 24)))

CTD_ANON_139._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_139, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3431, 24)))

CTD_ANON_139._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalTxnTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_139, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3432, 24)))

CTD_ANON_139._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalSystemTraceId'), pyxb.binding.datatypes.int, scope=CTD_ANON_139, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3433, 24)))

CTD_ANON_139._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalSequenceNumber'), pyxb.binding.datatypes.string, scope=CTD_ANON_139, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3434, 24)))

def _BuildAutomaton_766 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_766
    del _BuildAutomaton_766
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3428, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_139._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3428, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_767 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_767
    del _BuildAutomaton_767
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3429, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_139._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3429, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_768 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_768
    del _BuildAutomaton_768
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3430, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_139._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalRefCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3430, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_769 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_769
    del _BuildAutomaton_769
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3431, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_139._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3431, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_770 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_770
    del _BuildAutomaton_770
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3432, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_139._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalTxnTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3432, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_771 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_771
    del _BuildAutomaton_771
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3433, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_139._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalSystemTraceId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3433, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_772 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_772
    del _BuildAutomaton_772
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3434, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_139._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalSequenceNumber')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3434, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_765 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_765
    del _BuildAutomaton_765
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3428, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3429, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3430, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3431, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3432, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3433, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3434, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_766())
    sub_automata.append(_BuildAutomaton_767())
    sub_automata.append(_BuildAutomaton_768())
    sub_automata.append(_BuildAutomaton_769())
    sub_automata.append(_BuildAutomaton_770())
    sub_automata.append(_BuildAutomaton_771())
    sub_automata.append(_BuildAutomaton_772())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3427, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_139._Automaton = _BuildAutomaton_765()




CTD_ANON_140._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_140, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3446, 24)))

CTD_ANON_140._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), giftCardCardType, scope=CTD_ANON_140, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3447, 24)))

CTD_ANON_140._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'virtualGiftCardBin'), pyxb.binding.datatypes.string, scope=CTD_ANON_140, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3448, 24)))

CTD_ANON_140._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalRefCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_140, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3449, 24)))

CTD_ANON_140._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_140, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3450, 24)))

CTD_ANON_140._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalTxnTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_140, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3451, 24)))

CTD_ANON_140._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalSystemTraceId'), pyxb.binding.datatypes.int, scope=CTD_ANON_140, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3452, 24)))

CTD_ANON_140._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalSequenceNumber'), pyxb.binding.datatypes.string, scope=CTD_ANON_140, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3453, 24)))

def _BuildAutomaton_774 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_774
    del _BuildAutomaton_774
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3446, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_140._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3446, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_775 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_775
    del _BuildAutomaton_775
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3447, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_140._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3447, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_776 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_776
    del _BuildAutomaton_776
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3448, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_140._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'virtualGiftCardBin')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3448, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_777 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_777
    del _BuildAutomaton_777
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3449, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_140._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalRefCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3449, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_778 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_778
    del _BuildAutomaton_778
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3450, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_140._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3450, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_779 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_779
    del _BuildAutomaton_779
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3451, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_140._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalTxnTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3451, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_780 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_780
    del _BuildAutomaton_780
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3452, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_140._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalSystemTraceId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3452, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_781 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_781
    del _BuildAutomaton_781
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3453, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_140._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalSequenceNumber')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3453, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_773 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_773
    del _BuildAutomaton_773
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3446, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3447, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3448, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3449, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3450, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3451, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3452, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3453, 24))
    counters.add(cc_7)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_774())
    sub_automata.append(_BuildAutomaton_775())
    sub_automata.append(_BuildAutomaton_776())
    sub_automata.append(_BuildAutomaton_777())
    sub_automata.append(_BuildAutomaton_778())
    sub_automata.append(_BuildAutomaton_779())
    sub_automata.append(_BuildAutomaton_780())
    sub_automata.append(_BuildAutomaton_781())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3445, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_140._Automaton = _BuildAutomaton_773()




CTD_ANON_141._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_141, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3465, 24)))

CTD_ANON_141._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), giftCardCardType, scope=CTD_ANON_141, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3466, 24)))

CTD_ANON_141._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalRefCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_141, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3467, 24)))

CTD_ANON_141._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalTxnTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_141, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3468, 24)))

CTD_ANON_141._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalSystemTraceId'), pyxb.binding.datatypes.int, scope=CTD_ANON_141, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3469, 24)))

CTD_ANON_141._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalSequenceNumber'), pyxb.binding.datatypes.string, scope=CTD_ANON_141, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3470, 24)))

def _BuildAutomaton_783 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_783
    del _BuildAutomaton_783
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3465, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_141._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3465, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_784 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_784
    del _BuildAutomaton_784
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3466, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_141._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3466, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_785 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_785
    del _BuildAutomaton_785
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3467, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_141._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalRefCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3467, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_786 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_786
    del _BuildAutomaton_786
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3468, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_141._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalTxnTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3468, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_787 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_787
    del _BuildAutomaton_787
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3469, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_141._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalSystemTraceId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3469, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_788 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_788
    del _BuildAutomaton_788
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3470, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_141._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalSequenceNumber')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3470, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_782 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_782
    del _BuildAutomaton_782
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3465, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3466, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3467, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3468, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3469, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3470, 24))
    counters.add(cc_5)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_783())
    sub_automata.append(_BuildAutomaton_784())
    sub_automata.append(_BuildAutomaton_785())
    sub_automata.append(_BuildAutomaton_786())
    sub_automata.append(_BuildAutomaton_787())
    sub_automata.append(_BuildAutomaton_788())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3464, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_141._Automaton = _BuildAutomaton_782()




CTD_ANON_142._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_142, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3482, 24)))

CTD_ANON_142._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), giftCardCardType, scope=CTD_ANON_142, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3483, 24)))

CTD_ANON_142._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalRefCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_142, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3484, 24)))

CTD_ANON_142._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_142, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3485, 24)))

CTD_ANON_142._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalTxnTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_142, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3486, 24)))

CTD_ANON_142._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalSystemTraceId'), pyxb.binding.datatypes.int, scope=CTD_ANON_142, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3487, 24)))

CTD_ANON_142._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalSequenceNumber'), pyxb.binding.datatypes.string, scope=CTD_ANON_142, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3488, 24)))

def _BuildAutomaton_790 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_790
    del _BuildAutomaton_790
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3482, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_142._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3482, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_791 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_791
    del _BuildAutomaton_791
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3483, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_142._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3483, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_792 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_792
    del _BuildAutomaton_792
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3484, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_142._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalRefCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3484, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_793 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_793
    del _BuildAutomaton_793
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3485, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_142._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3485, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_794 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_794
    del _BuildAutomaton_794
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3486, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_142._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalTxnTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3486, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_795 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_795
    del _BuildAutomaton_795
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3487, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_142._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalSystemTraceId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3487, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_796 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_796
    del _BuildAutomaton_796
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3488, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_142._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalSequenceNumber')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3488, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_789 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_789
    del _BuildAutomaton_789
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3482, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3483, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3484, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3485, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3486, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3487, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3488, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_790())
    sub_automata.append(_BuildAutomaton_791())
    sub_automata.append(_BuildAutomaton_792())
    sub_automata.append(_BuildAutomaton_793())
    sub_automata.append(_BuildAutomaton_794())
    sub_automata.append(_BuildAutomaton_795())
    sub_automata.append(_BuildAutomaton_796())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3481, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_142._Automaton = _BuildAutomaton_789()




CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3500, 24)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), giftCardCardType, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3501, 24)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalRefCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3502, 24)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalAmount'), pyxb.binding.datatypes.integer, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3503, 24)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalTxnTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3504, 24)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalSystemTraceId'), pyxb.binding.datatypes.int, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3505, 24)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalSequenceNumber'), pyxb.binding.datatypes.string, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3506, 24)))

def _BuildAutomaton_798 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_798
    del _BuildAutomaton_798
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3500, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3500, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_799 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_799
    del _BuildAutomaton_799
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3501, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3501, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_800 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_800
    del _BuildAutomaton_800
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3502, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalRefCode')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3502, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_801 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_801
    del _BuildAutomaton_801
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3503, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalAmount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3503, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_802 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_802
    del _BuildAutomaton_802
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3504, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalTxnTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3504, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_803 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_803
    del _BuildAutomaton_803
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3505, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalSystemTraceId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3505, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_804 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_804
    del _BuildAutomaton_804
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3506, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalSequenceNumber')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3506, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_797 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_797
    del _BuildAutomaton_797
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3500, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3501, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3502, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3503, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3504, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3505, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3506, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_798())
    sub_automata.append(_BuildAutomaton_799())
    sub_automata.append(_BuildAutomaton_800())
    sub_automata.append(_BuildAutomaton_801())
    sub_automata.append(_BuildAutomaton_802())
    sub_automata.append(_BuildAutomaton_803())
    sub_automata.append(_BuildAutomaton_804())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3499, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_143._Automaton = _BuildAutomaton_797()




CTD_ANON_144._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'origId'), pyxb.binding.datatypes.string, scope=CTD_ANON_144, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3518, 24)))

CTD_ANON_144._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'origActionType'), pyxb.binding.datatypes.string, scope=CTD_ANON_144, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3519, 24)))

CTD_ANON_144._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'origCnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_144, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3520, 24)))

CTD_ANON_144._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'showStatusOnly'), pyxb.binding.datatypes.string, scope=CTD_ANON_144, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3521, 24)))

def _BuildAutomaton_805 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_805
    del _BuildAutomaton_805
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3518, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3519, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3520, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3521, 24))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_144._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'origId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3518, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_144._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'origActionType')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3519, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_144._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'origCnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3520, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_144._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'showStatusOnly')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3521, 24))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_144._Automaton = _BuildAutomaton_805()




CTD_ANON_145._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_145, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3533, 24)))

CTD_ANON_145._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_145, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3534, 24)))

CTD_ANON_145._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_145, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3535, 24)))

CTD_ANON_145._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_145, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3536, 24)))

CTD_ANON_145._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'matchCount'), pyxb.binding.datatypes.int, scope=CTD_ANON_145, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3537, 24)))

CTD_ANON_145._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'results_max10'), CTD_ANON_35, scope=CTD_ANON_145, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3538, 24)))

def _BuildAutomaton_807 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_807
    del _BuildAutomaton_807
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3533, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_145._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3533, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_808 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_808
    del _BuildAutomaton_808
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3534, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_145._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3534, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_809 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_809
    del _BuildAutomaton_809
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3535, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_145._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3535, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_810 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_810
    del _BuildAutomaton_810
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3536, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_145._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3536, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_811 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_811
    del _BuildAutomaton_811
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3537, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_145._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'matchCount')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3537, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_812 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_812
    del _BuildAutomaton_812
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3538, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_145._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'results_max10')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3538, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_806 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_806
    del _BuildAutomaton_806
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3533, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3534, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3535, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3536, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3537, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3538, 24))
    counters.add(cc_5)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_807())
    sub_automata.append(_BuildAutomaton_808())
    sub_automata.append(_BuildAutomaton_809())
    sub_automata.append(_BuildAutomaton_810())
    sub_automata.append(_BuildAutomaton_811())
    sub_automata.append(_BuildAutomaton_812())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3532, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_145._Automaton = _BuildAutomaton_806()




CTD_ANON_146._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_146, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3556, 24)))

CTD_ANON_146._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_146, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3557, 24)))

CTD_ANON_146._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_146, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3558, 24)))

CTD_ANON_146._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_146, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3559, 24)))

def _BuildAutomaton_814 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_814
    del _BuildAutomaton_814
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3556, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_146._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3556, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_815 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_815
    del _BuildAutomaton_815
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3557, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_146._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3557, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_816 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_816
    del _BuildAutomaton_816
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3558, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_146._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3558, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_817 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_817
    del _BuildAutomaton_817
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3559, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_146._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3559, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_813 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_813
    del _BuildAutomaton_813
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3556, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3557, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3558, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3559, 24))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_814())
    sub_automata.append(_BuildAutomaton_815())
    sub_automata.append(_BuildAutomaton_816())
    sub_automata.append(_BuildAutomaton_817())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3555, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_146._Automaton = _BuildAutomaton_813()




CTD_ANON_147._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'serviceId'), pyxb.binding.datatypes.long, scope=CTD_ANON_147, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3571, 24)))

CTD_ANON_147._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pathId'), pyxb.binding.datatypes.long, scope=CTD_ANON_147, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3572, 24)))

def _BuildAutomaton_819 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_819
    del _BuildAutomaton_819
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3571, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_147._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'serviceId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3571, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_820 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_820
    del _BuildAutomaton_820
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3572, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_147._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pathId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3572, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_818 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_818
    del _BuildAutomaton_818
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3571, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3572, 24))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_819())
    sub_automata.append(_BuildAutomaton_820())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3570, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_147._Automaton = _BuildAutomaton_818()




CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId'), pyxb.binding.datatypes.long, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3584, 24)))

CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), pyxb.binding.datatypes.string, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3585, 24)))

CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3586, 24)))

CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3587, 24)))

CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'location'), pyxb.binding.datatypes.string, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3588, 24)))

def _BuildAutomaton_822 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_822
    del _BuildAutomaton_822
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3584, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cnpTxnId')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3584, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_823 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_823
    del _BuildAutomaton_823
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3585, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3585, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_824 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_824
    del _BuildAutomaton_824
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3586, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3586, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_825 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_825
    del _BuildAutomaton_825
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3587, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3587, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_826 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_826
    del _BuildAutomaton_826
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3588, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'location')), pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3588, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_821 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_821
    del _BuildAutomaton_821
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3584, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3585, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3586, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3587, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3588, 24))
    counters.add(cc_4)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_822())
    sub_automata.append(_BuildAutomaton_823())
    sub_automata.append(_BuildAutomaton_824())
    sub_automata.append(_BuildAutomaton_825())
    sub_automata.append(_BuildAutomaton_826())
    final_update = set()
    symbol = pyxb.utils.utility.Location('SchemaCombined_v12.17.xsd', 3583, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_148._Automaton = _BuildAutomaton_821()


card._setSubstitutionGroup(cardOrToken)

token._setSubstitutionGroup(cardOrToken)

cancelSubscription._setSubstitutionGroup(recurringTransaction)

updateSubscription._setSubstitutionGroup(recurringTransaction)

createPlan._setSubstitutionGroup(recurringTransaction)

updatePlan._setSubstitutionGroup(recurringTransaction)

cancelSubscriptionResponse._setSubstitutionGroup(recurringTransactionResponse)

updateSubscriptionResponse._setSubstitutionGroup(recurringTransactionResponse)

createPlanResponse._setSubstitutionGroup(recurringTransactionResponse)

updatePlanResponse._setSubstitutionGroup(recurringTransactionResponse)

authorization._setSubstitutionGroup(transaction)

authReversal._setSubstitutionGroup(transaction)

giftCardAuthReversal._setSubstitutionGroup(transaction)

capture._setSubstitutionGroup(transaction)

giftCardCapture._setSubstitutionGroup(transaction)

forceCapture._setSubstitutionGroup(transaction)

captureGivenAuth._setSubstitutionGroup(transaction)

sale._setSubstitutionGroup(transaction)

credit._setSubstitutionGroup(transaction)

giftCardCredit._setSubstitutionGroup(transaction)

activate._setSubstitutionGroup(transaction)

deactivate._setSubstitutionGroup(transaction)

load._setSubstitutionGroup(transaction)

unload._setSubstitutionGroup(transaction)

balanceInquiry._setSubstitutionGroup(transaction)

registerTokenRequest._setSubstitutionGroup(transaction)

registerTokenResponse._setSubstitutionGroup(transactionResponse)

authorizationResponse._setSubstitutionGroup(transactionResponse)

authReversalResponse._setSubstitutionGroup(transactionResponse)

giftCardAuthReversalResponse._setSubstitutionGroup(transactionResponse)

depositReversalResponse._setSubstitutionGroup(transactionResponse)

refundReversalResponse._setSubstitutionGroup(transactionResponse)

activateReversalResponse._setSubstitutionGroup(transactionResponse)

deactivateReversalResponse._setSubstitutionGroup(transactionResponse)

loadReversalResponse._setSubstitutionGroup(transactionResponse)

unloadReversalResponse._setSubstitutionGroup(transactionResponse)

captureResponse._setSubstitutionGroup(transactionResponse)

giftCardCaptureResponse._setSubstitutionGroup(transactionResponse)

forceCaptureResponse._setSubstitutionGroup(transactionResponse)

captureGivenAuthResponse._setSubstitutionGroup(transactionResponse)

saleResponse._setSubstitutionGroup(transactionResponse)

creditResponse._setSubstitutionGroup(transactionResponse)

giftCardCreditResponse._setSubstitutionGroup(transactionResponse)

activateResponse._setSubstitutionGroup(transactionResponse)

loadResponse._setSubstitutionGroup(transactionResponse)

unloadResponse._setSubstitutionGroup(transactionResponse)

balanceInquiryResponse._setSubstitutionGroup(transactionResponse)

deactivateResponse._setSubstitutionGroup(transactionResponse)

echeckSale._setSubstitutionGroup(transaction)

echeckCredit._setSubstitutionGroup(transaction)

echeckVerification._setSubstitutionGroup(transaction)

echeckSalesResponse._setSubstitutionGroup(transactionResponse)

echeckCreditResponse._setSubstitutionGroup(transactionResponse)

echeckVerificationResponse._setSubstitutionGroup(transactionResponse)

echeckRedeposit._setSubstitutionGroup(transaction)

echeckRedepositResponse._setSubstitutionGroup(transactionResponse)

updateCardValidationNumOnToken._setSubstitutionGroup(transaction)

updateCardValidationNumOnTokenResponse._setSubstitutionGroup(transactionResponse)

fraudCheck._setSubstitutionGroup(transaction)

fraudCheckResponse._setSubstitutionGroup(transactionResponse)

submerchantCreditResponse._setSubstitutionGroup(transactionResponse)

submerchantDebitResponse._setSubstitutionGroup(transactionResponse)

payFacDebit._setSubstitutionGroup(transaction)

payFacCredit._setSubstitutionGroup(transaction)

payFacCreditResponse._setSubstitutionGroup(transactionResponse)

payFacDebitResponse._setSubstitutionGroup(transactionResponse)

reserveCredit._setSubstitutionGroup(transaction)

reserveDebit._setSubstitutionGroup(transaction)

reserveCreditResponse._setSubstitutionGroup(transactionResponse)

reserveDebitResponse._setSubstitutionGroup(transactionResponse)

physicalCheckCredit._setSubstitutionGroup(transaction)

physicalCheckCreditResponse._setSubstitutionGroup(transactionResponse)

physicalCheckDebit._setSubstitutionGroup(transaction)

physicalCheckDebitResponse._setSubstitutionGroup(transactionResponse)

vendorDebitResponse._setSubstitutionGroup(transactionResponse)

vendorCreditResponse._setSubstitutionGroup(transactionResponse)

fundingInstructionVoid._setSubstitutionGroup(transaction)

fundingInstructionVoidResponse._setSubstitutionGroup(transactionResponse)

fastAccessFunding._setSubstitutionGroup(transaction)

fastAccessFundingResponse._setSubstitutionGroup(transactionResponse)

customerCreditResponse._setSubstitutionGroup(transactionResponse)

customerDebitResponse._setSubstitutionGroup(transactionResponse)

payoutOrgDebit._setSubstitutionGroup(transaction)

payoutOrgCredit._setSubstitutionGroup(transaction)

payoutOrgCreditResponse._setSubstitutionGroup(transactionResponse)

payoutOrgDebitResponse._setSubstitutionGroup(transactionResponse)

translateToLowValueTokenRequest._setSubstitutionGroup(transaction)

translateToLowValueTokenResponse._setSubstitutionGroup(transactionResponse)

transactionReversal._setSubstitutionGroup(transaction)

transactionReversalResponse._setSubstitutionGroup(transactionResponse)

accountUpdate._setSubstitutionGroup(transaction)

accountUpdateResponse._setSubstitutionGroup(transactionResponse)

echeckPreNoteSale._setSubstitutionGroup(transaction)

echeckPreNoteCredit._setSubstitutionGroup(transaction)

echeckPreNoteSaleResponse._setSubstitutionGroup(transactionResponse)

echeckPreNoteCreditResponse._setSubstitutionGroup(transactionResponse)

vendorCredit._setSubstitutionGroup(transaction)

vendorDebit._setSubstitutionGroup(transaction)

submerchantCredit._setSubstitutionGroup(transaction)

submerchantDebit._setSubstitutionGroup(transaction)

customerCredit._setSubstitutionGroup(transaction)

customerDebit._setSubstitutionGroup(transaction)

void._setSubstitutionGroup(transaction)

voidResponse._setSubstitutionGroup(transactionResponse)

echeckVoid._setSubstitutionGroup(transaction)

echeckVoidResponse._setSubstitutionGroup(transactionResponse)

depositReversal._setSubstitutionGroup(transaction)

refundReversal._setSubstitutionGroup(transaction)

activateReversal._setSubstitutionGroup(transaction)

deactivateReversal._setSubstitutionGroup(transaction)

loadReversal._setSubstitutionGroup(transaction)

unloadReversal._setSubstitutionGroup(transaction)

queryTransaction._setSubstitutionGroup(transaction)

queryTransactionResponse._setSubstitutionGroup(transactionResponse)

queryTransactionUnavailableResponse._setSubstitutionGroup(transactionResponse)

serviceStatusRequest._setSubstitutionGroup(transaction)

serviceStatusResponse._setSubstitutionGroup(transactionResponse)
