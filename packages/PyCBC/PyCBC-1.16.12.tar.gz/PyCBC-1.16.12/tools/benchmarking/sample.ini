# Version to run
pycbc-version=537b84f199cf0d8051cee8e0f0ffeb324182898f

# base pycbc arguments
cluster-method=window
cluster-window=1
approximant=SPAtmplt
snr-threshold=5.5
strain-high-pass=25.0
chisq-bins=16
psd-inverse-length=16
psd-segment-stride=128
psd-segment-length=256
psd-estimation=median
segment-length=256
segment-start-pad=112
segment-end-pad=16
low-frequency-cutoff=30.0
pad-data=8
sample-rate=4096
order=7
channel-name=H1:LDAS-STRAIN
template-bank=TMPLTBANK.xml.gz

# Not passed directly to pycbc_inspiral, but needed
# to compute the end time
num-segments=15

# You can also pass arbitrary additional arguments to pycbc
# by prefixing the name with pycbc:  For example
#
# pycbc:gpu-callback-method=fused_correlate
#
# appends
#  --gpu-callback-method fused_correlate
# to the command line


# schemes to run (not meant to be a realistic example!)
#  a 4-thread MKL instance on CPUs 0-3
#  a CUDA instance on device 0, CPU 4
#  another CUDA instance on device 0, CPU 5
#  a CUDA instance on device 1, CPU 6
processing-schemes=mkl:4|0-3 cuda:0|4 cuda:0|5 cuda:1|6

# You can also use the special schemes:
#
# processing-schemes=one_per_core mkl
# processing-schemes=one_per_socket mkl
#
# to fill the machine with single-thread or N-thread 
# (where N is the number of cores per socket) jobs.
# mkl can be replaced by cpu for fftw runs

# Unique tag for this test
tag=sample

# If desired you can run tests multiple times
iterations=2

