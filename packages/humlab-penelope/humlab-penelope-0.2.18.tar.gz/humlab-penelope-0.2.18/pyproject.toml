[tool.poetry]
name = "humlab-penelope"
version = "0.2.18"
description = "Utilities that simplify enelpeing in Jupyter Lab"
authors = ["Roger MÃ¤hler <roger.mahler@hotmail.com>"]
packages = [
    { include = "penelope" }
]
classifiers = [
    'Intended Audience :: eNeLPers',
    'License :: OSI Approved :: Apache Software License',
    'Operating System :: OS Independent',
    'Topic :: Software Development',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.8',
]
license = "Apache-2.0"
readme = "README.md"
homepage = "https://github.com/humlab/penelope"
repository = "https://github.com/humlab/penelope"

[tool.poetry.dependencies]
python = "==3.*,>=3.8.0"
gensim = "^3.8.3"
numpy = "^1.19.2"
pandas = "^1.1.2"
bokeh = "^2.2.1"
sklearn = "^0.0"
lxml = "^4.5.2"
ipywidgets = "^7.5.1"
memoization = "^0.3.1"
spacy = "^2.3.2"
ftfy = "^5.8"
nltk = "^3.5"
wordcloud = "^1.8.0"
scipy = "^1.5.2"
requests = "^2.24.0"
smart_open = "^2.2.1"
statsmodels = "^0.12.0"
glove-python-binary = { version = "^0.2.0", markers = "sys_platform != 'darwin'"}
textacy = "^0.10.1"
pydotplus = "^2.0.2"
python-louvain = "^0.14"
more_itertools = "^8.5.0"
alive-progress = "^1.6.1"
click = "^7.1.2"
taskipy = "^1.4.0"
coverage = "^5.3"

[tool.poetry.dev-dependencies]
pytest = "==6.*,>=6.1.0"
rope = "==0.*,>=0.17.0"
pylint = "==2.*,>=2.6.0"
yapf = "==0.*,>=0.30.0"
black = "==20.*,>=20.8.0.b1"
isort = "==5.*,>=5.5.4"
flake8 = "==3.*,>=3.8.4"
mypy = "==0.*,>=0.782.0"

[tool.poetry.scripts]
vectorize_corpus = "penelope.scripts.vectorize_corpus:main"
compute_topic_model = "penelope.scripts.compute_topic_model:main"
concept_cooccurrence = "penelope.scripts.concept_co_occurrence:main"

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"


[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "-q",
    "-s",
]
log_cli = "False"
testpaths = [
    "tests",
]
python_files = "*_test.py"
python_functions = "test_*"
filterwarnings = [
#   "ignore",
  "ignore::_pytest.warning_types.PytestCollectionWarning"
]

[tool.dephell.main]
from = {format = "poetry", path = "pyproject.toml"}
to = {format = "poetry", path = "pyproject.toml"}

[tool.black]
line-length = 120
target-version = ["py38"]
skip-string-normalization = true
# include = '\.pyi?$'
exclude = '''
(
  \.git
  | \.pypy_cache
  | \.pytest_cache
  | deprecated
)
'''

[tool.isort]
# https://github.com/timothycrosley/isort/wiki/isort-Settings
profile = "black"
line_length = 120
py_version = "auto"
float_to_top = true
src_paths = [ "penelope", "tests" ]

# [tool.taskipy.tasks]
# pytest = "pytest --junitxml=test-results/junit.xml"
# bandit = "bandit -c .bandit.yml -r penelope/"
# black = "black penelope"
# black_ci = "black -check penelope"
# flake8 = "flake8 penelope/ tests/"
# generate_requirements = "poetry export -f requirements.txt -o requirements.txt"
# pre_safety = "task generate_requirements"
# safety = "safety check  -r requirements.txt"
# isort = "isort -rc penelope"
# isort_ci = "isort -rc -c penelope"
# full = "task pytest && task black && task flake8 && task safety && task bandit && task isort"
# ci = "task pytest && task black_ci && task flake8 && task safety && task bandit && task isort_ci"

[tool.coverage]
# https://github.com/nedbat/coveragepy

    [tool.coverage.run]
    source = ["penelope"]
    branch = true
    omit = ['']

    [tool.coverage.report]
    exclude_lines = [
        "pragma: no cover",
        "raise NotImplementedError"
    ]
