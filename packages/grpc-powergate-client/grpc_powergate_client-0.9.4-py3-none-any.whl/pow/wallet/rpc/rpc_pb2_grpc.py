# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from wallet.rpc import rpc_pb2 as wallet_dot_rpc_dot_rpc__pb2


class RPCServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NewAddress = channel.unary_unary(
                '/wallet.rpc.RPCService/NewAddress',
                request_serializer=wallet_dot_rpc_dot_rpc__pb2.NewAddressRequest.SerializeToString,
                response_deserializer=wallet_dot_rpc_dot_rpc__pb2.NewAddressResponse.FromString,
                )
        self.List = channel.unary_unary(
                '/wallet.rpc.RPCService/List',
                request_serializer=wallet_dot_rpc_dot_rpc__pb2.ListRequest.SerializeToString,
                response_deserializer=wallet_dot_rpc_dot_rpc__pb2.ListResponse.FromString,
                )
        self.Balance = channel.unary_unary(
                '/wallet.rpc.RPCService/Balance',
                request_serializer=wallet_dot_rpc_dot_rpc__pb2.BalanceRequest.SerializeToString,
                response_deserializer=wallet_dot_rpc_dot_rpc__pb2.BalanceResponse.FromString,
                )


class RPCServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def NewAddress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Balance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RPCServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NewAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.NewAddress,
                    request_deserializer=wallet_dot_rpc_dot_rpc__pb2.NewAddressRequest.FromString,
                    response_serializer=wallet_dot_rpc_dot_rpc__pb2.NewAddressResponse.SerializeToString,
            ),
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=wallet_dot_rpc_dot_rpc__pb2.ListRequest.FromString,
                    response_serializer=wallet_dot_rpc_dot_rpc__pb2.ListResponse.SerializeToString,
            ),
            'Balance': grpc.unary_unary_rpc_method_handler(
                    servicer.Balance,
                    request_deserializer=wallet_dot_rpc_dot_rpc__pb2.BalanceRequest.FromString,
                    response_serializer=wallet_dot_rpc_dot_rpc__pb2.BalanceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'wallet.rpc.RPCService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RPCService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def NewAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wallet.rpc.RPCService/NewAddress',
            wallet_dot_rpc_dot_rpc__pb2.NewAddressRequest.SerializeToString,
            wallet_dot_rpc_dot_rpc__pb2.NewAddressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wallet.rpc.RPCService/List',
            wallet_dot_rpc_dot_rpc__pb2.ListRequest.SerializeToString,
            wallet_dot_rpc_dot_rpc__pb2.ListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Balance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wallet.rpc.RPCService/Balance',
            wallet_dot_rpc_dot_rpc__pb2.BalanceRequest.SerializeToString,
            wallet_dot_rpc_dot_rpc__pb2.BalanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
