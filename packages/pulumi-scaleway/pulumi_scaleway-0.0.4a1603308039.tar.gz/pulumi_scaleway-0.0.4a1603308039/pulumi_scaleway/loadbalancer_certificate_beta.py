# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['LoadbalancerCertificateBeta']


class LoadbalancerCertificateBeta(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_certificate: Optional[pulumi.Input[pulumi.InputType['LoadbalancerCertificateBetaCustomCertificateArgs']]] = None,
                 lb_id: Optional[pulumi.Input[str]] = None,
                 letsencrypt: Optional[pulumi.Input[pulumi.InputType['LoadbalancerCertificateBetaLetsencryptArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a LoadbalancerCertificateBeta resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['LoadbalancerCertificateBetaCustomCertificateArgs']] custom_certificate: Configuration block for custom certificate chain. Only one of `letsencrypt` and `custom_certificate` should be specified.
        :param pulumi.Input[str] lb_id: The load-balancer ID this certificate is attached to.
        :param pulumi.Input[pulumi.InputType['LoadbalancerCertificateBetaLetsencryptArgs']] letsencrypt: Configuration block for Let's Encrypt configuration. Only one of `letsencrypt` and `custom_certificate` should be specified.
        :param pulumi.Input[str] name: The name of the certificate backend.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['custom_certificate'] = custom_certificate
            if lb_id is None:
                raise TypeError("Missing required property 'lb_id'")
            __props__['lb_id'] = lb_id
            __props__['letsencrypt'] = letsencrypt
            __props__['name'] = name
            __props__['common_name'] = None
            __props__['fingerprint'] = None
            __props__['not_valid_after'] = None
            __props__['not_valid_before'] = None
            __props__['status'] = None
            __props__['subject_alternative_name'] = None
        super(LoadbalancerCertificateBeta, __self__).__init__(
            'scaleway:index/loadbalancerCertificateBeta:LoadbalancerCertificateBeta',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            common_name: Optional[pulumi.Input[str]] = None,
            custom_certificate: Optional[pulumi.Input[pulumi.InputType['LoadbalancerCertificateBetaCustomCertificateArgs']]] = None,
            fingerprint: Optional[pulumi.Input[str]] = None,
            lb_id: Optional[pulumi.Input[str]] = None,
            letsencrypt: Optional[pulumi.Input[pulumi.InputType['LoadbalancerCertificateBetaLetsencryptArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            not_valid_after: Optional[pulumi.Input[str]] = None,
            not_valid_before: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            subject_alternative_name: Optional[pulumi.Input[str]] = None) -> 'LoadbalancerCertificateBeta':
        """
        Get an existing LoadbalancerCertificateBeta resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] common_name: Main domain of the certificate.
        :param pulumi.Input[pulumi.InputType['LoadbalancerCertificateBetaCustomCertificateArgs']] custom_certificate: Configuration block for custom certificate chain. Only one of `letsencrypt` and `custom_certificate` should be specified.
        :param pulumi.Input[str] fingerprint: The identifier (SHA-1) of the certificate
        :param pulumi.Input[str] lb_id: The load-balancer ID this certificate is attached to.
        :param pulumi.Input[pulumi.InputType['LoadbalancerCertificateBetaLetsencryptArgs']] letsencrypt: Configuration block for Let's Encrypt configuration. Only one of `letsencrypt` and `custom_certificate` should be specified.
        :param pulumi.Input[str] name: The name of the certificate backend.
        :param pulumi.Input[str] not_valid_after: The not valid after validity bound timestamp
        :param pulumi.Input[str] not_valid_before: The not valid before validity bound timestamp
        :param pulumi.Input[str] status: Certificate status
        :param pulumi.Input[str] subject_alternative_name: Array of alternative domain names.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["common_name"] = common_name
        __props__["custom_certificate"] = custom_certificate
        __props__["fingerprint"] = fingerprint
        __props__["lb_id"] = lb_id
        __props__["letsencrypt"] = letsencrypt
        __props__["name"] = name
        __props__["not_valid_after"] = not_valid_after
        __props__["not_valid_before"] = not_valid_before
        __props__["status"] = status
        __props__["subject_alternative_name"] = subject_alternative_name
        return LoadbalancerCertificateBeta(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> pulumi.Output[str]:
        """
        Main domain of the certificate.
        """
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter(name="customCertificate")
    def custom_certificate(self) -> pulumi.Output[Optional['outputs.LoadbalancerCertificateBetaCustomCertificate']]:
        """
        Configuration block for custom certificate chain. Only one of `letsencrypt` and `custom_certificate` should be specified.
        """
        return pulumi.get(self, "custom_certificate")

    @property
    @pulumi.getter
    def fingerprint(self) -> pulumi.Output[str]:
        """
        The identifier (SHA-1) of the certificate
        """
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter(name="lbId")
    def lb_id(self) -> pulumi.Output[str]:
        """
        The load-balancer ID this certificate is attached to.
        """
        return pulumi.get(self, "lb_id")

    @property
    @pulumi.getter
    def letsencrypt(self) -> pulumi.Output[Optional['outputs.LoadbalancerCertificateBetaLetsencrypt']]:
        """
        Configuration block for Let's Encrypt configuration. Only one of `letsencrypt` and `custom_certificate` should be specified.
        """
        return pulumi.get(self, "letsencrypt")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the certificate backend.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notValidAfter")
    def not_valid_after(self) -> pulumi.Output[str]:
        """
        The not valid after validity bound timestamp
        """
        return pulumi.get(self, "not_valid_after")

    @property
    @pulumi.getter(name="notValidBefore")
    def not_valid_before(self) -> pulumi.Output[str]:
        """
        The not valid before validity bound timestamp
        """
        return pulumi.get(self, "not_valid_before")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Certificate status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subjectAlternativeName")
    def subject_alternative_name(self) -> pulumi.Output[str]:
        """
        Array of alternative domain names.
        """
        return pulumi.get(self, "subject_alternative_name")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

