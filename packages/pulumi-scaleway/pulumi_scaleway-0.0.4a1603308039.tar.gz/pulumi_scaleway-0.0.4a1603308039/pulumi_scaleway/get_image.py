# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = [
    'GetImageResult',
    'AwaitableGetImageResult',
    'get_image',
]

@pulumi.output_type
class GetImageResult:
    """
    A collection of values returned by getImage.
    """
    def __init__(__self__, architecture=None, creation_date=None, id=None, most_recent=None, name=None, name_filter=None, organization=None, public=None):
        if architecture and not isinstance(architecture, str):
            raise TypeError("Expected argument 'architecture' to be a str")
        pulumi.set(__self__, "architecture", architecture)
        if creation_date and not isinstance(creation_date, str):
            raise TypeError("Expected argument 'creation_date' to be a str")
        pulumi.set(__self__, "creation_date", creation_date)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if most_recent and not isinstance(most_recent, bool):
            raise TypeError("Expected argument 'most_recent' to be a bool")
        pulumi.set(__self__, "most_recent", most_recent)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if name_filter and not isinstance(name_filter, str):
            raise TypeError("Expected argument 'name_filter' to be a str")
        pulumi.set(__self__, "name_filter", name_filter)
        if organization and not isinstance(organization, str):
            raise TypeError("Expected argument 'organization' to be a str")
        pulumi.set(__self__, "organization", organization)
        if public and not isinstance(public, bool):
            raise TypeError("Expected argument 'public' to be a bool")
        pulumi.set(__self__, "public", public)

    @property
    @pulumi.getter
    def architecture(self) -> str:
        """
        architecture of the Image, e.g. `arm` or `x86_64`
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> str:
        """
        date when image was created
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="mostRecent")
    def most_recent(self) -> Optional[bool]:
        return pulumi.get(self, "most_recent")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameFilter")
    def name_filter(self) -> Optional[str]:
        return pulumi.get(self, "name_filter")

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        uuid of the organization owning this Image
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def public(self) -> bool:
        """
        is this a public image
        """
        return pulumi.get(self, "public")


class AwaitableGetImageResult(GetImageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetImageResult(
            architecture=self.architecture,
            creation_date=self.creation_date,
            id=self.id,
            most_recent=self.most_recent,
            name=self.name,
            name_filter=self.name_filter,
            organization=self.organization,
            public=self.public)


def get_image(architecture: Optional[str] = None,
              most_recent: Optional[bool] = None,
              name: Optional[str] = None,
              name_filter: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetImageResult:
    """
    **DEPRECATED**: This resource is deprecated and will be removed in `v2.0+`.
    Please use `getInstanceImage` instead or `getMarketplaceImageBeta` depending on your usage.

    Use this data source to get the ID of a registered Image for use with the
    `Server` resource.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_scaleway as scaleway

    ubuntu = scaleway.get_image(architecture="arm",
        name="Ubuntu Precise")
    base = scaleway.Server("base",
        image=ubuntu.id,
        type="C1")
    ```


    :param str architecture: any supported Scaleway architecture, e.g. `x86_64`, `arm`
    :param bool most_recent: Return most recent image if multiple exist. Can not be used together with name_filter.
    :param str name: Exact name of desired Image
    :param str name_filter: Regexp to match Image name by
    """
    __args__ = dict()
    __args__['architecture'] = architecture
    __args__['mostRecent'] = most_recent
    __args__['name'] = name
    __args__['nameFilter'] = name_filter
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('scaleway:index/getImage:getImage', __args__, opts=opts, typ=GetImageResult).value

    return AwaitableGetImageResult(
        architecture=__ret__.architecture,
        creation_date=__ret__.creation_date,
        id=__ret__.id,
        most_recent=__ret__.most_recent,
        name=__ret__.name,
        name_filter=__ret__.name_filter,
        organization=__ret__.organization,
        public=__ret__.public)
