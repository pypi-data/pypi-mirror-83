# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = [
    'GetBootscriptResult',
    'AwaitableGetBootscriptResult',
    'get_bootscript',
]

@pulumi.output_type
class GetBootscriptResult:
    """
    A collection of values returned by getBootscript.
    """
    def __init__(__self__, architecture=None, boot_cmd_args=None, dtb=None, id=None, initrd=None, kernel=None, name=None, name_filter=None, organization=None, public=None):
        if architecture and not isinstance(architecture, str):
            raise TypeError("Expected argument 'architecture' to be a str")
        pulumi.set(__self__, "architecture", architecture)
        if boot_cmd_args and not isinstance(boot_cmd_args, str):
            raise TypeError("Expected argument 'boot_cmd_args' to be a str")
        pulumi.set(__self__, "boot_cmd_args", boot_cmd_args)
        if dtb and not isinstance(dtb, str):
            raise TypeError("Expected argument 'dtb' to be a str")
        pulumi.set(__self__, "dtb", dtb)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if initrd and not isinstance(initrd, str):
            raise TypeError("Expected argument 'initrd' to be a str")
        pulumi.set(__self__, "initrd", initrd)
        if kernel and not isinstance(kernel, str):
            raise TypeError("Expected argument 'kernel' to be a str")
        pulumi.set(__self__, "kernel", kernel)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if name_filter and not isinstance(name_filter, str):
            raise TypeError("Expected argument 'name_filter' to be a str")
        pulumi.set(__self__, "name_filter", name_filter)
        if organization and not isinstance(organization, str):
            raise TypeError("Expected argument 'organization' to be a str")
        pulumi.set(__self__, "organization", organization)
        if public and not isinstance(public, bool):
            raise TypeError("Expected argument 'public' to be a bool")
        pulumi.set(__self__, "public", public)

    @property
    @pulumi.getter
    def architecture(self) -> str:
        """
        architecture of the Bootscript, e.g. `arm` or `x86_64`
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="bootCmdArgs")
    def boot_cmd_args(self) -> str:
        """
        command line arguments used for booting
        """
        return pulumi.get(self, "boot_cmd_args")

    @property
    @pulumi.getter
    def dtb(self) -> str:
        """
        path to Device Tree Blob detailing hardware information
        """
        return pulumi.get(self, "dtb")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def initrd(self) -> str:
        """
        URL to initial ramdisk content
        """
        return pulumi.get(self, "initrd")

    @property
    @pulumi.getter
    def kernel(self) -> str:
        """
        URL to used kernel
        """
        return pulumi.get(self, "kernel")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameFilter")
    def name_filter(self) -> Optional[str]:
        return pulumi.get(self, "name_filter")

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        uuid of the organization owning this Bootscript
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def public(self) -> bool:
        """
        is this a public bootscript
        """
        return pulumi.get(self, "public")


class AwaitableGetBootscriptResult(GetBootscriptResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBootscriptResult(
            architecture=self.architecture,
            boot_cmd_args=self.boot_cmd_args,
            dtb=self.dtb,
            id=self.id,
            initrd=self.initrd,
            kernel=self.kernel,
            name=self.name,
            name_filter=self.name_filter,
            organization=self.organization,
            public=self.public)


def get_bootscript(architecture: Optional[str] = None,
                   name: Optional[str] = None,
                   name_filter: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBootscriptResult:
    """
    **DEPRECATED**: This resource is deprecated and will be removed in `v2.0+`.

    Use this data source to get the ID of a registered Bootscript for use with the
    `Server` resource.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_scaleway as scaleway

    debug = scaleway.get_bootscript(architecture="arm",
        name_filter="Rescue")
    ```


    :param str architecture: any supported Scaleway architecture, e.g. `x86_64`, `arm`
    :param str name: Exact name of desired Bootscript
    :param str name_filter: Regexp to match Bootscript name by
    """
    __args__ = dict()
    __args__['architecture'] = architecture
    __args__['name'] = name
    __args__['nameFilter'] = name_filter
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('scaleway:index/getBootscript:getBootscript', __args__, opts=opts, typ=GetBootscriptResult).value

    return AwaitableGetBootscriptResult(
        architecture=__ret__.architecture,
        boot_cmd_args=__ret__.boot_cmd_args,
        dtb=__ret__.dtb,
        id=__ret__.id,
        initrd=__ret__.initrd,
        kernel=__ret__.kernel,
        name=__ret__.name,
        name_filter=__ret__.name_filter,
        organization=__ret__.organization,
        public=__ret__.public)
