# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['SecurityGroupRule']


class SecurityGroupRule(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 ip_range: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 security_group: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        **DEPRECATED**: This resource is deprecated and will be removed in `v2.0+`.
        Please use `scaleway_instance_security_group_rule` instead.

        Provides security group rules. This allows security group rules to be created, updated and deleted.
        For additional details please refer to [API documentation](https://developer.scaleway.com/#security-groups-manage-rules).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_scaleway as scaleway

        test = scaleway.SecurityGroup("test", description="test")
        smtp_drop1 = scaleway.SecurityGroupRule("smtpDrop1",
            security_group=test.id,
            action="accept",
            direction="inbound",
            ip_range="0.0.0.0/0",
            protocol="TCP",
            port=25)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: action of rule (`accept`, `drop`)
        :param pulumi.Input[str] direction: direction of rule (`inbound`, `outbound`)
        :param pulumi.Input[str] ip_range: ip_range of rule
        :param pulumi.Input[int] port: port of the rule
        :param pulumi.Input[str] protocol: protocol of rule (`ICMP`, `TCP`, `UDP`)
        :param pulumi.Input[str] security_group: the security group which should be associated with this rule
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if action is None:
                raise TypeError("Missing required property 'action'")
            __props__['action'] = action
            if direction is None:
                raise TypeError("Missing required property 'direction'")
            __props__['direction'] = direction
            if ip_range is None:
                raise TypeError("Missing required property 'ip_range'")
            __props__['ip_range'] = ip_range
            __props__['port'] = port
            if protocol is None:
                raise TypeError("Missing required property 'protocol'")
            __props__['protocol'] = protocol
            if security_group is None:
                raise TypeError("Missing required property 'security_group'")
            __props__['security_group'] = security_group
        super(SecurityGroupRule, __self__).__init__(
            'scaleway:index/securityGroupRule:SecurityGroupRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[str]] = None,
            direction: Optional[pulumi.Input[str]] = None,
            ip_range: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            security_group: Optional[pulumi.Input[str]] = None) -> 'SecurityGroupRule':
        """
        Get an existing SecurityGroupRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: action of rule (`accept`, `drop`)
        :param pulumi.Input[str] direction: direction of rule (`inbound`, `outbound`)
        :param pulumi.Input[str] ip_range: ip_range of rule
        :param pulumi.Input[int] port: port of the rule
        :param pulumi.Input[str] protocol: protocol of rule (`ICMP`, `TCP`, `UDP`)
        :param pulumi.Input[str] security_group: the security group which should be associated with this rule
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["action"] = action
        __props__["direction"] = direction
        __props__["ip_range"] = ip_range
        __props__["port"] = port
        __props__["protocol"] = protocol
        __props__["security_group"] = security_group
        return SecurityGroupRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[str]:
        """
        action of rule (`accept`, `drop`)
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Output[str]:
        """
        direction of rule (`inbound`, `outbound`)
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> pulumi.Output[str]:
        """
        ip_range of rule
        """
        return pulumi.get(self, "ip_range")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[int]]:
        """
        port of the rule
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        protocol of rule (`ICMP`, `TCP`, `UDP`)
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="securityGroup")
    def security_group(self) -> pulumi.Output[str]:
        """
        the security group which should be associated with this rule
        """
        return pulumi.get(self, "security_group")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

