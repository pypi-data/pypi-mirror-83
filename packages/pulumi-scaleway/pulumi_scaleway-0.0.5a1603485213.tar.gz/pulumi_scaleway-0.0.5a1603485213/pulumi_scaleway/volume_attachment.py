# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['VolumeAttachment']


class VolumeAttachment(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 volume: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        **DEPRECATED**: This resource is deprecated and will be removed in `v2.0+`.
        Please use `scaleway_instance_server.additional_volumes` instead.

        This allows volumes to be attached to servers.

        > **Warning:** Attaching volumes requires the servers to be powered off. This will lead to downtime if the server is already in use.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_scaleway as scaleway

        test_server = scaleway.Server("testServer",
            image="aecaed73-51a5-4439-a127-6d8229847145",
            type="C2S")
        test_volume = scaleway.Volume("testVolume",
            size_in_gb=20,
            type="l_ssd")
        test_volume_attachment = scaleway.VolumeAttachment("testVolumeAttachment",
            server=test_server.id,
            volume=test_volume.id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] server: id of the server
        :param pulumi.Input[str] volume: id of the volume to be attached
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if server is None:
                raise TypeError("Missing required property 'server'")
            __props__['server'] = server
            if volume is None:
                raise TypeError("Missing required property 'volume'")
            __props__['volume'] = volume
        super(VolumeAttachment, __self__).__init__(
            'scaleway:index/volumeAttachment:VolumeAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            server: Optional[pulumi.Input[str]] = None,
            volume: Optional[pulumi.Input[str]] = None) -> 'VolumeAttachment':
        """
        Get an existing VolumeAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] server: id of the server
        :param pulumi.Input[str] volume: id of the volume to be attached
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["server"] = server
        __props__["volume"] = volume
        return VolumeAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output[str]:
        """
        id of the server
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def volume(self) -> pulumi.Output[str]:
        """
        id of the volume to be attached
        """
        return pulumi.get(self, "volume")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

