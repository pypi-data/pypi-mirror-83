# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['LoadbalancerFrontendBeta']


class LoadbalancerFrontendBeta(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadbalancerFrontendBetaAclArgs']]]]] = None,
                 backend_id: Optional[pulumi.Input[str]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 inbound_port: Optional[pulumi.Input[int]] = None,
                 lb_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 timeout_client: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a LoadbalancerFrontendBeta resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadbalancerFrontendBetaAclArgs']]]] acls: A list of ACL rules to apply to the load-balancer frontend.  Defined below.
        :param pulumi.Input[str] backend_id: The load-balancer backend ID this frontend is attached to.
        :param pulumi.Input[str] certificate_id: Certificate ID that should be used by the frontend.
        :param pulumi.Input[int] inbound_port: TCP port to listen on the front side.
        :param pulumi.Input[str] lb_id: The load-balancer ID this frontend is attached to.
        :param pulumi.Input[str] name: The ACL name. If not provided it will be randomly generated.
        :param pulumi.Input[str] timeout_client: Maximum inactivity time on the client side. (e.g.: `1s`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['acls'] = acls
            if backend_id is None:
                raise TypeError("Missing required property 'backend_id'")
            __props__['backend_id'] = backend_id
            __props__['certificate_id'] = certificate_id
            if inbound_port is None:
                raise TypeError("Missing required property 'inbound_port'")
            __props__['inbound_port'] = inbound_port
            if lb_id is None:
                raise TypeError("Missing required property 'lb_id'")
            __props__['lb_id'] = lb_id
            __props__['name'] = name
            __props__['timeout_client'] = timeout_client
        super(LoadbalancerFrontendBeta, __self__).__init__(
            'scaleway:index/loadbalancerFrontendBeta:LoadbalancerFrontendBeta',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadbalancerFrontendBetaAclArgs']]]]] = None,
            backend_id: Optional[pulumi.Input[str]] = None,
            certificate_id: Optional[pulumi.Input[str]] = None,
            inbound_port: Optional[pulumi.Input[int]] = None,
            lb_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            timeout_client: Optional[pulumi.Input[str]] = None) -> 'LoadbalancerFrontendBeta':
        """
        Get an existing LoadbalancerFrontendBeta resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadbalancerFrontendBetaAclArgs']]]] acls: A list of ACL rules to apply to the load-balancer frontend.  Defined below.
        :param pulumi.Input[str] backend_id: The load-balancer backend ID this frontend is attached to.
        :param pulumi.Input[str] certificate_id: Certificate ID that should be used by the frontend.
        :param pulumi.Input[int] inbound_port: TCP port to listen on the front side.
        :param pulumi.Input[str] lb_id: The load-balancer ID this frontend is attached to.
        :param pulumi.Input[str] name: The ACL name. If not provided it will be randomly generated.
        :param pulumi.Input[str] timeout_client: Maximum inactivity time on the client side. (e.g.: `1s`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["acls"] = acls
        __props__["backend_id"] = backend_id
        __props__["certificate_id"] = certificate_id
        __props__["inbound_port"] = inbound_port
        __props__["lb_id"] = lb_id
        __props__["name"] = name
        __props__["timeout_client"] = timeout_client
        return LoadbalancerFrontendBeta(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def acls(self) -> pulumi.Output[Optional[Sequence['outputs.LoadbalancerFrontendBetaAcl']]]:
        """
        A list of ACL rules to apply to the load-balancer frontend.  Defined below.
        """
        return pulumi.get(self, "acls")

    @property
    @pulumi.getter(name="backendId")
    def backend_id(self) -> pulumi.Output[str]:
        """
        The load-balancer backend ID this frontend is attached to.
        """
        return pulumi.get(self, "backend_id")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Output[Optional[str]]:
        """
        Certificate ID that should be used by the frontend.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="inboundPort")
    def inbound_port(self) -> pulumi.Output[int]:
        """
        TCP port to listen on the front side.
        """
        return pulumi.get(self, "inbound_port")

    @property
    @pulumi.getter(name="lbId")
    def lb_id(self) -> pulumi.Output[str]:
        """
        The load-balancer ID this frontend is attached to.
        """
        return pulumi.get(self, "lb_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The ACL name. If not provided it will be randomly generated.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeoutClient")
    def timeout_client(self) -> pulumi.Output[Optional[str]]:
        """
        Maximum inactivity time on the client side. (e.g.: `1s`)
        """
        return pulumi.get(self, "timeout_client")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

