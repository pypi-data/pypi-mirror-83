# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['Volume']


class Volume(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size_in_gb: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        **DEPRECATED**: This resource is deprecated and will be removed in `v2.0+`.
        Please use `InstanceVolume` instead.

        Provides volumes. This allows volumes to be created, updated and deleted.
        For additional details please refer to [API documentation](https://developer.scaleway.com/#volumes).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_scaleway as scaleway

        test_volume = scaleway.Volume("testVolume",
            size_in_gb=20,
            type="l_ssd")
        test_server = scaleway.Server("testServer",
            image="aecaed73-51a5-4439-a127-6d8229847145",
            type="C2S",
            volumes=[test_volume.id])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: name of volume
        :param pulumi.Input[int] size_in_gb: size of the volume in GB
        :param pulumi.Input[str] type: type of volume
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['name'] = name
            if size_in_gb is None:
                raise TypeError("Missing required property 'size_in_gb'")
            __props__['size_in_gb'] = size_in_gb
            if type is None:
                raise TypeError("Missing required property 'type'")
            __props__['type'] = type
            __props__['server'] = None
        super(Volume, __self__).__init__(
            'scaleway:index/volume:Volume',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[str]] = None,
            server: Optional[pulumi.Input[str]] = None,
            size_in_gb: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'Volume':
        """
        Get an existing Volume resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: name of volume
        :param pulumi.Input[str] server: (Read Only) the `Server` instance which has this volume mounted right now
        :param pulumi.Input[int] size_in_gb: size of the volume in GB
        :param pulumi.Input[str] type: type of volume
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["name"] = name
        __props__["server"] = server
        __props__["size_in_gb"] = size_in_gb
        __props__["type"] = type
        return Volume(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        name of volume
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output[str]:
        """
        (Read Only) the `Server` instance which has this volume mounted right now
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="sizeInGb")
    def size_in_gb(self) -> pulumi.Output[int]:
        """
        size of the volume in GB
        """
        return pulumi.get(self, "size_in_gb")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        type of volume
        """
        return pulumi.get(self, "type")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

