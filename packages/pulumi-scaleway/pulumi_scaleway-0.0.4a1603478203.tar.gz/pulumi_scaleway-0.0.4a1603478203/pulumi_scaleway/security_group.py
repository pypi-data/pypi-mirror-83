# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['SecurityGroup']


class SecurityGroup(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_default_security: Optional[pulumi.Input[bool]] = None,
                 inbound_default_policy: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 outbound_default_policy: Optional[pulumi.Input[str]] = None,
                 stateful: Optional[pulumi.Input[bool]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        **DEPRECATED**: This resource is deprecated and will be removed in `v2.0+`.
        Please use `InstanceSecurityGroup` instead.

        Provides security groups. This allows security groups to be created, updated and deleted.
        For additional details please refer to [API documentation](https://developer.scaleway.com/#security-groups).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_scaleway as scaleway

        test = scaleway.SecurityGroup("test",
            description="test",
            enable_default_security=True,
            inbound_default_policy="accept",
            outbound_default_policy="drop",
            stateful=True)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: description of security group
        :param pulumi.Input[bool] enable_default_security: default: true. Add default security group rules
        :param pulumi.Input[str] inbound_default_policy: default policy for inbound traffic. Can be one of accept or drop
        :param pulumi.Input[str] name: name of security group
        :param pulumi.Input[str] outbound_default_policy: default policy for outbound traffic. Can be one of accept or drop
        :param pulumi.Input[bool] stateful: default: false. Mark the security group as stateful. Note that stateful security groups can not be associated with bare metal servers
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if description is None:
                raise TypeError("Missing required property 'description'")
            __props__['description'] = description
            __props__['enable_default_security'] = enable_default_security
            __props__['inbound_default_policy'] = inbound_default_policy
            __props__['name'] = name
            __props__['outbound_default_policy'] = outbound_default_policy
            __props__['stateful'] = stateful
        super(SecurityGroup, __self__).__init__(
            'scaleway:index/securityGroup:SecurityGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            enable_default_security: Optional[pulumi.Input[bool]] = None,
            inbound_default_policy: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            outbound_default_policy: Optional[pulumi.Input[str]] = None,
            stateful: Optional[pulumi.Input[bool]] = None) -> 'SecurityGroup':
        """
        Get an existing SecurityGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: description of security group
        :param pulumi.Input[bool] enable_default_security: default: true. Add default security group rules
        :param pulumi.Input[str] inbound_default_policy: default policy for inbound traffic. Can be one of accept or drop
        :param pulumi.Input[str] name: name of security group
        :param pulumi.Input[str] outbound_default_policy: default policy for outbound traffic. Can be one of accept or drop
        :param pulumi.Input[bool] stateful: default: false. Mark the security group as stateful. Note that stateful security groups can not be associated with bare metal servers
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["description"] = description
        __props__["enable_default_security"] = enable_default_security
        __props__["inbound_default_policy"] = inbound_default_policy
        __props__["name"] = name
        __props__["outbound_default_policy"] = outbound_default_policy
        __props__["stateful"] = stateful
        return SecurityGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        description of security group
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableDefaultSecurity")
    def enable_default_security(self) -> pulumi.Output[Optional[bool]]:
        """
        default: true. Add default security group rules
        """
        return pulumi.get(self, "enable_default_security")

    @property
    @pulumi.getter(name="inboundDefaultPolicy")
    def inbound_default_policy(self) -> pulumi.Output[Optional[str]]:
        """
        default policy for inbound traffic. Can be one of accept or drop
        """
        return pulumi.get(self, "inbound_default_policy")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        name of security group
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outboundDefaultPolicy")
    def outbound_default_policy(self) -> pulumi.Output[Optional[str]]:
        """
        default policy for outbound traffic. Can be one of accept or drop
        """
        return pulumi.get(self, "outbound_default_policy")

    @property
    @pulumi.getter
    def stateful(self) -> pulumi.Output[Optional[bool]]:
        """
        default: false. Mark the security group as stateful. Note that stateful security groups can not be associated with bare metal servers
        """
        return pulumi.get(self, "stateful")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

