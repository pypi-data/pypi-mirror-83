# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['InstanceVolume']


class InstanceVolume(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 from_snapshot_id: Optional[pulumi.Input[str]] = None,
                 from_volume_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 size_in_gb: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Creates and manages Scaleway Compute Instance Volumes. For more information, see [the documentation](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39).

        ## Example

        ```python
        import pulumi
        import pulumi_scaleway as scaleway

        server_volume = scaleway.InstanceVolume("serverVolume",
            size_in_gb=20,
            type="l_ssd")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] from_snapshot_id: Create a volume based on a image
        :param pulumi.Input[str] from_volume_id: If set, the new volume will be copied from this volume. Only one of `size_in_gb`, `from_volume_id` and `from_volume_id` should be specified.
        :param pulumi.Input[str] name: The name of the volume. If not provided it will be randomly generated.
        :param pulumi.Input[str] organization_id: `organization_id`) The ID of the organization the volume is associated with.
        :param pulumi.Input[int] size_in_gb: The size of the volume. Only one of `size_in_gb`, `from_volume_id` and `from_volume_id` should be specified.
        :param pulumi.Input[str] type: The type of the volume. The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD).
        :param pulumi.Input[str] zone: `zone`) The zone in which the volume should be created.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['from_snapshot_id'] = from_snapshot_id
            __props__['from_volume_id'] = from_volume_id
            __props__['name'] = name
            __props__['organization_id'] = organization_id
            __props__['size_in_gb'] = size_in_gb
            if type is None:
                raise TypeError("Missing required property 'type'")
            __props__['type'] = type
            __props__['zone'] = zone
            __props__['server_id'] = None
        super(InstanceVolume, __self__).__init__(
            'scaleway:index/instanceVolume:InstanceVolume',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            from_snapshot_id: Optional[pulumi.Input[str]] = None,
            from_volume_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            organization_id: Optional[pulumi.Input[str]] = None,
            server_id: Optional[pulumi.Input[str]] = None,
            size_in_gb: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None,
            zone: Optional[pulumi.Input[str]] = None) -> 'InstanceVolume':
        """
        Get an existing InstanceVolume resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] from_snapshot_id: Create a volume based on a image
        :param pulumi.Input[str] from_volume_id: If set, the new volume will be copied from this volume. Only one of `size_in_gb`, `from_volume_id` and `from_volume_id` should be specified.
        :param pulumi.Input[str] name: The name of the volume. If not provided it will be randomly generated.
        :param pulumi.Input[str] organization_id: `organization_id`) The ID of the organization the volume is associated with.
        :param pulumi.Input[str] server_id: The id of the associated server.
        :param pulumi.Input[int] size_in_gb: The size of the volume. Only one of `size_in_gb`, `from_volume_id` and `from_volume_id` should be specified.
        :param pulumi.Input[str] type: The type of the volume. The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD).
        :param pulumi.Input[str] zone: `zone`) The zone in which the volume should be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["from_snapshot_id"] = from_snapshot_id
        __props__["from_volume_id"] = from_volume_id
        __props__["name"] = name
        __props__["organization_id"] = organization_id
        __props__["server_id"] = server_id
        __props__["size_in_gb"] = size_in_gb
        __props__["type"] = type
        __props__["zone"] = zone
        return InstanceVolume(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="fromSnapshotId")
    def from_snapshot_id(self) -> pulumi.Output[Optional[str]]:
        """
        Create a volume based on a image
        """
        return pulumi.get(self, "from_snapshot_id")

    @property
    @pulumi.getter(name="fromVolumeId")
    def from_volume_id(self) -> pulumi.Output[Optional[str]]:
        """
        If set, the new volume will be copied from this volume. Only one of `size_in_gb`, `from_volume_id` and `from_volume_id` should be specified.
        """
        return pulumi.get(self, "from_volume_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the volume. If not provided it will be randomly generated.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[str]:
        """
        `organization_id`) The ID of the organization the volume is associated with.
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Output[str]:
        """
        The id of the associated server.
        """
        return pulumi.get(self, "server_id")

    @property
    @pulumi.getter(name="sizeInGb")
    def size_in_gb(self) -> pulumi.Output[int]:
        """
        The size of the volume. Only one of `size_in_gb`, `from_volume_id` and `from_volume_id` should be specified.
        """
        return pulumi.get(self, "size_in_gb")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the volume. The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[str]:
        """
        `zone`) The zone in which the volume should be created.
        """
        return pulumi.get(self, "zone")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

