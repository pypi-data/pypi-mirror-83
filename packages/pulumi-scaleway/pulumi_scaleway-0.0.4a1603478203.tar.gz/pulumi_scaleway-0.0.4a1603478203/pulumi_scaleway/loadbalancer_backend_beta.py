# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['LoadbalancerBackendBeta']


class LoadbalancerBackendBeta(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 forward_port: Optional[pulumi.Input[int]] = None,
                 forward_port_algorithm: Optional[pulumi.Input[str]] = None,
                 forward_protocol: Optional[pulumi.Input[str]] = None,
                 health_check_delay: Optional[pulumi.Input[str]] = None,
                 health_check_http: Optional[pulumi.Input[pulumi.InputType['LoadbalancerBackendBetaHealthCheckHttpArgs']]] = None,
                 health_check_https: Optional[pulumi.Input[pulumi.InputType['LoadbalancerBackendBetaHealthCheckHttpsArgs']]] = None,
                 health_check_max_retries: Optional[pulumi.Input[int]] = None,
                 health_check_port: Optional[pulumi.Input[int]] = None,
                 health_check_tcp: Optional[pulumi.Input[pulumi.InputType['LoadbalancerBackendBetaHealthCheckTcpArgs']]] = None,
                 health_check_timeout: Optional[pulumi.Input[str]] = None,
                 lb_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 on_marked_down_action: Optional[pulumi.Input[str]] = None,
                 send_proxy_v2: Optional[pulumi.Input[bool]] = None,
                 server_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sticky_sessions: Optional[pulumi.Input[str]] = None,
                 sticky_sessions_cookie_name: Optional[pulumi.Input[str]] = None,
                 timeout_connect: Optional[pulumi.Input[str]] = None,
                 timeout_server: Optional[pulumi.Input[str]] = None,
                 timeout_tunnel: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a LoadbalancerBackendBeta resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] forward_port: User sessions will be forwarded to this port of backend servers.
        :param pulumi.Input[str] forward_port_algorithm: Load balancing algorithm. Possible values are: `roundrobin` and `leastconn`.
        :param pulumi.Input[str] forward_protocol: Backend protocol. Possible values are: `tcp` or `http`.
        :param pulumi.Input[str] health_check_delay: Interval between two HC requests.
        :param pulumi.Input[pulumi.InputType['LoadbalancerBackendBetaHealthCheckHttpArgs']] health_check_http: This block enable HTTP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.
        :param pulumi.Input[pulumi.InputType['LoadbalancerBackendBetaHealthCheckHttpsArgs']] health_check_https: This block enable HTTPS health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.
        :param pulumi.Input[int] health_check_max_retries: Number of allowed failed HC requests before the backend server is marked down.
        :param pulumi.Input[int] health_check_port: Port the HC requests will be send to.
        :param pulumi.Input[pulumi.InputType['LoadbalancerBackendBetaHealthCheckTcpArgs']] health_check_tcp: This block enable TCP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.
        :param pulumi.Input[str] health_check_timeout: Timeout before we consider a HC request failed.
        :param pulumi.Input[str] lb_id: The load-balancer ID this backend is attached to.
               > **Important:** Updates to `lb_id` will recreate the backend.
        :param pulumi.Input[str] name: The name of the load-balancer backend.
        :param pulumi.Input[str] on_marked_down_action: Modify what occurs when a backend server is marked down. Possible values are: `none` and `shutdown_sessions`.
        :param pulumi.Input[bool] send_proxy_v2: Enables PROXY protocol version 2.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] server_ips: List of backend server IP addresses. Addresses can be either IPv4 or IPv6.
        :param pulumi.Input[str] sticky_sessions: Load balancing algorithm. Possible values are: `none`, `cookie` and `table`.
        :param pulumi.Input[str] sticky_sessions_cookie_name: Cookie name for for sticky sessions. Only applicable when sticky_sessions is set to `cookie`.
        :param pulumi.Input[str] timeout_connect: Maximum initial server connection establishment time. (e.g.: `1s`)
        :param pulumi.Input[str] timeout_server: Maximum server connection inactivity time. (e.g.: `1s`)
        :param pulumi.Input[str] timeout_tunnel: Maximum tunnel inactivity time. (e.g.: `1s`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if forward_port is None:
                raise TypeError("Missing required property 'forward_port'")
            __props__['forward_port'] = forward_port
            __props__['forward_port_algorithm'] = forward_port_algorithm
            if forward_protocol is None:
                raise TypeError("Missing required property 'forward_protocol'")
            __props__['forward_protocol'] = forward_protocol
            __props__['health_check_delay'] = health_check_delay
            __props__['health_check_http'] = health_check_http
            __props__['health_check_https'] = health_check_https
            __props__['health_check_max_retries'] = health_check_max_retries
            __props__['health_check_port'] = health_check_port
            __props__['health_check_tcp'] = health_check_tcp
            __props__['health_check_timeout'] = health_check_timeout
            if lb_id is None:
                raise TypeError("Missing required property 'lb_id'")
            __props__['lb_id'] = lb_id
            __props__['name'] = name
            __props__['on_marked_down_action'] = on_marked_down_action
            __props__['send_proxy_v2'] = send_proxy_v2
            __props__['server_ips'] = server_ips
            __props__['sticky_sessions'] = sticky_sessions
            __props__['sticky_sessions_cookie_name'] = sticky_sessions_cookie_name
            __props__['timeout_connect'] = timeout_connect
            __props__['timeout_server'] = timeout_server
            __props__['timeout_tunnel'] = timeout_tunnel
        super(LoadbalancerBackendBeta, __self__).__init__(
            'scaleway:index/loadbalancerBackendBeta:LoadbalancerBackendBeta',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            forward_port: Optional[pulumi.Input[int]] = None,
            forward_port_algorithm: Optional[pulumi.Input[str]] = None,
            forward_protocol: Optional[pulumi.Input[str]] = None,
            health_check_delay: Optional[pulumi.Input[str]] = None,
            health_check_http: Optional[pulumi.Input[pulumi.InputType['LoadbalancerBackendBetaHealthCheckHttpArgs']]] = None,
            health_check_https: Optional[pulumi.Input[pulumi.InputType['LoadbalancerBackendBetaHealthCheckHttpsArgs']]] = None,
            health_check_max_retries: Optional[pulumi.Input[int]] = None,
            health_check_port: Optional[pulumi.Input[int]] = None,
            health_check_tcp: Optional[pulumi.Input[pulumi.InputType['LoadbalancerBackendBetaHealthCheckTcpArgs']]] = None,
            health_check_timeout: Optional[pulumi.Input[str]] = None,
            lb_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            on_marked_down_action: Optional[pulumi.Input[str]] = None,
            send_proxy_v2: Optional[pulumi.Input[bool]] = None,
            server_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            sticky_sessions: Optional[pulumi.Input[str]] = None,
            sticky_sessions_cookie_name: Optional[pulumi.Input[str]] = None,
            timeout_connect: Optional[pulumi.Input[str]] = None,
            timeout_server: Optional[pulumi.Input[str]] = None,
            timeout_tunnel: Optional[pulumi.Input[str]] = None) -> 'LoadbalancerBackendBeta':
        """
        Get an existing LoadbalancerBackendBeta resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] forward_port: User sessions will be forwarded to this port of backend servers.
        :param pulumi.Input[str] forward_port_algorithm: Load balancing algorithm. Possible values are: `roundrobin` and `leastconn`.
        :param pulumi.Input[str] forward_protocol: Backend protocol. Possible values are: `tcp` or `http`.
        :param pulumi.Input[str] health_check_delay: Interval between two HC requests.
        :param pulumi.Input[pulumi.InputType['LoadbalancerBackendBetaHealthCheckHttpArgs']] health_check_http: This block enable HTTP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.
        :param pulumi.Input[pulumi.InputType['LoadbalancerBackendBetaHealthCheckHttpsArgs']] health_check_https: This block enable HTTPS health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.
        :param pulumi.Input[int] health_check_max_retries: Number of allowed failed HC requests before the backend server is marked down.
        :param pulumi.Input[int] health_check_port: Port the HC requests will be send to.
        :param pulumi.Input[pulumi.InputType['LoadbalancerBackendBetaHealthCheckTcpArgs']] health_check_tcp: This block enable TCP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.
        :param pulumi.Input[str] health_check_timeout: Timeout before we consider a HC request failed.
        :param pulumi.Input[str] lb_id: The load-balancer ID this backend is attached to.
               > **Important:** Updates to `lb_id` will recreate the backend.
        :param pulumi.Input[str] name: The name of the load-balancer backend.
        :param pulumi.Input[str] on_marked_down_action: Modify what occurs when a backend server is marked down. Possible values are: `none` and `shutdown_sessions`.
        :param pulumi.Input[bool] send_proxy_v2: Enables PROXY protocol version 2.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] server_ips: List of backend server IP addresses. Addresses can be either IPv4 or IPv6.
        :param pulumi.Input[str] sticky_sessions: Load balancing algorithm. Possible values are: `none`, `cookie` and `table`.
        :param pulumi.Input[str] sticky_sessions_cookie_name: Cookie name for for sticky sessions. Only applicable when sticky_sessions is set to `cookie`.
        :param pulumi.Input[str] timeout_connect: Maximum initial server connection establishment time. (e.g.: `1s`)
        :param pulumi.Input[str] timeout_server: Maximum server connection inactivity time. (e.g.: `1s`)
        :param pulumi.Input[str] timeout_tunnel: Maximum tunnel inactivity time. (e.g.: `1s`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["forward_port"] = forward_port
        __props__["forward_port_algorithm"] = forward_port_algorithm
        __props__["forward_protocol"] = forward_protocol
        __props__["health_check_delay"] = health_check_delay
        __props__["health_check_http"] = health_check_http
        __props__["health_check_https"] = health_check_https
        __props__["health_check_max_retries"] = health_check_max_retries
        __props__["health_check_port"] = health_check_port
        __props__["health_check_tcp"] = health_check_tcp
        __props__["health_check_timeout"] = health_check_timeout
        __props__["lb_id"] = lb_id
        __props__["name"] = name
        __props__["on_marked_down_action"] = on_marked_down_action
        __props__["send_proxy_v2"] = send_proxy_v2
        __props__["server_ips"] = server_ips
        __props__["sticky_sessions"] = sticky_sessions
        __props__["sticky_sessions_cookie_name"] = sticky_sessions_cookie_name
        __props__["timeout_connect"] = timeout_connect
        __props__["timeout_server"] = timeout_server
        __props__["timeout_tunnel"] = timeout_tunnel
        return LoadbalancerBackendBeta(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="forwardPort")
    def forward_port(self) -> pulumi.Output[int]:
        """
        User sessions will be forwarded to this port of backend servers.
        """
        return pulumi.get(self, "forward_port")

    @property
    @pulumi.getter(name="forwardPortAlgorithm")
    def forward_port_algorithm(self) -> pulumi.Output[Optional[str]]:
        """
        Load balancing algorithm. Possible values are: `roundrobin` and `leastconn`.
        """
        return pulumi.get(self, "forward_port_algorithm")

    @property
    @pulumi.getter(name="forwardProtocol")
    def forward_protocol(self) -> pulumi.Output[str]:
        """
        Backend protocol. Possible values are: `tcp` or `http`.
        """
        return pulumi.get(self, "forward_protocol")

    @property
    @pulumi.getter(name="healthCheckDelay")
    def health_check_delay(self) -> pulumi.Output[Optional[str]]:
        """
        Interval between two HC requests.
        """
        return pulumi.get(self, "health_check_delay")

    @property
    @pulumi.getter(name="healthCheckHttp")
    def health_check_http(self) -> pulumi.Output[Optional['outputs.LoadbalancerBackendBetaHealthCheckHttp']]:
        """
        This block enable HTTP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.
        """
        return pulumi.get(self, "health_check_http")

    @property
    @pulumi.getter(name="healthCheckHttps")
    def health_check_https(self) -> pulumi.Output[Optional['outputs.LoadbalancerBackendBetaHealthCheckHttps']]:
        """
        This block enable HTTPS health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.
        """
        return pulumi.get(self, "health_check_https")

    @property
    @pulumi.getter(name="healthCheckMaxRetries")
    def health_check_max_retries(self) -> pulumi.Output[Optional[int]]:
        """
        Number of allowed failed HC requests before the backend server is marked down.
        """
        return pulumi.get(self, "health_check_max_retries")

    @property
    @pulumi.getter(name="healthCheckPort")
    def health_check_port(self) -> pulumi.Output[int]:
        """
        Port the HC requests will be send to.
        """
        return pulumi.get(self, "health_check_port")

    @property
    @pulumi.getter(name="healthCheckTcp")
    def health_check_tcp(self) -> pulumi.Output['outputs.LoadbalancerBackendBetaHealthCheckTcp']:
        """
        This block enable TCP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.
        """
        return pulumi.get(self, "health_check_tcp")

    @property
    @pulumi.getter(name="healthCheckTimeout")
    def health_check_timeout(self) -> pulumi.Output[Optional[str]]:
        """
        Timeout before we consider a HC request failed.
        """
        return pulumi.get(self, "health_check_timeout")

    @property
    @pulumi.getter(name="lbId")
    def lb_id(self) -> pulumi.Output[str]:
        """
        The load-balancer ID this backend is attached to.
        > **Important:** Updates to `lb_id` will recreate the backend.
        """
        return pulumi.get(self, "lb_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the load-balancer backend.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="onMarkedDownAction")
    def on_marked_down_action(self) -> pulumi.Output[Optional[str]]:
        """
        Modify what occurs when a backend server is marked down. Possible values are: `none` and `shutdown_sessions`.
        """
        return pulumi.get(self, "on_marked_down_action")

    @property
    @pulumi.getter(name="sendProxyV2")
    def send_proxy_v2(self) -> pulumi.Output[Optional[bool]]:
        """
        Enables PROXY protocol version 2.
        """
        return pulumi.get(self, "send_proxy_v2")

    @property
    @pulumi.getter(name="serverIps")
    def server_ips(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of backend server IP addresses. Addresses can be either IPv4 or IPv6.
        """
        return pulumi.get(self, "server_ips")

    @property
    @pulumi.getter(name="stickySessions")
    def sticky_sessions(self) -> pulumi.Output[Optional[str]]:
        """
        Load balancing algorithm. Possible values are: `none`, `cookie` and `table`.
        """
        return pulumi.get(self, "sticky_sessions")

    @property
    @pulumi.getter(name="stickySessionsCookieName")
    def sticky_sessions_cookie_name(self) -> pulumi.Output[Optional[str]]:
        """
        Cookie name for for sticky sessions. Only applicable when sticky_sessions is set to `cookie`.
        """
        return pulumi.get(self, "sticky_sessions_cookie_name")

    @property
    @pulumi.getter(name="timeoutConnect")
    def timeout_connect(self) -> pulumi.Output[Optional[str]]:
        """
        Maximum initial server connection establishment time. (e.g.: `1s`)
        """
        return pulumi.get(self, "timeout_connect")

    @property
    @pulumi.getter(name="timeoutServer")
    def timeout_server(self) -> pulumi.Output[Optional[str]]:
        """
        Maximum server connection inactivity time. (e.g.: `1s`)
        """
        return pulumi.get(self, "timeout_server")

    @property
    @pulumi.getter(name="timeoutTunnel")
    def timeout_tunnel(self) -> pulumi.Output[Optional[str]]:
        """
        Maximum tunnel inactivity time. (e.g.: `1s`)
        """
        return pulumi.get(self, "timeout_tunnel")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

