# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['DatabaseInstanceBeta']


class DatabaseInstanceBeta(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 disable_backup: Optional[pulumi.Input[bool]] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 is_ha_cluster: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_type: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a DatabaseInstanceBeta resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] disable_backup: Disable automated backup for the database instance.
        :param pulumi.Input[str] engine: Database Instance's engine version (e.g. `PostgreSQL-11`).
        :param pulumi.Input[bool] is_ha_cluster: Enable or disable high availability for the database instance.
        :param pulumi.Input[str] name: The name of the Database Instance.
        :param pulumi.Input[str] node_type: The type of database instance you want to create (e.g. `db-dev-s`).
        :param pulumi.Input[str] organization_id: `organization_id`) The ID of the organization the Database Instance is associated with.
        :param pulumi.Input[str] password: Password for the first user of the database instance.
        :param pulumi.Input[str] region: `region`) The region in which the Database Instance should be created.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: The tags associated with the Database Instance.
        :param pulumi.Input[str] user_name: Identifier for the first user of the database instance.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['disable_backup'] = disable_backup
            if engine is None:
                raise TypeError("Missing required property 'engine'")
            __props__['engine'] = engine
            __props__['is_ha_cluster'] = is_ha_cluster
            __props__['name'] = name
            if node_type is None:
                raise TypeError("Missing required property 'node_type'")
            __props__['node_type'] = node_type
            __props__['organization_id'] = organization_id
            if password is None:
                raise TypeError("Missing required property 'password'")
            __props__['password'] = password
            __props__['region'] = region
            __props__['tags'] = tags
            if user_name is None:
                raise TypeError("Missing required property 'user_name'")
            __props__['user_name'] = user_name
            __props__['certificate'] = None
            __props__['endpoint_ip'] = None
            __props__['endpoint_port'] = None
            __props__['read_replicas'] = None
        super(DatabaseInstanceBeta, __self__).__init__(
            'scaleway:index/databaseInstanceBeta:DatabaseInstanceBeta',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate: Optional[pulumi.Input[str]] = None,
            disable_backup: Optional[pulumi.Input[bool]] = None,
            endpoint_ip: Optional[pulumi.Input[str]] = None,
            endpoint_port: Optional[pulumi.Input[int]] = None,
            engine: Optional[pulumi.Input[str]] = None,
            is_ha_cluster: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            node_type: Optional[pulumi.Input[str]] = None,
            organization_id: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            read_replicas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DatabaseInstanceBetaReadReplicaArgs']]]]] = None,
            region: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            user_name: Optional[pulumi.Input[str]] = None) -> 'DatabaseInstanceBeta':
        """
        Get an existing DatabaseInstanceBeta resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate: Certificate of the database instance.
        :param pulumi.Input[bool] disable_backup: Disable automated backup for the database instance.
        :param pulumi.Input[str] endpoint_ip: The IP of the Database Instance.
        :param pulumi.Input[int] endpoint_port: The port of the Database Instance.
        :param pulumi.Input[str] engine: Database Instance's engine version (e.g. `PostgreSQL-11`).
        :param pulumi.Input[bool] is_ha_cluster: Enable or disable high availability for the database instance.
        :param pulumi.Input[str] name: The name of the Database Instance.
        :param pulumi.Input[str] node_type: The type of database instance you want to create (e.g. `db-dev-s`).
        :param pulumi.Input[str] organization_id: `organization_id`) The ID of the organization the Database Instance is associated with.
        :param pulumi.Input[str] password: Password for the first user of the database instance.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DatabaseInstanceBetaReadReplicaArgs']]]] read_replicas: List of read replicas of the database instance.
        :param pulumi.Input[str] region: `region`) The region in which the Database Instance should be created.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: The tags associated with the Database Instance.
        :param pulumi.Input[str] user_name: Identifier for the first user of the database instance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["certificate"] = certificate
        __props__["disable_backup"] = disable_backup
        __props__["endpoint_ip"] = endpoint_ip
        __props__["endpoint_port"] = endpoint_port
        __props__["engine"] = engine
        __props__["is_ha_cluster"] = is_ha_cluster
        __props__["name"] = name
        __props__["node_type"] = node_type
        __props__["organization_id"] = organization_id
        __props__["password"] = password
        __props__["read_replicas"] = read_replicas
        __props__["region"] = region
        __props__["tags"] = tags
        __props__["user_name"] = user_name
        return DatabaseInstanceBeta(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Output[str]:
        """
        Certificate of the database instance.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="disableBackup")
    def disable_backup(self) -> pulumi.Output[Optional[bool]]:
        """
        Disable automated backup for the database instance.
        """
        return pulumi.get(self, "disable_backup")

    @property
    @pulumi.getter(name="endpointIp")
    def endpoint_ip(self) -> pulumi.Output[str]:
        """
        The IP of the Database Instance.
        """
        return pulumi.get(self, "endpoint_ip")

    @property
    @pulumi.getter(name="endpointPort")
    def endpoint_port(self) -> pulumi.Output[int]:
        """
        The port of the Database Instance.
        """
        return pulumi.get(self, "endpoint_port")

    @property
    @pulumi.getter
    def engine(self) -> pulumi.Output[str]:
        """
        Database Instance's engine version (e.g. `PostgreSQL-11`).
        """
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="isHaCluster")
    def is_ha_cluster(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable or disable high availability for the database instance.
        """
        return pulumi.get(self, "is_ha_cluster")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the Database Instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> pulumi.Output[str]:
        """
        The type of database instance you want to create (e.g. `db-dev-s`).
        """
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[str]:
        """
        `organization_id`) The ID of the organization the Database Instance is associated with.
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        Password for the first user of the database instance.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="readReplicas")
    def read_replicas(self) -> pulumi.Output[Sequence['outputs.DatabaseInstanceBetaReadReplica']]:
        """
        List of read replicas of the database instance.
        """
        return pulumi.get(self, "read_replicas")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        `region`) The region in which the Database Instance should be created.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The tags associated with the Database Instance.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[str]:
        """
        Identifier for the first user of the database instance.
        """
        return pulumi.get(self, "user_name")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

