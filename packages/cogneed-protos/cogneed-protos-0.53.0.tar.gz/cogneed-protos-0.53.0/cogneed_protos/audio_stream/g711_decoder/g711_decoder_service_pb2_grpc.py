# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from cogneed_protos.audio_stream.g711_decoder import g711_decoder_service_pb2 as cogneed__protos_dot_audio__stream_dot_g711__decoder_dot_g711__decoder__service__pb2


class G711DecoderServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.decode = channel.unary_unary(
        '/ai.cogneed.audio.decode.g711.G711DecoderService/decode',
        request_serializer=cogneed__protos_dot_audio__stream_dot_g711__decoder_dot_g711__decoder__service__pb2.DecodeRequest.SerializeToString,
        response_deserializer=cogneed__protos_dot_audio__stream_dot_g711__decoder_dot_g711__decoder__service__pb2.DecodeResponse.FromString,
        )


class G711DecoderServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def decode(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_G711DecoderServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'decode': grpc.unary_unary_rpc_method_handler(
          servicer.decode,
          request_deserializer=cogneed__protos_dot_audio__stream_dot_g711__decoder_dot_g711__decoder__service__pb2.DecodeRequest.FromString,
          response_serializer=cogneed__protos_dot_audio__stream_dot_g711__decoder_dot_g711__decoder__service__pb2.DecodeResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ai.cogneed.audio.decode.g711.G711DecoderService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
