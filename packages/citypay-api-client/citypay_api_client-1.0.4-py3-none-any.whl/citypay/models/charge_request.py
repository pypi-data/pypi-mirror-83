# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.   # noqa: E501

    Contact: support@citypay.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from citypay.configuration import Configuration


class ChargeRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'amount': 'int',
        'avs_postcode_policy': 'str',
        'csc': 'str',
        'csc_policy': 'str',
        'currency': 'str',
        'duplicate_policy': 'str',
        'identifier': 'str',
        'match_avsa': 'str',
        'merchantid': 'int',
        'threedsecure': 'ThreeDSecure',
        'token': 'str',
        'trans_info': 'str',
        'trans_type': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'avs_postcode_policy': 'avs_postcode_policy',
        'csc': 'csc',
        'csc_policy': 'csc_policy',
        'currency': 'currency',
        'duplicate_policy': 'duplicate_policy',
        'identifier': 'identifier',
        'match_avsa': 'match_avsa',
        'merchantid': 'merchantid',
        'threedsecure': 'threedsecure',
        'token': 'token',
        'trans_info': 'trans_info',
        'trans_type': 'trans_type'
    }

    def __init__(self, amount=None, avs_postcode_policy=None, csc=None, csc_policy=None, currency=None, duplicate_policy=None, identifier=None, match_avsa=None, merchantid=None, threedsecure=None, token=None, trans_info=None, trans_type=None, local_vars_configuration=None):  # noqa: E501
        """ChargeRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._amount = None
        self._avs_postcode_policy = None
        self._csc = None
        self._csc_policy = None
        self._currency = None
        self._duplicate_policy = None
        self._identifier = None
        self._match_avsa = None
        self._merchantid = None
        self._threedsecure = None
        self._token = None
        self._trans_info = None
        self._trans_type = None
        self.discriminator = None

        self.amount = amount
        if avs_postcode_policy is not None:
            self.avs_postcode_policy = avs_postcode_policy
        if csc is not None:
            self.csc = csc
        if csc_policy is not None:
            self.csc_policy = csc_policy
        if currency is not None:
            self.currency = currency
        if duplicate_policy is not None:
            self.duplicate_policy = duplicate_policy
        self.identifier = identifier
        if match_avsa is not None:
            self.match_avsa = match_avsa
        self.merchantid = merchantid
        if threedsecure is not None:
            self.threedsecure = threedsecure
        self.token = token
        if trans_info is not None:
            self.trans_info = trans_info
        if trans_type is not None:
            self.trans_type = trans_type

    @property
    def amount(self):
        """Gets the amount of this ChargeRequest.  # noqa: E501

        The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits. No decimal points are to be included and no divisional characters such as 1,024. The amount should be the total amount required for the transaction. For example with GBP £1,021.95 the amount value is 102195.   # noqa: E501

        :return: The amount of this ChargeRequest.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ChargeRequest.

        The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits. No decimal points are to be included and no divisional characters such as 1,024. The amount should be the total amount required for the transaction. For example with GBP £1,021.95 the amount value is 102195.   # noqa: E501

        :param amount: The amount of this ChargeRequest.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and amount is None:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def avs_postcode_policy(self):
        """Gets the avs_postcode_policy of this ChargeRequest.  # noqa: E501

        A policy value which determines whether an AVS postcode policy is enforced or bypassed.  Values are  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.  `1` for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.  `2` to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.  `3` to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.   # noqa: E501

        :return: The avs_postcode_policy of this ChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._avs_postcode_policy

    @avs_postcode_policy.setter
    def avs_postcode_policy(self, avs_postcode_policy):
        """Sets the avs_postcode_policy of this ChargeRequest.

        A policy value which determines whether an AVS postcode policy is enforced or bypassed.  Values are  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.  `1` for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.  `2` to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.  `3` to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.   # noqa: E501

        :param avs_postcode_policy: The avs_postcode_policy of this ChargeRequest.  # noqa: E501
        :type: str
        """

        self._avs_postcode_policy = avs_postcode_policy

    @property
    def csc(self):
        """Gets the csc of this ChargeRequest.  # noqa: E501

        The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card (American Express has it on the front). The value helps to identify posession of the card as it is not available within the chip or magnetic swipe.  When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped out by any integer parsing.  The CSC number aids fraud prevention in Mail Order and Internet payments.   Business rules are available on your account to identify whether to accept or decline transactions based on mismatched results of the CSC.  The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored. This applies to all entities handling card data. It should also not be used in any hashing process. CityPay do not store the value and have no method of retrieving the value once the transaction has been processed. For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.   # noqa: E501

        :return: The csc of this ChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._csc

    @csc.setter
    def csc(self, csc):
        """Sets the csc of this ChargeRequest.

        The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card (American Express has it on the front). The value helps to identify posession of the card as it is not available within the chip or magnetic swipe.  When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped out by any integer parsing.  The CSC number aids fraud prevention in Mail Order and Internet payments.   Business rules are available on your account to identify whether to accept or decline transactions based on mismatched results of the CSC.  The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored. This applies to all entities handling card data. It should also not be used in any hashing process. CityPay do not store the value and have no method of retrieving the value once the transaction has been processed. For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.   # noqa: E501

        :param csc: The csc of this ChargeRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                csc is not None and len(csc) > 4):
            raise ValueError("Invalid value for `csc`, length must be less than or equal to `4`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                csc is not None and len(csc) < 3):
            raise ValueError("Invalid value for `csc`, length must be greater than or equal to `3`")  # noqa: E501

        self._csc = csc

    @property
    def csc_policy(self):
        """Gets the csc_policy of this ChargeRequest.  # noqa: E501

        A policy value which determines whether a CSC policy is enforced or bypassed.  Values are  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.  `1` for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.  `2` to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.  `3` to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.   # noqa: E501

        :return: The csc_policy of this ChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._csc_policy

    @csc_policy.setter
    def csc_policy(self, csc_policy):
        """Sets the csc_policy of this ChargeRequest.

        A policy value which determines whether a CSC policy is enforced or bypassed.  Values are  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.  `1` for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.  `2` to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.  `3` to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.   # noqa: E501

        :param csc_policy: The csc_policy of this ChargeRequest.  # noqa: E501
        :type: str
        """

        self._csc_policy = csc_policy

    @property
    def currency(self):
        """Gets the currency of this ChargeRequest.  # noqa: E501

        The processing currency for the transaction. Will default to the merchant account currency.  # noqa: E501

        :return: The currency of this ChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ChargeRequest.

        The processing currency for the transaction. Will default to the merchant account currency.  # noqa: E501

        :param currency: The currency of this ChargeRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                currency is not None and len(currency) > 3):
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                currency is not None and len(currency) < 3):
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")  # noqa: E501

        self._currency = currency

    @property
    def duplicate_policy(self):
        """Gets the duplicate_policy of this ChargeRequest.  # noqa: E501

        A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window of time set against your account within which it can action. If a previous transaction with matching values occurred within the window, any subsequent transaction will result in a T001 result.  Values are  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.  `1` for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.  `2` to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.  `3` to ignore. Transactions that are ignored will have the same affect as bypass.   # noqa: E501

        :return: The duplicate_policy of this ChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._duplicate_policy

    @duplicate_policy.setter
    def duplicate_policy(self, duplicate_policy):
        """Sets the duplicate_policy of this ChargeRequest.

        A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window of time set against your account within which it can action. If a previous transaction with matching values occurred within the window, any subsequent transaction will result in a T001 result.  Values are  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.  `1` for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.  `2` to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.  `3` to ignore. Transactions that are ignored will have the same affect as bypass.   # noqa: E501

        :param duplicate_policy: The duplicate_policy of this ChargeRequest.  # noqa: E501
        :type: str
        """

        self._duplicate_policy = duplicate_policy

    @property
    def identifier(self):
        """Gets the identifier of this ChargeRequest.  # noqa: E501

        The identifier of the transaction to process. The value should be a valid reference and may be used to perform  post processing actions and to aid in reconciliation of transactions.  The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.  The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) this will aid in ensuring each transaction is identifiable.  When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent request will ensure that a transaction is considered as different.   # noqa: E501

        :return: The identifier of this ChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this ChargeRequest.

        The identifier of the transaction to process. The value should be a valid reference and may be used to perform  post processing actions and to aid in reconciliation of transactions.  The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.  The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) this will aid in ensuring each transaction is identifiable.  When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent request will ensure that a transaction is considered as different.   # noqa: E501

        :param identifier: The identifier of this ChargeRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and identifier is None:  # noqa: E501
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                identifier is not None and len(identifier) > 50):
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `50`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                identifier is not None and len(identifier) < 4):
            raise ValueError("Invalid value for `identifier`, length must be greater than or equal to `4`")  # noqa: E501

        self._identifier = identifier

    @property
    def match_avsa(self):
        """Gets the match_avsa of this ChargeRequest.  # noqa: E501

        A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.   Values are  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.  `1` for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.  `2` to bypass. Transactions that are bypassed will be allowed through even if the address did not match.  `3` to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.   # noqa: E501

        :return: The match_avsa of this ChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._match_avsa

    @match_avsa.setter
    def match_avsa(self, match_avsa):
        """Sets the match_avsa of this ChargeRequest.

        A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.   Values are  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.  `1` for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.  `2` to bypass. Transactions that are bypassed will be allowed through even if the address did not match.  `3` to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.   # noqa: E501

        :param match_avsa: The match_avsa of this ChargeRequest.  # noqa: E501
        :type: str
        """

        self._match_avsa = match_avsa

    @property
    def merchantid(self):
        """Gets the merchantid of this ChargeRequest.  # noqa: E501

        Identifies the merchant account to perform processing for.  # noqa: E501

        :return: The merchantid of this ChargeRequest.  # noqa: E501
        :rtype: int
        """
        return self._merchantid

    @merchantid.setter
    def merchantid(self, merchantid):
        """Sets the merchantid of this ChargeRequest.

        Identifies the merchant account to perform processing for.  # noqa: E501

        :param merchantid: The merchantid of this ChargeRequest.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and merchantid is None:  # noqa: E501
            raise ValueError("Invalid value for `merchantid`, must not be `None`")  # noqa: E501

        self._merchantid = merchantid

    @property
    def threedsecure(self):
        """Gets the threedsecure of this ChargeRequest.  # noqa: E501


        :return: The threedsecure of this ChargeRequest.  # noqa: E501
        :rtype: ThreeDSecure
        """
        return self._threedsecure

    @threedsecure.setter
    def threedsecure(self, threedsecure):
        """Sets the threedsecure of this ChargeRequest.


        :param threedsecure: The threedsecure of this ChargeRequest.  # noqa: E501
        :type: ThreeDSecure
        """

        self._threedsecure = threedsecure

    @property
    def token(self):
        """Gets the token of this ChargeRequest.  # noqa: E501

        A tokenised form of a card that belongs to a card holder's account and that has been previously registered. The token is time based and will only be active for a short duration. The value is therefore designed not to be stored remotely for future  use.  Tokens will start with ct and are resiliently tamper proof using HMacSHA-256. No sensitive card data is stored internally within the token.  Each card will contain a different token and the value may be different on any retrieval call.  The value can be presented for payment as a selection value to an end user in a web application.   # noqa: E501

        :return: The token of this ChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ChargeRequest.

        A tokenised form of a card that belongs to a card holder's account and that has been previously registered. The token is time based and will only be active for a short duration. The value is therefore designed not to be stored remotely for future  use.  Tokens will start with ct and are resiliently tamper proof using HMacSHA-256. No sensitive card data is stored internally within the token.  Each card will contain a different token and the value may be different on any retrieval call.  The value can be presented for payment as a selection value to an end user in a web application.   # noqa: E501

        :param token: The token of this ChargeRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and token is None:  # noqa: E501
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def trans_info(self):
        """Gets the trans_info of this ChargeRequest.  # noqa: E501

        Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id.  # noqa: E501

        :return: The trans_info of this ChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._trans_info

    @trans_info.setter
    def trans_info(self, trans_info):
        """Sets the trans_info of this ChargeRequest.

        Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id.  # noqa: E501

        :param trans_info: The trans_info of this ChargeRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                trans_info is not None and len(trans_info) > 50):
            raise ValueError("Invalid value for `trans_info`, length must be less than or equal to `50`")  # noqa: E501

        self._trans_info = trans_info

    @property
    def trans_type(self):
        """Gets the trans_type of this ChargeRequest.  # noqa: E501

        The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field.  # noqa: E501

        :return: The trans_type of this ChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._trans_type

    @trans_type.setter
    def trans_type(self, trans_type):
        """Sets the trans_type of this ChargeRequest.

        The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field.  # noqa: E501

        :param trans_type: The trans_type of this ChargeRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                trans_type is not None and len(trans_type) > 1):
            raise ValueError("Invalid value for `trans_type`, length must be less than or equal to `1`")  # noqa: E501

        self._trans_type = trans_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChargeRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChargeRequest):
            return True

        return self.to_dict() != other.to_dict()
