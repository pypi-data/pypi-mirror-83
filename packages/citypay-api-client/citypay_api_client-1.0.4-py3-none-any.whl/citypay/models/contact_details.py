# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.   # noqa: E501

    Contact: support@citypay.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from citypay.configuration import Configuration


class ContactDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address1': 'str',
        'address2': 'str',
        'address3': 'str',
        'area': 'str',
        'company': 'str',
        'country': 'str',
        'email': 'str',
        'firstname': 'str',
        'lastname': 'str',
        'mobile_no': 'str',
        'postcode': 'str',
        'telephone_no': 'str',
        'title': 'str'
    }

    attribute_map = {
        'address1': 'address1',
        'address2': 'address2',
        'address3': 'address3',
        'area': 'area',
        'company': 'company',
        'country': 'country',
        'email': 'email',
        'firstname': 'firstname',
        'lastname': 'lastname',
        'mobile_no': 'mobile_no',
        'postcode': 'postcode',
        'telephone_no': 'telephone_no',
        'title': 'title'
    }

    def __init__(self, address1=None, address2=None, address3=None, area=None, company=None, country=None, email=None, firstname=None, lastname=None, mobile_no=None, postcode=None, telephone_no=None, title=None, local_vars_configuration=None):  # noqa: E501
        """ContactDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._address1 = None
        self._address2 = None
        self._address3 = None
        self._area = None
        self._company = None
        self._country = None
        self._email = None
        self._firstname = None
        self._lastname = None
        self._mobile_no = None
        self._postcode = None
        self._telephone_no = None
        self._title = None
        self.discriminator = None

        if address1 is not None:
            self.address1 = address1
        if address2 is not None:
            self.address2 = address2
        if address3 is not None:
            self.address3 = address3
        if area is not None:
            self.area = area
        if company is not None:
            self.company = company
        if country is not None:
            self.country = country
        if email is not None:
            self.email = email
        if firstname is not None:
            self.firstname = firstname
        if lastname is not None:
            self.lastname = lastname
        if mobile_no is not None:
            self.mobile_no = mobile_no
        if postcode is not None:
            self.postcode = postcode
        if telephone_no is not None:
            self.telephone_no = telephone_no
        if title is not None:
            self.title = title

    @property
    def address1(self):
        """Gets the address1 of this ContactDetails.  # noqa: E501

        The first line of the address for the card holder.  # noqa: E501

        :return: The address1 of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this ContactDetails.

        The first line of the address for the card holder.  # noqa: E501

        :param address1: The address1 of this ContactDetails.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                address1 is not None and len(address1) > 50):
            raise ValueError("Invalid value for `address1`, length must be less than or equal to `50`")  # noqa: E501

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this ContactDetails.  # noqa: E501

        The second line of the address for the card holder.  # noqa: E501

        :return: The address2 of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this ContactDetails.

        The second line of the address for the card holder.  # noqa: E501

        :param address2: The address2 of this ContactDetails.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                address2 is not None and len(address2) > 50):
            raise ValueError("Invalid value for `address2`, length must be less than or equal to `50`")  # noqa: E501

        self._address2 = address2

    @property
    def address3(self):
        """Gets the address3 of this ContactDetails.  # noqa: E501

        The third line of the address for the card holder.  # noqa: E501

        :return: The address3 of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._address3

    @address3.setter
    def address3(self, address3):
        """Sets the address3 of this ContactDetails.

        The third line of the address for the card holder.  # noqa: E501

        :param address3: The address3 of this ContactDetails.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                address3 is not None and len(address3) > 50):
            raise ValueError("Invalid value for `address3`, length must be less than or equal to `50`")  # noqa: E501

        self._address3 = address3

    @property
    def area(self):
        """Gets the area of this ContactDetails.  # noqa: E501

        The area such as city, department, parish for the card holder.  # noqa: E501

        :return: The area of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this ContactDetails.

        The area such as city, department, parish for the card holder.  # noqa: E501

        :param area: The area of this ContactDetails.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                area is not None and len(area) > 50):
            raise ValueError("Invalid value for `area`, length must be less than or equal to `50`")  # noqa: E501

        self._area = area

    @property
    def company(self):
        """Gets the company of this ContactDetails.  # noqa: E501

        The company name for the card holder if the contact is a corporate contact.  # noqa: E501

        :return: The company of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this ContactDetails.

        The company name for the card holder if the contact is a corporate contact.  # noqa: E501

        :param company: The company of this ContactDetails.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def country(self):
        """Gets the country of this ContactDetails.  # noqa: E501

        The country code in ISO 3166 format. The country value may be used for fraud analysis and for   acceptance of the transaction.   # noqa: E501

        :return: The country of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ContactDetails.

        The country code in ISO 3166 format. The country value may be used for fraud analysis and for   acceptance of the transaction.   # noqa: E501

        :param country: The country of this ContactDetails.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                country is not None and len(country) > 2):
            raise ValueError("Invalid value for `country`, length must be less than or equal to `2`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                country is not None and len(country) < 2):
            raise ValueError("Invalid value for `country`, length must be greater than or equal to `2`")  # noqa: E501

        self._country = country

    @property
    def email(self):
        """Gets the email of this ContactDetails.  # noqa: E501

        An email address for the card holder which may be used for correspondence.  # noqa: E501

        :return: The email of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ContactDetails.

        An email address for the card holder which may be used for correspondence.  # noqa: E501

        :param email: The email of this ContactDetails.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def firstname(self):
        """Gets the firstname of this ContactDetails.  # noqa: E501

        The first name  of the card holder.  # noqa: E501

        :return: The firstname of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this ContactDetails.

        The first name  of the card holder.  # noqa: E501

        :param firstname: The firstname of this ContactDetails.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this ContactDetails.  # noqa: E501

        The last name or surname of the card holder.  # noqa: E501

        :return: The lastname of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this ContactDetails.

        The last name or surname of the card holder.  # noqa: E501

        :param lastname: The lastname of this ContactDetails.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def mobile_no(self):
        """Gets the mobile_no of this ContactDetails.  # noqa: E501

        A mobile number for the card holder the mobile number is often required by delivery companies to ensure they are able to be in contact when required.  # noqa: E501

        :return: The mobile_no of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._mobile_no

    @mobile_no.setter
    def mobile_no(self, mobile_no):
        """Sets the mobile_no of this ContactDetails.

        A mobile number for the card holder the mobile number is often required by delivery companies to ensure they are able to be in contact when required.  # noqa: E501

        :param mobile_no: The mobile_no of this ContactDetails.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                mobile_no is not None and len(mobile_no) > 20):
            raise ValueError("Invalid value for `mobile_no`, length must be less than or equal to `20`")  # noqa: E501

        self._mobile_no = mobile_no

    @property
    def postcode(self):
        """Gets the postcode of this ContactDetails.  # noqa: E501

        The postcode or zip code of the address which may be used for fraud analysis.  # noqa: E501

        :return: The postcode of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this ContactDetails.

        The postcode or zip code of the address which may be used for fraud analysis.  # noqa: E501

        :param postcode: The postcode of this ContactDetails.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                postcode is not None and len(postcode) > 10):
            raise ValueError("Invalid value for `postcode`, length must be less than or equal to `10`")  # noqa: E501

        self._postcode = postcode

    @property
    def telephone_no(self):
        """Gets the telephone_no of this ContactDetails.  # noqa: E501

        A telephone number for the card holder.  # noqa: E501

        :return: The telephone_no of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._telephone_no

    @telephone_no.setter
    def telephone_no(self, telephone_no):
        """Sets the telephone_no of this ContactDetails.

        A telephone number for the card holder.  # noqa: E501

        :param telephone_no: The telephone_no of this ContactDetails.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                telephone_no is not None and len(telephone_no) > 20):
            raise ValueError("Invalid value for `telephone_no`, length must be less than or equal to `20`")  # noqa: E501

        self._telephone_no = telephone_no

    @property
    def title(self):
        """Gets the title of this ContactDetails.  # noqa: E501

        A title for the card holder such as Mr, Mrs, Ms, M. Mme. etc.  # noqa: E501

        :return: The title of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ContactDetails.

        A title for the card holder such as Mr, Mrs, Ms, M. Mme. etc.  # noqa: E501

        :param title: The title of this ContactDetails.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContactDetails):
            return True

        return self.to_dict() != other.to_dict()
