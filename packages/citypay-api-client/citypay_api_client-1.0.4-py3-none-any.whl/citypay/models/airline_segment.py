# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.   # noqa: E501

    Contact: support@citypay.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from citypay.configuration import Configuration


class AirlineSegment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'arrival_location_code': 'str',
        'carrier_code': 'str',
        'class_service_code': 'str',
        'departure_date': 'date',
        'departure_location_code': 'str',
        'flight_number': 'str',
        'segment_fare': 'int',
        'stop_over_indicator': 'str'
    }

    attribute_map = {
        'arrival_location_code': 'arrival_location_code',
        'carrier_code': 'carrier_code',
        'class_service_code': 'class_service_code',
        'departure_date': 'departure_date',
        'departure_location_code': 'departure_location_code',
        'flight_number': 'flight_number',
        'segment_fare': 'segment_fare',
        'stop_over_indicator': 'stop_over_indicator'
    }

    def __init__(self, arrival_location_code=None, carrier_code=None, class_service_code=None, departure_date=None, departure_location_code=None, flight_number=None, segment_fare=None, stop_over_indicator=None, local_vars_configuration=None):  # noqa: E501
        """AirlineSegment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._arrival_location_code = None
        self._carrier_code = None
        self._class_service_code = None
        self._departure_date = None
        self._departure_location_code = None
        self._flight_number = None
        self._segment_fare = None
        self._stop_over_indicator = None
        self.discriminator = None

        self.arrival_location_code = arrival_location_code
        self.carrier_code = carrier_code
        self.class_service_code = class_service_code
        self.departure_date = departure_date
        if departure_location_code is not None:
            self.departure_location_code = departure_location_code
        self.flight_number = flight_number
        if segment_fare is not None:
            self.segment_fare = segment_fare
        if stop_over_indicator is not None:
            self.stop_over_indicator = stop_over_indicator

    @property
    def arrival_location_code(self):
        """Gets the arrival_location_code of this AirlineSegment.  # noqa: E501

        A standard airline routing code (airport code or location identifier) applicable to the arrival portion of this segment.   # noqa: E501

        :return: The arrival_location_code of this AirlineSegment.  # noqa: E501
        :rtype: str
        """
        return self._arrival_location_code

    @arrival_location_code.setter
    def arrival_location_code(self, arrival_location_code):
        """Sets the arrival_location_code of this AirlineSegment.

        A standard airline routing code (airport code or location identifier) applicable to the arrival portion of this segment.   # noqa: E501

        :param arrival_location_code: The arrival_location_code of this AirlineSegment.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and arrival_location_code is None:  # noqa: E501
            raise ValueError("Invalid value for `arrival_location_code`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                arrival_location_code is not None and len(arrival_location_code) > 3):
            raise ValueError("Invalid value for `arrival_location_code`, length must be less than or equal to `3`")  # noqa: E501

        self._arrival_location_code = arrival_location_code

    @property
    def carrier_code(self):
        """Gets the carrier_code of this AirlineSegment.  # noqa: E501

        This field contains the two character airline designator code (air carrier code or airline code) that corresponds to the airline carrier applicable for up to four flight segments of this trip itinerary.   # noqa: E501

        :return: The carrier_code of this AirlineSegment.  # noqa: E501
        :rtype: str
        """
        return self._carrier_code

    @carrier_code.setter
    def carrier_code(self, carrier_code):
        """Sets the carrier_code of this AirlineSegment.

        This field contains the two character airline designator code (air carrier code or airline code) that corresponds to the airline carrier applicable for up to four flight segments of this trip itinerary.   # noqa: E501

        :param carrier_code: The carrier_code of this AirlineSegment.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and carrier_code is None:  # noqa: E501
            raise ValueError("Invalid value for `carrier_code`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                carrier_code is not None and len(carrier_code) > 2):
            raise ValueError("Invalid value for `carrier_code`, length must be less than or equal to `2`")  # noqa: E501

        self._carrier_code = carrier_code

    @property
    def class_service_code(self):
        """Gets the class_service_code of this AirlineSegment.  # noqa: E501

        This field contains a code that corresponds to the fare class (A, B, C, D, Premium, Discounted, etc.) within the overall class of service (e.g., First Class, Business, Economy) applicable to this travel segment, as specified in the IATA Standard Code allocation table.   # noqa: E501

        :return: The class_service_code of this AirlineSegment.  # noqa: E501
        :rtype: str
        """
        return self._class_service_code

    @class_service_code.setter
    def class_service_code(self, class_service_code):
        """Sets the class_service_code of this AirlineSegment.

        This field contains a code that corresponds to the fare class (A, B, C, D, Premium, Discounted, etc.) within the overall class of service (e.g., First Class, Business, Economy) applicable to this travel segment, as specified in the IATA Standard Code allocation table.   # noqa: E501

        :param class_service_code: The class_service_code of this AirlineSegment.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and class_service_code is None:  # noqa: E501
            raise ValueError("Invalid value for `class_service_code`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                class_service_code is not None and len(class_service_code) > 2):
            raise ValueError("Invalid value for `class_service_code`, length must be less than or equal to `2`")  # noqa: E501

        self._class_service_code = class_service_code

    @property
    def departure_date(self):
        """Gets the departure_date of this AirlineSegment.  # noqa: E501

        The Departure Date for the travel segment in ISO Date Format (yyyy-MM-dd).  # noqa: E501

        :return: The departure_date of this AirlineSegment.  # noqa: E501
        :rtype: date
        """
        return self._departure_date

    @departure_date.setter
    def departure_date(self, departure_date):
        """Sets the departure_date of this AirlineSegment.

        The Departure Date for the travel segment in ISO Date Format (yyyy-MM-dd).  # noqa: E501

        :param departure_date: The departure_date of this AirlineSegment.  # noqa: E501
        :type: date
        """
        if self.local_vars_configuration.client_side_validation and departure_date is None:  # noqa: E501
            raise ValueError("Invalid value for `departure_date`, must not be `None`")  # noqa: E501

        self._departure_date = departure_date

    @property
    def departure_location_code(self):
        """Gets the departure_location_code of this AirlineSegment.  # noqa: E501

        A standard airline routing code (airport code or location identifier) applicable to the departure portion of this segment.   # noqa: E501

        :return: The departure_location_code of this AirlineSegment.  # noqa: E501
        :rtype: str
        """
        return self._departure_location_code

    @departure_location_code.setter
    def departure_location_code(self, departure_location_code):
        """Sets the departure_location_code of this AirlineSegment.

        A standard airline routing code (airport code or location identifier) applicable to the departure portion of this segment.   # noqa: E501

        :param departure_location_code: The departure_location_code of this AirlineSegment.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                departure_location_code is not None and len(departure_location_code) > 3):
            raise ValueError("Invalid value for `departure_location_code`, length must be less than or equal to `3`")  # noqa: E501

        self._departure_location_code = departure_location_code

    @property
    def flight_number(self):
        """Gets the flight_number of this AirlineSegment.  # noqa: E501

        This field contains the carrier-assigned Flight Number for this travel segment.  # noqa: E501

        :return: The flight_number of this AirlineSegment.  # noqa: E501
        :rtype: str
        """
        return self._flight_number

    @flight_number.setter
    def flight_number(self, flight_number):
        """Sets the flight_number of this AirlineSegment.

        This field contains the carrier-assigned Flight Number for this travel segment.  # noqa: E501

        :param flight_number: The flight_number of this AirlineSegment.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and flight_number is None:  # noqa: E501
            raise ValueError("Invalid value for `flight_number`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                flight_number is not None and len(flight_number) > 4):
            raise ValueError("Invalid value for `flight_number`, length must be less than or equal to `4`")  # noqa: E501

        self._flight_number = flight_number

    @property
    def segment_fare(self):
        """Gets the segment_fare of this AirlineSegment.  # noqa: E501

        This field contains the total Fare for this travel segment.  # noqa: E501

        :return: The segment_fare of this AirlineSegment.  # noqa: E501
        :rtype: int
        """
        return self._segment_fare

    @segment_fare.setter
    def segment_fare(self, segment_fare):
        """Sets the segment_fare of this AirlineSegment.

        This field contains the total Fare for this travel segment.  # noqa: E501

        :param segment_fare: The segment_fare of this AirlineSegment.  # noqa: E501
        :type: int
        """

        self._segment_fare = segment_fare

    @property
    def stop_over_indicator(self):
        """Gets the stop_over_indicator of this AirlineSegment.  # noqa: E501

        O = Stopover allowed, X = Stopover not allowed.  # noqa: E501

        :return: The stop_over_indicator of this AirlineSegment.  # noqa: E501
        :rtype: str
        """
        return self._stop_over_indicator

    @stop_over_indicator.setter
    def stop_over_indicator(self, stop_over_indicator):
        """Sets the stop_over_indicator of this AirlineSegment.

        O = Stopover allowed, X = Stopover not allowed.  # noqa: E501

        :param stop_over_indicator: The stop_over_indicator of this AirlineSegment.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                stop_over_indicator is not None and len(stop_over_indicator) > 1):
            raise ValueError("Invalid value for `stop_over_indicator`, length must be less than or equal to `1`")  # noqa: E501

        self._stop_over_indicator = stop_over_indicator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AirlineSegment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AirlineSegment):
            return True

        return self.to_dict() != other.to_dict()
