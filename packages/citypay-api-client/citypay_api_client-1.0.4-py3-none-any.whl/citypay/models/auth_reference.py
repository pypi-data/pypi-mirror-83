# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.   # noqa: E501

    Contact: support@citypay.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from citypay.configuration import Configuration


class AuthReference(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'amount': 'str',
        'amount_value': 'int',
        'atrn': 'str',
        'authcode': 'str',
        'batchno': 'str',
        'currency': 'str',
        'datetime': 'datetime',
        'identifier': 'str',
        'maskedpan': 'str',
        'merchantid': 'int',
        'result': 'str',
        'trans_status': 'str',
        'trans_type': 'str',
        'transno': 'int'
    }

    attribute_map = {
        'amount': 'amount',
        'amount_value': 'amount_value',
        'atrn': 'atrn',
        'authcode': 'authcode',
        'batchno': 'batchno',
        'currency': 'currency',
        'datetime': 'datetime',
        'identifier': 'identifier',
        'maskedpan': 'maskedpan',
        'merchantid': 'merchantid',
        'result': 'result',
        'trans_status': 'trans_status',
        'trans_type': 'trans_type',
        'transno': 'transno'
    }

    def __init__(self, amount=None, amount_value=None, atrn=None, authcode=None, batchno=None, currency=None, datetime=None, identifier=None, maskedpan=None, merchantid=None, result=None, trans_status=None, trans_type=None, transno=None, local_vars_configuration=None):  # noqa: E501
        """AuthReference - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._amount = None
        self._amount_value = None
        self._atrn = None
        self._authcode = None
        self._batchno = None
        self._currency = None
        self._datetime = None
        self._identifier = None
        self._maskedpan = None
        self._merchantid = None
        self._result = None
        self._trans_status = None
        self._trans_type = None
        self._transno = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if amount_value is not None:
            self.amount_value = amount_value
        if atrn is not None:
            self.atrn = atrn
        if authcode is not None:
            self.authcode = authcode
        if batchno is not None:
            self.batchno = batchno
        if currency is not None:
            self.currency = currency
        if datetime is not None:
            self.datetime = datetime
        if identifier is not None:
            self.identifier = identifier
        if maskedpan is not None:
            self.maskedpan = maskedpan
        if merchantid is not None:
            self.merchantid = merchantid
        if result is not None:
            self.result = result
        if trans_status is not None:
            self.trans_status = trans_status
        if trans_type is not None:
            self.trans_type = trans_type
        if transno is not None:
            self.transno = transno

    @property
    def amount(self):
        """Gets the amount of this AuthReference.  # noqa: E501

        The amount of the transaction in decimal currency format.  # noqa: E501

        :return: The amount of this AuthReference.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AuthReference.

        The amount of the transaction in decimal currency format.  # noqa: E501

        :param amount: The amount of this AuthReference.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                amount is not None and len(amount) > 12):
            raise ValueError("Invalid value for `amount`, length must be less than or equal to `12`")  # noqa: E501

        self._amount = amount

    @property
    def amount_value(self):
        """Gets the amount_value of this AuthReference.  # noqa: E501

        The amount of the transaction in integer/request format.  # noqa: E501

        :return: The amount_value of this AuthReference.  # noqa: E501
        :rtype: int
        """
        return self._amount_value

    @amount_value.setter
    def amount_value(self, amount_value):
        """Sets the amount_value of this AuthReference.

        The amount of the transaction in integer/request format.  # noqa: E501

        :param amount_value: The amount_value of this AuthReference.  # noqa: E501
        :type: int
        """

        self._amount_value = amount_value

    @property
    def atrn(self):
        """Gets the atrn of this AuthReference.  # noqa: E501

        A reference number provided by the acquiring services.  # noqa: E501

        :return: The atrn of this AuthReference.  # noqa: E501
        :rtype: str
        """
        return self._atrn

    @atrn.setter
    def atrn(self, atrn):
        """Sets the atrn of this AuthReference.

        A reference number provided by the acquiring services.  # noqa: E501

        :param atrn: The atrn of this AuthReference.  # noqa: E501
        :type: str
        """

        self._atrn = atrn

    @property
    def authcode(self):
        """Gets the authcode of this AuthReference.  # noqa: E501

        The authorisation code of the transaction returned by the acquirer or card issuer.  # noqa: E501

        :return: The authcode of this AuthReference.  # noqa: E501
        :rtype: str
        """
        return self._authcode

    @authcode.setter
    def authcode(self, authcode):
        """Sets the authcode of this AuthReference.

        The authorisation code of the transaction returned by the acquirer or card issuer.  # noqa: E501

        :param authcode: The authcode of this AuthReference.  # noqa: E501
        :type: str
        """

        self._authcode = authcode

    @property
    def batchno(self):
        """Gets the batchno of this AuthReference.  # noqa: E501

        A batch number which the transaction has been end of day batched towards.  # noqa: E501

        :return: The batchno of this AuthReference.  # noqa: E501
        :rtype: str
        """
        return self._batchno

    @batchno.setter
    def batchno(self, batchno):
        """Sets the batchno of this AuthReference.

        A batch number which the transaction has been end of day batched towards.  # noqa: E501

        :param batchno: The batchno of this AuthReference.  # noqa: E501
        :type: str
        """

        self._batchno = batchno

    @property
    def currency(self):
        """Gets the currency of this AuthReference.  # noqa: E501

        The currency of the transaction in ISO 4217 code format.  # noqa: E501

        :return: The currency of this AuthReference.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AuthReference.

        The currency of the transaction in ISO 4217 code format.  # noqa: E501

        :param currency: The currency of this AuthReference.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                currency is not None and len(currency) > 3):
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                currency is not None and len(currency) < 3):
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")  # noqa: E501

        self._currency = currency

    @property
    def datetime(self):
        """Gets the datetime of this AuthReference.  # noqa: E501

        The date and time of the transaction.  # noqa: E501

        :return: The datetime of this AuthReference.  # noqa: E501
        :rtype: datetime
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime):
        """Sets the datetime of this AuthReference.

        The date and time of the transaction.  # noqa: E501

        :param datetime: The datetime of this AuthReference.  # noqa: E501
        :type: datetime
        """

        self._datetime = datetime

    @property
    def identifier(self):
        """Gets the identifier of this AuthReference.  # noqa: E501

        The identifier of the transaction used to process the transaction.  # noqa: E501

        :return: The identifier of this AuthReference.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this AuthReference.

        The identifier of the transaction used to process the transaction.  # noqa: E501

        :param identifier: The identifier of this AuthReference.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                identifier is not None and len(identifier) > 50):
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `50`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                identifier is not None and len(identifier) < 4):
            raise ValueError("Invalid value for `identifier`, length must be greater than or equal to `4`")  # noqa: E501

        self._identifier = identifier

    @property
    def maskedpan(self):
        """Gets the maskedpan of this AuthReference.  # noqa: E501

        A masking of the card number which was used to process the tranasction.  # noqa: E501

        :return: The maskedpan of this AuthReference.  # noqa: E501
        :rtype: str
        """
        return self._maskedpan

    @maskedpan.setter
    def maskedpan(self, maskedpan):
        """Sets the maskedpan of this AuthReference.

        A masking of the card number which was used to process the tranasction.  # noqa: E501

        :param maskedpan: The maskedpan of this AuthReference.  # noqa: E501
        :type: str
        """

        self._maskedpan = maskedpan

    @property
    def merchantid(self):
        """Gets the merchantid of this AuthReference.  # noqa: E501

        The merchant id of the transaction result.  # noqa: E501

        :return: The merchantid of this AuthReference.  # noqa: E501
        :rtype: int
        """
        return self._merchantid

    @merchantid.setter
    def merchantid(self, merchantid):
        """Sets the merchantid of this AuthReference.

        The merchant id of the transaction result.  # noqa: E501

        :param merchantid: The merchantid of this AuthReference.  # noqa: E501
        :type: int
        """

        self._merchantid = merchantid

    @property
    def result(self):
        """Gets the result of this AuthReference.  # noqa: E501

        The result of the transaction.  # noqa: E501

        :return: The result of this AuthReference.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this AuthReference.

        The result of the transaction.  # noqa: E501

        :param result: The result of this AuthReference.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def trans_status(self):
        """Gets the trans_status of this AuthReference.  # noqa: E501

        The current status of the transaction through it's lifecycle.  # noqa: E501

        :return: The trans_status of this AuthReference.  # noqa: E501
        :rtype: str
        """
        return self._trans_status

    @trans_status.setter
    def trans_status(self, trans_status):
        """Sets the trans_status of this AuthReference.

        The current status of the transaction through it's lifecycle.  # noqa: E501

        :param trans_status: The trans_status of this AuthReference.  # noqa: E501
        :type: str
        """

        self._trans_status = trans_status

    @property
    def trans_type(self):
        """Gets the trans_type of this AuthReference.  # noqa: E501

        The type of transaction that was processed.  # noqa: E501

        :return: The trans_type of this AuthReference.  # noqa: E501
        :rtype: str
        """
        return self._trans_type

    @trans_type.setter
    def trans_type(self, trans_type):
        """Sets the trans_type of this AuthReference.

        The type of transaction that was processed.  # noqa: E501

        :param trans_type: The trans_type of this AuthReference.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                trans_type is not None and len(trans_type) > 1):
            raise ValueError("Invalid value for `trans_type`, length must be less than or equal to `1`")  # noqa: E501

        self._trans_type = trans_type

    @property
    def transno(self):
        """Gets the transno of this AuthReference.  # noqa: E501

        The transaction number of the transaction.  # noqa: E501

        :return: The transno of this AuthReference.  # noqa: E501
        :rtype: int
        """
        return self._transno

    @transno.setter
    def transno(self, transno):
        """Sets the transno of this AuthReference.

        The transaction number of the transaction.  # noqa: E501

        :param transno: The transno of this AuthReference.  # noqa: E501
        :type: int
        """

        self._transno = transno

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthReference):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthReference):
            return True

        return self.to_dict() != other.to_dict()
