# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.   # noqa: E501

    Contact: support@citypay.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from citypay.api_client import ApiClient
from citypay.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class CardHolderAccountApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def account_card_delete_request(self, accountid, card_id, **kwargs):  # noqa: E501
        """Card Deletion  # noqa: E501

        Deletes a card from the account. The card will be marked for deletion before a subsequent purge will clear the card permanently.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_card_delete_request(accountid, card_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accountid: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account. (required)
        :param str card_id: The id of the card that is presented by a call to retrieve a card holder account. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Acknowledgement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.account_card_delete_request_with_http_info(accountid, card_id, **kwargs)  # noqa: E501

    def account_card_delete_request_with_http_info(self, accountid, card_id, **kwargs):  # noqa: E501
        """Card Deletion  # noqa: E501

        Deletes a card from the account. The card will be marked for deletion before a subsequent purge will clear the card permanently.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_card_delete_request_with_http_info(accountid, card_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accountid: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account. (required)
        :param str card_id: The id of the card that is presented by a call to retrieve a card holder account. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Acknowledgement, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accountid',
            'card_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_card_delete_request" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accountid' is set
        if self.api_client.client_side_validation and ('accountid' not in local_var_params or  # noqa: E501
                                                        local_var_params['accountid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accountid` when calling `account_card_delete_request`")  # noqa: E501
        # verify the required parameter 'card_id' is set
        if self.api_client.client_side_validation and ('card_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['card_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `card_id` when calling `account_card_delete_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accountid' in local_var_params:
            path_params['accountid'] = local_var_params['accountid']  # noqa: E501
        if 'card_id' in local_var_params:
            path_params['cardId'] = local_var_params['card_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cp-api-key']  # noqa: E501

        return self.api_client.call_api(
            '/account/{accountid}/card/{cardId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Acknowledgement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_card_register_request(self, accountid, register_card, **kwargs):  # noqa: E501
        """Card Registration  # noqa: E501

        Allows for a card to be registered for the account. The card will be added for future  processing and will be available as a tokenised value for future processing.  The card will be validated for  0. Being a valid card number (luhn check) 0. Having a valid expiry date 0. Being a valid bin value.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_card_register_request(accountid, register_card, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accountid: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account. (required)
        :param RegisterCard register_card: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: CardHolderAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.account_card_register_request_with_http_info(accountid, register_card, **kwargs)  # noqa: E501

    def account_card_register_request_with_http_info(self, accountid, register_card, **kwargs):  # noqa: E501
        """Card Registration  # noqa: E501

        Allows for a card to be registered for the account. The card will be added for future  processing and will be available as a tokenised value for future processing.  The card will be validated for  0. Being a valid card number (luhn check) 0. Having a valid expiry date 0. Being a valid bin value.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_card_register_request_with_http_info(accountid, register_card, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accountid: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account. (required)
        :param RegisterCard register_card: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(CardHolderAccount, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accountid',
            'register_card'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_card_register_request" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accountid' is set
        if self.api_client.client_side_validation and ('accountid' not in local_var_params or  # noqa: E501
                                                        local_var_params['accountid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accountid` when calling `account_card_register_request`")  # noqa: E501
        # verify the required parameter 'register_card' is set
        if self.api_client.client_side_validation and ('register_card' not in local_var_params or  # noqa: E501
                                                        local_var_params['register_card'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `register_card` when calling `account_card_register_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accountid' in local_var_params:
            path_params['accountid'] = local_var_params['accountid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'register_card' in local_var_params:
            body_params = local_var_params['register_card']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cp-api-key']  # noqa: E501

        return self.api_client.call_api(
            '/account/{accountid}/register', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CardHolderAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_card_status_request(self, accountid, card_id, card_status, **kwargs):  # noqa: E501
        """Card Status  # noqa: E501

        Updates the status of a card for processing. The following values are available  | Status | Description |  |--------|-------------| | Active | The card is active for processing and can be used for charging against with a valid token | | Inactive | The card is inactive for processing and cannot be used for processing, it will require reactivation before being used to charge | | Expired | The card has expired either due to the expiry date no longer being valid or due to a replacement card being issued |   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_card_status_request(accountid, card_id, card_status, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accountid: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account. (required)
        :param str card_id: The id of the card that is presented by a call to retrieve a card holder account. (required)
        :param CardStatus card_status: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Acknowledgement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.account_card_status_request_with_http_info(accountid, card_id, card_status, **kwargs)  # noqa: E501

    def account_card_status_request_with_http_info(self, accountid, card_id, card_status, **kwargs):  # noqa: E501
        """Card Status  # noqa: E501

        Updates the status of a card for processing. The following values are available  | Status | Description |  |--------|-------------| | Active | The card is active for processing and can be used for charging against with a valid token | | Inactive | The card is inactive for processing and cannot be used for processing, it will require reactivation before being used to charge | | Expired | The card has expired either due to the expiry date no longer being valid or due to a replacement card being issued |   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_card_status_request_with_http_info(accountid, card_id, card_status, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accountid: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account. (required)
        :param str card_id: The id of the card that is presented by a call to retrieve a card holder account. (required)
        :param CardStatus card_status: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Acknowledgement, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accountid',
            'card_id',
            'card_status'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_card_status_request" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accountid' is set
        if self.api_client.client_side_validation and ('accountid' not in local_var_params or  # noqa: E501
                                                        local_var_params['accountid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accountid` when calling `account_card_status_request`")  # noqa: E501
        # verify the required parameter 'card_id' is set
        if self.api_client.client_side_validation and ('card_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['card_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `card_id` when calling `account_card_status_request`")  # noqa: E501
        # verify the required parameter 'card_status' is set
        if self.api_client.client_side_validation and ('card_status' not in local_var_params or  # noqa: E501
                                                        local_var_params['card_status'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `card_status` when calling `account_card_status_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accountid' in local_var_params:
            path_params['accountid'] = local_var_params['accountid']  # noqa: E501
        if 'card_id' in local_var_params:
            path_params['cardId'] = local_var_params['card_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'card_status' in local_var_params:
            body_params = local_var_params['card_status']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cp-api-key']  # noqa: E501

        return self.api_client.call_api(
            '/account/{accountid}/card/{cardId}/status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Acknowledgement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_change_contact_request(self, accountid, contact_details, **kwargs):  # noqa: E501
        """Contact Details Update  # noqa: E501

        Allows for the ability to change the contact details for an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_change_contact_request(accountid, contact_details, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accountid: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account. (required)
        :param ContactDetails contact_details: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: CardHolderAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.account_change_contact_request_with_http_info(accountid, contact_details, **kwargs)  # noqa: E501

    def account_change_contact_request_with_http_info(self, accountid, contact_details, **kwargs):  # noqa: E501
        """Contact Details Update  # noqa: E501

        Allows for the ability to change the contact details for an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_change_contact_request_with_http_info(accountid, contact_details, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accountid: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account. (required)
        :param ContactDetails contact_details: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(CardHolderAccount, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accountid',
            'contact_details'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_change_contact_request" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accountid' is set
        if self.api_client.client_side_validation and ('accountid' not in local_var_params or  # noqa: E501
                                                        local_var_params['accountid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accountid` when calling `account_change_contact_request`")  # noqa: E501
        # verify the required parameter 'contact_details' is set
        if self.api_client.client_side_validation and ('contact_details' not in local_var_params or  # noqa: E501
                                                        local_var_params['contact_details'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `contact_details` when calling `account_change_contact_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accountid' in local_var_params:
            path_params['accountid'] = local_var_params['accountid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'contact_details' in local_var_params:
            body_params = local_var_params['contact_details']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cp-api-key']  # noqa: E501

        return self.api_client.call_api(
            '/account/{accountid}/contact', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CardHolderAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_create(self, account_create, **kwargs):  # noqa: E501
        """Account Create  # noqa: E501

        Creates a new card holder account and initialises the account ready for adding cards.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_create(account_create, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param AccountCreate account_create: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: CardHolderAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.account_create_with_http_info(account_create, **kwargs)  # noqa: E501

    def account_create_with_http_info(self, account_create, **kwargs):  # noqa: E501
        """Account Create  # noqa: E501

        Creates a new card holder account and initialises the account ready for adding cards.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_create_with_http_info(account_create, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param AccountCreate account_create: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(CardHolderAccount, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'account_create'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'account_create' is set
        if self.api_client.client_side_validation and ('account_create' not in local_var_params or  # noqa: E501
                                                        local_var_params['account_create'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `account_create` when calling `account_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'account_create' in local_var_params:
            body_params = local_var_params['account_create']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cp-api-key']  # noqa: E501

        return self.api_client.call_api(
            '/account/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CardHolderAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_delete_request(self, accountid, **kwargs):  # noqa: E501
        """Account Deletion  # noqa: E501

        Allows for the deletion of an account. The account will marked for deletion and subsequent purging. No further transactions will be alowed to be processed or actioned against this account.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_delete_request(accountid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accountid: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Acknowledgement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.account_delete_request_with_http_info(accountid, **kwargs)  # noqa: E501

    def account_delete_request_with_http_info(self, accountid, **kwargs):  # noqa: E501
        """Account Deletion  # noqa: E501

        Allows for the deletion of an account. The account will marked for deletion and subsequent purging. No further transactions will be alowed to be processed or actioned against this account.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_delete_request_with_http_info(accountid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accountid: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Acknowledgement, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accountid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_delete_request" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accountid' is set
        if self.api_client.client_side_validation and ('accountid' not in local_var_params or  # noqa: E501
                                                        local_var_params['accountid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accountid` when calling `account_delete_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accountid' in local_var_params:
            path_params['accountid'] = local_var_params['accountid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cp-api-key']  # noqa: E501

        return self.api_client.call_api(
            '/account/{accountid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Acknowledgement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_exists_request(self, accountid, **kwargs):  # noqa: E501
        """Account Exists  # noqa: E501

        .  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_exists_request(accountid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accountid: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Exists
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.account_exists_request_with_http_info(accountid, **kwargs)  # noqa: E501

    def account_exists_request_with_http_info(self, accountid, **kwargs):  # noqa: E501
        """Account Exists  # noqa: E501

        .  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_exists_request_with_http_info(accountid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accountid: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Exists, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accountid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_exists_request" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accountid' is set
        if self.api_client.client_side_validation and ('accountid' not in local_var_params or  # noqa: E501
                                                        local_var_params['accountid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accountid` when calling `account_exists_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accountid' in local_var_params:
            path_params['accountid'] = local_var_params['accountid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cp-api-key']  # noqa: E501

        return self.api_client.call_api(
            '/account-exists/{accountid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Exists',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_retrieve_request(self, accountid, **kwargs):  # noqa: E501
        """Account Retrieval  # noqa: E501

        Allows for the retrieval of a card holder account for the given `id`. Should duplicate accounts exist for the same `id`, the first account created with that `id` will be returned.  The account can be used for tokenisation processing by listing all cards assigned to the account. The returned cards will include all `active`, `inactive` and `expired` cards. This can be used to  enable a card holder to view their wallet and make constructive choices on which card to use.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_retrieve_request(accountid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accountid: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: CardHolderAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.account_retrieve_request_with_http_info(accountid, **kwargs)  # noqa: E501

    def account_retrieve_request_with_http_info(self, accountid, **kwargs):  # noqa: E501
        """Account Retrieval  # noqa: E501

        Allows for the retrieval of a card holder account for the given `id`. Should duplicate accounts exist for the same `id`, the first account created with that `id` will be returned.  The account can be used for tokenisation processing by listing all cards assigned to the account. The returned cards will include all `active`, `inactive` and `expired` cards. This can be used to  enable a card holder to view their wallet and make constructive choices on which card to use.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_retrieve_request_with_http_info(accountid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accountid: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(CardHolderAccount, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accountid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_retrieve_request" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accountid' is set
        if self.api_client.client_side_validation and ('accountid' not in local_var_params or  # noqa: E501
                                                        local_var_params['accountid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accountid` when calling `account_retrieve_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accountid' in local_var_params:
            path_params['accountid'] = local_var_params['accountid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cp-api-key']  # noqa: E501

        return self.api_client.call_api(
            '/account/{accountid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CardHolderAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_status_request(self, accountid, account_status, **kwargs):  # noqa: E501
        """Account Status  # noqa: E501

        Updates the status of an account. An account can have the following statuses applied  | Status | Description | |--------|-------------| | Active | The account is active for processing | | Disabled | The account has been disabled and cannot be used for processing. The account will require reactivation to continue procesing |   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_status_request(accountid, account_status, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accountid: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account. (required)
        :param AccountStatus account_status: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Acknowledgement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.account_status_request_with_http_info(accountid, account_status, **kwargs)  # noqa: E501

    def account_status_request_with_http_info(self, accountid, account_status, **kwargs):  # noqa: E501
        """Account Status  # noqa: E501

        Updates the status of an account. An account can have the following statuses applied  | Status | Description | |--------|-------------| | Active | The account is active for processing | | Disabled | The account has been disabled and cannot be used for processing. The account will require reactivation to continue procesing |   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_status_request_with_http_info(accountid, account_status, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accountid: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account. (required)
        :param AccountStatus account_status: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Acknowledgement, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accountid',
            'account_status'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_status_request" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accountid' is set
        if self.api_client.client_side_validation and ('accountid' not in local_var_params or  # noqa: E501
                                                        local_var_params['accountid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accountid` when calling `account_status_request`")  # noqa: E501
        # verify the required parameter 'account_status' is set
        if self.api_client.client_side_validation and ('account_status' not in local_var_params or  # noqa: E501
                                                        local_var_params['account_status'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `account_status` when calling `account_status_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accountid' in local_var_params:
            path_params['accountid'] = local_var_params['accountid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'account_status' in local_var_params:
            body_params = local_var_params['account_status']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cp-api-key']  # noqa: E501

        return self.api_client.call_api(
            '/account/{accountid}/status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Acknowledgement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def charge_request(self, charge_request, **kwargs):  # noqa: E501
        """Charge  # noqa: E501

        A charge process obtains an authorisation using a tokenised value which represents a stored card  on a card holder account.  A card must previously be registered by calling `/account-register-card` with the card details  or retrieved using `/account-retrieve`  Tokens are generated whenever a previously registered list of cards are retrieved. Each token has, by design a  relatively short time to live of 30 minutes. This is both to safe guard the merchant and card holder from  replay attacks. Tokens are also restricted to your account, preventing malicious actors from stealing details for use elsewhere.    If a token is reused after it has expired it will be rejected and a new token will be required.   Tokenisation can be used for   - repeat authorisations on a previously stored card - easy authorisations just requiring CSC values to be entered - can be used for credential on file style payments - can require full 3-D Secure authentication to retain the liability shift - wallet style usage.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.charge_request(charge_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param ChargeRequest charge_request: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Decision
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.charge_request_with_http_info(charge_request, **kwargs)  # noqa: E501

    def charge_request_with_http_info(self, charge_request, **kwargs):  # noqa: E501
        """Charge  # noqa: E501

        A charge process obtains an authorisation using a tokenised value which represents a stored card  on a card holder account.  A card must previously be registered by calling `/account-register-card` with the card details  or retrieved using `/account-retrieve`  Tokens are generated whenever a previously registered list of cards are retrieved. Each token has, by design a  relatively short time to live of 30 minutes. This is both to safe guard the merchant and card holder from  replay attacks. Tokens are also restricted to your account, preventing malicious actors from stealing details for use elsewhere.    If a token is reused after it has expired it will be rejected and a new token will be required.   Tokenisation can be used for   - repeat authorisations on a previously stored card - easy authorisations just requiring CSC values to be entered - can be used for credential on file style payments - can require full 3-D Secure authentication to retain the liability shift - wallet style usage.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.charge_request_with_http_info(charge_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param ChargeRequest charge_request: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Decision, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'charge_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method charge_request" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'charge_request' is set
        if self.api_client.client_side_validation and ('charge_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['charge_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `charge_request` when calling `charge_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'charge_request' in local_var_params:
            body_params = local_var_params['charge_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cp-api-key']  # noqa: E501

        return self.api_client.call_api(
            '/charge', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Decision',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
