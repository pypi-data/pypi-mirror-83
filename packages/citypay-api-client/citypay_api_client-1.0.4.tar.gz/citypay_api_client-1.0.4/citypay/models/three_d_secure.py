# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.   # noqa: E501

    Contact: support@citypay.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from citypay.configuration import Configuration


class ThreeDSecure(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'accept_headers': 'str',
        'cp_bx': 'str',
        'downgrade1': 'bool',
        'merchant_termurl': 'str',
        'tds_policy': 'str',
        'user_agent': 'str'
    }

    attribute_map = {
        'accept_headers': 'accept_headers',
        'cp_bx': 'cp_bx',
        'downgrade1': 'downgrade1',
        'merchant_termurl': 'merchant_termurl',
        'tds_policy': 'tds_policy',
        'user_agent': 'user_agent'
    }

    def __init__(self, accept_headers=None, cp_bx=None, downgrade1=None, merchant_termurl=None, tds_policy=None, user_agent=None, local_vars_configuration=None):  # noqa: E501
        """ThreeDSecure - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._accept_headers = None
        self._cp_bx = None
        self._downgrade1 = None
        self._merchant_termurl = None
        self._tds_policy = None
        self._user_agent = None
        self.discriminator = None

        if accept_headers is not None:
            self.accept_headers = accept_headers
        if cp_bx is not None:
            self.cp_bx = cp_bx
        if downgrade1 is not None:
            self.downgrade1 = downgrade1
        if merchant_termurl is not None:
            self.merchant_termurl = merchant_termurl
        if tds_policy is not None:
            self.tds_policy = tds_policy
        if user_agent is not None:
            self.user_agent = user_agent

    @property
    def accept_headers(self):
        """Gets the accept_headers of this ThreeDSecure.  # noqa: E501

        Required for 3DSv1. Optional if the `cp_bx` value is provided otherwise required for 3Dv2 processing operating in browser authentication mode.  The `cp_bx` value will override any value supplied to this field.  The content of the HTTP accept header as sent to the merchant from the cardholder's user agent. This value will be validated by the ACS when the card holder authenticates themselves to verify that no intermediary is performing this action. Required for 3DSv1.   # noqa: E501

        :return: The accept_headers of this ThreeDSecure.  # noqa: E501
        :rtype: str
        """
        return self._accept_headers

    @accept_headers.setter
    def accept_headers(self, accept_headers):
        """Sets the accept_headers of this ThreeDSecure.

        Required for 3DSv1. Optional if the `cp_bx` value is provided otherwise required for 3Dv2 processing operating in browser authentication mode.  The `cp_bx` value will override any value supplied to this field.  The content of the HTTP accept header as sent to the merchant from the cardholder's user agent. This value will be validated by the ACS when the card holder authenticates themselves to verify that no intermediary is performing this action. Required for 3DSv1.   # noqa: E501

        :param accept_headers: The accept_headers of this ThreeDSecure.  # noqa: E501
        :type: str
        """

        self._accept_headers = accept_headers

    @property
    def cp_bx(self):
        """Gets the cp_bx of this ThreeDSecure.  # noqa: E501

        Required for 3DSv2.  Browser extension value produced by the citypay.js `bx` function. See https://sandbox.citypay.com/3dsv2/bx for  details.   # noqa: E501

        :return: The cp_bx of this ThreeDSecure.  # noqa: E501
        :rtype: str
        """
        return self._cp_bx

    @cp_bx.setter
    def cp_bx(self, cp_bx):
        """Sets the cp_bx of this ThreeDSecure.

        Required for 3DSv2.  Browser extension value produced by the citypay.js `bx` function. See https://sandbox.citypay.com/3dsv2/bx for  details.   # noqa: E501

        :param cp_bx: The cp_bx of this ThreeDSecure.  # noqa: E501
        :type: str
        """

        self._cp_bx = cp_bx

    @property
    def downgrade1(self):
        """Gets the downgrade1 of this ThreeDSecure.  # noqa: E501

        Where a merchant is configured for 3DSv2, setting this option will attempt to downgrade the transaction to  3DSv1.   # noqa: E501

        :return: The downgrade1 of this ThreeDSecure.  # noqa: E501
        :rtype: bool
        """
        return self._downgrade1

    @downgrade1.setter
    def downgrade1(self, downgrade1):
        """Sets the downgrade1 of this ThreeDSecure.

        Where a merchant is configured for 3DSv2, setting this option will attempt to downgrade the transaction to  3DSv1.   # noqa: E501

        :param downgrade1: The downgrade1 of this ThreeDSecure.  # noqa: E501
        :type: bool
        """

        self._downgrade1 = downgrade1

    @property
    def merchant_termurl(self):
        """Gets the merchant_termurl of this ThreeDSecure.  # noqa: E501

        Required for 3DSv1 and 3Dv2 processing.  A controller URL for 3D-Secure processing that any response from an authentication request or challenge request should be sent to.  The controller should forward on the response from the URL back via this API for subsequent processing. Required if 3DSv1 or 3DSv2 is required.   # noqa: E501

        :return: The merchant_termurl of this ThreeDSecure.  # noqa: E501
        :rtype: str
        """
        return self._merchant_termurl

    @merchant_termurl.setter
    def merchant_termurl(self, merchant_termurl):
        """Sets the merchant_termurl of this ThreeDSecure.

        Required for 3DSv1 and 3Dv2 processing.  A controller URL for 3D-Secure processing that any response from an authentication request or challenge request should be sent to.  The controller should forward on the response from the URL back via this API for subsequent processing. Required if 3DSv1 or 3DSv2 is required.   # noqa: E501

        :param merchant_termurl: The merchant_termurl of this ThreeDSecure.  # noqa: E501
        :type: str
        """

        self._merchant_termurl = merchant_termurl

    @property
    def tds_policy(self):
        """Gets the tds_policy of this ThreeDSecure.  # noqa: E501

        A policy value which determines whether ThreeDSecure is enforced or bypassed. Note that this will only work for e-commerce transactions and accounts that have 3DSecure enabled and fully registered with Visa, MasterCard or American Express. It is useful when transactions may be wanted to bypass processing rules.  Note that this may affect the liability shift of transactions and may occur a higher fee with the acquiring bank.  Values are  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.  `1` for an enforced policy. Transactions will be enabled for 3DS processing  `2` to bypass. Transactions that are bypassed will switch off 3DS processing.   # noqa: E501

        :return: The tds_policy of this ThreeDSecure.  # noqa: E501
        :rtype: str
        """
        return self._tds_policy

    @tds_policy.setter
    def tds_policy(self, tds_policy):
        """Sets the tds_policy of this ThreeDSecure.

        A policy value which determines whether ThreeDSecure is enforced or bypassed. Note that this will only work for e-commerce transactions and accounts that have 3DSecure enabled and fully registered with Visa, MasterCard or American Express. It is useful when transactions may be wanted to bypass processing rules.  Note that this may affect the liability shift of transactions and may occur a higher fee with the acquiring bank.  Values are  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.  `1` for an enforced policy. Transactions will be enabled for 3DS processing  `2` to bypass. Transactions that are bypassed will switch off 3DS processing.   # noqa: E501

        :param tds_policy: The tds_policy of this ThreeDSecure.  # noqa: E501
        :type: str
        """

        self._tds_policy = tds_policy

    @property
    def user_agent(self):
        """Gets the user_agent of this ThreeDSecure.  # noqa: E501

        Required for 3DSv1. Optional if the `cp_bx` value is provided otherwise required 3Dv2 processing operating in browser authentication mode.  The `cp_bx` value will override any value supplied to this field.  The content of the HTTP user-agent header as sent to the merchant from the cardholder's user agent. This value will be validated by the ACS when the card holder authenticates themselves to verify that no intermediary is performing this action. Required for 3DSv1.   # noqa: E501

        :return: The user_agent of this ThreeDSecure.  # noqa: E501
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this ThreeDSecure.

        Required for 3DSv1. Optional if the `cp_bx` value is provided otherwise required 3Dv2 processing operating in browser authentication mode.  The `cp_bx` value will override any value supplied to this field.  The content of the HTTP user-agent header as sent to the merchant from the cardholder's user agent. This value will be validated by the ACS when the card holder authenticates themselves to verify that no intermediary is performing this action. Required for 3DSv1.   # noqa: E501

        :param user_agent: The user_agent of this ThreeDSecure.  # noqa: E501
        :type: str
        """

        self._user_agent = user_agent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThreeDSecure):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ThreeDSecure):
            return True

        return self.to_dict() != other.to_dict()
