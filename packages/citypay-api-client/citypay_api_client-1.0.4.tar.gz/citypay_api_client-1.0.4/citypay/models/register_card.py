# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.   # noqa: E501

    Contact: support@citypay.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from citypay.configuration import Configuration


class RegisterCard(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cardnumber': 'str',
        'default': 'bool',
        'expmonth': 'int',
        'expyear': 'int'
    }

    attribute_map = {
        'cardnumber': 'cardnumber',
        'default': 'default',
        'expmonth': 'expmonth',
        'expyear': 'expyear'
    }

    def __init__(self, cardnumber=None, default=None, expmonth=None, expyear=None, local_vars_configuration=None):  # noqa: E501
        """RegisterCard - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cardnumber = None
        self._default = None
        self._expmonth = None
        self._expyear = None
        self.discriminator = None

        self.cardnumber = cardnumber
        if default is not None:
            self.default = default
        self.expmonth = expmonth
        self.expyear = expyear

    @property
    def cardnumber(self):
        """Gets the cardnumber of this RegisterCard.  # noqa: E501

        The primary number of the card.  # noqa: E501

        :return: The cardnumber of this RegisterCard.  # noqa: E501
        :rtype: str
        """
        return self._cardnumber

    @cardnumber.setter
    def cardnumber(self, cardnumber):
        """Sets the cardnumber of this RegisterCard.

        The primary number of the card.  # noqa: E501

        :param cardnumber: The cardnumber of this RegisterCard.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cardnumber is None:  # noqa: E501
            raise ValueError("Invalid value for `cardnumber`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cardnumber is not None and len(cardnumber) > 22):
            raise ValueError("Invalid value for `cardnumber`, length must be less than or equal to `22`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cardnumber is not None and len(cardnumber) < 12):
            raise ValueError("Invalid value for `cardnumber`, length must be greater than or equal to `12`")  # noqa: E501

        self._cardnumber = cardnumber

    @property
    def default(self):
        """Gets the default of this RegisterCard.  # noqa: E501

        Determines whether the card should be the new default card.  # noqa: E501

        :return: The default of this RegisterCard.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this RegisterCard.

        Determines whether the card should be the new default card.  # noqa: E501

        :param default: The default of this RegisterCard.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def expmonth(self):
        """Gets the expmonth of this RegisterCard.  # noqa: E501

        The expiry month of the card.  # noqa: E501

        :return: The expmonth of this RegisterCard.  # noqa: E501
        :rtype: int
        """
        return self._expmonth

    @expmonth.setter
    def expmonth(self, expmonth):
        """Sets the expmonth of this RegisterCard.

        The expiry month of the card.  # noqa: E501

        :param expmonth: The expmonth of this RegisterCard.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and expmonth is None:  # noqa: E501
            raise ValueError("Invalid value for `expmonth`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                expmonth is not None and expmonth > 12):  # noqa: E501
            raise ValueError("Invalid value for `expmonth`, must be a value less than or equal to `12`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                expmonth is not None and expmonth < 1):  # noqa: E501
            raise ValueError("Invalid value for `expmonth`, must be a value greater than or equal to `1`")  # noqa: E501

        self._expmonth = expmonth

    @property
    def expyear(self):
        """Gets the expyear of this RegisterCard.  # noqa: E501

        The expiry year of the card.  # noqa: E501

        :return: The expyear of this RegisterCard.  # noqa: E501
        :rtype: int
        """
        return self._expyear

    @expyear.setter
    def expyear(self, expyear):
        """Sets the expyear of this RegisterCard.

        The expiry year of the card.  # noqa: E501

        :param expyear: The expyear of this RegisterCard.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and expyear is None:  # noqa: E501
            raise ValueError("Invalid value for `expyear`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                expyear is not None and expyear > 2100):  # noqa: E501
            raise ValueError("Invalid value for `expyear`, must be a value less than or equal to `2100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                expyear is not None and expyear < 2000):  # noqa: E501
            raise ValueError("Invalid value for `expyear`, must be a value greater than or equal to `2000`")  # noqa: E501

        self._expyear = expyear

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegisterCard):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RegisterCard):
            return True

        return self.to_dict() != other.to_dict()
