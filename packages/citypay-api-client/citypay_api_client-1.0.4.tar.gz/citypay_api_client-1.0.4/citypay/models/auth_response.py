# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.   # noqa: E501

    Contact: support@citypay.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from citypay.configuration import Configuration


class AuthResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'amount': 'int',
        'atrn': 'str',
        'atsd': 'str',
        'authcode': 'str',
        'authen_result': 'str',
        'authorised': 'bool',
        'avs_result': 'str',
        'bin_commercial': 'bool',
        'bin_debit': 'bool',
        'bin_description': 'str',
        'cavv': 'str',
        'context': 'str',
        'csc_result': 'str',
        'currency': 'str',
        'datetime': 'datetime',
        'eci': 'str',
        'identifier': 'str',
        'live': 'bool',
        'maskedpan': 'str',
        'merchantid': 'int',
        'result': 'int',
        'result_code': 'str',
        'result_message': 'str',
        'scheme': 'str',
        'sha256': 'str',
        'trans_status': 'str',
        'transno': 'int'
    }

    attribute_map = {
        'amount': 'amount',
        'atrn': 'atrn',
        'atsd': 'atsd',
        'authcode': 'authcode',
        'authen_result': 'authen_result',
        'authorised': 'authorised',
        'avs_result': 'avs_result',
        'bin_commercial': 'bin_commercial',
        'bin_debit': 'bin_debit',
        'bin_description': 'bin_description',
        'cavv': 'cavv',
        'context': 'context',
        'csc_result': 'csc_result',
        'currency': 'currency',
        'datetime': 'datetime',
        'eci': 'eci',
        'identifier': 'identifier',
        'live': 'live',
        'maskedpan': 'maskedpan',
        'merchantid': 'merchantid',
        'result': 'result',
        'result_code': 'result_code',
        'result_message': 'result_message',
        'scheme': 'scheme',
        'sha256': 'sha256',
        'trans_status': 'trans_status',
        'transno': 'transno'
    }

    def __init__(self, amount=None, atrn=None, atsd=None, authcode=None, authen_result=None, authorised=None, avs_result=None, bin_commercial=None, bin_debit=None, bin_description=None, cavv=None, context=None, csc_result=None, currency=None, datetime=None, eci=None, identifier=None, live=None, maskedpan=None, merchantid=None, result=None, result_code=None, result_message=None, scheme=None, sha256=None, trans_status=None, transno=None, local_vars_configuration=None):  # noqa: E501
        """AuthResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._amount = None
        self._atrn = None
        self._atsd = None
        self._authcode = None
        self._authen_result = None
        self._authorised = None
        self._avs_result = None
        self._bin_commercial = None
        self._bin_debit = None
        self._bin_description = None
        self._cavv = None
        self._context = None
        self._csc_result = None
        self._currency = None
        self._datetime = None
        self._eci = None
        self._identifier = None
        self._live = None
        self._maskedpan = None
        self._merchantid = None
        self._result = None
        self._result_code = None
        self._result_message = None
        self._scheme = None
        self._sha256 = None
        self._trans_status = None
        self._transno = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if atrn is not None:
            self.atrn = atrn
        if atsd is not None:
            self.atsd = atsd
        if authcode is not None:
            self.authcode = authcode
        if authen_result is not None:
            self.authen_result = authen_result
        if authorised is not None:
            self.authorised = authorised
        if avs_result is not None:
            self.avs_result = avs_result
        if bin_commercial is not None:
            self.bin_commercial = bin_commercial
        if bin_debit is not None:
            self.bin_debit = bin_debit
        if bin_description is not None:
            self.bin_description = bin_description
        if cavv is not None:
            self.cavv = cavv
        if context is not None:
            self.context = context
        if csc_result is not None:
            self.csc_result = csc_result
        if currency is not None:
            self.currency = currency
        if datetime is not None:
            self.datetime = datetime
        if eci is not None:
            self.eci = eci
        if identifier is not None:
            self.identifier = identifier
        if live is not None:
            self.live = live
        if maskedpan is not None:
            self.maskedpan = maskedpan
        if merchantid is not None:
            self.merchantid = merchantid
        if result is not None:
            self.result = result
        if result_code is not None:
            self.result_code = result_code
        if result_message is not None:
            self.result_message = result_message
        if scheme is not None:
            self.scheme = scheme
        if sha256 is not None:
            self.sha256 = sha256
        if trans_status is not None:
            self.trans_status = trans_status
        if transno is not None:
            self.transno = transno

    @property
    def amount(self):
        """Gets the amount of this AuthResponse.  # noqa: E501

        The amount of the transaction processed.  # noqa: E501

        :return: The amount of this AuthResponse.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AuthResponse.

        The amount of the transaction processed.  # noqa: E501

        :param amount: The amount of this AuthResponse.  # noqa: E501
        :type: int
        """

        self._amount = amount

    @property
    def atrn(self):
        """Gets the atrn of this AuthResponse.  # noqa: E501

        A reference number provided by the acquirer for a transaction it can be used to cross reference transactions with an Acquirers reporting panel.   # noqa: E501

        :return: The atrn of this AuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._atrn

    @atrn.setter
    def atrn(self, atrn):
        """Sets the atrn of this AuthResponse.

        A reference number provided by the acquirer for a transaction it can be used to cross reference transactions with an Acquirers reporting panel.   # noqa: E501

        :param atrn: The atrn of this AuthResponse.  # noqa: E501
        :type: str
        """

        self._atrn = atrn

    @property
    def atsd(self):
        """Gets the atsd of this AuthResponse.  # noqa: E501

        Additional Transaction Security Data used for ecommerce transactions to decipher security capabilities and attempts against a transaction.  # noqa: E501

        :return: The atsd of this AuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._atsd

    @atsd.setter
    def atsd(self, atsd):
        """Sets the atsd of this AuthResponse.

        Additional Transaction Security Data used for ecommerce transactions to decipher security capabilities and attempts against a transaction.  # noqa: E501

        :param atsd: The atsd of this AuthResponse.  # noqa: E501
        :type: str
        """

        self._atsd = atsd

    @property
    def authcode(self):
        """Gets the authcode of this AuthResponse.  # noqa: E501

        The authorisation code as returned by the card issuer or acquiring bank when a transaction has successfully   been authorised. Authorisation codes contain alphanumeric values. Whilst the code confirms authorisation it   should not be used to determine whether a transaction was successfully processed. For instance an auth code   may be returned when a transaction has been subsequently declined due to a CSC mismatch.   # noqa: E501

        :return: The authcode of this AuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._authcode

    @authcode.setter
    def authcode(self, authcode):
        """Sets the authcode of this AuthResponse.

        The authorisation code as returned by the card issuer or acquiring bank when a transaction has successfully   been authorised. Authorisation codes contain alphanumeric values. Whilst the code confirms authorisation it   should not be used to determine whether a transaction was successfully processed. For instance an auth code   may be returned when a transaction has been subsequently declined due to a CSC mismatch.   # noqa: E501

        :param authcode: The authcode of this AuthResponse.  # noqa: E501
        :type: str
        """

        self._authcode = authcode

    @property
    def authen_result(self):
        """Gets the authen_result of this AuthResponse.  # noqa: E501

        The result of any authentication using 3d_secure authorisation against ecommerce transactions. Values are | Value | Description | |-------|-------------| | Y | Authentication Successful. The Cardholder's password was successfully validated. | | N | Authentication Failed. Customer failed or cancelled authentication, transaction denied. | | A | Attempts Processing Performed Authentication could not be completed but a proof of authentication attempt (CAVV) was generated | | U | Authentication Could Not Be Performed Authentication could not be completed, due to technical or other problem |   # noqa: E501

        :return: The authen_result of this AuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._authen_result

    @authen_result.setter
    def authen_result(self, authen_result):
        """Sets the authen_result of this AuthResponse.

        The result of any authentication using 3d_secure authorisation against ecommerce transactions. Values are | Value | Description | |-------|-------------| | Y | Authentication Successful. The Cardholder's password was successfully validated. | | N | Authentication Failed. Customer failed or cancelled authentication, transaction denied. | | A | Attempts Processing Performed Authentication could not be completed but a proof of authentication attempt (CAVV) was generated | | U | Authentication Could Not Be Performed Authentication could not be completed, due to technical or other problem |   # noqa: E501

        :param authen_result: The authen_result of this AuthResponse.  # noqa: E501
        :type: str
        """

        self._authen_result = authen_result

    @property
    def authorised(self):
        """Gets the authorised of this AuthResponse.  # noqa: E501

        A boolean definition that indicates that the transaction was authorised. It will return false if the transaction  was declined, rejected or cancelled due to CSC matching failures. Attention should be referenced to the AuthResult and Response code for accurate determination of the result.   # noqa: E501

        :return: The authorised of this AuthResponse.  # noqa: E501
        :rtype: bool
        """
        return self._authorised

    @authorised.setter
    def authorised(self, authorised):
        """Sets the authorised of this AuthResponse.

        A boolean definition that indicates that the transaction was authorised. It will return false if the transaction  was declined, rejected or cancelled due to CSC matching failures. Attention should be referenced to the AuthResult and Response code for accurate determination of the result.   # noqa: E501

        :param authorised: The authorised of this AuthResponse.  # noqa: E501
        :type: bool
        """

        self._authorised = authorised

    @property
    def avs_result(self):
        """Gets the avs_result of this AuthResponse.  # noqa: E501

        The AVS result codes determine the result of checking the AVS values within the Address Verification fraud system. If a transaction is declined due to the AVS code not matching, this value can help determine the reason for the decline.   | Code | Description |  |------|------------|  | Y | Address and 5 digit post code match |  | M | Street address and Postal codes match for international transaction |  | U | No AVS data available from issuer auth system |  | A | Addres matches, post code does not |  | I | Address information verified for international transaction |  | Z | 5 digit post code matches, Address does not |  | W | 9 digit post code matches, Address does not |  | X | Postcode and address match |  | B | Postal code not verified due to incompatible formats |  | P | Postal codes match. Street address not verified due to to incompatible formats |  | E | AVS Error |  | C | Street address and Postal code not verified due to incompatible formats |  | D | Street address and postal codes match |  |   | No information |  | N | Neither postcode nor address match |  | R | Retry, System unavailble or Timed Out |  | S | AVS Service not supported by issuer or processor |  | G | Issuer does not participate in AVS |   # noqa: E501

        :return: The avs_result of this AuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._avs_result

    @avs_result.setter
    def avs_result(self, avs_result):
        """Sets the avs_result of this AuthResponse.

        The AVS result codes determine the result of checking the AVS values within the Address Verification fraud system. If a transaction is declined due to the AVS code not matching, this value can help determine the reason for the decline.   | Code | Description |  |------|------------|  | Y | Address and 5 digit post code match |  | M | Street address and Postal codes match for international transaction |  | U | No AVS data available from issuer auth system |  | A | Addres matches, post code does not |  | I | Address information verified for international transaction |  | Z | 5 digit post code matches, Address does not |  | W | 9 digit post code matches, Address does not |  | X | Postcode and address match |  | B | Postal code not verified due to incompatible formats |  | P | Postal codes match. Street address not verified due to to incompatible formats |  | E | AVS Error |  | C | Street address and Postal code not verified due to incompatible formats |  | D | Street address and postal codes match |  |   | No information |  | N | Neither postcode nor address match |  | R | Retry, System unavailble or Timed Out |  | S | AVS Service not supported by issuer or processor |  | G | Issuer does not participate in AVS |   # noqa: E501

        :param avs_result: The avs_result of this AuthResponse.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                avs_result is not None and len(avs_result) > 1):
            raise ValueError("Invalid value for `avs_result`, length must be less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                avs_result is not None and len(avs_result) < 1):
            raise ValueError("Invalid value for `avs_result`, length must be greater than or equal to `1`")  # noqa: E501

        self._avs_result = avs_result

    @property
    def bin_commercial(self):
        """Gets the bin_commercial of this AuthResponse.  # noqa: E501

        Determines whether the bin range was found to be a commercial or business card.  # noqa: E501

        :return: The bin_commercial of this AuthResponse.  # noqa: E501
        :rtype: bool
        """
        return self._bin_commercial

    @bin_commercial.setter
    def bin_commercial(self, bin_commercial):
        """Sets the bin_commercial of this AuthResponse.

        Determines whether the bin range was found to be a commercial or business card.  # noqa: E501

        :param bin_commercial: The bin_commercial of this AuthResponse.  # noqa: E501
        :type: bool
        """

        self._bin_commercial = bin_commercial

    @property
    def bin_debit(self):
        """Gets the bin_debit of this AuthResponse.  # noqa: E501

        Determines whether the bin range was found to be a debit card. If false the card was considered as a credit card.  # noqa: E501

        :return: The bin_debit of this AuthResponse.  # noqa: E501
        :rtype: bool
        """
        return self._bin_debit

    @bin_debit.setter
    def bin_debit(self, bin_debit):
        """Sets the bin_debit of this AuthResponse.

        Determines whether the bin range was found to be a debit card. If false the card was considered as a credit card.  # noqa: E501

        :param bin_debit: The bin_debit of this AuthResponse.  # noqa: E501
        :type: bool
        """

        self._bin_debit = bin_debit

    @property
    def bin_description(self):
        """Gets the bin_description of this AuthResponse.  # noqa: E501

        A description of the bin range found for the card.  # noqa: E501

        :return: The bin_description of this AuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._bin_description

    @bin_description.setter
    def bin_description(self, bin_description):
        """Sets the bin_description of this AuthResponse.

        A description of the bin range found for the card.  # noqa: E501

        :param bin_description: The bin_description of this AuthResponse.  # noqa: E501
        :type: str
        """

        self._bin_description = bin_description

    @property
    def cavv(self):
        """Gets the cavv of this AuthResponse.  # noqa: E501

        The cardholder authentication verification value which can be returned for verification purposes of the authenticated  transaction for dispute realisation.   # noqa: E501

        :return: The cavv of this AuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._cavv

    @cavv.setter
    def cavv(self, cavv):
        """Sets the cavv of this AuthResponse.

        The cardholder authentication verification value which can be returned for verification purposes of the authenticated  transaction for dispute realisation.   # noqa: E501

        :param cavv: The cavv of this AuthResponse.  # noqa: E501
        :type: str
        """

        self._cavv = cavv

    @property
    def context(self):
        """Gets the context of this AuthResponse.  # noqa: E501

        The context which processed the transaction, can be used for support purposes to trace transactions.  # noqa: E501

        :return: The context of this AuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this AuthResponse.

        The context which processed the transaction, can be used for support purposes to trace transactions.  # noqa: E501

        :param context: The context of this AuthResponse.  # noqa: E501
        :type: str
        """

        self._context = context

    @property
    def csc_result(self):
        """Gets the csc_result of this AuthResponse.  # noqa: E501

        The CSC rseult codes determine the result of checking the provided CSC value within the Card Security Code fraud system. If a transaction is declined due to the CSC code not matching, this value can help determine the reason for the decline.   | Code | Description |  |------|------------|  |   | No information |  | M | Card verification data matches |  | N | Card verification data was checked but did not match |  | P | Card verification was not processed |  | S | The card verification data should be on the card but the merchant indicates that it is not |  | U | The card issuer is not certified |   # noqa: E501

        :return: The csc_result of this AuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._csc_result

    @csc_result.setter
    def csc_result(self, csc_result):
        """Sets the csc_result of this AuthResponse.

        The CSC rseult codes determine the result of checking the provided CSC value within the Card Security Code fraud system. If a transaction is declined due to the CSC code not matching, this value can help determine the reason for the decline.   | Code | Description |  |------|------------|  |   | No information |  | M | Card verification data matches |  | N | Card verification data was checked but did not match |  | P | Card verification was not processed |  | S | The card verification data should be on the card but the merchant indicates that it is not |  | U | The card issuer is not certified |   # noqa: E501

        :param csc_result: The csc_result of this AuthResponse.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                csc_result is not None and len(csc_result) > 1):
            raise ValueError("Invalid value for `csc_result`, length must be less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                csc_result is not None and len(csc_result) < 1):
            raise ValueError("Invalid value for `csc_result`, length must be greater than or equal to `1`")  # noqa: E501

        self._csc_result = csc_result

    @property
    def currency(self):
        """Gets the currency of this AuthResponse.  # noqa: E501

        The currency the transaction was processed in. This is an `ISO4217` alpha currency value.  # noqa: E501

        :return: The currency of this AuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AuthResponse.

        The currency the transaction was processed in. This is an `ISO4217` alpha currency value.  # noqa: E501

        :param currency: The currency of this AuthResponse.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                currency is not None and len(currency) > 3):
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                currency is not None and len(currency) < 3):
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")  # noqa: E501

        self._currency = currency

    @property
    def datetime(self):
        """Gets the datetime of this AuthResponse.  # noqa: E501

        The UTC date time of the transaction in ISO data time format.   # noqa: E501

        :return: The datetime of this AuthResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime):
        """Sets the datetime of this AuthResponse.

        The UTC date time of the transaction in ISO data time format.   # noqa: E501

        :param datetime: The datetime of this AuthResponse.  # noqa: E501
        :type: datetime
        """

        self._datetime = datetime

    @property
    def eci(self):
        """Gets the eci of this AuthResponse.  # noqa: E501

        An Electronic Commerce Indicator (ECI) used to identify the result of authentication using 3DSecure.   # noqa: E501

        :return: The eci of this AuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._eci

    @eci.setter
    def eci(self, eci):
        """Sets the eci of this AuthResponse.

        An Electronic Commerce Indicator (ECI) used to identify the result of authentication using 3DSecure.   # noqa: E501

        :param eci: The eci of this AuthResponse.  # noqa: E501
        :type: str
        """

        self._eci = eci

    @property
    def identifier(self):
        """Gets the identifier of this AuthResponse.  # noqa: E501

        The identifier provided within the request.  # noqa: E501

        :return: The identifier of this AuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this AuthResponse.

        The identifier provided within the request.  # noqa: E501

        :param identifier: The identifier of this AuthResponse.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                identifier is not None and len(identifier) > 50):
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `50`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                identifier is not None and len(identifier) < 4):
            raise ValueError("Invalid value for `identifier`, length must be greater than or equal to `4`")  # noqa: E501

        self._identifier = identifier

    @property
    def live(self):
        """Gets the live of this AuthResponse.  # noqa: E501

        Used to identify that a tranasction was processed on a live authorisation platform.  # noqa: E501

        :return: The live of this AuthResponse.  # noqa: E501
        :rtype: bool
        """
        return self._live

    @live.setter
    def live(self, live):
        """Sets the live of this AuthResponse.

        Used to identify that a tranasction was processed on a live authorisation platform.  # noqa: E501

        :param live: The live of this AuthResponse.  # noqa: E501
        :type: bool
        """

        self._live = live

    @property
    def maskedpan(self):
        """Gets the maskedpan of this AuthResponse.  # noqa: E501

        A masked value of the card number used for processing displaying limited values that can be used on a receipt.   # noqa: E501

        :return: The maskedpan of this AuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._maskedpan

    @maskedpan.setter
    def maskedpan(self, maskedpan):
        """Sets the maskedpan of this AuthResponse.

        A masked value of the card number used for processing displaying limited values that can be used on a receipt.   # noqa: E501

        :param maskedpan: The maskedpan of this AuthResponse.  # noqa: E501
        :type: str
        """

        self._maskedpan = maskedpan

    @property
    def merchantid(self):
        """Gets the merchantid of this AuthResponse.  # noqa: E501

        The merchant id that processed this transaction.  # noqa: E501

        :return: The merchantid of this AuthResponse.  # noqa: E501
        :rtype: int
        """
        return self._merchantid

    @merchantid.setter
    def merchantid(self, merchantid):
        """Sets the merchantid of this AuthResponse.

        The merchant id that processed this transaction.  # noqa: E501

        :param merchantid: The merchantid of this AuthResponse.  # noqa: E501
        :type: int
        """

        self._merchantid = merchantid

    @property
    def result(self):
        """Gets the result of this AuthResponse.  # noqa: E501

        An integer result that indicates the outcome of the transaction. The Code value below maps to the result value   | Code | Abbrev | Description |  |------|-------|-------------|  | 0 | Declined | Declined |  | 1 | Accepted | Accepted |  | 2 | Rejected | Rejected |  | 3 | Not Attempted | Not Attempted |  | 4 | Referred | Referred |  | 5 | PinRetry | Perform PIN Retry |  | 6 | ForSigVer | Force Signature Verification |  | 7 | Hold | Hold |  | 8 | SecErr | Security Error |  | 9 | CallAcq | Call Acquirer |  | 10 | DNH | Do Not Honour |  | 11 | RtnCrd | Retain Card |  | 12 | ExprdCrd | Expired Card |  | 13 | InvldCrd | Invalid Card No |  | 14 | PinExcd | Pin Tries Exceeded |  | 15 | PinInvld | Pin Invalid |  | 16 | AuthReq | Authentication Required |  | 17 | AuthenFail | Authentication Failed |  | 18 | Verified | Card Verified |  | 19 | Cancelled | Cancelled |  | 20 | Un | Unknown |   # noqa: E501

        :return: The result of this AuthResponse.  # noqa: E501
        :rtype: int
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this AuthResponse.

        An integer result that indicates the outcome of the transaction. The Code value below maps to the result value   | Code | Abbrev | Description |  |------|-------|-------------|  | 0 | Declined | Declined |  | 1 | Accepted | Accepted |  | 2 | Rejected | Rejected |  | 3 | Not Attempted | Not Attempted |  | 4 | Referred | Referred |  | 5 | PinRetry | Perform PIN Retry |  | 6 | ForSigVer | Force Signature Verification |  | 7 | Hold | Hold |  | 8 | SecErr | Security Error |  | 9 | CallAcq | Call Acquirer |  | 10 | DNH | Do Not Honour |  | 11 | RtnCrd | Retain Card |  | 12 | ExprdCrd | Expired Card |  | 13 | InvldCrd | Invalid Card No |  | 14 | PinExcd | Pin Tries Exceeded |  | 15 | PinInvld | Pin Invalid |  | 16 | AuthReq | Authentication Required |  | 17 | AuthenFail | Authentication Failed |  | 18 | Verified | Card Verified |  | 19 | Cancelled | Cancelled |  | 20 | Un | Unknown |   # noqa: E501

        :param result: The result of this AuthResponse.  # noqa: E501
        :type: int
        """

        self._result = result

    @property
    def result_code(self):
        """Gets the result_code of this AuthResponse.  # noqa: E501

        The result code as defined in the Response Codes Reference for example 000 is an accepted live transaction whilst 001 is an accepted test transaction. Result codes identify the source of success and failure. Codes may start with an alpha character i.e. C001 indicating a type of error such as a card validation error.   # noqa: E501

        :return: The result_code of this AuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this AuthResponse.

        The result code as defined in the Response Codes Reference for example 000 is an accepted live transaction whilst 001 is an accepted test transaction. Result codes identify the source of success and failure. Codes may start with an alpha character i.e. C001 indicating a type of error such as a card validation error.   # noqa: E501

        :param result_code: The result_code of this AuthResponse.  # noqa: E501
        :type: str
        """

        self._result_code = result_code

    @property
    def result_message(self):
        """Gets the result_message of this AuthResponse.  # noqa: E501

        The message regarding the result which provides further narrative to the result code.   # noqa: E501

        :return: The result_message of this AuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._result_message

    @result_message.setter
    def result_message(self, result_message):
        """Sets the result_message of this AuthResponse.

        The message regarding the result which provides further narrative to the result code.   # noqa: E501

        :param result_message: The result_message of this AuthResponse.  # noqa: E501
        :type: str
        """

        self._result_message = result_message

    @property
    def scheme(self):
        """Gets the scheme of this AuthResponse.  # noqa: E501

        A name of the card scheme of the transaction that processed the transaction such as Visa or MasterCard.   # noqa: E501

        :return: The scheme of this AuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this AuthResponse.

        A name of the card scheme of the transaction that processed the transaction such as Visa or MasterCard.   # noqa: E501

        :param scheme: The scheme of this AuthResponse.  # noqa: E501
        :type: str
        """

        self._scheme = scheme

    @property
    def sha256(self):
        """Gets the sha256 of this AuthResponse.  # noqa: E501

        A SHA256 digest value of the transaction used to validate the response data The digest is calculated by concatenating  * authcode  * amount  * response_code  * merchant_id  * trans_no  * identifier  * licence_key - which is not provided in the response.   # noqa: E501

        :return: The sha256 of this AuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._sha256

    @sha256.setter
    def sha256(self, sha256):
        """Sets the sha256 of this AuthResponse.

        A SHA256 digest value of the transaction used to validate the response data The digest is calculated by concatenating  * authcode  * amount  * response_code  * merchant_id  * trans_no  * identifier  * licence_key - which is not provided in the response.   # noqa: E501

        :param sha256: The sha256 of this AuthResponse.  # noqa: E501
        :type: str
        """

        self._sha256 = sha256

    @property
    def trans_status(self):
        """Gets the trans_status of this AuthResponse.  # noqa: E501

        Used to identify the status of a transaction. The status is used to track a transaction through its life cycle.  | Id | Description | |----|-------------| | O | Transaction is open for settlement | | A | Transaction is assigned for settlement and can no longer be voided | | S | Transaction has been settled   | | D | Transaction has been declined | | R | Transaction has been rejected | | P | Transaction has been authorised only and awaiting a capture. Used in pre-auth situations | | C | Transaction has been cancelled | | E | Transaction has expired | | I | Transaction has been initialised but no action was able to be carried out | | H | Transaction is awaiting authorisation | | . | Transaction is on hold | | V | Transaction has been verified |   # noqa: E501

        :return: The trans_status of this AuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._trans_status

    @trans_status.setter
    def trans_status(self, trans_status):
        """Sets the trans_status of this AuthResponse.

        Used to identify the status of a transaction. The status is used to track a transaction through its life cycle.  | Id | Description | |----|-------------| | O | Transaction is open for settlement | | A | Transaction is assigned for settlement and can no longer be voided | | S | Transaction has been settled   | | D | Transaction has been declined | | R | Transaction has been rejected | | P | Transaction has been authorised only and awaiting a capture. Used in pre-auth situations | | C | Transaction has been cancelled | | E | Transaction has expired | | I | Transaction has been initialised but no action was able to be carried out | | H | Transaction is awaiting authorisation | | . | Transaction is on hold | | V | Transaction has been verified |   # noqa: E501

        :param trans_status: The trans_status of this AuthResponse.  # noqa: E501
        :type: str
        """

        self._trans_status = trans_status

    @property
    def transno(self):
        """Gets the transno of this AuthResponse.  # noqa: E501

        The resulting transaction number, ordered incrementally from 1 for every merchant_id. The value will default to less than 1 for transactions that do not have a transaction number issued.   # noqa: E501

        :return: The transno of this AuthResponse.  # noqa: E501
        :rtype: int
        """
        return self._transno

    @transno.setter
    def transno(self, transno):
        """Sets the transno of this AuthResponse.

        The resulting transaction number, ordered incrementally from 1 for every merchant_id. The value will default to less than 1 for transactions that do not have a transaction number issued.   # noqa: E501

        :param transno: The transno of this AuthResponse.  # noqa: E501
        :type: int
        """

        self._transno = transno

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthResponse):
            return True

        return self.to_dict() != other.to_dict()
