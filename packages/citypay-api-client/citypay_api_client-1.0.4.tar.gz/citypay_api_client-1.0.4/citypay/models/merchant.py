# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.   # noqa: E501

    Contact: support@citypay.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from citypay.configuration import Configuration


class Merchant(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'currency': 'str',
        'merchantid': 'int',
        'name': 'str',
        'status': 'str',
        'status_label': 'str'
    }

    attribute_map = {
        'currency': 'currency',
        'merchantid': 'merchantid',
        'name': 'name',
        'status': 'status',
        'status_label': 'status_label'
    }

    def __init__(self, currency=None, merchantid=None, name=None, status=None, status_label=None, local_vars_configuration=None):  # noqa: E501
        """Merchant - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._currency = None
        self._merchantid = None
        self._name = None
        self._status = None
        self._status_label = None
        self.discriminator = None

        if currency is not None:
            self.currency = currency
        if merchantid is not None:
            self.merchantid = merchantid
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if status_label is not None:
            self.status_label = status_label

    @property
    def currency(self):
        """Gets the currency of this Merchant.  # noqa: E501

        The currency of the merchant.  # noqa: E501

        :return: The currency of this Merchant.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Merchant.

        The currency of the merchant.  # noqa: E501

        :param currency: The currency of this Merchant.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def merchantid(self):
        """Gets the merchantid of this Merchant.  # noqa: E501

        The merchant id which uniquely identifies the merchant account.  # noqa: E501

        :return: The merchantid of this Merchant.  # noqa: E501
        :rtype: int
        """
        return self._merchantid

    @merchantid.setter
    def merchantid(self, merchantid):
        """Sets the merchantid of this Merchant.

        The merchant id which uniquely identifies the merchant account.  # noqa: E501

        :param merchantid: The merchantid of this Merchant.  # noqa: E501
        :type: int
        """

        self._merchantid = merchantid

    @property
    def name(self):
        """Gets the name of this Merchant.  # noqa: E501

        The name of the merchant.  # noqa: E501

        :return: The name of this Merchant.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Merchant.

        The name of the merchant.  # noqa: E501

        :param name: The name of this Merchant.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this Merchant.  # noqa: E501

        The status of the account.  # noqa: E501

        :return: The status of this Merchant.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Merchant.

        The status of the account.  # noqa: E501

        :param status: The status of this Merchant.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_label(self):
        """Gets the status_label of this Merchant.  # noqa: E501

        The status label of the account.  # noqa: E501

        :return: The status_label of this Merchant.  # noqa: E501
        :rtype: str
        """
        return self._status_label

    @status_label.setter
    def status_label(self, status_label):
        """Sets the status_label of this Merchant.

        The status label of the account.  # noqa: E501

        :param status_label: The status_label of this Merchant.  # noqa: E501
        :type: str
        """

        self._status_label = status_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Merchant):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Merchant):
            return True

        return self.to_dict() != other.to_dict()
