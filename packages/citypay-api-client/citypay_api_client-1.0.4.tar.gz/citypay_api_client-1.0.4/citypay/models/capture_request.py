# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.   # noqa: E501

    Contact: support@citypay.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from citypay.configuration import Configuration


class CaptureRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'airline_data': 'AirlineAdvice',
        'amount': 'int',
        'identifier': 'str',
        'merchantid': 'int',
        'transno': 'int'
    }

    attribute_map = {
        'airline_data': 'airline_data',
        'amount': 'amount',
        'identifier': 'identifier',
        'merchantid': 'merchantid',
        'transno': 'transno'
    }

    def __init__(self, airline_data=None, amount=None, identifier=None, merchantid=None, transno=None, local_vars_configuration=None):  # noqa: E501
        """CaptureRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._airline_data = None
        self._amount = None
        self._identifier = None
        self._merchantid = None
        self._transno = None
        self.discriminator = None

        if airline_data is not None:
            self.airline_data = airline_data
        if amount is not None:
            self.amount = amount
        if identifier is not None:
            self.identifier = identifier
        self.merchantid = merchantid
        if transno is not None:
            self.transno = transno

    @property
    def airline_data(self):
        """Gets the airline_data of this CaptureRequest.  # noqa: E501


        :return: The airline_data of this CaptureRequest.  # noqa: E501
        :rtype: AirlineAdvice
        """
        return self._airline_data

    @airline_data.setter
    def airline_data(self, airline_data):
        """Sets the airline_data of this CaptureRequest.


        :param airline_data: The airline_data of this CaptureRequest.  # noqa: E501
        :type: AirlineAdvice
        """

        self._airline_data = airline_data

    @property
    def amount(self):
        """Gets the amount of this CaptureRequest.  # noqa: E501

        The completion amount provided in the lowest unit of currency for the specific currency of the merchant, with a variable length to a maximum of 12 digits. No decimal points to be included. For example with GBP 75.45 use the value 7545. Please check that you do not supply divisional characters such as 1,024 in the request which may be caused by some number formatters. If no amount is supplied, the original processing amount is used.   # noqa: E501

        :return: The amount of this CaptureRequest.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CaptureRequest.

        The completion amount provided in the lowest unit of currency for the specific currency of the merchant, with a variable length to a maximum of 12 digits. No decimal points to be included. For example with GBP 75.45 use the value 7545. Please check that you do not supply divisional characters such as 1,024 in the request which may be caused by some number formatters. If no amount is supplied, the original processing amount is used.   # noqa: E501

        :param amount: The amount of this CaptureRequest.  # noqa: E501
        :type: int
        """

        self._amount = amount

    @property
    def identifier(self):
        """Gets the identifier of this CaptureRequest.  # noqa: E501

        The identifier of the transaction to capture. If an empty value is supplied then a `trans_no` value must be supplied.  # noqa: E501

        :return: The identifier of this CaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this CaptureRequest.

        The identifier of the transaction to capture. If an empty value is supplied then a `trans_no` value must be supplied.  # noqa: E501

        :param identifier: The identifier of this CaptureRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                identifier is not None and len(identifier) > 50):
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `50`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                identifier is not None and len(identifier) < 4):
            raise ValueError("Invalid value for `identifier`, length must be greater than or equal to `4`")  # noqa: E501

        self._identifier = identifier

    @property
    def merchantid(self):
        """Gets the merchantid of this CaptureRequest.  # noqa: E501

        Identifies the merchant account to perform the capture for.  # noqa: E501

        :return: The merchantid of this CaptureRequest.  # noqa: E501
        :rtype: int
        """
        return self._merchantid

    @merchantid.setter
    def merchantid(self, merchantid):
        """Sets the merchantid of this CaptureRequest.

        Identifies the merchant account to perform the capture for.  # noqa: E501

        :param merchantid: The merchantid of this CaptureRequest.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and merchantid is None:  # noqa: E501
            raise ValueError("Invalid value for `merchantid`, must not be `None`")  # noqa: E501

        self._merchantid = merchantid

    @property
    def transno(self):
        """Gets the transno of this CaptureRequest.  # noqa: E501

        The transaction number of the transaction to look up and capture. If an empty value is supplied then an identifier value must be supplied.  # noqa: E501

        :return: The transno of this CaptureRequest.  # noqa: E501
        :rtype: int
        """
        return self._transno

    @transno.setter
    def transno(self, transno):
        """Sets the transno of this CaptureRequest.

        The transaction number of the transaction to look up and capture. If an empty value is supplied then an identifier value must be supplied.  # noqa: E501

        :param transno: The transno of this CaptureRequest.  # noqa: E501
        :type: int
        """

        self._transno = transno

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CaptureRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CaptureRequest):
            return True

        return self.to_dict() != other.to_dict()
