# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.   # noqa: E501

    Contact: support@citypay.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import citypay
from citypay.models.auth_request import AuthRequest  # noqa: E501
from citypay.rest import ApiException

class TestAuthRequest(unittest.TestCase):
    """AuthRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test AuthRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = citypay.models.auth_request.AuthRequest()  # noqa: E501
        if include_optional :
            return AuthRequest(
                airline_data = citypay.models.airline_advice.AirlineAdvice(
                    carrier_name = 'EG Air', 
                    conjunction_ticket_indicator = False, 
                    eticket_indicator = True, 
                    no_air_segments = 2, 
                    number_in_party = 2, 
                    original_ticket_no = '0', 
                    passenger_name = 'NE Person', 
                    segment1 = citypay.models.airline_segment.AirlineSegment(
                        arrival_location_code = 'SOU', 
                        carrier_code = 'ZZ', 
                        class_service_code = 'CC', 
                        departure_date = 'Sat Aug 01 00:00:00 GMT 2020', 
                        departure_location_code = 'JER', 
                        flight_number = '772', 
                        segment_fare = 7500, 
                        stop_over_indicator = '1', ), 
                    segment2 = citypay.models.airline_segment.AirlineSegment(
                        arrival_location_code = 'SOU', 
                        carrier_code = 'ZZ', 
                        class_service_code = 'CC', 
                        departure_date = 'Sat Aug 01 00:00:00 GMT 2020', 
                        departure_location_code = 'JER', 
                        flight_number = '772', 
                        segment_fare = 7500, 
                        stop_over_indicator = '1', ), 
                    segment3 = citypay.models.airline_segment.AirlineSegment(
                        arrival_location_code = 'SOU', 
                        carrier_code = 'ZZ', 
                        class_service_code = 'CC', 
                        departure_date = 'Sat Aug 01 00:00:00 GMT 2020', 
                        departure_location_code = 'JER', 
                        flight_number = '772', 
                        segment_fare = 7500, 
                        stop_over_indicator = '1', ), 
                    segment4 = citypay.models.airline_segment.AirlineSegment(
                        arrival_location_code = 'SOU', 
                        carrier_code = 'ZZ', 
                        class_service_code = 'CC', 
                        departure_date = 'Sat Aug 01 00:00:00 GMT 2020', 
                        departure_location_code = 'JER', 
                        flight_number = '772', 
                        segment_fare = 7500, 
                        stop_over_indicator = '1', ), 
                    ticket_issue_city = 'London', 
                    ticket_issue_date = 'Sat Aug 01 00:00:00 GMT 2020', 
                    ticket_issue_name = 'Issue Name', 
                    ticket_no = 'A112233', 
                    transaction_type = 'TKT', ), 
                amount = 3600, 
                avs_postcode_policy = '0', 
                bill_to = citypay.models.contact_details.ContactDetails(
                    address1 = '79 Parliament St', 
                    address2 = 'Westminster', 
                    address3 = '0', 
                    area = 'London', 
                    company = 'Acme Ltd', 
                    country = 'GB', 
                    email = 'card.holder@citypay.com', 
                    firstname = 'John', 
                    lastname = 'Smith', 
                    mobile_no = '447790123456', 
                    postcode = 'L1 789', 
                    telephone_no = '442030123456', 
                    title = 'Mr', ), 
                card_holder_name = '0', 
                cardnumber = '4000 0000 0000 0002', 
                csc = '123',
                csc_policy = '0', 
                currency = 'GBP', 
                duplicate_policy = '0', 
                expmonth = 9, 
                expyear = 2023, 
                external_mpi = citypay.models.external_mpi.ExternalMPI(
                    authen_result = '0', 
                    cavv = '0', 
                    eci = 56, 
                    enrolled = '0', 
                    xid = '0', ), 
                identifier = '95b857a1-5955-4b86-963c-5a6dbfc4fb95', 
                match_avsa = '0', 
                mcc6012 = citypay.models.mcc6012.MCC6012(
                    recipient_account = '0', 
                    recipient_dob = '0', 
                    recipient_lastname = '0', 
                    recipient_postcode = '0', ), 
                merchantid = 11223344,
                ship_to = citypay.models.contact_details.ContactDetails(
                    address1 = '79 Parliament St', 
                    address2 = 'Westminster', 
                    address3 = '0', 
                    area = 'London', 
                    company = 'Acme Ltd', 
                    country = 'GB', 
                    email = 'card.holder@citypay.com', 
                    firstname = 'John', 
                    lastname = 'Smith', 
                    mobile_no = '447790123456', 
                    postcode = 'L1 789', 
                    telephone_no = '442030123456', 
                    title = 'Mr', ), 
                threedsecure = citypay.models.three_d_secure.ThreeDSecure(
                    accept_headers = 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9', 
                    downgrade1 = True, 
                    merchant_termurl = '0', 
                    tds_policy = '0', 
                    user_agent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36', ), 
                trans_info = '0', 
                trans_type = '0'
            )
        else :
            return AuthRequest(
                amount = 3600,
                cardnumber = '4000 0000 0000 0002',
                expmonth = 9,
                expyear = 2023,
                identifier = '95b857a1-5955-4b86-963c-5a6dbfc4fb95',
                merchantid = 11223344,
        )

    def testAuthRequest(self):
        """Test AuthRequest"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
