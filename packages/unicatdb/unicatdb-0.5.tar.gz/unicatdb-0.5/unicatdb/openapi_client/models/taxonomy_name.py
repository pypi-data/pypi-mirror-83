# coding: utf-8

"""
    UniCatDB API

    UniCatDB application API documentation, with examples and live testing.  This API is built in accordance with the **JSON API 1.0 standard**. For general information, see [the documentation](http://jsonapi.org/format/).  **Notes:** * JSON API standard requires use of the JSON API media type (application/vnd.api+json) for exchanging data. Clients must send all JSON API data with the headers `Content-Type: application/vnd.api+json` (POST, PATCH) and `Accept: application/vnd.api+json` (GET, DELETE). * [Relationships](http://jsonapi.org/format/#fetching-relationships) and their [inclusions](http://jsonapi.org/format/#fetching-includes) via the `include` query parameter, as specified by the standard, **are not implemented**, since there are no relationships present in the data model. * The standard does not prescribe any filtering strategies. This API implements two strategies which can be combined: **Basic filtering** based on the used [JSON API library](https://json-api-dotnet.github.io/#/filtering) and **Custom filtering** which allow for any possible query to the MongoDB server and can be extended and customize in the future. For more information about filtering, see the description of the `filter` down bellow. * **Non-standard PATCH behavior:** Sucessfull PATCH reuest always result in HTTP 200 response with the updated resource object, even if the server does not perform any additional modifications. HTTP 204 is never used in PATCH responses.   # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from unicatdb.openapi_client.configuration import Configuration


class TaxonomyName(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'kingdom': 'str',
        'phylum': 'str',
        '_class': 'str',
        'order': 'str',
        'family': 'str',
        'genus': 'str',
        'species': 'str',
        'authorship': 'str'
    }

    attribute_map = {
        'kingdom': 'kingdom',
        'phylum': 'phylum',
        '_class': 'class',
        'order': 'order',
        'family': 'family',
        'genus': 'genus',
        'species': 'species',
        'authorship': 'authorship'
    }

    def __init__(self, kingdom=None, phylum=None, _class=None, order=None, family=None, genus=None, species=None, authorship=None, local_vars_configuration=None):  # noqa: E501
        """TaxonomyName - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._kingdom = None
        self._phylum = None
        self.__class = None
        self._order = None
        self._family = None
        self._genus = None
        self._species = None
        self._authorship = None
        self.discriminator = None

        self.kingdom = kingdom
        self.phylum = phylum
        self._class = _class
        self.order = order
        self.family = family
        self.genus = genus
        self.species = species
        self.authorship = authorship

    @property
    def kingdom(self):
        """Gets the kingdom of this TaxonomyName.  # noqa: E501


        :return: The kingdom of this TaxonomyName.  # noqa: E501
        :rtype: str
        """
        return self._kingdom

    @kingdom.setter
    def kingdom(self, kingdom):
        """Sets the kingdom of this TaxonomyName.


        :param kingdom: The kingdom of this TaxonomyName.  # noqa: E501
        :type kingdom: str
        """

        self._kingdom = kingdom

    @property
    def phylum(self):
        """Gets the phylum of this TaxonomyName.  # noqa: E501


        :return: The phylum of this TaxonomyName.  # noqa: E501
        :rtype: str
        """
        return self._phylum

    @phylum.setter
    def phylum(self, phylum):
        """Sets the phylum of this TaxonomyName.


        :param phylum: The phylum of this TaxonomyName.  # noqa: E501
        :type phylum: str
        """

        self._phylum = phylum

    @property
    def _class(self):
        """Gets the _class of this TaxonomyName.  # noqa: E501


        :return: The _class of this TaxonomyName.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this TaxonomyName.


        :param _class: The _class of this TaxonomyName.  # noqa: E501
        :type _class: str
        """

        self.__class = _class

    @property
    def order(self):
        """Gets the order of this TaxonomyName.  # noqa: E501


        :return: The order of this TaxonomyName.  # noqa: E501
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this TaxonomyName.


        :param order: The order of this TaxonomyName.  # noqa: E501
        :type order: str
        """

        self._order = order

    @property
    def family(self):
        """Gets the family of this TaxonomyName.  # noqa: E501


        :return: The family of this TaxonomyName.  # noqa: E501
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this TaxonomyName.


        :param family: The family of this TaxonomyName.  # noqa: E501
        :type family: str
        """

        self._family = family

    @property
    def genus(self):
        """Gets the genus of this TaxonomyName.  # noqa: E501


        :return: The genus of this TaxonomyName.  # noqa: E501
        :rtype: str
        """
        return self._genus

    @genus.setter
    def genus(self, genus):
        """Sets the genus of this TaxonomyName.


        :param genus: The genus of this TaxonomyName.  # noqa: E501
        :type genus: str
        """

        self._genus = genus

    @property
    def species(self):
        """Gets the species of this TaxonomyName.  # noqa: E501


        :return: The species of this TaxonomyName.  # noqa: E501
        :rtype: str
        """
        return self._species

    @species.setter
    def species(self, species):
        """Sets the species of this TaxonomyName.


        :param species: The species of this TaxonomyName.  # noqa: E501
        :type species: str
        """

        self._species = species

    @property
    def authorship(self):
        """Gets the authorship of this TaxonomyName.  # noqa: E501


        :return: The authorship of this TaxonomyName.  # noqa: E501
        :rtype: str
        """
        return self._authorship

    @authorship.setter
    def authorship(self, authorship):
        """Sets the authorship of this TaxonomyName.


        :param authorship: The authorship of this TaxonomyName.  # noqa: E501
        :type authorship: str
        """

        self._authorship = authorship

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaxonomyName):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaxonomyName):
            return True

        return self.to_dict() != other.to_dict()
